
Lab13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005838  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08005a28  08005a28  00015a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b58  08005b58  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08005b58  08005b58  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b58  08005b58  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b58  08005b58  00015b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b5c  08005b5c  00015b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005b60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001618  20000060  08005bc0  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001678  08005bc0  00021678  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   000108a3  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e59  00000000  00000000  0003096f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011d0  00000000  00000000  000337c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dd4  00000000  00000000  00034998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ac2d  00000000  00000000  0003576c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000138b5  00000000  00000000  00050399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a0962  00000000  00000000  00063c4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004ed0  00000000  00000000  001045b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00109480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000060 	.word	0x20000060
 800020c:	00000000 	.word	0x00000000
 8000210:	08005a10 	.word	0x08005a10

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000064 	.word	0x20000064
 800022c:	08005a10 	.word	0x08005a10

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000240:	b480      	push	{r7}
 8000242:	b085      	sub	sp, #20
 8000244:	af00      	add	r7, sp, #0
 8000246:	60f8      	str	r0, [r7, #12]
 8000248:	60b9      	str	r1, [r7, #8]
 800024a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	4a06      	ldr	r2, [pc, #24]	; (8000268 <vApplicationGetIdleTaskMemory+0x28>)
 8000250:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000252:	68bb      	ldr	r3, [r7, #8]
 8000254:	4a05      	ldr	r2, [pc, #20]	; (800026c <vApplicationGetIdleTaskMemory+0x2c>)
 8000256:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	2280      	movs	r2, #128	; 0x80
 800025c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800025e:	bf00      	nop
 8000260:	3714      	adds	r7, #20
 8000262:	46bd      	mov	sp, r7
 8000264:	bc80      	pop	{r7}
 8000266:	4770      	bx	lr
 8000268:	2000007c 	.word	0x2000007c
 800026c:	200000d0 	.word	0x200000d0

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b5b0      	push	{r4, r5, r7, lr}
 8000272:	b0a2      	sub	sp, #136	; 0x88
 8000274:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000276:	f000 fb8d 	bl	8000994 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027a:	f000 f891 	bl	80003a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027e:	f000 f8ff 	bl	8000480 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000282:	f000 f8d3 	bl	800042c <MX_USART1_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of bSem01 */
  osSemaphoreDef(bSem01);
 8000286:	2300      	movs	r3, #0
 8000288:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800028c:	2300      	movs	r3, #0
 800028e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  bSem01Handle = osSemaphoreCreate(osSemaphore(bSem01), 1);
 8000292:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000296:	2101      	movs	r1, #1
 8000298:	4618      	mov	r0, r3
 800029a:	f002 fbda 	bl	8002a52 <osSemaphoreCreate>
 800029e:	4603      	mov	r3, r0
 80002a0:	4a34      	ldr	r2, [pc, #208]	; (8000374 <main+0x104>)
 80002a2:	6013      	str	r3, [r2, #0]

  /* definition and creation of bSemEmpty */
  osSemaphoreDef(bSemEmpty);
 80002a4:	2300      	movs	r3, #0
 80002a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80002a8:	2300      	movs	r3, #0
 80002aa:	67fb      	str	r3, [r7, #124]	; 0x7c
  bSemEmptyHandle = osSemaphoreCreate(osSemaphore(bSemEmpty), 4);
 80002ac:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80002b0:	2104      	movs	r1, #4
 80002b2:	4618      	mov	r0, r3
 80002b4:	f002 fbcd 	bl	8002a52 <osSemaphoreCreate>
 80002b8:	4603      	mov	r3, r0
 80002ba:	4a2f      	ldr	r2, [pc, #188]	; (8000378 <main+0x108>)
 80002bc:	6013      	str	r3, [r2, #0]

  /* definition and creation of bSemFilled */
  osSemaphoreDef(bSemFilled);
 80002be:	2300      	movs	r3, #0
 80002c0:	673b      	str	r3, [r7, #112]	; 0x70
 80002c2:	2300      	movs	r3, #0
 80002c4:	677b      	str	r3, [r7, #116]	; 0x74
  bSemFilledHandle = osSemaphoreCreate(osSemaphore(bSemFilled), 4);
 80002c6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002ca:	2104      	movs	r1, #4
 80002cc:	4618      	mov	r0, r3
 80002ce:	f002 fbc0 	bl	8002a52 <osSemaphoreCreate>
 80002d2:	4603      	mov	r3, r0
 80002d4:	4a29      	ldr	r2, [pc, #164]	; (800037c <main+0x10c>)
 80002d6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Periodic */
  osThreadDef(Periodic, PeriodicTask, osPriorityNormal, 0, 128);
 80002d8:	4b29      	ldr	r3, [pc, #164]	; (8000380 <main+0x110>)
 80002da:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80002de:	461d      	mov	r5, r3
 80002e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PeriodicHandle = osThreadCreate(osThread(Periodic), NULL);
 80002ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80002f0:	2100      	movs	r1, #0
 80002f2:	4618      	mov	r0, r3
 80002f4:	f002 fb4d 	bl	8002992 <osThreadCreate>
 80002f8:	4603      	mov	r3, r0
 80002fa:	4a22      	ldr	r2, [pc, #136]	; (8000384 <main+0x114>)
 80002fc:	6013      	str	r3, [r2, #0]

  /* definition and creation of Handle */
  osThreadDef(Handle, HandleTask, osPriorityNormal, 0, 128);
 80002fe:	4b22      	ldr	r3, [pc, #136]	; (8000388 <main+0x118>)
 8000300:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000304:	461d      	mov	r5, r3
 8000306:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000308:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800030a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800030e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HandleHandle = osThreadCreate(osThread(Handle), NULL);
 8000312:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000316:	2100      	movs	r1, #0
 8000318:	4618      	mov	r0, r3
 800031a:	f002 fb3a 	bl	8002992 <osThreadCreate>
 800031e:	4603      	mov	r3, r0
 8000320:	4a1a      	ldr	r2, [pc, #104]	; (800038c <main+0x11c>)
 8000322:	6013      	str	r3, [r2, #0]

  /* definition and creation of Producer */
  osThreadDef(Producer, FuncProducer, osPriorityNormal, 0, 128);
 8000324:	4b1a      	ldr	r3, [pc, #104]	; (8000390 <main+0x120>)
 8000326:	f107 041c 	add.w	r4, r7, #28
 800032a:	461d      	mov	r5, r3
 800032c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800032e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000330:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000334:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ProducerHandle = osThreadCreate(osThread(Producer), NULL);
 8000338:	f107 031c 	add.w	r3, r7, #28
 800033c:	2100      	movs	r1, #0
 800033e:	4618      	mov	r0, r3
 8000340:	f002 fb27 	bl	8002992 <osThreadCreate>
 8000344:	4603      	mov	r3, r0
 8000346:	4a13      	ldr	r2, [pc, #76]	; (8000394 <main+0x124>)
 8000348:	6013      	str	r3, [r2, #0]

  /* definition and creation of Consumer */
  osThreadDef(Consumer, FuncConsumer, osPriorityBelowNormal, 0, 128);
 800034a:	4b13      	ldr	r3, [pc, #76]	; (8000398 <main+0x128>)
 800034c:	463c      	mov	r4, r7
 800034e:	461d      	mov	r5, r3
 8000350:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000354:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000358:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ConsumerHandle = osThreadCreate(osThread(Consumer), NULL);
 800035c:	463b      	mov	r3, r7
 800035e:	2100      	movs	r1, #0
 8000360:	4618      	mov	r0, r3
 8000362:	f002 fb16 	bl	8002992 <osThreadCreate>
 8000366:	4603      	mov	r3, r0
 8000368:	4a0c      	ldr	r2, [pc, #48]	; (800039c <main+0x12c>)
 800036a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800036c:	f002 fb0a 	bl	8002984 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000370:	e7fe      	b.n	8000370 <main+0x100>
 8000372:	bf00      	nop
 8000374:	20000324 	.word	0x20000324
 8000378:	20000328 	.word	0x20000328
 800037c:	2000032c 	.word	0x2000032c
 8000380:	08005a34 	.word	0x08005a34
 8000384:	20000314 	.word	0x20000314
 8000388:	08005a58 	.word	0x08005a58
 800038c:	20000318 	.word	0x20000318
 8000390:	08005a80 	.word	0x08005a80
 8000394:	2000031c 	.word	0x2000031c
 8000398:	08005aa8 	.word	0x08005aa8
 800039c:	20000320 	.word	0x20000320

080003a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b090      	sub	sp, #64	; 0x40
 80003a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003a6:	f107 0318 	add.w	r3, r7, #24
 80003aa:	2228      	movs	r2, #40	; 0x28
 80003ac:	2100      	movs	r1, #0
 80003ae:	4618      	mov	r0, r3
 80003b0:	f004 fe9c 	bl	80050ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b4:	1d3b      	adds	r3, r7, #4
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	605a      	str	r2, [r3, #4]
 80003bc:	609a      	str	r2, [r3, #8]
 80003be:	60da      	str	r2, [r3, #12]
 80003c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003c2:	2301      	movs	r3, #1
 80003c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003cc:	2300      	movs	r3, #0
 80003ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003d0:	2301      	movs	r3, #1
 80003d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003d4:	2302      	movs	r3, #2
 80003d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003de:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e4:	f107 0318 	add.w	r3, r7, #24
 80003e8:	4618      	mov	r0, r3
 80003ea:	f000 ff11 	bl	8001210 <HAL_RCC_OscConfig>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003f4:	f000 f932 	bl	800065c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f8:	230f      	movs	r3, #15
 80003fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003fc:	2302      	movs	r3, #2
 80003fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000400:	2300      	movs	r3, #0
 8000402:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000404:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000408:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800040a:	2300      	movs	r3, #0
 800040c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	2102      	movs	r1, #2
 8000412:	4618      	mov	r0, r3
 8000414:	f001 f97e 	bl	8001714 <HAL_RCC_ClockConfig>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800041e:	f000 f91d 	bl	800065c <Error_Handler>
  }
}
 8000422:	bf00      	nop
 8000424:	3740      	adds	r7, #64	; 0x40
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
	...

0800042c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000430:	4b11      	ldr	r3, [pc, #68]	; (8000478 <MX_USART1_UART_Init+0x4c>)
 8000432:	4a12      	ldr	r2, [pc, #72]	; (800047c <MX_USART1_UART_Init+0x50>)
 8000434:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000436:	4b10      	ldr	r3, [pc, #64]	; (8000478 <MX_USART1_UART_Init+0x4c>)
 8000438:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800043c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800043e:	4b0e      	ldr	r3, [pc, #56]	; (8000478 <MX_USART1_UART_Init+0x4c>)
 8000440:	2200      	movs	r2, #0
 8000442:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000444:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <MX_USART1_UART_Init+0x4c>)
 8000446:	2200      	movs	r2, #0
 8000448:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800044a:	4b0b      	ldr	r3, [pc, #44]	; (8000478 <MX_USART1_UART_Init+0x4c>)
 800044c:	2200      	movs	r2, #0
 800044e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000450:	4b09      	ldr	r3, [pc, #36]	; (8000478 <MX_USART1_UART_Init+0x4c>)
 8000452:	220c      	movs	r2, #12
 8000454:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000456:	4b08      	ldr	r3, [pc, #32]	; (8000478 <MX_USART1_UART_Init+0x4c>)
 8000458:	2200      	movs	r2, #0
 800045a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <MX_USART1_UART_Init+0x4c>)
 800045e:	2200      	movs	r2, #0
 8000460:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000462:	4805      	ldr	r0, [pc, #20]	; (8000478 <MX_USART1_UART_Init+0x4c>)
 8000464:	f001 fd8e 	bl	8001f84 <HAL_UART_Init>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800046e:	f000 f8f5 	bl	800065c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000472:	bf00      	nop
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	200002d0 	.word	0x200002d0
 800047c:	40013800 	.word	0x40013800

08000480 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b086      	sub	sp, #24
 8000484:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000486:	f107 0308 	add.w	r3, r7, #8
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
 800048e:	605a      	str	r2, [r3, #4]
 8000490:	609a      	str	r2, [r3, #8]
 8000492:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000494:	4b21      	ldr	r3, [pc, #132]	; (800051c <MX_GPIO_Init+0x9c>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	4a20      	ldr	r2, [pc, #128]	; (800051c <MX_GPIO_Init+0x9c>)
 800049a:	f043 0320 	orr.w	r3, r3, #32
 800049e:	6193      	str	r3, [r2, #24]
 80004a0:	4b1e      	ldr	r3, [pc, #120]	; (800051c <MX_GPIO_Init+0x9c>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	f003 0320 	and.w	r3, r3, #32
 80004a8:	607b      	str	r3, [r7, #4]
 80004aa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ac:	4b1b      	ldr	r3, [pc, #108]	; (800051c <MX_GPIO_Init+0x9c>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	4a1a      	ldr	r2, [pc, #104]	; (800051c <MX_GPIO_Init+0x9c>)
 80004b2:	f043 0304 	orr.w	r3, r3, #4
 80004b6:	6193      	str	r3, [r2, #24]
 80004b8:	4b18      	ldr	r3, [pc, #96]	; (800051c <MX_GPIO_Init+0x9c>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	f003 0304 	and.w	r3, r3, #4
 80004c0:	603b      	str	r3, [r7, #0]
 80004c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 80004c4:	2201      	movs	r2, #1
 80004c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ca:	4815      	ldr	r0, [pc, #84]	; (8000520 <MX_GPIO_Init+0xa0>)
 80004cc:	f000 fe6e 	bl	80011ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80004d0:	2201      	movs	r2, #1
 80004d2:	2104      	movs	r1, #4
 80004d4:	4813      	ldr	r0, [pc, #76]	; (8000524 <MX_GPIO_Init+0xa4>)
 80004d6:	f000 fe69 	bl	80011ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 80004da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e0:	2301      	movs	r3, #1
 80004e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e4:	2300      	movs	r3, #0
 80004e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e8:	2302      	movs	r3, #2
 80004ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80004ec:	f107 0308 	add.w	r3, r7, #8
 80004f0:	4619      	mov	r1, r3
 80004f2:	480b      	ldr	r0, [pc, #44]	; (8000520 <MX_GPIO_Init+0xa0>)
 80004f4:	f000 fcc6 	bl	8000e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80004f8:	2304      	movs	r3, #4
 80004fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fc:	2301      	movs	r3, #1
 80004fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000500:	2300      	movs	r3, #0
 8000502:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000504:	2302      	movs	r3, #2
 8000506:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000508:	f107 0308 	add.w	r3, r7, #8
 800050c:	4619      	mov	r1, r3
 800050e:	4805      	ldr	r0, [pc, #20]	; (8000524 <MX_GPIO_Init+0xa4>)
 8000510:	f000 fcb8 	bl	8000e84 <HAL_GPIO_Init>

}
 8000514:	bf00      	nop
 8000516:	3718      	adds	r7, #24
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	40021000 	.word	0x40021000
 8000520:	40010800 	.word	0x40010800
 8000524:	40011400 	.word	0x40011400

08000528 <PeriodicTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PeriodicTask */
void PeriodicTask(void const * argument)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1000);
 8000530:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000534:	f002 fa79 	bl	8002a2a <osDelay>
	  osSemaphoreRelease(bSem01Handle);
 8000538:	4b02      	ldr	r3, [pc, #8]	; (8000544 <PeriodicTask+0x1c>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4618      	mov	r0, r3
 800053e:	f002 fb15 	bl	8002b6c <osSemaphoreRelease>
	  osDelay(1000);
 8000542:	e7f5      	b.n	8000530 <PeriodicTask+0x8>
 8000544:	20000324 	.word	0x20000324

08000548 <HandleTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HandleTask */
void HandleTask(void const * argument)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HandleTask */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreWait(bSem01Handle, osWaitForever);
 8000550:	4b08      	ldr	r3, [pc, #32]	; (8000574 <HandleTask+0x2c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f04f 31ff 	mov.w	r1, #4294967295
 8000558:	4618      	mov	r0, r3
 800055a:	f002 fab9 	bl	8002ad0 <osSemaphoreWait>
	  HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 800055e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000562:	4805      	ldr	r0, [pc, #20]	; (8000578 <HandleTask+0x30>)
 8000564:	f000 fe3a 	bl	80011dc <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000568:	2104      	movs	r1, #4
 800056a:	4804      	ldr	r0, [pc, #16]	; (800057c <HandleTask+0x34>)
 800056c:	f000 fe36 	bl	80011dc <HAL_GPIO_TogglePin>
	  osSemaphoreWait(bSem01Handle, osWaitForever);
 8000570:	e7ee      	b.n	8000550 <HandleTask+0x8>
 8000572:	bf00      	nop
 8000574:	20000324 	.word	0x20000324
 8000578:	40010800 	.word	0x40010800
 800057c:	40011400 	.word	0x40011400

08000580 <FuncProducer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FuncProducer */
void FuncProducer(void const * argument)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FuncProducer */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreWait(bSemEmptyHandle, osWaitForever);
 8000588:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <FuncProducer+0x48>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f04f 31ff 	mov.w	r1, #4294967295
 8000590:	4618      	mov	r0, r3
 8000592:	f002 fa9d 	bl	8002ad0 <osSemaphoreWait>
	  sprintf(msg, "Producer produce data\r\n");
 8000596:	490d      	ldr	r1, [pc, #52]	; (80005cc <FuncProducer+0x4c>)
 8000598:	480d      	ldr	r0, [pc, #52]	; (80005d0 <FuncProducer+0x50>)
 800059a:	f004 fd87 	bl	80050ac <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800059e:	480c      	ldr	r0, [pc, #48]	; (80005d0 <FuncProducer+0x50>)
 80005a0:	f7ff fe46 	bl	8000230 <strlen>
 80005a4:	4603      	mov	r3, r0
 80005a6:	b29a      	uxth	r2, r3
 80005a8:	f04f 33ff 	mov.w	r3, #4294967295
 80005ac:	4908      	ldr	r1, [pc, #32]	; (80005d0 <FuncProducer+0x50>)
 80005ae:	4809      	ldr	r0, [pc, #36]	; (80005d4 <FuncProducer+0x54>)
 80005b0:	f001 fd35 	bl	800201e <HAL_UART_Transmit>
	  HAL_Delay(500);
 80005b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005b8:	f000 fa1e 	bl	80009f8 <HAL_Delay>
	  osSemaphoreRelease(bSemFilledHandle);
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <FuncProducer+0x58>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4618      	mov	r0, r3
 80005c2:	f002 fad3 	bl	8002b6c <osSemaphoreRelease>
  {
 80005c6:	e7df      	b.n	8000588 <FuncProducer+0x8>
 80005c8:	20000328 	.word	0x20000328
 80005cc:	08005ac4 	.word	0x08005ac4
 80005d0:	20000330 	.word	0x20000330
 80005d4:	200002d0 	.word	0x200002d0
 80005d8:	2000032c 	.word	0x2000032c

080005dc <FuncConsumer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FuncConsumer */
void FuncConsumer(void const * argument)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FuncConsumer */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreWait(bSemFilledHandle, osWaitForever);
 80005e4:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <FuncConsumer+0x48>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f04f 31ff 	mov.w	r1, #4294967295
 80005ec:	4618      	mov	r0, r3
 80005ee:	f002 fa6f 	bl	8002ad0 <osSemaphoreWait>
	  sprintf(msg, "Consumer consume data\r\n");
 80005f2:	490d      	ldr	r1, [pc, #52]	; (8000628 <FuncConsumer+0x4c>)
 80005f4:	480d      	ldr	r0, [pc, #52]	; (800062c <FuncConsumer+0x50>)
 80005f6:	f004 fd59 	bl	80050ac <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80005fa:	480c      	ldr	r0, [pc, #48]	; (800062c <FuncConsumer+0x50>)
 80005fc:	f7ff fe18 	bl	8000230 <strlen>
 8000600:	4603      	mov	r3, r0
 8000602:	b29a      	uxth	r2, r3
 8000604:	f04f 33ff 	mov.w	r3, #4294967295
 8000608:	4908      	ldr	r1, [pc, #32]	; (800062c <FuncConsumer+0x50>)
 800060a:	4809      	ldr	r0, [pc, #36]	; (8000630 <FuncConsumer+0x54>)
 800060c:	f001 fd07 	bl	800201e <HAL_UART_Transmit>
	  HAL_Delay(500);
 8000610:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000614:	f000 f9f0 	bl	80009f8 <HAL_Delay>
	  osSemaphoreRelease(bSemEmptyHandle);
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <FuncConsumer+0x58>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4618      	mov	r0, r3
 800061e:	f002 faa5 	bl	8002b6c <osSemaphoreRelease>
  {
 8000622:	e7df      	b.n	80005e4 <FuncConsumer+0x8>
 8000624:	2000032c 	.word	0x2000032c
 8000628:	08005adc 	.word	0x08005adc
 800062c:	20000330 	.word	0x20000330
 8000630:	200002d0 	.word	0x200002d0
 8000634:	20000328 	.word	0x20000328

08000638 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a04      	ldr	r2, [pc, #16]	; (8000658 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d101      	bne.n	800064e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800064a:	f000 f9b9 	bl	80009c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40000400 	.word	0x40000400

0800065c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000660:	b672      	cpsid	i
}
 8000662:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000664:	e7fe      	b.n	8000664 <Error_Handler+0x8>
	...

08000668 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800066e:	4b18      	ldr	r3, [pc, #96]	; (80006d0 <HAL_MspInit+0x68>)
 8000670:	699b      	ldr	r3, [r3, #24]
 8000672:	4a17      	ldr	r2, [pc, #92]	; (80006d0 <HAL_MspInit+0x68>)
 8000674:	f043 0301 	orr.w	r3, r3, #1
 8000678:	6193      	str	r3, [r2, #24]
 800067a:	4b15      	ldr	r3, [pc, #84]	; (80006d0 <HAL_MspInit+0x68>)
 800067c:	699b      	ldr	r3, [r3, #24]
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000686:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <HAL_MspInit+0x68>)
 8000688:	69db      	ldr	r3, [r3, #28]
 800068a:	4a11      	ldr	r2, [pc, #68]	; (80006d0 <HAL_MspInit+0x68>)
 800068c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000690:	61d3      	str	r3, [r2, #28]
 8000692:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <HAL_MspInit+0x68>)
 8000694:	69db      	ldr	r3, [r3, #28]
 8000696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800069e:	2200      	movs	r2, #0
 80006a0:	210f      	movs	r1, #15
 80006a2:	f06f 0001 	mvn.w	r0, #1
 80006a6:	f000 fa80 	bl	8000baa <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006aa:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <HAL_MspInit+0x6c>)
 80006ac:	685b      	ldr	r3, [r3, #4]
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	4a04      	ldr	r2, [pc, #16]	; (80006d4 <HAL_MspInit+0x6c>)
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006c6:	bf00      	nop
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40021000 	.word	0x40021000
 80006d4:	40010000 	.word	0x40010000

080006d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b088      	sub	sp, #32
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e0:	f107 0310 	add.w	r3, r7, #16
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a20      	ldr	r2, [pc, #128]	; (8000774 <HAL_UART_MspInit+0x9c>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d139      	bne.n	800076c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006f8:	4b1f      	ldr	r3, [pc, #124]	; (8000778 <HAL_UART_MspInit+0xa0>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	4a1e      	ldr	r2, [pc, #120]	; (8000778 <HAL_UART_MspInit+0xa0>)
 80006fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000702:	6193      	str	r3, [r2, #24]
 8000704:	4b1c      	ldr	r3, [pc, #112]	; (8000778 <HAL_UART_MspInit+0xa0>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000710:	4b19      	ldr	r3, [pc, #100]	; (8000778 <HAL_UART_MspInit+0xa0>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	4a18      	ldr	r2, [pc, #96]	; (8000778 <HAL_UART_MspInit+0xa0>)
 8000716:	f043 0304 	orr.w	r3, r3, #4
 800071a:	6193      	str	r3, [r2, #24]
 800071c:	4b16      	ldr	r3, [pc, #88]	; (8000778 <HAL_UART_MspInit+0xa0>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	f003 0304 	and.w	r3, r3, #4
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000728:	f44f 7300 	mov.w	r3, #512	; 0x200
 800072c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072e:	2302      	movs	r3, #2
 8000730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000732:	2303      	movs	r3, #3
 8000734:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000736:	f107 0310 	add.w	r3, r7, #16
 800073a:	4619      	mov	r1, r3
 800073c:	480f      	ldr	r0, [pc, #60]	; (800077c <HAL_UART_MspInit+0xa4>)
 800073e:	f000 fba1 	bl	8000e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000742:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000746:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000750:	f107 0310 	add.w	r3, r7, #16
 8000754:	4619      	mov	r1, r3
 8000756:	4809      	ldr	r0, [pc, #36]	; (800077c <HAL_UART_MspInit+0xa4>)
 8000758:	f000 fb94 	bl	8000e84 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800075c:	2200      	movs	r2, #0
 800075e:	2105      	movs	r1, #5
 8000760:	2025      	movs	r0, #37	; 0x25
 8000762:	f000 fa22 	bl	8000baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000766:	2025      	movs	r0, #37	; 0x25
 8000768:	f000 fa3b 	bl	8000be2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800076c:	bf00      	nop
 800076e:	3720      	adds	r7, #32
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40013800 	.word	0x40013800
 8000778:	40021000 	.word	0x40021000
 800077c:	40010800 	.word	0x40010800

08000780 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08e      	sub	sp, #56	; 0x38
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000788:	2300      	movs	r3, #0
 800078a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800078c:	2300      	movs	r3, #0
 800078e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000790:	2300      	movs	r3, #0
 8000792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000796:	4b34      	ldr	r3, [pc, #208]	; (8000868 <HAL_InitTick+0xe8>)
 8000798:	69db      	ldr	r3, [r3, #28]
 800079a:	4a33      	ldr	r2, [pc, #204]	; (8000868 <HAL_InitTick+0xe8>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	61d3      	str	r3, [r2, #28]
 80007a2:	4b31      	ldr	r3, [pc, #196]	; (8000868 <HAL_InitTick+0xe8>)
 80007a4:	69db      	ldr	r3, [r3, #28]
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007ae:	f107 0210 	add.w	r2, r7, #16
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f001 f925 	bl	8001a08 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80007be:	6a3b      	ldr	r3, [r7, #32]
 80007c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80007c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d103      	bne.n	80007d0 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80007c8:	f001 f8f6 	bl	80019b8 <HAL_RCC_GetPCLK1Freq>
 80007cc:	6378      	str	r0, [r7, #52]	; 0x34
 80007ce:	e004      	b.n	80007da <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80007d0:	f001 f8f2 	bl	80019b8 <HAL_RCC_GetPCLK1Freq>
 80007d4:	4603      	mov	r3, r0
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007dc:	4a23      	ldr	r2, [pc, #140]	; (800086c <HAL_InitTick+0xec>)
 80007de:	fba2 2303 	umull	r2, r3, r2, r3
 80007e2:	0c9b      	lsrs	r3, r3, #18
 80007e4:	3b01      	subs	r3, #1
 80007e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80007e8:	4b21      	ldr	r3, [pc, #132]	; (8000870 <HAL_InitTick+0xf0>)
 80007ea:	4a22      	ldr	r2, [pc, #136]	; (8000874 <HAL_InitTick+0xf4>)
 80007ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80007ee:	4b20      	ldr	r3, [pc, #128]	; (8000870 <HAL_InitTick+0xf0>)
 80007f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007f4:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80007f6:	4a1e      	ldr	r2, [pc, #120]	; (8000870 <HAL_InitTick+0xf0>)
 80007f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007fa:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80007fc:	4b1c      	ldr	r3, [pc, #112]	; (8000870 <HAL_InitTick+0xf0>)
 80007fe:	2200      	movs	r2, #0
 8000800:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000802:	4b1b      	ldr	r3, [pc, #108]	; (8000870 <HAL_InitTick+0xf0>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000808:	4b19      	ldr	r3, [pc, #100]	; (8000870 <HAL_InitTick+0xf0>)
 800080a:	2200      	movs	r2, #0
 800080c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 800080e:	4818      	ldr	r0, [pc, #96]	; (8000870 <HAL_InitTick+0xf0>)
 8000810:	f001 f948 	bl	8001aa4 <HAL_TIM_Base_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800081a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800081e:	2b00      	cmp	r3, #0
 8000820:	d11b      	bne.n	800085a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000822:	4813      	ldr	r0, [pc, #76]	; (8000870 <HAL_InitTick+0xf0>)
 8000824:	f001 f996 	bl	8001b54 <HAL_TIM_Base_Start_IT>
 8000828:	4603      	mov	r3, r0
 800082a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800082e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000832:	2b00      	cmp	r3, #0
 8000834:	d111      	bne.n	800085a <HAL_InitTick+0xda>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000836:	201d      	movs	r0, #29
 8000838:	f000 f9d3 	bl	8000be2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2b0f      	cmp	r3, #15
 8000840:	d808      	bhi.n	8000854 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000842:	2200      	movs	r2, #0
 8000844:	6879      	ldr	r1, [r7, #4]
 8000846:	201d      	movs	r0, #29
 8000848:	f000 f9af 	bl	8000baa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800084c:	4a0a      	ldr	r2, [pc, #40]	; (8000878 <HAL_InitTick+0xf8>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	6013      	str	r3, [r2, #0]
 8000852:	e002      	b.n	800085a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000854:	2301      	movs	r3, #1
 8000856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800085a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800085e:	4618      	mov	r0, r3
 8000860:	3738      	adds	r7, #56	; 0x38
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40021000 	.word	0x40021000
 800086c:	431bde83 	.word	0x431bde83
 8000870:	20000394 	.word	0x20000394
 8000874:	40000400 	.word	0x40000400
 8000878:	20000004 	.word	0x20000004

0800087c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <NMI_Handler+0x4>

08000882 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000886:	e7fe      	b.n	8000886 <HardFault_Handler+0x4>

08000888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800088c:	e7fe      	b.n	800088c <MemManage_Handler+0x4>

0800088e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000892:	e7fe      	b.n	8000892 <BusFault_Handler+0x4>

08000894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000898:	e7fe      	b.n	8000898 <UsageFault_Handler+0x4>

0800089a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr
	...

080008a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80008ac:	4802      	ldr	r0, [pc, #8]	; (80008b8 <TIM3_IRQHandler+0x10>)
 80008ae:	f001 f9b1 	bl	8001c14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000394 	.word	0x20000394

080008bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008c0:	4802      	ldr	r0, [pc, #8]	; (80008cc <USART1_IRQHandler+0x10>)
 80008c2:	f001 fc3f 	bl	8002144 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	200002d0 	.word	0x200002d0

080008d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008d8:	4a14      	ldr	r2, [pc, #80]	; (800092c <_sbrk+0x5c>)
 80008da:	4b15      	ldr	r3, [pc, #84]	; (8000930 <_sbrk+0x60>)
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008e4:	4b13      	ldr	r3, [pc, #76]	; (8000934 <_sbrk+0x64>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d102      	bne.n	80008f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008ec:	4b11      	ldr	r3, [pc, #68]	; (8000934 <_sbrk+0x64>)
 80008ee:	4a12      	ldr	r2, [pc, #72]	; (8000938 <_sbrk+0x68>)
 80008f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008f2:	4b10      	ldr	r3, [pc, #64]	; (8000934 <_sbrk+0x64>)
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4413      	add	r3, r2
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d207      	bcs.n	8000910 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000900:	f004 fbfc 	bl	80050fc <__errno>
 8000904:	4603      	mov	r3, r0
 8000906:	220c      	movs	r2, #12
 8000908:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800090a:	f04f 33ff 	mov.w	r3, #4294967295
 800090e:	e009      	b.n	8000924 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000910:	4b08      	ldr	r3, [pc, #32]	; (8000934 <_sbrk+0x64>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000916:	4b07      	ldr	r3, [pc, #28]	; (8000934 <_sbrk+0x64>)
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4413      	add	r3, r2
 800091e:	4a05      	ldr	r2, [pc, #20]	; (8000934 <_sbrk+0x64>)
 8000920:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000922:	68fb      	ldr	r3, [r7, #12]
}
 8000924:	4618      	mov	r0, r3
 8000926:	3718      	adds	r7, #24
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	2000c000 	.word	0x2000c000
 8000930:	00000400 	.word	0x00000400
 8000934:	200003dc 	.word	0x200003dc
 8000938:	20001678 	.word	0x20001678

0800093c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr

08000948 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000948:	480c      	ldr	r0, [pc, #48]	; (800097c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800094a:	490d      	ldr	r1, [pc, #52]	; (8000980 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800094c:	4a0d      	ldr	r2, [pc, #52]	; (8000984 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800094e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000950:	e002      	b.n	8000958 <LoopCopyDataInit>

08000952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000956:	3304      	adds	r3, #4

08000958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800095a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800095c:	d3f9      	bcc.n	8000952 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800095e:	4a0a      	ldr	r2, [pc, #40]	; (8000988 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000960:	4c0a      	ldr	r4, [pc, #40]	; (800098c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000964:	e001      	b.n	800096a <LoopFillZerobss>

08000966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000968:	3204      	adds	r2, #4

0800096a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800096a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800096c:	d3fb      	bcc.n	8000966 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800096e:	f7ff ffe5 	bl	800093c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000972:	f004 fbc9 	bl	8005108 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000976:	f7ff fc7b 	bl	8000270 <main>
  bx lr
 800097a:	4770      	bx	lr
  ldr r0, =_sdata
 800097c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000980:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000984:	08005b60 	.word	0x08005b60
  ldr r2, =_sbss
 8000988:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800098c:	20001678 	.word	0x20001678

08000990 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000990:	e7fe      	b.n	8000990 <ADC1_2_IRQHandler>
	...

08000994 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000998:	4b08      	ldr	r3, [pc, #32]	; (80009bc <HAL_Init+0x28>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a07      	ldr	r2, [pc, #28]	; (80009bc <HAL_Init+0x28>)
 800099e:	f043 0310 	orr.w	r3, r3, #16
 80009a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a4:	2003      	movs	r0, #3
 80009a6:	f000 f8f5 	bl	8000b94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009aa:	200f      	movs	r0, #15
 80009ac:	f7ff fee8 	bl	8000780 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009b0:	f7ff fe5a 	bl	8000668 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009b4:	2300      	movs	r3, #0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40022000 	.word	0x40022000

080009c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009c4:	4b05      	ldr	r3, [pc, #20]	; (80009dc <HAL_IncTick+0x1c>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	461a      	mov	r2, r3
 80009ca:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <HAL_IncTick+0x20>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4413      	add	r3, r2
 80009d0:	4a03      	ldr	r2, [pc, #12]	; (80009e0 <HAL_IncTick+0x20>)
 80009d2:	6013      	str	r3, [r2, #0]
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr
 80009dc:	20000008 	.word	0x20000008
 80009e0:	200003e0 	.word	0x200003e0

080009e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  return uwTick;
 80009e8:	4b02      	ldr	r3, [pc, #8]	; (80009f4 <HAL_GetTick+0x10>)
 80009ea:	681b      	ldr	r3, [r3, #0]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr
 80009f4:	200003e0 	.word	0x200003e0

080009f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a00:	f7ff fff0 	bl	80009e4 <HAL_GetTick>
 8000a04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a10:	d005      	beq.n	8000a1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a12:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <HAL_Delay+0x44>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	461a      	mov	r2, r3
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a1e:	bf00      	nop
 8000a20:	f7ff ffe0 	bl	80009e4 <HAL_GetTick>
 8000a24:	4602      	mov	r2, r0
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	68fa      	ldr	r2, [r7, #12]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d8f7      	bhi.n	8000a20 <HAL_Delay+0x28>
  {
  }
}
 8000a30:	bf00      	nop
 8000a32:	bf00      	nop
 8000a34:	3710      	adds	r7, #16
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000008 	.word	0x20000008

08000a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <__NVIC_SetPriorityGrouping+0x44>)
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a56:	68ba      	ldr	r2, [r7, #8]
 8000a58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a72:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <__NVIC_SetPriorityGrouping+0x44>)
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	60d3      	str	r3, [r2, #12]
}
 8000a78:	bf00      	nop
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a8c:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	0a1b      	lsrs	r3, r3, #8
 8000a92:	f003 0307 	and.w	r3, r3, #7
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bc80      	pop	{r7}
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	db0b      	blt.n	8000ace <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	f003 021f 	and.w	r2, r3, #31
 8000abc:	4906      	ldr	r1, [pc, #24]	; (8000ad8 <__NVIC_EnableIRQ+0x34>)
 8000abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac2:	095b      	lsrs	r3, r3, #5
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr
 8000ad8:	e000e100 	.word	0xe000e100

08000adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	6039      	str	r1, [r7, #0]
 8000ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	db0a      	blt.n	8000b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	490c      	ldr	r1, [pc, #48]	; (8000b28 <__NVIC_SetPriority+0x4c>)
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	0112      	lsls	r2, r2, #4
 8000afc:	b2d2      	uxtb	r2, r2
 8000afe:	440b      	add	r3, r1
 8000b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b04:	e00a      	b.n	8000b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	4908      	ldr	r1, [pc, #32]	; (8000b2c <__NVIC_SetPriority+0x50>)
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	f003 030f 	and.w	r3, r3, #15
 8000b12:	3b04      	subs	r3, #4
 8000b14:	0112      	lsls	r2, r2, #4
 8000b16:	b2d2      	uxtb	r2, r2
 8000b18:	440b      	add	r3, r1
 8000b1a:	761a      	strb	r2, [r3, #24]
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000e100 	.word	0xe000e100
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b089      	sub	sp, #36	; 0x24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	f1c3 0307 	rsb	r3, r3, #7
 8000b4a:	2b04      	cmp	r3, #4
 8000b4c:	bf28      	it	cs
 8000b4e:	2304      	movcs	r3, #4
 8000b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	3304      	adds	r3, #4
 8000b56:	2b06      	cmp	r3, #6
 8000b58:	d902      	bls.n	8000b60 <NVIC_EncodePriority+0x30>
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	3b03      	subs	r3, #3
 8000b5e:	e000      	b.n	8000b62 <NVIC_EncodePriority+0x32>
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b64:	f04f 32ff 	mov.w	r2, #4294967295
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	43da      	mvns	r2, r3
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	401a      	ands	r2, r3
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b78:	f04f 31ff 	mov.w	r1, #4294967295
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b82:	43d9      	mvns	r1, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b88:	4313      	orrs	r3, r2
         );
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3724      	adds	r7, #36	; 0x24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr

08000b94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f7ff ff4f 	bl	8000a40 <__NVIC_SetPriorityGrouping>
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b086      	sub	sp, #24
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	60b9      	str	r1, [r7, #8]
 8000bb4:	607a      	str	r2, [r7, #4]
 8000bb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bbc:	f7ff ff64 	bl	8000a88 <__NVIC_GetPriorityGrouping>
 8000bc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	68b9      	ldr	r1, [r7, #8]
 8000bc6:	6978      	ldr	r0, [r7, #20]
 8000bc8:	f7ff ffb2 	bl	8000b30 <NVIC_EncodePriority>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bd2:	4611      	mov	r1, r2
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff ff81 	bl	8000adc <__NVIC_SetPriority>
}
 8000bda:	bf00      	nop
 8000bdc:	3718      	adds	r7, #24
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b082      	sub	sp, #8
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	4603      	mov	r3, r0
 8000bea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff ff57 	bl	8000aa4 <__NVIC_EnableIRQ>
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	b085      	sub	sp, #20
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c06:	2300      	movs	r3, #0
 8000c08:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c10:	2b02      	cmp	r3, #2
 8000c12:	d008      	beq.n	8000c26 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2204      	movs	r2, #4
 8000c18:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e020      	b.n	8000c68 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f022 020e 	bic.w	r2, r2, #14
 8000c34:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f022 0201 	bic.w	r2, r2, #1
 8000c44:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c4e:	2101      	movs	r1, #1
 8000c50:	fa01 f202 	lsl.w	r2, r1, r2
 8000c54:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2200      	movs	r2, #0
 8000c62:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3714      	adds	r7, #20
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr
	...

08000c74 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d005      	beq.n	8000c96 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2204      	movs	r2, #4
 8000c8e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c90:	2301      	movs	r3, #1
 8000c92:	73fb      	strb	r3, [r7, #15]
 8000c94:	e0d6      	b.n	8000e44 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f022 020e 	bic.w	r2, r2, #14
 8000ca4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f022 0201 	bic.w	r2, r2, #1
 8000cb4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	461a      	mov	r2, r3
 8000cbc:	4b64      	ldr	r3, [pc, #400]	; (8000e50 <HAL_DMA_Abort_IT+0x1dc>)
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	d958      	bls.n	8000d74 <HAL_DMA_Abort_IT+0x100>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a63      	ldr	r2, [pc, #396]	; (8000e54 <HAL_DMA_Abort_IT+0x1e0>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d04f      	beq.n	8000d6c <HAL_DMA_Abort_IT+0xf8>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a61      	ldr	r2, [pc, #388]	; (8000e58 <HAL_DMA_Abort_IT+0x1e4>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d048      	beq.n	8000d68 <HAL_DMA_Abort_IT+0xf4>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a60      	ldr	r2, [pc, #384]	; (8000e5c <HAL_DMA_Abort_IT+0x1e8>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d040      	beq.n	8000d62 <HAL_DMA_Abort_IT+0xee>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a5e      	ldr	r2, [pc, #376]	; (8000e60 <HAL_DMA_Abort_IT+0x1ec>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d038      	beq.n	8000d5c <HAL_DMA_Abort_IT+0xe8>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a5d      	ldr	r2, [pc, #372]	; (8000e64 <HAL_DMA_Abort_IT+0x1f0>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d030      	beq.n	8000d56 <HAL_DMA_Abort_IT+0xe2>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a5b      	ldr	r2, [pc, #364]	; (8000e68 <HAL_DMA_Abort_IT+0x1f4>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d028      	beq.n	8000d50 <HAL_DMA_Abort_IT+0xdc>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a53      	ldr	r2, [pc, #332]	; (8000e50 <HAL_DMA_Abort_IT+0x1dc>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d020      	beq.n	8000d4a <HAL_DMA_Abort_IT+0xd6>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a57      	ldr	r2, [pc, #348]	; (8000e6c <HAL_DMA_Abort_IT+0x1f8>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d019      	beq.n	8000d46 <HAL_DMA_Abort_IT+0xd2>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a56      	ldr	r2, [pc, #344]	; (8000e70 <HAL_DMA_Abort_IT+0x1fc>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d012      	beq.n	8000d42 <HAL_DMA_Abort_IT+0xce>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a54      	ldr	r2, [pc, #336]	; (8000e74 <HAL_DMA_Abort_IT+0x200>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d00a      	beq.n	8000d3c <HAL_DMA_Abort_IT+0xc8>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a53      	ldr	r2, [pc, #332]	; (8000e78 <HAL_DMA_Abort_IT+0x204>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d102      	bne.n	8000d36 <HAL_DMA_Abort_IT+0xc2>
 8000d30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d34:	e01b      	b.n	8000d6e <HAL_DMA_Abort_IT+0xfa>
 8000d36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d3a:	e018      	b.n	8000d6e <HAL_DMA_Abort_IT+0xfa>
 8000d3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d40:	e015      	b.n	8000d6e <HAL_DMA_Abort_IT+0xfa>
 8000d42:	2310      	movs	r3, #16
 8000d44:	e013      	b.n	8000d6e <HAL_DMA_Abort_IT+0xfa>
 8000d46:	2301      	movs	r3, #1
 8000d48:	e011      	b.n	8000d6e <HAL_DMA_Abort_IT+0xfa>
 8000d4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d4e:	e00e      	b.n	8000d6e <HAL_DMA_Abort_IT+0xfa>
 8000d50:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d54:	e00b      	b.n	8000d6e <HAL_DMA_Abort_IT+0xfa>
 8000d56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d5a:	e008      	b.n	8000d6e <HAL_DMA_Abort_IT+0xfa>
 8000d5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d60:	e005      	b.n	8000d6e <HAL_DMA_Abort_IT+0xfa>
 8000d62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d66:	e002      	b.n	8000d6e <HAL_DMA_Abort_IT+0xfa>
 8000d68:	2310      	movs	r3, #16
 8000d6a:	e000      	b.n	8000d6e <HAL_DMA_Abort_IT+0xfa>
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	4a43      	ldr	r2, [pc, #268]	; (8000e7c <HAL_DMA_Abort_IT+0x208>)
 8000d70:	6053      	str	r3, [r2, #4]
 8000d72:	e057      	b.n	8000e24 <HAL_DMA_Abort_IT+0x1b0>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a36      	ldr	r2, [pc, #216]	; (8000e54 <HAL_DMA_Abort_IT+0x1e0>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d04f      	beq.n	8000e1e <HAL_DMA_Abort_IT+0x1aa>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a35      	ldr	r2, [pc, #212]	; (8000e58 <HAL_DMA_Abort_IT+0x1e4>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d048      	beq.n	8000e1a <HAL_DMA_Abort_IT+0x1a6>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a33      	ldr	r2, [pc, #204]	; (8000e5c <HAL_DMA_Abort_IT+0x1e8>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d040      	beq.n	8000e14 <HAL_DMA_Abort_IT+0x1a0>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a32      	ldr	r2, [pc, #200]	; (8000e60 <HAL_DMA_Abort_IT+0x1ec>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d038      	beq.n	8000e0e <HAL_DMA_Abort_IT+0x19a>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a30      	ldr	r2, [pc, #192]	; (8000e64 <HAL_DMA_Abort_IT+0x1f0>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d030      	beq.n	8000e08 <HAL_DMA_Abort_IT+0x194>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a2f      	ldr	r2, [pc, #188]	; (8000e68 <HAL_DMA_Abort_IT+0x1f4>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d028      	beq.n	8000e02 <HAL_DMA_Abort_IT+0x18e>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a26      	ldr	r2, [pc, #152]	; (8000e50 <HAL_DMA_Abort_IT+0x1dc>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d020      	beq.n	8000dfc <HAL_DMA_Abort_IT+0x188>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a2b      	ldr	r2, [pc, #172]	; (8000e6c <HAL_DMA_Abort_IT+0x1f8>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d019      	beq.n	8000df8 <HAL_DMA_Abort_IT+0x184>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a29      	ldr	r2, [pc, #164]	; (8000e70 <HAL_DMA_Abort_IT+0x1fc>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d012      	beq.n	8000df4 <HAL_DMA_Abort_IT+0x180>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a28      	ldr	r2, [pc, #160]	; (8000e74 <HAL_DMA_Abort_IT+0x200>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d00a      	beq.n	8000dee <HAL_DMA_Abort_IT+0x17a>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a26      	ldr	r2, [pc, #152]	; (8000e78 <HAL_DMA_Abort_IT+0x204>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d102      	bne.n	8000de8 <HAL_DMA_Abort_IT+0x174>
 8000de2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de6:	e01b      	b.n	8000e20 <HAL_DMA_Abort_IT+0x1ac>
 8000de8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dec:	e018      	b.n	8000e20 <HAL_DMA_Abort_IT+0x1ac>
 8000dee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000df2:	e015      	b.n	8000e20 <HAL_DMA_Abort_IT+0x1ac>
 8000df4:	2310      	movs	r3, #16
 8000df6:	e013      	b.n	8000e20 <HAL_DMA_Abort_IT+0x1ac>
 8000df8:	2301      	movs	r3, #1
 8000dfa:	e011      	b.n	8000e20 <HAL_DMA_Abort_IT+0x1ac>
 8000dfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e00:	e00e      	b.n	8000e20 <HAL_DMA_Abort_IT+0x1ac>
 8000e02:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e06:	e00b      	b.n	8000e20 <HAL_DMA_Abort_IT+0x1ac>
 8000e08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e0c:	e008      	b.n	8000e20 <HAL_DMA_Abort_IT+0x1ac>
 8000e0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e12:	e005      	b.n	8000e20 <HAL_DMA_Abort_IT+0x1ac>
 8000e14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e18:	e002      	b.n	8000e20 <HAL_DMA_Abort_IT+0x1ac>
 8000e1a:	2310      	movs	r3, #16
 8000e1c:	e000      	b.n	8000e20 <HAL_DMA_Abort_IT+0x1ac>
 8000e1e:	2301      	movs	r3, #1
 8000e20:	4a17      	ldr	r2, [pc, #92]	; (8000e80 <HAL_DMA_Abort_IT+0x20c>)
 8000e22:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2201      	movs	r2, #1
 8000e28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d003      	beq.n	8000e44 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	4798      	blx	r3
    } 
  }
  return status;
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40020080 	.word	0x40020080
 8000e54:	40020008 	.word	0x40020008
 8000e58:	4002001c 	.word	0x4002001c
 8000e5c:	40020030 	.word	0x40020030
 8000e60:	40020044 	.word	0x40020044
 8000e64:	40020058 	.word	0x40020058
 8000e68:	4002006c 	.word	0x4002006c
 8000e6c:	40020408 	.word	0x40020408
 8000e70:	4002041c 	.word	0x4002041c
 8000e74:	40020430 	.word	0x40020430
 8000e78:	40020444 	.word	0x40020444
 8000e7c:	40020400 	.word	0x40020400
 8000e80:	40020000 	.word	0x40020000

08000e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b08b      	sub	sp, #44	; 0x2c
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e92:	2300      	movs	r3, #0
 8000e94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e96:	e179      	b.n	800118c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e98:	2201      	movs	r2, #1
 8000e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	69fa      	ldr	r2, [r7, #28]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	f040 8168 	bne.w	8001186 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	4a96      	ldr	r2, [pc, #600]	; (8001114 <HAL_GPIO_Init+0x290>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d05e      	beq.n	8000f7e <HAL_GPIO_Init+0xfa>
 8000ec0:	4a94      	ldr	r2, [pc, #592]	; (8001114 <HAL_GPIO_Init+0x290>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d875      	bhi.n	8000fb2 <HAL_GPIO_Init+0x12e>
 8000ec6:	4a94      	ldr	r2, [pc, #592]	; (8001118 <HAL_GPIO_Init+0x294>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d058      	beq.n	8000f7e <HAL_GPIO_Init+0xfa>
 8000ecc:	4a92      	ldr	r2, [pc, #584]	; (8001118 <HAL_GPIO_Init+0x294>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d86f      	bhi.n	8000fb2 <HAL_GPIO_Init+0x12e>
 8000ed2:	4a92      	ldr	r2, [pc, #584]	; (800111c <HAL_GPIO_Init+0x298>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d052      	beq.n	8000f7e <HAL_GPIO_Init+0xfa>
 8000ed8:	4a90      	ldr	r2, [pc, #576]	; (800111c <HAL_GPIO_Init+0x298>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d869      	bhi.n	8000fb2 <HAL_GPIO_Init+0x12e>
 8000ede:	4a90      	ldr	r2, [pc, #576]	; (8001120 <HAL_GPIO_Init+0x29c>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d04c      	beq.n	8000f7e <HAL_GPIO_Init+0xfa>
 8000ee4:	4a8e      	ldr	r2, [pc, #568]	; (8001120 <HAL_GPIO_Init+0x29c>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d863      	bhi.n	8000fb2 <HAL_GPIO_Init+0x12e>
 8000eea:	4a8e      	ldr	r2, [pc, #568]	; (8001124 <HAL_GPIO_Init+0x2a0>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d046      	beq.n	8000f7e <HAL_GPIO_Init+0xfa>
 8000ef0:	4a8c      	ldr	r2, [pc, #560]	; (8001124 <HAL_GPIO_Init+0x2a0>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d85d      	bhi.n	8000fb2 <HAL_GPIO_Init+0x12e>
 8000ef6:	2b12      	cmp	r3, #18
 8000ef8:	d82a      	bhi.n	8000f50 <HAL_GPIO_Init+0xcc>
 8000efa:	2b12      	cmp	r3, #18
 8000efc:	d859      	bhi.n	8000fb2 <HAL_GPIO_Init+0x12e>
 8000efe:	a201      	add	r2, pc, #4	; (adr r2, 8000f04 <HAL_GPIO_Init+0x80>)
 8000f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f04:	08000f7f 	.word	0x08000f7f
 8000f08:	08000f59 	.word	0x08000f59
 8000f0c:	08000f6b 	.word	0x08000f6b
 8000f10:	08000fad 	.word	0x08000fad
 8000f14:	08000fb3 	.word	0x08000fb3
 8000f18:	08000fb3 	.word	0x08000fb3
 8000f1c:	08000fb3 	.word	0x08000fb3
 8000f20:	08000fb3 	.word	0x08000fb3
 8000f24:	08000fb3 	.word	0x08000fb3
 8000f28:	08000fb3 	.word	0x08000fb3
 8000f2c:	08000fb3 	.word	0x08000fb3
 8000f30:	08000fb3 	.word	0x08000fb3
 8000f34:	08000fb3 	.word	0x08000fb3
 8000f38:	08000fb3 	.word	0x08000fb3
 8000f3c:	08000fb3 	.word	0x08000fb3
 8000f40:	08000fb3 	.word	0x08000fb3
 8000f44:	08000fb3 	.word	0x08000fb3
 8000f48:	08000f61 	.word	0x08000f61
 8000f4c:	08000f75 	.word	0x08000f75
 8000f50:	4a75      	ldr	r2, [pc, #468]	; (8001128 <HAL_GPIO_Init+0x2a4>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d013      	beq.n	8000f7e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f56:	e02c      	b.n	8000fb2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	623b      	str	r3, [r7, #32]
          break;
 8000f5e:	e029      	b.n	8000fb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	3304      	adds	r3, #4
 8000f66:	623b      	str	r3, [r7, #32]
          break;
 8000f68:	e024      	b.n	8000fb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	3308      	adds	r3, #8
 8000f70:	623b      	str	r3, [r7, #32]
          break;
 8000f72:	e01f      	b.n	8000fb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	330c      	adds	r3, #12
 8000f7a:	623b      	str	r3, [r7, #32]
          break;
 8000f7c:	e01a      	b.n	8000fb4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d102      	bne.n	8000f8c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f86:	2304      	movs	r3, #4
 8000f88:	623b      	str	r3, [r7, #32]
          break;
 8000f8a:	e013      	b.n	8000fb4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d105      	bne.n	8000fa0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f94:	2308      	movs	r3, #8
 8000f96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	69fa      	ldr	r2, [r7, #28]
 8000f9c:	611a      	str	r2, [r3, #16]
          break;
 8000f9e:	e009      	b.n	8000fb4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fa0:	2308      	movs	r3, #8
 8000fa2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	69fa      	ldr	r2, [r7, #28]
 8000fa8:	615a      	str	r2, [r3, #20]
          break;
 8000faa:	e003      	b.n	8000fb4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fac:	2300      	movs	r3, #0
 8000fae:	623b      	str	r3, [r7, #32]
          break;
 8000fb0:	e000      	b.n	8000fb4 <HAL_GPIO_Init+0x130>
          break;
 8000fb2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	2bff      	cmp	r3, #255	; 0xff
 8000fb8:	d801      	bhi.n	8000fbe <HAL_GPIO_Init+0x13a>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	e001      	b.n	8000fc2 <HAL_GPIO_Init+0x13e>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	2bff      	cmp	r3, #255	; 0xff
 8000fc8:	d802      	bhi.n	8000fd0 <HAL_GPIO_Init+0x14c>
 8000fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	e002      	b.n	8000fd6 <HAL_GPIO_Init+0x152>
 8000fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd2:	3b08      	subs	r3, #8
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	210f      	movs	r1, #15
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	401a      	ands	r2, r3
 8000fe8:	6a39      	ldr	r1, [r7, #32]
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff0:	431a      	orrs	r2, r3
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f000 80c1 	beq.w	8001186 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001004:	4b49      	ldr	r3, [pc, #292]	; (800112c <HAL_GPIO_Init+0x2a8>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	4a48      	ldr	r2, [pc, #288]	; (800112c <HAL_GPIO_Init+0x2a8>)
 800100a:	f043 0301 	orr.w	r3, r3, #1
 800100e:	6193      	str	r3, [r2, #24]
 8001010:	4b46      	ldr	r3, [pc, #280]	; (800112c <HAL_GPIO_Init+0x2a8>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	f003 0301 	and.w	r3, r3, #1
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800101c:	4a44      	ldr	r2, [pc, #272]	; (8001130 <HAL_GPIO_Init+0x2ac>)
 800101e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001020:	089b      	lsrs	r3, r3, #2
 8001022:	3302      	adds	r3, #2
 8001024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001028:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800102a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102c:	f003 0303 	and.w	r3, r3, #3
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	220f      	movs	r2, #15
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	4013      	ands	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4a3c      	ldr	r2, [pc, #240]	; (8001134 <HAL_GPIO_Init+0x2b0>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d01f      	beq.n	8001088 <HAL_GPIO_Init+0x204>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a3b      	ldr	r2, [pc, #236]	; (8001138 <HAL_GPIO_Init+0x2b4>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d019      	beq.n	8001084 <HAL_GPIO_Init+0x200>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4a3a      	ldr	r2, [pc, #232]	; (800113c <HAL_GPIO_Init+0x2b8>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d013      	beq.n	8001080 <HAL_GPIO_Init+0x1fc>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4a39      	ldr	r2, [pc, #228]	; (8001140 <HAL_GPIO_Init+0x2bc>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d00d      	beq.n	800107c <HAL_GPIO_Init+0x1f8>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a38      	ldr	r2, [pc, #224]	; (8001144 <HAL_GPIO_Init+0x2c0>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d007      	beq.n	8001078 <HAL_GPIO_Init+0x1f4>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4a37      	ldr	r2, [pc, #220]	; (8001148 <HAL_GPIO_Init+0x2c4>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d101      	bne.n	8001074 <HAL_GPIO_Init+0x1f0>
 8001070:	2305      	movs	r3, #5
 8001072:	e00a      	b.n	800108a <HAL_GPIO_Init+0x206>
 8001074:	2306      	movs	r3, #6
 8001076:	e008      	b.n	800108a <HAL_GPIO_Init+0x206>
 8001078:	2304      	movs	r3, #4
 800107a:	e006      	b.n	800108a <HAL_GPIO_Init+0x206>
 800107c:	2303      	movs	r3, #3
 800107e:	e004      	b.n	800108a <HAL_GPIO_Init+0x206>
 8001080:	2302      	movs	r3, #2
 8001082:	e002      	b.n	800108a <HAL_GPIO_Init+0x206>
 8001084:	2301      	movs	r3, #1
 8001086:	e000      	b.n	800108a <HAL_GPIO_Init+0x206>
 8001088:	2300      	movs	r3, #0
 800108a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800108c:	f002 0203 	and.w	r2, r2, #3
 8001090:	0092      	lsls	r2, r2, #2
 8001092:	4093      	lsls	r3, r2
 8001094:	68fa      	ldr	r2, [r7, #12]
 8001096:	4313      	orrs	r3, r2
 8001098:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800109a:	4925      	ldr	r1, [pc, #148]	; (8001130 <HAL_GPIO_Init+0x2ac>)
 800109c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109e:	089b      	lsrs	r3, r3, #2
 80010a0:	3302      	adds	r3, #2
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d006      	beq.n	80010c2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010b4:	4b25      	ldr	r3, [pc, #148]	; (800114c <HAL_GPIO_Init+0x2c8>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4924      	ldr	r1, [pc, #144]	; (800114c <HAL_GPIO_Init+0x2c8>)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	4313      	orrs	r3, r2
 80010be:	600b      	str	r3, [r1, #0]
 80010c0:	e006      	b.n	80010d0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010c2:	4b22      	ldr	r3, [pc, #136]	; (800114c <HAL_GPIO_Init+0x2c8>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	43db      	mvns	r3, r3
 80010ca:	4920      	ldr	r1, [pc, #128]	; (800114c <HAL_GPIO_Init+0x2c8>)
 80010cc:	4013      	ands	r3, r2
 80010ce:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d006      	beq.n	80010ea <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010dc:	4b1b      	ldr	r3, [pc, #108]	; (800114c <HAL_GPIO_Init+0x2c8>)
 80010de:	685a      	ldr	r2, [r3, #4]
 80010e0:	491a      	ldr	r1, [pc, #104]	; (800114c <HAL_GPIO_Init+0x2c8>)
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	604b      	str	r3, [r1, #4]
 80010e8:	e006      	b.n	80010f8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010ea:	4b18      	ldr	r3, [pc, #96]	; (800114c <HAL_GPIO_Init+0x2c8>)
 80010ec:	685a      	ldr	r2, [r3, #4]
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	43db      	mvns	r3, r3
 80010f2:	4916      	ldr	r1, [pc, #88]	; (800114c <HAL_GPIO_Init+0x2c8>)
 80010f4:	4013      	ands	r3, r2
 80010f6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d025      	beq.n	8001150 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <HAL_GPIO_Init+0x2c8>)
 8001106:	689a      	ldr	r2, [r3, #8]
 8001108:	4910      	ldr	r1, [pc, #64]	; (800114c <HAL_GPIO_Init+0x2c8>)
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	4313      	orrs	r3, r2
 800110e:	608b      	str	r3, [r1, #8]
 8001110:	e025      	b.n	800115e <HAL_GPIO_Init+0x2da>
 8001112:	bf00      	nop
 8001114:	10320000 	.word	0x10320000
 8001118:	10310000 	.word	0x10310000
 800111c:	10220000 	.word	0x10220000
 8001120:	10210000 	.word	0x10210000
 8001124:	10120000 	.word	0x10120000
 8001128:	10110000 	.word	0x10110000
 800112c:	40021000 	.word	0x40021000
 8001130:	40010000 	.word	0x40010000
 8001134:	40010800 	.word	0x40010800
 8001138:	40010c00 	.word	0x40010c00
 800113c:	40011000 	.word	0x40011000
 8001140:	40011400 	.word	0x40011400
 8001144:	40011800 	.word	0x40011800
 8001148:	40011c00 	.word	0x40011c00
 800114c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001150:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <HAL_GPIO_Init+0x324>)
 8001152:	689a      	ldr	r2, [r3, #8]
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	43db      	mvns	r3, r3
 8001158:	4913      	ldr	r1, [pc, #76]	; (80011a8 <HAL_GPIO_Init+0x324>)
 800115a:	4013      	ands	r3, r2
 800115c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d006      	beq.n	8001178 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800116a:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <HAL_GPIO_Init+0x324>)
 800116c:	68da      	ldr	r2, [r3, #12]
 800116e:	490e      	ldr	r1, [pc, #56]	; (80011a8 <HAL_GPIO_Init+0x324>)
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	4313      	orrs	r3, r2
 8001174:	60cb      	str	r3, [r1, #12]
 8001176:	e006      	b.n	8001186 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001178:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <HAL_GPIO_Init+0x324>)
 800117a:	68da      	ldr	r2, [r3, #12]
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	43db      	mvns	r3, r3
 8001180:	4909      	ldr	r1, [pc, #36]	; (80011a8 <HAL_GPIO_Init+0x324>)
 8001182:	4013      	ands	r3, r2
 8001184:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001188:	3301      	adds	r3, #1
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001192:	fa22 f303 	lsr.w	r3, r2, r3
 8001196:	2b00      	cmp	r3, #0
 8001198:	f47f ae7e 	bne.w	8000e98 <HAL_GPIO_Init+0x14>
  }
}
 800119c:	bf00      	nop
 800119e:	bf00      	nop
 80011a0:	372c      	adds	r7, #44	; 0x2c
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr
 80011a8:	40010400 	.word	0x40010400

080011ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	460b      	mov	r3, r1
 80011b6:	807b      	strh	r3, [r7, #2]
 80011b8:	4613      	mov	r3, r2
 80011ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011bc:	787b      	ldrb	r3, [r7, #1]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011c2:	887a      	ldrh	r2, [r7, #2]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011c8:	e003      	b.n	80011d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011ca:	887b      	ldrh	r3, [r7, #2]
 80011cc:	041a      	lsls	r2, r3, #16
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	611a      	str	r2, [r3, #16]
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr

080011dc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	460b      	mov	r3, r1
 80011e6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011ee:	887a      	ldrh	r2, [r7, #2]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	4013      	ands	r3, r2
 80011f4:	041a      	lsls	r2, r3, #16
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	43d9      	mvns	r1, r3
 80011fa:	887b      	ldrh	r3, [r7, #2]
 80011fc:	400b      	ands	r3, r1
 80011fe:	431a      	orrs	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	611a      	str	r2, [r3, #16]
}
 8001204:	bf00      	nop
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	bc80      	pop	{r7}
 800120c:	4770      	bx	lr
	...

08001210 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d101      	bne.n	8001222 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e272      	b.n	8001708 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	2b00      	cmp	r3, #0
 800122c:	f000 8087 	beq.w	800133e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001230:	4b92      	ldr	r3, [pc, #584]	; (800147c <HAL_RCC_OscConfig+0x26c>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 030c 	and.w	r3, r3, #12
 8001238:	2b04      	cmp	r3, #4
 800123a:	d00c      	beq.n	8001256 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800123c:	4b8f      	ldr	r3, [pc, #572]	; (800147c <HAL_RCC_OscConfig+0x26c>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 030c 	and.w	r3, r3, #12
 8001244:	2b08      	cmp	r3, #8
 8001246:	d112      	bne.n	800126e <HAL_RCC_OscConfig+0x5e>
 8001248:	4b8c      	ldr	r3, [pc, #560]	; (800147c <HAL_RCC_OscConfig+0x26c>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001254:	d10b      	bne.n	800126e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001256:	4b89      	ldr	r3, [pc, #548]	; (800147c <HAL_RCC_OscConfig+0x26c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d06c      	beq.n	800133c <HAL_RCC_OscConfig+0x12c>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d168      	bne.n	800133c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e24c      	b.n	8001708 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001276:	d106      	bne.n	8001286 <HAL_RCC_OscConfig+0x76>
 8001278:	4b80      	ldr	r3, [pc, #512]	; (800147c <HAL_RCC_OscConfig+0x26c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a7f      	ldr	r2, [pc, #508]	; (800147c <HAL_RCC_OscConfig+0x26c>)
 800127e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001282:	6013      	str	r3, [r2, #0]
 8001284:	e02e      	b.n	80012e4 <HAL_RCC_OscConfig+0xd4>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d10c      	bne.n	80012a8 <HAL_RCC_OscConfig+0x98>
 800128e:	4b7b      	ldr	r3, [pc, #492]	; (800147c <HAL_RCC_OscConfig+0x26c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a7a      	ldr	r2, [pc, #488]	; (800147c <HAL_RCC_OscConfig+0x26c>)
 8001294:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	4b78      	ldr	r3, [pc, #480]	; (800147c <HAL_RCC_OscConfig+0x26c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a77      	ldr	r2, [pc, #476]	; (800147c <HAL_RCC_OscConfig+0x26c>)
 80012a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	e01d      	b.n	80012e4 <HAL_RCC_OscConfig+0xd4>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012b0:	d10c      	bne.n	80012cc <HAL_RCC_OscConfig+0xbc>
 80012b2:	4b72      	ldr	r3, [pc, #456]	; (800147c <HAL_RCC_OscConfig+0x26c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a71      	ldr	r2, [pc, #452]	; (800147c <HAL_RCC_OscConfig+0x26c>)
 80012b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	4b6f      	ldr	r3, [pc, #444]	; (800147c <HAL_RCC_OscConfig+0x26c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a6e      	ldr	r2, [pc, #440]	; (800147c <HAL_RCC_OscConfig+0x26c>)
 80012c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c8:	6013      	str	r3, [r2, #0]
 80012ca:	e00b      	b.n	80012e4 <HAL_RCC_OscConfig+0xd4>
 80012cc:	4b6b      	ldr	r3, [pc, #428]	; (800147c <HAL_RCC_OscConfig+0x26c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a6a      	ldr	r2, [pc, #424]	; (800147c <HAL_RCC_OscConfig+0x26c>)
 80012d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012d6:	6013      	str	r3, [r2, #0]
 80012d8:	4b68      	ldr	r3, [pc, #416]	; (800147c <HAL_RCC_OscConfig+0x26c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a67      	ldr	r2, [pc, #412]	; (800147c <HAL_RCC_OscConfig+0x26c>)
 80012de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d013      	beq.n	8001314 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ec:	f7ff fb7a 	bl	80009e4 <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f4:	f7ff fb76 	bl	80009e4 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b64      	cmp	r3, #100	; 0x64
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e200      	b.n	8001708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001306:	4b5d      	ldr	r3, [pc, #372]	; (800147c <HAL_RCC_OscConfig+0x26c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d0f0      	beq.n	80012f4 <HAL_RCC_OscConfig+0xe4>
 8001312:	e014      	b.n	800133e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001314:	f7ff fb66 	bl	80009e4 <HAL_GetTick>
 8001318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800131c:	f7ff fb62 	bl	80009e4 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b64      	cmp	r3, #100	; 0x64
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e1ec      	b.n	8001708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800132e:	4b53      	ldr	r3, [pc, #332]	; (800147c <HAL_RCC_OscConfig+0x26c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1f0      	bne.n	800131c <HAL_RCC_OscConfig+0x10c>
 800133a:	e000      	b.n	800133e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800133c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d063      	beq.n	8001412 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800134a:	4b4c      	ldr	r3, [pc, #304]	; (800147c <HAL_RCC_OscConfig+0x26c>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f003 030c 	and.w	r3, r3, #12
 8001352:	2b00      	cmp	r3, #0
 8001354:	d00b      	beq.n	800136e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001356:	4b49      	ldr	r3, [pc, #292]	; (800147c <HAL_RCC_OscConfig+0x26c>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f003 030c 	and.w	r3, r3, #12
 800135e:	2b08      	cmp	r3, #8
 8001360:	d11c      	bne.n	800139c <HAL_RCC_OscConfig+0x18c>
 8001362:	4b46      	ldr	r3, [pc, #280]	; (800147c <HAL_RCC_OscConfig+0x26c>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d116      	bne.n	800139c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136e:	4b43      	ldr	r3, [pc, #268]	; (800147c <HAL_RCC_OscConfig+0x26c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d005      	beq.n	8001386 <HAL_RCC_OscConfig+0x176>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d001      	beq.n	8001386 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e1c0      	b.n	8001708 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001386:	4b3d      	ldr	r3, [pc, #244]	; (800147c <HAL_RCC_OscConfig+0x26c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	4939      	ldr	r1, [pc, #228]	; (800147c <HAL_RCC_OscConfig+0x26c>)
 8001396:	4313      	orrs	r3, r2
 8001398:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800139a:	e03a      	b.n	8001412 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d020      	beq.n	80013e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013a4:	4b36      	ldr	r3, [pc, #216]	; (8001480 <HAL_RCC_OscConfig+0x270>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013aa:	f7ff fb1b 	bl	80009e4 <HAL_GetTick>
 80013ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b0:	e008      	b.n	80013c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013b2:	f7ff fb17 	bl	80009e4 <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d901      	bls.n	80013c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e1a1      	b.n	8001708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c4:	4b2d      	ldr	r3, [pc, #180]	; (800147c <HAL_RCC_OscConfig+0x26c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d0f0      	beq.n	80013b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d0:	4b2a      	ldr	r3, [pc, #168]	; (800147c <HAL_RCC_OscConfig+0x26c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	695b      	ldr	r3, [r3, #20]
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	4927      	ldr	r1, [pc, #156]	; (800147c <HAL_RCC_OscConfig+0x26c>)
 80013e0:	4313      	orrs	r3, r2
 80013e2:	600b      	str	r3, [r1, #0]
 80013e4:	e015      	b.n	8001412 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013e6:	4b26      	ldr	r3, [pc, #152]	; (8001480 <HAL_RCC_OscConfig+0x270>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ec:	f7ff fafa 	bl	80009e4 <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013f4:	f7ff faf6 	bl	80009e4 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e180      	b.n	8001708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001406:	4b1d      	ldr	r3, [pc, #116]	; (800147c <HAL_RCC_OscConfig+0x26c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1f0      	bne.n	80013f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	2b00      	cmp	r3, #0
 800141c:	d03a      	beq.n	8001494 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d019      	beq.n	800145a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001426:	4b17      	ldr	r3, [pc, #92]	; (8001484 <HAL_RCC_OscConfig+0x274>)
 8001428:	2201      	movs	r2, #1
 800142a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800142c:	f7ff fada 	bl	80009e4 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001434:	f7ff fad6 	bl	80009e4 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e160      	b.n	8001708 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001446:	4b0d      	ldr	r3, [pc, #52]	; (800147c <HAL_RCC_OscConfig+0x26c>)
 8001448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0f0      	beq.n	8001434 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001452:	2001      	movs	r0, #1
 8001454:	f000 fb08 	bl	8001a68 <RCC_Delay>
 8001458:	e01c      	b.n	8001494 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800145a:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <HAL_RCC_OscConfig+0x274>)
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001460:	f7ff fac0 	bl	80009e4 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001466:	e00f      	b.n	8001488 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001468:	f7ff fabc 	bl	80009e4 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d908      	bls.n	8001488 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e146      	b.n	8001708 <HAL_RCC_OscConfig+0x4f8>
 800147a:	bf00      	nop
 800147c:	40021000 	.word	0x40021000
 8001480:	42420000 	.word	0x42420000
 8001484:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001488:	4b92      	ldr	r3, [pc, #584]	; (80016d4 <HAL_RCC_OscConfig+0x4c4>)
 800148a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1e9      	bne.n	8001468 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	2b00      	cmp	r3, #0
 800149e:	f000 80a6 	beq.w	80015ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014a2:	2300      	movs	r3, #0
 80014a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014a6:	4b8b      	ldr	r3, [pc, #556]	; (80016d4 <HAL_RCC_OscConfig+0x4c4>)
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d10d      	bne.n	80014ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014b2:	4b88      	ldr	r3, [pc, #544]	; (80016d4 <HAL_RCC_OscConfig+0x4c4>)
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	4a87      	ldr	r2, [pc, #540]	; (80016d4 <HAL_RCC_OscConfig+0x4c4>)
 80014b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014bc:	61d3      	str	r3, [r2, #28]
 80014be:	4b85      	ldr	r3, [pc, #532]	; (80016d4 <HAL_RCC_OscConfig+0x4c4>)
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014ca:	2301      	movs	r3, #1
 80014cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ce:	4b82      	ldr	r3, [pc, #520]	; (80016d8 <HAL_RCC_OscConfig+0x4c8>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d118      	bne.n	800150c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014da:	4b7f      	ldr	r3, [pc, #508]	; (80016d8 <HAL_RCC_OscConfig+0x4c8>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a7e      	ldr	r2, [pc, #504]	; (80016d8 <HAL_RCC_OscConfig+0x4c8>)
 80014e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014e6:	f7ff fa7d 	bl	80009e4 <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ee:	f7ff fa79 	bl	80009e4 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b64      	cmp	r3, #100	; 0x64
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e103      	b.n	8001708 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001500:	4b75      	ldr	r3, [pc, #468]	; (80016d8 <HAL_RCC_OscConfig+0x4c8>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0f0      	beq.n	80014ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d106      	bne.n	8001522 <HAL_RCC_OscConfig+0x312>
 8001514:	4b6f      	ldr	r3, [pc, #444]	; (80016d4 <HAL_RCC_OscConfig+0x4c4>)
 8001516:	6a1b      	ldr	r3, [r3, #32]
 8001518:	4a6e      	ldr	r2, [pc, #440]	; (80016d4 <HAL_RCC_OscConfig+0x4c4>)
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	6213      	str	r3, [r2, #32]
 8001520:	e02d      	b.n	800157e <HAL_RCC_OscConfig+0x36e>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d10c      	bne.n	8001544 <HAL_RCC_OscConfig+0x334>
 800152a:	4b6a      	ldr	r3, [pc, #424]	; (80016d4 <HAL_RCC_OscConfig+0x4c4>)
 800152c:	6a1b      	ldr	r3, [r3, #32]
 800152e:	4a69      	ldr	r2, [pc, #420]	; (80016d4 <HAL_RCC_OscConfig+0x4c4>)
 8001530:	f023 0301 	bic.w	r3, r3, #1
 8001534:	6213      	str	r3, [r2, #32]
 8001536:	4b67      	ldr	r3, [pc, #412]	; (80016d4 <HAL_RCC_OscConfig+0x4c4>)
 8001538:	6a1b      	ldr	r3, [r3, #32]
 800153a:	4a66      	ldr	r2, [pc, #408]	; (80016d4 <HAL_RCC_OscConfig+0x4c4>)
 800153c:	f023 0304 	bic.w	r3, r3, #4
 8001540:	6213      	str	r3, [r2, #32]
 8001542:	e01c      	b.n	800157e <HAL_RCC_OscConfig+0x36e>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	2b05      	cmp	r3, #5
 800154a:	d10c      	bne.n	8001566 <HAL_RCC_OscConfig+0x356>
 800154c:	4b61      	ldr	r3, [pc, #388]	; (80016d4 <HAL_RCC_OscConfig+0x4c4>)
 800154e:	6a1b      	ldr	r3, [r3, #32]
 8001550:	4a60      	ldr	r2, [pc, #384]	; (80016d4 <HAL_RCC_OscConfig+0x4c4>)
 8001552:	f043 0304 	orr.w	r3, r3, #4
 8001556:	6213      	str	r3, [r2, #32]
 8001558:	4b5e      	ldr	r3, [pc, #376]	; (80016d4 <HAL_RCC_OscConfig+0x4c4>)
 800155a:	6a1b      	ldr	r3, [r3, #32]
 800155c:	4a5d      	ldr	r2, [pc, #372]	; (80016d4 <HAL_RCC_OscConfig+0x4c4>)
 800155e:	f043 0301 	orr.w	r3, r3, #1
 8001562:	6213      	str	r3, [r2, #32]
 8001564:	e00b      	b.n	800157e <HAL_RCC_OscConfig+0x36e>
 8001566:	4b5b      	ldr	r3, [pc, #364]	; (80016d4 <HAL_RCC_OscConfig+0x4c4>)
 8001568:	6a1b      	ldr	r3, [r3, #32]
 800156a:	4a5a      	ldr	r2, [pc, #360]	; (80016d4 <HAL_RCC_OscConfig+0x4c4>)
 800156c:	f023 0301 	bic.w	r3, r3, #1
 8001570:	6213      	str	r3, [r2, #32]
 8001572:	4b58      	ldr	r3, [pc, #352]	; (80016d4 <HAL_RCC_OscConfig+0x4c4>)
 8001574:	6a1b      	ldr	r3, [r3, #32]
 8001576:	4a57      	ldr	r2, [pc, #348]	; (80016d4 <HAL_RCC_OscConfig+0x4c4>)
 8001578:	f023 0304 	bic.w	r3, r3, #4
 800157c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d015      	beq.n	80015b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001586:	f7ff fa2d 	bl	80009e4 <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800158c:	e00a      	b.n	80015a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800158e:	f7ff fa29 	bl	80009e4 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	f241 3288 	movw	r2, #5000	; 0x1388
 800159c:	4293      	cmp	r3, r2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e0b1      	b.n	8001708 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015a4:	4b4b      	ldr	r3, [pc, #300]	; (80016d4 <HAL_RCC_OscConfig+0x4c4>)
 80015a6:	6a1b      	ldr	r3, [r3, #32]
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d0ee      	beq.n	800158e <HAL_RCC_OscConfig+0x37e>
 80015b0:	e014      	b.n	80015dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b2:	f7ff fa17 	bl	80009e4 <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b8:	e00a      	b.n	80015d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ba:	f7ff fa13 	bl	80009e4 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e09b      	b.n	8001708 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015d0:	4b40      	ldr	r3, [pc, #256]	; (80016d4 <HAL_RCC_OscConfig+0x4c4>)
 80015d2:	6a1b      	ldr	r3, [r3, #32]
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d1ee      	bne.n	80015ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015dc:	7dfb      	ldrb	r3, [r7, #23]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d105      	bne.n	80015ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015e2:	4b3c      	ldr	r3, [pc, #240]	; (80016d4 <HAL_RCC_OscConfig+0x4c4>)
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	4a3b      	ldr	r2, [pc, #236]	; (80016d4 <HAL_RCC_OscConfig+0x4c4>)
 80015e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f000 8087 	beq.w	8001706 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015f8:	4b36      	ldr	r3, [pc, #216]	; (80016d4 <HAL_RCC_OscConfig+0x4c4>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 030c 	and.w	r3, r3, #12
 8001600:	2b08      	cmp	r3, #8
 8001602:	d061      	beq.n	80016c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	69db      	ldr	r3, [r3, #28]
 8001608:	2b02      	cmp	r3, #2
 800160a:	d146      	bne.n	800169a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800160c:	4b33      	ldr	r3, [pc, #204]	; (80016dc <HAL_RCC_OscConfig+0x4cc>)
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001612:	f7ff f9e7 	bl	80009e4 <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800161a:	f7ff f9e3 	bl	80009e4 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e06d      	b.n	8001708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800162c:	4b29      	ldr	r3, [pc, #164]	; (80016d4 <HAL_RCC_OscConfig+0x4c4>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1f0      	bne.n	800161a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a1b      	ldr	r3, [r3, #32]
 800163c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001640:	d108      	bne.n	8001654 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001642:	4b24      	ldr	r3, [pc, #144]	; (80016d4 <HAL_RCC_OscConfig+0x4c4>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	4921      	ldr	r1, [pc, #132]	; (80016d4 <HAL_RCC_OscConfig+0x4c4>)
 8001650:	4313      	orrs	r3, r2
 8001652:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001654:	4b1f      	ldr	r3, [pc, #124]	; (80016d4 <HAL_RCC_OscConfig+0x4c4>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a19      	ldr	r1, [r3, #32]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001664:	430b      	orrs	r3, r1
 8001666:	491b      	ldr	r1, [pc, #108]	; (80016d4 <HAL_RCC_OscConfig+0x4c4>)
 8001668:	4313      	orrs	r3, r2
 800166a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800166c:	4b1b      	ldr	r3, [pc, #108]	; (80016dc <HAL_RCC_OscConfig+0x4cc>)
 800166e:	2201      	movs	r2, #1
 8001670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001672:	f7ff f9b7 	bl	80009e4 <HAL_GetTick>
 8001676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800167a:	f7ff f9b3 	bl	80009e4 <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e03d      	b.n	8001708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <HAL_RCC_OscConfig+0x4c4>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d0f0      	beq.n	800167a <HAL_RCC_OscConfig+0x46a>
 8001698:	e035      	b.n	8001706 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800169a:	4b10      	ldr	r3, [pc, #64]	; (80016dc <HAL_RCC_OscConfig+0x4cc>)
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a0:	f7ff f9a0 	bl	80009e4 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016a8:	f7ff f99c 	bl	80009e4 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e026      	b.n	8001708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ba:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <HAL_RCC_OscConfig+0x4c4>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1f0      	bne.n	80016a8 <HAL_RCC_OscConfig+0x498>
 80016c6:	e01e      	b.n	8001706 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	69db      	ldr	r3, [r3, #28]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d107      	bne.n	80016e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e019      	b.n	8001708 <HAL_RCC_OscConfig+0x4f8>
 80016d4:	40021000 	.word	0x40021000
 80016d8:	40007000 	.word	0x40007000
 80016dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016e0:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <HAL_RCC_OscConfig+0x500>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d106      	bne.n	8001702 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016fe:	429a      	cmp	r2, r3
 8001700:	d001      	beq.n	8001706 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e000      	b.n	8001708 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001706:	2300      	movs	r3, #0
}
 8001708:	4618      	mov	r0, r3
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40021000 	.word	0x40021000

08001714 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d101      	bne.n	8001728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e0d0      	b.n	80018ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001728:	4b6a      	ldr	r3, [pc, #424]	; (80018d4 <HAL_RCC_ClockConfig+0x1c0>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0307 	and.w	r3, r3, #7
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	429a      	cmp	r2, r3
 8001734:	d910      	bls.n	8001758 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001736:	4b67      	ldr	r3, [pc, #412]	; (80018d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f023 0207 	bic.w	r2, r3, #7
 800173e:	4965      	ldr	r1, [pc, #404]	; (80018d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	4313      	orrs	r3, r2
 8001744:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001746:	4b63      	ldr	r3, [pc, #396]	; (80018d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	683a      	ldr	r2, [r7, #0]
 8001750:	429a      	cmp	r2, r3
 8001752:	d001      	beq.n	8001758 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e0b8      	b.n	80018ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d020      	beq.n	80017a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0304 	and.w	r3, r3, #4
 800176c:	2b00      	cmp	r3, #0
 800176e:	d005      	beq.n	800177c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001770:	4b59      	ldr	r3, [pc, #356]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	4a58      	ldr	r2, [pc, #352]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001776:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800177a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0308 	and.w	r3, r3, #8
 8001784:	2b00      	cmp	r3, #0
 8001786:	d005      	beq.n	8001794 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001788:	4b53      	ldr	r3, [pc, #332]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	4a52      	ldr	r2, [pc, #328]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 800178e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001792:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001794:	4b50      	ldr	r3, [pc, #320]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	494d      	ldr	r1, [pc, #308]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d040      	beq.n	8001834 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d107      	bne.n	80017ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ba:	4b47      	ldr	r3, [pc, #284]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d115      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e07f      	b.n	80018ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d107      	bne.n	80017e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d2:	4b41      	ldr	r3, [pc, #260]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d109      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e073      	b.n	80018ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e2:	4b3d      	ldr	r3, [pc, #244]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e06b      	b.n	80018ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017f2:	4b39      	ldr	r3, [pc, #228]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f023 0203 	bic.w	r2, r3, #3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	4936      	ldr	r1, [pc, #216]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001800:	4313      	orrs	r3, r2
 8001802:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001804:	f7ff f8ee 	bl	80009e4 <HAL_GetTick>
 8001808:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800180a:	e00a      	b.n	8001822 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800180c:	f7ff f8ea 	bl	80009e4 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	f241 3288 	movw	r2, #5000	; 0x1388
 800181a:	4293      	cmp	r3, r2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e053      	b.n	80018ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001822:	4b2d      	ldr	r3, [pc, #180]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f003 020c 	and.w	r2, r3, #12
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	429a      	cmp	r2, r3
 8001832:	d1eb      	bne.n	800180c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001834:	4b27      	ldr	r3, [pc, #156]	; (80018d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0307 	and.w	r3, r3, #7
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	429a      	cmp	r2, r3
 8001840:	d210      	bcs.n	8001864 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001842:	4b24      	ldr	r3, [pc, #144]	; (80018d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f023 0207 	bic.w	r2, r3, #7
 800184a:	4922      	ldr	r1, [pc, #136]	; (80018d4 <HAL_RCC_ClockConfig+0x1c0>)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	4313      	orrs	r3, r2
 8001850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001852:	4b20      	ldr	r3, [pc, #128]	; (80018d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	429a      	cmp	r2, r3
 800185e:	d001      	beq.n	8001864 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e032      	b.n	80018ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	2b00      	cmp	r3, #0
 800186e:	d008      	beq.n	8001882 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001870:	4b19      	ldr	r3, [pc, #100]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	4916      	ldr	r1, [pc, #88]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 800187e:	4313      	orrs	r3, r2
 8001880:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0308 	and.w	r3, r3, #8
 800188a:	2b00      	cmp	r3, #0
 800188c:	d009      	beq.n	80018a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800188e:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	490e      	ldr	r1, [pc, #56]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018a2:	f000 f821 	bl	80018e8 <HAL_RCC_GetSysClockFreq>
 80018a6:	4602      	mov	r2, r0
 80018a8:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	091b      	lsrs	r3, r3, #4
 80018ae:	f003 030f 	and.w	r3, r3, #15
 80018b2:	490a      	ldr	r1, [pc, #40]	; (80018dc <HAL_RCC_ClockConfig+0x1c8>)
 80018b4:	5ccb      	ldrb	r3, [r1, r3]
 80018b6:	fa22 f303 	lsr.w	r3, r2, r3
 80018ba:	4a09      	ldr	r2, [pc, #36]	; (80018e0 <HAL_RCC_ClockConfig+0x1cc>)
 80018bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018be:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <HAL_RCC_ClockConfig+0x1d0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7fe ff5c 	bl	8000780 <HAL_InitTick>

  return HAL_OK;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40022000 	.word	0x40022000
 80018d8:	40021000 	.word	0x40021000
 80018dc:	08005b0c 	.word	0x08005b0c
 80018e0:	20000000 	.word	0x20000000
 80018e4:	20000004 	.word	0x20000004

080018e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018e8:	b490      	push	{r4, r7}
 80018ea:	b08a      	sub	sp, #40	; 0x28
 80018ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80018ee:	4b29      	ldr	r3, [pc, #164]	; (8001994 <HAL_RCC_GetSysClockFreq+0xac>)
 80018f0:	1d3c      	adds	r4, r7, #4
 80018f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018f8:	f240 2301 	movw	r3, #513	; 0x201
 80018fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
 8001902:	2300      	movs	r3, #0
 8001904:	61bb      	str	r3, [r7, #24]
 8001906:	2300      	movs	r3, #0
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800190e:	2300      	movs	r3, #0
 8001910:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001912:	4b21      	ldr	r3, [pc, #132]	; (8001998 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	f003 030c 	and.w	r3, r3, #12
 800191e:	2b04      	cmp	r3, #4
 8001920:	d002      	beq.n	8001928 <HAL_RCC_GetSysClockFreq+0x40>
 8001922:	2b08      	cmp	r3, #8
 8001924:	d003      	beq.n	800192e <HAL_RCC_GetSysClockFreq+0x46>
 8001926:	e02b      	b.n	8001980 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001928:	4b1c      	ldr	r3, [pc, #112]	; (800199c <HAL_RCC_GetSysClockFreq+0xb4>)
 800192a:	623b      	str	r3, [r7, #32]
      break;
 800192c:	e02b      	b.n	8001986 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	0c9b      	lsrs	r3, r3, #18
 8001932:	f003 030f 	and.w	r3, r3, #15
 8001936:	3328      	adds	r3, #40	; 0x28
 8001938:	443b      	add	r3, r7
 800193a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800193e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d012      	beq.n	8001970 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800194a:	4b13      	ldr	r3, [pc, #76]	; (8001998 <HAL_RCC_GetSysClockFreq+0xb0>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	0c5b      	lsrs	r3, r3, #17
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	3328      	adds	r3, #40	; 0x28
 8001956:	443b      	add	r3, r7
 8001958:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800195c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	4a0e      	ldr	r2, [pc, #56]	; (800199c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001962:	fb03 f202 	mul.w	r2, r3, r2
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	fbb2 f3f3 	udiv	r3, r2, r3
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
 800196e:	e004      	b.n	800197a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	4a0b      	ldr	r2, [pc, #44]	; (80019a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001974:	fb02 f303 	mul.w	r3, r2, r3
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	623b      	str	r3, [r7, #32]
      break;
 800197e:	e002      	b.n	8001986 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001982:	623b      	str	r3, [r7, #32]
      break;
 8001984:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001986:	6a3b      	ldr	r3, [r7, #32]
}
 8001988:	4618      	mov	r0, r3
 800198a:	3728      	adds	r7, #40	; 0x28
 800198c:	46bd      	mov	sp, r7
 800198e:	bc90      	pop	{r4, r7}
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	08005af4 	.word	0x08005af4
 8001998:	40021000 	.word	0x40021000
 800199c:	007a1200 	.word	0x007a1200
 80019a0:	003d0900 	.word	0x003d0900

080019a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019a8:	4b02      	ldr	r3, [pc, #8]	; (80019b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80019aa:	681b      	ldr	r3, [r3, #0]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr
 80019b4:	20000000 	.word	0x20000000

080019b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019bc:	f7ff fff2 	bl	80019a4 <HAL_RCC_GetHCLKFreq>
 80019c0:	4602      	mov	r2, r0
 80019c2:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	0a1b      	lsrs	r3, r3, #8
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	4903      	ldr	r1, [pc, #12]	; (80019dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80019ce:	5ccb      	ldrb	r3, [r1, r3]
 80019d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40021000 	.word	0x40021000
 80019dc:	08005b1c 	.word	0x08005b1c

080019e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019e4:	f7ff ffde 	bl	80019a4 <HAL_RCC_GetHCLKFreq>
 80019e8:	4602      	mov	r2, r0
 80019ea:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	0adb      	lsrs	r3, r3, #11
 80019f0:	f003 0307 	and.w	r3, r3, #7
 80019f4:	4903      	ldr	r1, [pc, #12]	; (8001a04 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019f6:	5ccb      	ldrb	r3, [r1, r3]
 80019f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40021000 	.word	0x40021000
 8001a04:	08005b1c 	.word	0x08005b1c

08001a08 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	220f      	movs	r2, #15
 8001a16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a18:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <HAL_RCC_GetClockConfig+0x58>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 0203 	and.w	r2, r3, #3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a24:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <HAL_RCC_GetClockConfig+0x58>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a30:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <HAL_RCC_GetClockConfig+0x58>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001a3c:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <HAL_RCC_GetClockConfig+0x58>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	08db      	lsrs	r3, r3, #3
 8001a42:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a4a:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <HAL_RCC_GetClockConfig+0x5c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0207 	and.w	r2, r3, #7
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr
 8001a60:	40021000 	.word	0x40021000
 8001a64:	40022000 	.word	0x40022000

08001a68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a70:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <RCC_Delay+0x34>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a0a      	ldr	r2, [pc, #40]	; (8001aa0 <RCC_Delay+0x38>)
 8001a76:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7a:	0a5b      	lsrs	r3, r3, #9
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	fb02 f303 	mul.w	r3, r2, r3
 8001a82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a84:	bf00      	nop
  }
  while (Delay --);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	1e5a      	subs	r2, r3, #1
 8001a8a:	60fa      	str	r2, [r7, #12]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1f9      	bne.n	8001a84 <RCC_Delay+0x1c>
}
 8001a90:	bf00      	nop
 8001a92:	bf00      	nop
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr
 8001a9c:	20000000 	.word	0x20000000
 8001aa0:	10624dd3 	.word	0x10624dd3

08001aa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e041      	b.n	8001b3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d106      	bne.n	8001ad0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 f839 	bl	8001b42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3304      	adds	r3, #4
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	f000 f9c2 	bl	8001e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr

08001b54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d001      	beq.n	8001b6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e044      	b.n	8001bf6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2202      	movs	r2, #2
 8001b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	68da      	ldr	r2, [r3, #12]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f042 0201 	orr.w	r2, r2, #1
 8001b82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a1d      	ldr	r2, [pc, #116]	; (8001c00 <HAL_TIM_Base_Start_IT+0xac>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d018      	beq.n	8001bc0 <HAL_TIM_Base_Start_IT+0x6c>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a1c      	ldr	r2, [pc, #112]	; (8001c04 <HAL_TIM_Base_Start_IT+0xb0>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d013      	beq.n	8001bc0 <HAL_TIM_Base_Start_IT+0x6c>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ba0:	d00e      	beq.n	8001bc0 <HAL_TIM_Base_Start_IT+0x6c>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a18      	ldr	r2, [pc, #96]	; (8001c08 <HAL_TIM_Base_Start_IT+0xb4>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d009      	beq.n	8001bc0 <HAL_TIM_Base_Start_IT+0x6c>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a16      	ldr	r2, [pc, #88]	; (8001c0c <HAL_TIM_Base_Start_IT+0xb8>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d004      	beq.n	8001bc0 <HAL_TIM_Base_Start_IT+0x6c>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a15      	ldr	r2, [pc, #84]	; (8001c10 <HAL_TIM_Base_Start_IT+0xbc>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d111      	bne.n	8001be4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2b06      	cmp	r3, #6
 8001bd0:	d010      	beq.n	8001bf4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f042 0201 	orr.w	r2, r2, #1
 8001be0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001be2:	e007      	b.n	8001bf4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f042 0201 	orr.w	r2, r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3714      	adds	r7, #20
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr
 8001c00:	40012c00 	.word	0x40012c00
 8001c04:	40013400 	.word	0x40013400
 8001c08:	40000400 	.word	0x40000400
 8001c0c:	40000800 	.word	0x40000800
 8001c10:	40000c00 	.word	0x40000c00

08001c14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d122      	bne.n	8001c70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d11b      	bne.n	8001c70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f06f 0202 	mvn.w	r2, #2
 8001c40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2201      	movs	r2, #1
 8001c46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	f003 0303 	and.w	r3, r3, #3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 f8ed 	bl	8001e36 <HAL_TIM_IC_CaptureCallback>
 8001c5c:	e005      	b.n	8001c6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 f8e0 	bl	8001e24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 f8ef 	bl	8001e48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	f003 0304 	and.w	r3, r3, #4
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	d122      	bne.n	8001cc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	2b04      	cmp	r3, #4
 8001c8a:	d11b      	bne.n	8001cc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f06f 0204 	mvn.w	r2, #4
 8001c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2202      	movs	r2, #2
 8001c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 f8c3 	bl	8001e36 <HAL_TIM_IC_CaptureCallback>
 8001cb0:	e005      	b.n	8001cbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f8b6 	bl	8001e24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 f8c5 	bl	8001e48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	f003 0308 	and.w	r3, r3, #8
 8001cce:	2b08      	cmp	r3, #8
 8001cd0:	d122      	bne.n	8001d18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	f003 0308 	and.w	r3, r3, #8
 8001cdc:	2b08      	cmp	r3, #8
 8001cde:	d11b      	bne.n	8001d18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f06f 0208 	mvn.w	r2, #8
 8001ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2204      	movs	r2, #4
 8001cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	f003 0303 	and.w	r3, r3, #3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f899 	bl	8001e36 <HAL_TIM_IC_CaptureCallback>
 8001d04:	e005      	b.n	8001d12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f88c 	bl	8001e24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 f89b 	bl	8001e48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	f003 0310 	and.w	r3, r3, #16
 8001d22:	2b10      	cmp	r3, #16
 8001d24:	d122      	bne.n	8001d6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	f003 0310 	and.w	r3, r3, #16
 8001d30:	2b10      	cmp	r3, #16
 8001d32:	d11b      	bne.n	8001d6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f06f 0210 	mvn.w	r2, #16
 8001d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2208      	movs	r2, #8
 8001d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f86f 	bl	8001e36 <HAL_TIM_IC_CaptureCallback>
 8001d58:	e005      	b.n	8001d66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f862 	bl	8001e24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 f871 	bl	8001e48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d10e      	bne.n	8001d98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d107      	bne.n	8001d98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f06f 0201 	mvn.w	r2, #1
 8001d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7fe fc50 	bl	8000638 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da2:	2b80      	cmp	r3, #128	; 0x80
 8001da4:	d10e      	bne.n	8001dc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db0:	2b80      	cmp	r3, #128	; 0x80
 8001db2:	d107      	bne.n	8001dc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f8d7 	bl	8001f72 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dce:	2b40      	cmp	r3, #64	; 0x40
 8001dd0:	d10e      	bne.n	8001df0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ddc:	2b40      	cmp	r3, #64	; 0x40
 8001dde:	d107      	bne.n	8001df0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f835 	bl	8001e5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	f003 0320 	and.w	r3, r3, #32
 8001dfa:	2b20      	cmp	r3, #32
 8001dfc:	d10e      	bne.n	8001e1c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	f003 0320 	and.w	r3, r3, #32
 8001e08:	2b20      	cmp	r3, #32
 8001e0a:	d107      	bne.n	8001e1c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f06f 0220 	mvn.w	r2, #32
 8001e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f8a2 	bl	8001f60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e1c:	bf00      	nop
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bc80      	pop	{r7}
 8001e34:	4770      	bx	lr

08001e36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr

08001e48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bc80      	pop	{r7}
 8001e58:	4770      	bx	lr

08001e5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr

08001e6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a33      	ldr	r2, [pc, #204]	; (8001f4c <TIM_Base_SetConfig+0xe0>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d013      	beq.n	8001eac <TIM_Base_SetConfig+0x40>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a32      	ldr	r2, [pc, #200]	; (8001f50 <TIM_Base_SetConfig+0xe4>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d00f      	beq.n	8001eac <TIM_Base_SetConfig+0x40>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e92:	d00b      	beq.n	8001eac <TIM_Base_SetConfig+0x40>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a2f      	ldr	r2, [pc, #188]	; (8001f54 <TIM_Base_SetConfig+0xe8>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d007      	beq.n	8001eac <TIM_Base_SetConfig+0x40>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a2e      	ldr	r2, [pc, #184]	; (8001f58 <TIM_Base_SetConfig+0xec>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d003      	beq.n	8001eac <TIM_Base_SetConfig+0x40>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a2d      	ldr	r2, [pc, #180]	; (8001f5c <TIM_Base_SetConfig+0xf0>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d108      	bne.n	8001ebe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a22      	ldr	r2, [pc, #136]	; (8001f4c <TIM_Base_SetConfig+0xe0>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d013      	beq.n	8001eee <TIM_Base_SetConfig+0x82>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a21      	ldr	r2, [pc, #132]	; (8001f50 <TIM_Base_SetConfig+0xe4>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d00f      	beq.n	8001eee <TIM_Base_SetConfig+0x82>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ed4:	d00b      	beq.n	8001eee <TIM_Base_SetConfig+0x82>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a1e      	ldr	r2, [pc, #120]	; (8001f54 <TIM_Base_SetConfig+0xe8>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d007      	beq.n	8001eee <TIM_Base_SetConfig+0x82>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a1d      	ldr	r2, [pc, #116]	; (8001f58 <TIM_Base_SetConfig+0xec>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d003      	beq.n	8001eee <TIM_Base_SetConfig+0x82>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a1c      	ldr	r2, [pc, #112]	; (8001f5c <TIM_Base_SetConfig+0xf0>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d108      	bne.n	8001f00 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a09      	ldr	r2, [pc, #36]	; (8001f4c <TIM_Base_SetConfig+0xe0>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d003      	beq.n	8001f34 <TIM_Base_SetConfig+0xc8>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a08      	ldr	r2, [pc, #32]	; (8001f50 <TIM_Base_SetConfig+0xe4>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d103      	bne.n	8001f3c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	691a      	ldr	r2, [r3, #16]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	615a      	str	r2, [r3, #20]
}
 8001f42:	bf00      	nop
 8001f44:	3714      	adds	r7, #20
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr
 8001f4c:	40012c00 	.word	0x40012c00
 8001f50:	40013400 	.word	0x40013400
 8001f54:	40000400 	.word	0x40000400
 8001f58:	40000800 	.word	0x40000800
 8001f5c:	40000c00 	.word	0x40000c00

08001f60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bc80      	pop	{r7}
 8001f70:	4770      	bx	lr

08001f72 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr

08001f84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e03f      	b.n	8002016 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d106      	bne.n	8001fb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7fe fb94 	bl	80006d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2224      	movs	r2, #36	; 0x24
 8001fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68da      	ldr	r2, [r3, #12]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 fc25 	bl	8002818 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	691a      	ldr	r2, [r3, #16]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	695a      	ldr	r2, [r3, #20]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68da      	ldr	r2, [r3, #12]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ffc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2220      	movs	r2, #32
 8002008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2220      	movs	r2, #32
 8002010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b08a      	sub	sp, #40	; 0x28
 8002022:	af02      	add	r7, sp, #8
 8002024:	60f8      	str	r0, [r7, #12]
 8002026:	60b9      	str	r1, [r7, #8]
 8002028:	603b      	str	r3, [r7, #0]
 800202a:	4613      	mov	r3, r2
 800202c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b20      	cmp	r3, #32
 800203c:	d17c      	bne.n	8002138 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d002      	beq.n	800204a <HAL_UART_Transmit+0x2c>
 8002044:	88fb      	ldrh	r3, [r7, #6]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e075      	b.n	800213a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002054:	2b01      	cmp	r3, #1
 8002056:	d101      	bne.n	800205c <HAL_UART_Transmit+0x3e>
 8002058:	2302      	movs	r3, #2
 800205a:	e06e      	b.n	800213a <HAL_UART_Transmit+0x11c>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2221      	movs	r2, #33	; 0x21
 800206e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002072:	f7fe fcb7 	bl	80009e4 <HAL_GetTick>
 8002076:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	88fa      	ldrh	r2, [r7, #6]
 800207c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	88fa      	ldrh	r2, [r7, #6]
 8002082:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800208c:	d108      	bne.n	80020a0 <HAL_UART_Transmit+0x82>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d104      	bne.n	80020a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002096:	2300      	movs	r3, #0
 8002098:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	61bb      	str	r3, [r7, #24]
 800209e:	e003      	b.n	80020a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80020b0:	e02a      	b.n	8002108 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	2200      	movs	r2, #0
 80020ba:	2180      	movs	r1, #128	; 0x80
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	f000 fa11 	bl	80024e4 <UART_WaitOnFlagUntilTimeout>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e036      	b.n	800213a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d10b      	bne.n	80020ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	881b      	ldrh	r3, [r3, #0]
 80020d6:	461a      	mov	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	3302      	adds	r3, #2
 80020e6:	61bb      	str	r3, [r7, #24]
 80020e8:	e007      	b.n	80020fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	781a      	ldrb	r2, [r3, #0]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	3301      	adds	r3, #1
 80020f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020fe:	b29b      	uxth	r3, r3
 8002100:	3b01      	subs	r3, #1
 8002102:	b29a      	uxth	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800210c:	b29b      	uxth	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1cf      	bne.n	80020b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	2200      	movs	r2, #0
 800211a:	2140      	movs	r1, #64	; 0x40
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f000 f9e1 	bl	80024e4 <UART_WaitOnFlagUntilTimeout>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e006      	b.n	800213a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2220      	movs	r2, #32
 8002130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002134:	2300      	movs	r3, #0
 8002136:	e000      	b.n	800213a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002138:	2302      	movs	r3, #2
  }
}
 800213a:	4618      	mov	r0, r3
 800213c:	3720      	adds	r7, #32
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
	...

08002144 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b08a      	sub	sp, #40	; 0x28
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002164:	2300      	movs	r3, #0
 8002166:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10d      	bne.n	8002196 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	f003 0320 	and.w	r3, r3, #32
 8002180:	2b00      	cmp	r3, #0
 8002182:	d008      	beq.n	8002196 <HAL_UART_IRQHandler+0x52>
 8002184:	6a3b      	ldr	r3, [r7, #32]
 8002186:	f003 0320 	and.w	r3, r3, #32
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 fa99 	bl	80026c6 <UART_Receive_IT>
      return;
 8002194:	e17b      	b.n	800248e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	2b00      	cmp	r3, #0
 800219a:	f000 80b1 	beq.w	8002300 <HAL_UART_IRQHandler+0x1bc>
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d105      	bne.n	80021b4 <HAL_UART_IRQHandler+0x70>
 80021a8:	6a3b      	ldr	r3, [r7, #32]
 80021aa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 80a6 	beq.w	8002300 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00a      	beq.n	80021d4 <HAL_UART_IRQHandler+0x90>
 80021be:	6a3b      	ldr	r3, [r7, #32]
 80021c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d005      	beq.n	80021d4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021cc:	f043 0201 	orr.w	r2, r3, #1
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d6:	f003 0304 	and.w	r3, r3, #4
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00a      	beq.n	80021f4 <HAL_UART_IRQHandler+0xb0>
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d005      	beq.n	80021f4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	f043 0202 	orr.w	r2, r3, #2
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00a      	beq.n	8002214 <HAL_UART_IRQHandler+0xd0>
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b00      	cmp	r3, #0
 8002206:	d005      	beq.n	8002214 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220c:	f043 0204 	orr.w	r2, r3, #4
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002216:	f003 0308 	and.w	r3, r3, #8
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00f      	beq.n	800223e <HAL_UART_IRQHandler+0xfa>
 800221e:	6a3b      	ldr	r3, [r7, #32]
 8002220:	f003 0320 	and.w	r3, r3, #32
 8002224:	2b00      	cmp	r3, #0
 8002226:	d104      	bne.n	8002232 <HAL_UART_IRQHandler+0xee>
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d005      	beq.n	800223e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f043 0208 	orr.w	r2, r3, #8
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 811e 	beq.w	8002484 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	f003 0320 	and.w	r3, r3, #32
 800224e:	2b00      	cmp	r3, #0
 8002250:	d007      	beq.n	8002262 <HAL_UART_IRQHandler+0x11e>
 8002252:	6a3b      	ldr	r3, [r7, #32]
 8002254:	f003 0320 	and.w	r3, r3, #32
 8002258:	2b00      	cmp	r3, #0
 800225a:	d002      	beq.n	8002262 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 fa32 	bl	80026c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800226c:	2b00      	cmp	r3, #0
 800226e:	bf14      	ite	ne
 8002270:	2301      	movne	r3, #1
 8002272:	2300      	moveq	r3, #0
 8002274:	b2db      	uxtb	r3, r3
 8002276:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	f003 0308 	and.w	r3, r3, #8
 8002280:	2b00      	cmp	r3, #0
 8002282:	d102      	bne.n	800228a <HAL_UART_IRQHandler+0x146>
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d031      	beq.n	80022ee <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f974 	bl	8002578 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800229a:	2b00      	cmp	r3, #0
 800229c:	d023      	beq.n	80022e6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	695a      	ldr	r2, [r3, #20]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022ac:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d013      	beq.n	80022de <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ba:	4a76      	ldr	r2, [pc, #472]	; (8002494 <HAL_UART_IRQHandler+0x350>)
 80022bc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7fe fcd6 	bl	8000c74 <HAL_DMA_Abort_IT>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d016      	beq.n	80022fc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022d8:	4610      	mov	r0, r2
 80022da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022dc:	e00e      	b.n	80022fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f8ec 	bl	80024bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022e4:	e00a      	b.n	80022fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f8e8 	bl	80024bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022ec:	e006      	b.n	80022fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 f8e4 	bl	80024bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80022fa:	e0c3      	b.n	8002484 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022fc:	bf00      	nop
    return;
 80022fe:	e0c1      	b.n	8002484 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002304:	2b01      	cmp	r3, #1
 8002306:	f040 80a1 	bne.w	800244c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	f003 0310 	and.w	r3, r3, #16
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 809b 	beq.w	800244c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002316:	6a3b      	ldr	r3, [r7, #32]
 8002318:	f003 0310 	and.w	r3, r3, #16
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 8095 	beq.w	800244c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002322:	2300      	movs	r3, #0
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002342:	2b00      	cmp	r3, #0
 8002344:	d04e      	beq.n	80023e4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002350:	8a3b      	ldrh	r3, [r7, #16]
 8002352:	2b00      	cmp	r3, #0
 8002354:	f000 8098 	beq.w	8002488 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800235c:	8a3a      	ldrh	r2, [r7, #16]
 800235e:	429a      	cmp	r2, r3
 8002360:	f080 8092 	bcs.w	8002488 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	8a3a      	ldrh	r2, [r7, #16]
 8002368:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	2b20      	cmp	r3, #32
 8002372:	d02b      	beq.n	80023cc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68da      	ldr	r2, [r3, #12]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002382:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	695a      	ldr	r2, [r3, #20]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 0201 	bic.w	r2, r2, #1
 8002392:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	695a      	ldr	r2, [r3, #20]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023a2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2220      	movs	r2, #32
 80023a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68da      	ldr	r2, [r3, #12]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 0210 	bic.w	r2, r2, #16
 80023c0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7fe fc19 	bl	8000bfe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	b29b      	uxth	r3, r3
 80023da:	4619      	mov	r1, r3
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 f876 	bl	80024ce <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80023e2:	e051      	b.n	8002488 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d047      	beq.n	800248c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80023fc:	8a7b      	ldrh	r3, [r7, #18]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d044      	beq.n	800248c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68da      	ldr	r2, [r3, #12]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002410:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	695a      	ldr	r2, [r3, #20]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 0201 	bic.w	r2, r2, #1
 8002420:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2220      	movs	r2, #32
 8002426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68da      	ldr	r2, [r3, #12]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 0210 	bic.w	r2, r2, #16
 800243e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002440:	8a7b      	ldrh	r3, [r7, #18]
 8002442:	4619      	mov	r1, r3
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 f842 	bl	80024ce <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800244a:	e01f      	b.n	800248c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002452:	2b00      	cmp	r3, #0
 8002454:	d008      	beq.n	8002468 <HAL_UART_IRQHandler+0x324>
 8002456:	6a3b      	ldr	r3, [r7, #32]
 8002458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800245c:	2b00      	cmp	r3, #0
 800245e:	d003      	beq.n	8002468 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 f8c9 	bl	80025f8 <UART_Transmit_IT>
    return;
 8002466:	e012      	b.n	800248e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00d      	beq.n	800248e <HAL_UART_IRQHandler+0x34a>
 8002472:	6a3b      	ldr	r3, [r7, #32]
 8002474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002478:	2b00      	cmp	r3, #0
 800247a:	d008      	beq.n	800248e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 f90a 	bl	8002696 <UART_EndTransmit_IT>
    return;
 8002482:	e004      	b.n	800248e <HAL_UART_IRQHandler+0x34a>
    return;
 8002484:	bf00      	nop
 8002486:	e002      	b.n	800248e <HAL_UART_IRQHandler+0x34a>
      return;
 8002488:	bf00      	nop
 800248a:	e000      	b.n	800248e <HAL_UART_IRQHandler+0x34a>
      return;
 800248c:	bf00      	nop
  }
}
 800248e:	3728      	adds	r7, #40	; 0x28
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	080025d1 	.word	0x080025d1

08002498 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr

080024aa <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr

080024bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr

080024ce <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	460b      	mov	r3, r1
 80024d8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr

080024e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	603b      	str	r3, [r7, #0]
 80024f0:	4613      	mov	r3, r2
 80024f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024f4:	e02c      	b.n	8002550 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fc:	d028      	beq.n	8002550 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d007      	beq.n	8002514 <UART_WaitOnFlagUntilTimeout+0x30>
 8002504:	f7fe fa6e 	bl	80009e4 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	429a      	cmp	r2, r3
 8002512:	d21d      	bcs.n	8002550 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002522:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	695a      	ldr	r2, [r3, #20]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 0201 	bic.w	r2, r2, #1
 8002532:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2220      	movs	r2, #32
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2220      	movs	r2, #32
 8002540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e00f      	b.n	8002570 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	4013      	ands	r3, r2
 800255a:	68ba      	ldr	r2, [r7, #8]
 800255c:	429a      	cmp	r2, r3
 800255e:	bf0c      	ite	eq
 8002560:	2301      	moveq	r3, #1
 8002562:	2300      	movne	r3, #0
 8002564:	b2db      	uxtb	r3, r3
 8002566:	461a      	mov	r2, r3
 8002568:	79fb      	ldrb	r3, [r7, #7]
 800256a:	429a      	cmp	r2, r3
 800256c:	d0c3      	beq.n	80024f6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68da      	ldr	r2, [r3, #12]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800258e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	695a      	ldr	r2, [r3, #20]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 0201 	bic.w	r2, r2, #1
 800259e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d107      	bne.n	80025b8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68da      	ldr	r2, [r3, #12]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 0210 	bic.w	r2, r2, #16
 80025b6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2220      	movs	r2, #32
 80025bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr

080025d0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f7ff ff66 	bl	80024bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80025f0:	bf00      	nop
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002606:	b2db      	uxtb	r3, r3
 8002608:	2b21      	cmp	r3, #33	; 0x21
 800260a:	d13e      	bne.n	800268a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002614:	d114      	bne.n	8002640 <UART_Transmit_IT+0x48>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d110      	bne.n	8002640 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	881b      	ldrh	r3, [r3, #0]
 8002628:	461a      	mov	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002632:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	1c9a      	adds	r2, r3, #2
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	621a      	str	r2, [r3, #32]
 800263e:	e008      	b.n	8002652 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	1c59      	adds	r1, r3, #1
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	6211      	str	r1, [r2, #32]
 800264a:	781a      	ldrb	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002656:	b29b      	uxth	r3, r3
 8002658:	3b01      	subs	r3, #1
 800265a:	b29b      	uxth	r3, r3
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	4619      	mov	r1, r3
 8002660:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10f      	bne.n	8002686 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68da      	ldr	r2, [r3, #12]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002674:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68da      	ldr	r2, [r3, #12]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002684:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002686:	2300      	movs	r3, #0
 8002688:	e000      	b.n	800268c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800268a:	2302      	movs	r3, #2
  }
}
 800268c:	4618      	mov	r0, r3
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	bc80      	pop	{r7}
 8002694:	4770      	bx	lr

08002696 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b082      	sub	sp, #8
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68da      	ldr	r2, [r3, #12]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2220      	movs	r2, #32
 80026b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7ff feee 	bl	8002498 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b086      	sub	sp, #24
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b22      	cmp	r3, #34	; 0x22
 80026d8:	f040 8099 	bne.w	800280e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026e4:	d117      	bne.n	8002716 <UART_Receive_IT+0x50>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d113      	bne.n	8002716 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80026ee:	2300      	movs	r3, #0
 80026f0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	b29b      	uxth	r3, r3
 8002700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002704:	b29a      	uxth	r2, r3
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270e:	1c9a      	adds	r2, r3, #2
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	629a      	str	r2, [r3, #40]	; 0x28
 8002714:	e026      	b.n	8002764 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800271c:	2300      	movs	r3, #0
 800271e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002728:	d007      	beq.n	800273a <UART_Receive_IT+0x74>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10a      	bne.n	8002748 <UART_Receive_IT+0x82>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d106      	bne.n	8002748 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	b2da      	uxtb	r2, r3
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	701a      	strb	r2, [r3, #0]
 8002746:	e008      	b.n	800275a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	b2db      	uxtb	r3, r3
 8002750:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002754:	b2da      	uxtb	r2, r3
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002768:	b29b      	uxth	r3, r3
 800276a:	3b01      	subs	r3, #1
 800276c:	b29b      	uxth	r3, r3
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	4619      	mov	r1, r3
 8002772:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002774:	2b00      	cmp	r3, #0
 8002776:	d148      	bne.n	800280a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68da      	ldr	r2, [r3, #12]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f022 0220 	bic.w	r2, r2, #32
 8002786:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68da      	ldr	r2, [r3, #12]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002796:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	695a      	ldr	r2, [r3, #20]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0201 	bic.w	r2, r2, #1
 80027a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2220      	movs	r2, #32
 80027ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d123      	bne.n	8002800 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68da      	ldr	r2, [r3, #12]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 0210 	bic.w	r2, r2, #16
 80027cc:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0310 	and.w	r3, r3, #16
 80027d8:	2b10      	cmp	r3, #16
 80027da:	d10a      	bne.n	80027f2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80027dc:	2300      	movs	r3, #0
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80027f6:	4619      	mov	r1, r3
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7ff fe68 	bl	80024ce <HAL_UARTEx_RxEventCallback>
 80027fe:	e002      	b.n	8002806 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f7ff fe52 	bl	80024aa <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002806:	2300      	movs	r3, #0
 8002808:	e002      	b.n	8002810 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800280a:	2300      	movs	r3, #0
 800280c:	e000      	b.n	8002810 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800280e:	2302      	movs	r3, #2
  }
}
 8002810:	4618      	mov	r0, r3
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	430a      	orrs	r2, r1
 8002834:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689a      	ldr	r2, [r3, #8]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	431a      	orrs	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	4313      	orrs	r3, r2
 8002846:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002852:	f023 030c 	bic.w	r3, r3, #12
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	6812      	ldr	r2, [r2, #0]
 800285a:	68b9      	ldr	r1, [r7, #8]
 800285c:	430b      	orrs	r3, r1
 800285e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	699a      	ldr	r2, [r3, #24]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	430a      	orrs	r2, r1
 8002874:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a2c      	ldr	r2, [pc, #176]	; (800292c <UART_SetConfig+0x114>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d103      	bne.n	8002888 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002880:	f7ff f8ae 	bl	80019e0 <HAL_RCC_GetPCLK2Freq>
 8002884:	60f8      	str	r0, [r7, #12]
 8002886:	e002      	b.n	800288e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002888:	f7ff f896 	bl	80019b8 <HAL_RCC_GetPCLK1Freq>
 800288c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	4613      	mov	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	009a      	lsls	r2, r3, #2
 8002898:	441a      	add	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a4:	4a22      	ldr	r2, [pc, #136]	; (8002930 <UART_SetConfig+0x118>)
 80028a6:	fba2 2303 	umull	r2, r3, r2, r3
 80028aa:	095b      	lsrs	r3, r3, #5
 80028ac:	0119      	lsls	r1, r3, #4
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	4613      	mov	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	009a      	lsls	r2, r3, #2
 80028b8:	441a      	add	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80028c4:	4b1a      	ldr	r3, [pc, #104]	; (8002930 <UART_SetConfig+0x118>)
 80028c6:	fba3 0302 	umull	r0, r3, r3, r2
 80028ca:	095b      	lsrs	r3, r3, #5
 80028cc:	2064      	movs	r0, #100	; 0x64
 80028ce:	fb00 f303 	mul.w	r3, r0, r3
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	011b      	lsls	r3, r3, #4
 80028d6:	3332      	adds	r3, #50	; 0x32
 80028d8:	4a15      	ldr	r2, [pc, #84]	; (8002930 <UART_SetConfig+0x118>)
 80028da:	fba2 2303 	umull	r2, r3, r2, r3
 80028de:	095b      	lsrs	r3, r3, #5
 80028e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028e4:	4419      	add	r1, r3
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	4613      	mov	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	009a      	lsls	r2, r3, #2
 80028f0:	441a      	add	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80028fc:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <UART_SetConfig+0x118>)
 80028fe:	fba3 0302 	umull	r0, r3, r3, r2
 8002902:	095b      	lsrs	r3, r3, #5
 8002904:	2064      	movs	r0, #100	; 0x64
 8002906:	fb00 f303 	mul.w	r3, r0, r3
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	011b      	lsls	r3, r3, #4
 800290e:	3332      	adds	r3, #50	; 0x32
 8002910:	4a07      	ldr	r2, [pc, #28]	; (8002930 <UART_SetConfig+0x118>)
 8002912:	fba2 2303 	umull	r2, r3, r2, r3
 8002916:	095b      	lsrs	r3, r3, #5
 8002918:	f003 020f 	and.w	r2, r3, #15
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	440a      	add	r2, r1
 8002922:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002924:	bf00      	nop
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40013800 	.word	0x40013800
 8002930:	51eb851f 	.word	0x51eb851f

08002934 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800293e:	2300      	movs	r3, #0
 8002940:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002942:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002946:	2b84      	cmp	r3, #132	; 0x84
 8002948:	d005      	beq.n	8002956 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800294a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	4413      	add	r3, r2
 8002952:	3303      	adds	r3, #3
 8002954:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002956:	68fb      	ldr	r3, [r7, #12]
}
 8002958:	4618      	mov	r0, r3
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	bc80      	pop	{r7}
 8002960:	4770      	bx	lr

08002962 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002968:	f3ef 8305 	mrs	r3, IPSR
 800296c:	607b      	str	r3, [r7, #4]
  return(result);
 800296e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002970:	2b00      	cmp	r3, #0
 8002972:	bf14      	ite	ne
 8002974:	2301      	movne	r3, #1
 8002976:	2300      	moveq	r3, #0
 8002978:	b2db      	uxtb	r3, r3
}
 800297a:	4618      	mov	r0, r3
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr

08002984 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002988:	f001 f97a 	bl	8003c80 <vTaskStartScheduler>
  
  return osOK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	bd80      	pop	{r7, pc}

08002992 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002992:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002994:	b089      	sub	sp, #36	; 0x24
 8002996:	af04      	add	r7, sp, #16
 8002998:	6078      	str	r0, [r7, #4]
 800299a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	695b      	ldr	r3, [r3, #20]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d020      	beq.n	80029e6 <osThreadCreate+0x54>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d01c      	beq.n	80029e6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685c      	ldr	r4, [r3, #4]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	691e      	ldr	r6, [r3, #16]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff ffb8 	bl	8002934 <makeFreeRtosPriority>
 80029c4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029ce:	9202      	str	r2, [sp, #8]
 80029d0:	9301      	str	r3, [sp, #4]
 80029d2:	9100      	str	r1, [sp, #0]
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	4632      	mov	r2, r6
 80029d8:	4629      	mov	r1, r5
 80029da:	4620      	mov	r0, r4
 80029dc:	f000 ff91 	bl	8003902 <xTaskCreateStatic>
 80029e0:	4603      	mov	r3, r0
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	e01c      	b.n	8002a20 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685c      	ldr	r4, [r3, #4]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029f2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff ff9a 	bl	8002934 <makeFreeRtosPriority>
 8002a00:	4602      	mov	r2, r0
 8002a02:	f107 030c 	add.w	r3, r7, #12
 8002a06:	9301      	str	r3, [sp, #4]
 8002a08:	9200      	str	r2, [sp, #0]
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	4632      	mov	r2, r6
 8002a0e:	4629      	mov	r1, r5
 8002a10:	4620      	mov	r0, r4
 8002a12:	f000 ffd2 	bl	80039ba <xTaskCreate>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d001      	beq.n	8002a20 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	e000      	b.n	8002a22 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002a20:	68fb      	ldr	r3, [r7, #12]
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3714      	adds	r7, #20
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a2a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b084      	sub	sp, #16
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <osDelay+0x16>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	e000      	b.n	8002a42 <osDelay+0x18>
 8002a40:	2301      	movs	r3, #1
 8002a42:	4618      	mov	r0, r3
 8002a44:	f001 f8e8 	bl	8003c18 <vTaskDelay>
  
  return osOK;
 8002a48:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b086      	sub	sp, #24
 8002a56:	af02      	add	r7, sp, #8
 8002a58:	6078      	str	r0, [r7, #4]
 8002a5a:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d016      	beq.n	8002a92 <osSemaphoreCreate+0x40>
    if (count == 1) {
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d10a      	bne.n	8002a80 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2203      	movs	r2, #3
 8002a70:	9200      	str	r2, [sp, #0]
 8002a72:	2200      	movs	r2, #0
 8002a74:	2100      	movs	r1, #0
 8002a76:	2001      	movs	r0, #1
 8002a78:	f000 f9c6 	bl	8002e08 <xQueueGenericCreateStatic>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	e023      	b.n	8002ac8 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 8002a80:	6838      	ldr	r0, [r7, #0]
 8002a82:	6839      	ldr	r1, [r7, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	461a      	mov	r2, r3
 8002a8a:	f000 fa91 	bl	8002fb0 <xQueueCreateCountingSemaphoreStatic>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	e01a      	b.n	8002ac8 <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d110      	bne.n	8002aba <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 8002a98:	2203      	movs	r2, #3
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	2001      	movs	r0, #1
 8002a9e:	f000 fa2a 	bl	8002ef6 <xQueueGenericCreate>
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d005      	beq.n	8002ab6 <osSemaphoreCreate+0x64>
 8002aaa:	2300      	movs	r3, #0
 8002aac:	2200      	movs	r2, #0
 8002aae:	2100      	movs	r1, #0
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f000 fae7 	bl	8003084 <xQueueGenericSend>
      return sema;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	e006      	b.n	8002ac8 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	4611      	mov	r1, r2
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f000 faac 	bl	800301e <xQueueCreateCountingSemaphore>
 8002ac6:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002ada:	2300      	movs	r3, #0
 8002adc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8002ae4:	2380      	movs	r3, #128	; 0x80
 8002ae6:	e03a      	b.n	8002b5e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af2:	d103      	bne.n	8002afc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8002af4:	f04f 33ff 	mov.w	r3, #4294967295
 8002af8:	60fb      	str	r3, [r7, #12]
 8002afa:	e009      	b.n	8002b10 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d006      	beq.n	8002b10 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <osSemaphoreWait+0x40>
      ticks = 1;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8002b10:	f7ff ff27 	bl	8002962 <inHandlerMode>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d017      	beq.n	8002b4a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002b1a:	f107 0308 	add.w	r3, r7, #8
 8002b1e:	461a      	mov	r2, r3
 8002b20:	2100      	movs	r1, #0
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 fd46 	bl	80035b4 <xQueueReceiveFromISR>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d001      	beq.n	8002b32 <osSemaphoreWait+0x62>
      return osErrorOS;
 8002b2e:	23ff      	movs	r3, #255	; 0xff
 8002b30:	e015      	b.n	8002b5e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d011      	beq.n	8002b5c <osSemaphoreWait+0x8c>
 8002b38:	4b0b      	ldr	r3, [pc, #44]	; (8002b68 <osSemaphoreWait+0x98>)
 8002b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	f3bf 8f4f 	dsb	sy
 8002b44:	f3bf 8f6f 	isb	sy
 8002b48:	e008      	b.n	8002b5c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8002b4a:	68f9      	ldr	r1, [r7, #12]
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 fc25 	bl	800339c <xQueueSemaphoreTake>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d001      	beq.n	8002b5c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8002b58:	23ff      	movs	r3, #255	; 0xff
 8002b5a:	e000      	b.n	8002b5e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	e000ed04 	.word	0xe000ed04

08002b6c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002b74:	2300      	movs	r3, #0
 8002b76:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8002b7c:	f7ff fef1 	bl	8002962 <inHandlerMode>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d016      	beq.n	8002bb4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002b86:	f107 0308 	add.w	r3, r7, #8
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 fb77 	bl	8003280 <xQueueGiveFromISR>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d001      	beq.n	8002b9c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8002b98:	23ff      	movs	r3, #255	; 0xff
 8002b9a:	e017      	b.n	8002bcc <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d013      	beq.n	8002bca <osSemaphoreRelease+0x5e>
 8002ba2:	4b0c      	ldr	r3, [pc, #48]	; (8002bd4 <osSemaphoreRelease+0x68>)
 8002ba4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ba8:	601a      	str	r2, [r3, #0]
 8002baa:	f3bf 8f4f 	dsb	sy
 8002bae:	f3bf 8f6f 	isb	sy
 8002bb2:	e00a      	b.n	8002bca <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	2100      	movs	r1, #0
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 fa62 	bl	8003084 <xQueueGenericSend>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d001      	beq.n	8002bca <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8002bc6:	23ff      	movs	r3, #255	; 0xff
 8002bc8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8002bca:	68fb      	ldr	r3, [r7, #12]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	e000ed04 	.word	0xe000ed04

08002bd8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f103 0208 	add.w	r2, r3, #8
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f103 0208 	add.w	r2, r3, #8
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f103 0208 	add.w	r2, r3, #8
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bc80      	pop	{r7}
 8002c14:	4770      	bx	lr

08002c16 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bc80      	pop	{r7}
 8002c2c:	4770      	bx	lr

08002c2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b085      	sub	sp, #20
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
 8002c36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	1c5a      	adds	r2, r3, #1
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	601a      	str	r2, [r3, #0]
}
 8002c6a:	bf00      	nop
 8002c6c:	3714      	adds	r7, #20
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr

08002c74 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c8a:	d103      	bne.n	8002c94 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	60fb      	str	r3, [r7, #12]
 8002c92:	e00c      	b.n	8002cae <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3308      	adds	r3, #8
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	e002      	b.n	8002ca2 <vListInsert+0x2e>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	60fb      	str	r3, [r7, #12]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68ba      	ldr	r2, [r7, #8]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d2f6      	bcs.n	8002c9c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	1c5a      	adds	r2, r3, #1
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	601a      	str	r2, [r3, #0]
}
 8002cda:	bf00      	nop
 8002cdc:	3714      	adds	r7, #20
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bc80      	pop	{r7}
 8002ce2:	4770      	bx	lr

08002ce4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6892      	ldr	r2, [r2, #8]
 8002cfa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	6852      	ldr	r2, [r2, #4]
 8002d04:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d103      	bne.n	8002d18 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	1e5a      	subs	r2, r3, #1
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3714      	adds	r7, #20
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bc80      	pop	{r7}
 8002d34:	4770      	bx	lr
	...

08002d38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10a      	bne.n	8002d62 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d50:	f383 8811 	msr	BASEPRI, r3
 8002d54:	f3bf 8f6f 	isb	sy
 8002d58:	f3bf 8f4f 	dsb	sy
 8002d5c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002d5e:	bf00      	nop
 8002d60:	e7fe      	b.n	8002d60 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002d62:	f001 fecb 	bl	8004afc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d6e:	68f9      	ldr	r1, [r7, #12]
 8002d70:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d72:	fb01 f303 	mul.w	r3, r1, r3
 8002d76:	441a      	add	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d92:	3b01      	subs	r3, #1
 8002d94:	68f9      	ldr	r1, [r7, #12]
 8002d96:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d98:	fb01 f303 	mul.w	r3, r1, r3
 8002d9c:	441a      	add	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	22ff      	movs	r2, #255	; 0xff
 8002da6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	22ff      	movs	r2, #255	; 0xff
 8002dae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d114      	bne.n	8002de2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d01a      	beq.n	8002df6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	3310      	adds	r3, #16
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f001 f9a1 	bl	800410c <xTaskRemoveFromEventList>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d012      	beq.n	8002df6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002dd0:	4b0c      	ldr	r3, [pc, #48]	; (8002e04 <xQueueGenericReset+0xcc>)
 8002dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	f3bf 8f4f 	dsb	sy
 8002ddc:	f3bf 8f6f 	isb	sy
 8002de0:	e009      	b.n	8002df6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	3310      	adds	r3, #16
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff fef6 	bl	8002bd8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	3324      	adds	r3, #36	; 0x24
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff fef1 	bl	8002bd8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002df6:	f001 feb1 	bl	8004b5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002dfa:	2301      	movs	r3, #1
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	e000ed04 	.word	0xe000ed04

08002e08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b08e      	sub	sp, #56	; 0x38
 8002e0c:	af02      	add	r7, sp, #8
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
 8002e14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10a      	bne.n	8002e32 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e20:	f383 8811 	msr	BASEPRI, r3
 8002e24:	f3bf 8f6f 	isb	sy
 8002e28:	f3bf 8f4f 	dsb	sy
 8002e2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002e2e:	bf00      	nop
 8002e30:	e7fe      	b.n	8002e30 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10a      	bne.n	8002e4e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3c:	f383 8811 	msr	BASEPRI, r3
 8002e40:	f3bf 8f6f 	isb	sy
 8002e44:	f3bf 8f4f 	dsb	sy
 8002e48:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002e4a:	bf00      	nop
 8002e4c:	e7fe      	b.n	8002e4c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d002      	beq.n	8002e5a <xQueueGenericCreateStatic+0x52>
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <xQueueGenericCreateStatic+0x56>
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e000      	b.n	8002e60 <xQueueGenericCreateStatic+0x58>
 8002e5e:	2300      	movs	r3, #0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d10a      	bne.n	8002e7a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e68:	f383 8811 	msr	BASEPRI, r3
 8002e6c:	f3bf 8f6f 	isb	sy
 8002e70:	f3bf 8f4f 	dsb	sy
 8002e74:	623b      	str	r3, [r7, #32]
}
 8002e76:	bf00      	nop
 8002e78:	e7fe      	b.n	8002e78 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d102      	bne.n	8002e86 <xQueueGenericCreateStatic+0x7e>
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <xQueueGenericCreateStatic+0x82>
 8002e86:	2301      	movs	r3, #1
 8002e88:	e000      	b.n	8002e8c <xQueueGenericCreateStatic+0x84>
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10a      	bne.n	8002ea6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e94:	f383 8811 	msr	BASEPRI, r3
 8002e98:	f3bf 8f6f 	isb	sy
 8002e9c:	f3bf 8f4f 	dsb	sy
 8002ea0:	61fb      	str	r3, [r7, #28]
}
 8002ea2:	bf00      	nop
 8002ea4:	e7fe      	b.n	8002ea4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002ea6:	2348      	movs	r3, #72	; 0x48
 8002ea8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	2b48      	cmp	r3, #72	; 0x48
 8002eae:	d00a      	beq.n	8002ec6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb4:	f383 8811 	msr	BASEPRI, r3
 8002eb8:	f3bf 8f6f 	isb	sy
 8002ebc:	f3bf 8f4f 	dsb	sy
 8002ec0:	61bb      	str	r3, [r7, #24]
}
 8002ec2:	bf00      	nop
 8002ec4:	e7fe      	b.n	8002ec4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00d      	beq.n	8002eec <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ed8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	68b9      	ldr	r1, [r7, #8]
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f000 f843 	bl	8002f72 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3730      	adds	r7, #48	; 0x30
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b08a      	sub	sp, #40	; 0x28
 8002efa:	af02      	add	r7, sp, #8
 8002efc:	60f8      	str	r0, [r7, #12]
 8002efe:	60b9      	str	r1, [r7, #8]
 8002f00:	4613      	mov	r3, r2
 8002f02:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d10a      	bne.n	8002f20 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f0e:	f383 8811 	msr	BASEPRI, r3
 8002f12:	f3bf 8f6f 	isb	sy
 8002f16:	f3bf 8f4f 	dsb	sy
 8002f1a:	613b      	str	r3, [r7, #16]
}
 8002f1c:	bf00      	nop
 8002f1e:	e7fe      	b.n	8002f1e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d102      	bne.n	8002f2c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002f26:	2300      	movs	r3, #0
 8002f28:	61fb      	str	r3, [r7, #28]
 8002f2a:	e004      	b.n	8002f36 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	fb02 f303 	mul.w	r3, r2, r3
 8002f34:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	3348      	adds	r3, #72	; 0x48
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f001 fede 	bl	8004cfc <pvPortMalloc>
 8002f40:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00f      	beq.n	8002f68 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	3348      	adds	r3, #72	; 0x48
 8002f4c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f56:	79fa      	ldrb	r2, [r7, #7]
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	68b9      	ldr	r1, [r7, #8]
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f000 f805 	bl	8002f72 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002f68:	69bb      	ldr	r3, [r7, #24]
	}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3720      	adds	r7, #32
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b084      	sub	sp, #16
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	60f8      	str	r0, [r7, #12]
 8002f7a:	60b9      	str	r1, [r7, #8]
 8002f7c:	607a      	str	r2, [r7, #4]
 8002f7e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d103      	bne.n	8002f8e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	e002      	b.n	8002f94 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	68ba      	ldr	r2, [r7, #8]
 8002f9e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	69b8      	ldr	r0, [r7, #24]
 8002fa4:	f7ff fec8 	bl	8002d38 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002fa8:	bf00      	nop
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b08a      	sub	sp, #40	; 0x28
 8002fb4:	af02      	add	r7, sp, #8
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10a      	bne.n	8002fd8 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8002fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc6:	f383 8811 	msr	BASEPRI, r3
 8002fca:	f3bf 8f6f 	isb	sy
 8002fce:	f3bf 8f4f 	dsb	sy
 8002fd2:	61bb      	str	r3, [r7, #24]
}
 8002fd4:	bf00      	nop
 8002fd6:	e7fe      	b.n	8002fd6 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002fd8:	68ba      	ldr	r2, [r7, #8]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d90a      	bls.n	8002ff6 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8002fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe4:	f383 8811 	msr	BASEPRI, r3
 8002fe8:	f3bf 8f6f 	isb	sy
 8002fec:	f3bf 8f4f 	dsb	sy
 8002ff0:	617b      	str	r3, [r7, #20]
}
 8002ff2:	bf00      	nop
 8002ff4:	e7fe      	b.n	8002ff4 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	2100      	movs	r1, #0
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f7ff ff01 	bl	8002e08 <xQueueGenericCreateStatic>
 8003006:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d002      	beq.n	8003014 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	68ba      	ldr	r2, [r7, #8]
 8003012:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003014:	69fb      	ldr	r3, [r7, #28]
	}
 8003016:	4618      	mov	r0, r3
 8003018:	3720      	adds	r7, #32
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800301e:	b580      	push	{r7, lr}
 8003020:	b086      	sub	sp, #24
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
 8003026:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10a      	bne.n	8003044 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800302e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003032:	f383 8811 	msr	BASEPRI, r3
 8003036:	f3bf 8f6f 	isb	sy
 800303a:	f3bf 8f4f 	dsb	sy
 800303e:	613b      	str	r3, [r7, #16]
}
 8003040:	bf00      	nop
 8003042:	e7fe      	b.n	8003042 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	429a      	cmp	r2, r3
 800304a:	d90a      	bls.n	8003062 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800304c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003050:	f383 8811 	msr	BASEPRI, r3
 8003054:	f3bf 8f6f 	isb	sy
 8003058:	f3bf 8f4f 	dsb	sy
 800305c:	60fb      	str	r3, [r7, #12]
}
 800305e:	bf00      	nop
 8003060:	e7fe      	b.n	8003060 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003062:	2202      	movs	r2, #2
 8003064:	2100      	movs	r1, #0
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7ff ff45 	bl	8002ef6 <xQueueGenericCreate>
 800306c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d002      	beq.n	800307a <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800307a:	697b      	ldr	r3, [r7, #20]
	}
 800307c:	4618      	mov	r0, r3
 800307e:	3718      	adds	r7, #24
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b08e      	sub	sp, #56	; 0x38
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
 8003090:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003092:	2300      	movs	r3, #0
 8003094:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800309a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309c:	2b00      	cmp	r3, #0
 800309e:	d10a      	bne.n	80030b6 <xQueueGenericSend+0x32>
	__asm volatile
 80030a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a4:	f383 8811 	msr	BASEPRI, r3
 80030a8:	f3bf 8f6f 	isb	sy
 80030ac:	f3bf 8f4f 	dsb	sy
 80030b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80030b2:	bf00      	nop
 80030b4:	e7fe      	b.n	80030b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d103      	bne.n	80030c4 <xQueueGenericSend+0x40>
 80030bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <xQueueGenericSend+0x44>
 80030c4:	2301      	movs	r3, #1
 80030c6:	e000      	b.n	80030ca <xQueueGenericSend+0x46>
 80030c8:	2300      	movs	r3, #0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10a      	bne.n	80030e4 <xQueueGenericSend+0x60>
	__asm volatile
 80030ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d2:	f383 8811 	msr	BASEPRI, r3
 80030d6:	f3bf 8f6f 	isb	sy
 80030da:	f3bf 8f4f 	dsb	sy
 80030de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80030e0:	bf00      	nop
 80030e2:	e7fe      	b.n	80030e2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d103      	bne.n	80030f2 <xQueueGenericSend+0x6e>
 80030ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d101      	bne.n	80030f6 <xQueueGenericSend+0x72>
 80030f2:	2301      	movs	r3, #1
 80030f4:	e000      	b.n	80030f8 <xQueueGenericSend+0x74>
 80030f6:	2300      	movs	r3, #0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10a      	bne.n	8003112 <xQueueGenericSend+0x8e>
	__asm volatile
 80030fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003100:	f383 8811 	msr	BASEPRI, r3
 8003104:	f3bf 8f6f 	isb	sy
 8003108:	f3bf 8f4f 	dsb	sy
 800310c:	623b      	str	r3, [r7, #32]
}
 800310e:	bf00      	nop
 8003110:	e7fe      	b.n	8003110 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003112:	f001 f9bb 	bl	800448c <xTaskGetSchedulerState>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d102      	bne.n	8003122 <xQueueGenericSend+0x9e>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <xQueueGenericSend+0xa2>
 8003122:	2301      	movs	r3, #1
 8003124:	e000      	b.n	8003128 <xQueueGenericSend+0xa4>
 8003126:	2300      	movs	r3, #0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10a      	bne.n	8003142 <xQueueGenericSend+0xbe>
	__asm volatile
 800312c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003130:	f383 8811 	msr	BASEPRI, r3
 8003134:	f3bf 8f6f 	isb	sy
 8003138:	f3bf 8f4f 	dsb	sy
 800313c:	61fb      	str	r3, [r7, #28]
}
 800313e:	bf00      	nop
 8003140:	e7fe      	b.n	8003140 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003142:	f001 fcdb 	bl	8004afc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003148:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800314a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314e:	429a      	cmp	r2, r3
 8003150:	d302      	bcc.n	8003158 <xQueueGenericSend+0xd4>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	2b02      	cmp	r3, #2
 8003156:	d129      	bne.n	80031ac <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	68b9      	ldr	r1, [r7, #8]
 800315c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800315e:	f000 fac0 	bl	80036e2 <prvCopyDataToQueue>
 8003162:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	2b00      	cmp	r3, #0
 800316a:	d010      	beq.n	800318e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800316c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316e:	3324      	adds	r3, #36	; 0x24
 8003170:	4618      	mov	r0, r3
 8003172:	f000 ffcb 	bl	800410c <xTaskRemoveFromEventList>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d013      	beq.n	80031a4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800317c:	4b3f      	ldr	r3, [pc, #252]	; (800327c <xQueueGenericSend+0x1f8>)
 800317e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	f3bf 8f4f 	dsb	sy
 8003188:	f3bf 8f6f 	isb	sy
 800318c:	e00a      	b.n	80031a4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800318e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003190:	2b00      	cmp	r3, #0
 8003192:	d007      	beq.n	80031a4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003194:	4b39      	ldr	r3, [pc, #228]	; (800327c <xQueueGenericSend+0x1f8>)
 8003196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	f3bf 8f4f 	dsb	sy
 80031a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80031a4:	f001 fcda 	bl	8004b5c <vPortExitCritical>
				return pdPASS;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e063      	b.n	8003274 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d103      	bne.n	80031ba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80031b2:	f001 fcd3 	bl	8004b5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80031b6:	2300      	movs	r3, #0
 80031b8:	e05c      	b.n	8003274 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80031ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d106      	bne.n	80031ce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80031c0:	f107 0314 	add.w	r3, r7, #20
 80031c4:	4618      	mov	r0, r3
 80031c6:	f001 f803 	bl	80041d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80031ca:	2301      	movs	r3, #1
 80031cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80031ce:	f001 fcc5 	bl	8004b5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80031d2:	f000 fdb5 	bl	8003d40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80031d6:	f001 fc91 	bl	8004afc <vPortEnterCritical>
 80031da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031e0:	b25b      	sxtb	r3, r3
 80031e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e6:	d103      	bne.n	80031f0 <xQueueGenericSend+0x16c>
 80031e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031f6:	b25b      	sxtb	r3, r3
 80031f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031fc:	d103      	bne.n	8003206 <xQueueGenericSend+0x182>
 80031fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003206:	f001 fca9 	bl	8004b5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800320a:	1d3a      	adds	r2, r7, #4
 800320c:	f107 0314 	add.w	r3, r7, #20
 8003210:	4611      	mov	r1, r2
 8003212:	4618      	mov	r0, r3
 8003214:	f000 fff2 	bl	80041fc <xTaskCheckForTimeOut>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d124      	bne.n	8003268 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800321e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003220:	f000 fb57 	bl	80038d2 <prvIsQueueFull>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d018      	beq.n	800325c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800322a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322c:	3310      	adds	r3, #16
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	4611      	mov	r1, r2
 8003232:	4618      	mov	r0, r3
 8003234:	f000 ff46 	bl	80040c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003238:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800323a:	f000 fae2 	bl	8003802 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800323e:	f000 fd8d 	bl	8003d5c <xTaskResumeAll>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	f47f af7c 	bne.w	8003142 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800324a:	4b0c      	ldr	r3, [pc, #48]	; (800327c <xQueueGenericSend+0x1f8>)
 800324c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003250:	601a      	str	r2, [r3, #0]
 8003252:	f3bf 8f4f 	dsb	sy
 8003256:	f3bf 8f6f 	isb	sy
 800325a:	e772      	b.n	8003142 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800325c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800325e:	f000 fad0 	bl	8003802 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003262:	f000 fd7b 	bl	8003d5c <xTaskResumeAll>
 8003266:	e76c      	b.n	8003142 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003268:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800326a:	f000 faca 	bl	8003802 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800326e:	f000 fd75 	bl	8003d5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003272:	2300      	movs	r3, #0
		}
	}
}
 8003274:	4618      	mov	r0, r3
 8003276:	3738      	adds	r7, #56	; 0x38
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	e000ed04 	.word	0xe000ed04

08003280 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b08e      	sub	sp, #56	; 0x38
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800328e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003290:	2b00      	cmp	r3, #0
 8003292:	d10a      	bne.n	80032aa <xQueueGiveFromISR+0x2a>
	__asm volatile
 8003294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003298:	f383 8811 	msr	BASEPRI, r3
 800329c:	f3bf 8f6f 	isb	sy
 80032a0:	f3bf 8f4f 	dsb	sy
 80032a4:	623b      	str	r3, [r7, #32]
}
 80032a6:	bf00      	nop
 80032a8:	e7fe      	b.n	80032a8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80032aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00a      	beq.n	80032c8 <xQueueGiveFromISR+0x48>
	__asm volatile
 80032b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b6:	f383 8811 	msr	BASEPRI, r3
 80032ba:	f3bf 8f6f 	isb	sy
 80032be:	f3bf 8f4f 	dsb	sy
 80032c2:	61fb      	str	r3, [r7, #28]
}
 80032c4:	bf00      	nop
 80032c6:	e7fe      	b.n	80032c6 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80032c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d103      	bne.n	80032d8 <xQueueGiveFromISR+0x58>
 80032d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d101      	bne.n	80032dc <xQueueGiveFromISR+0x5c>
 80032d8:	2301      	movs	r3, #1
 80032da:	e000      	b.n	80032de <xQueueGiveFromISR+0x5e>
 80032dc:	2300      	movs	r3, #0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10a      	bne.n	80032f8 <xQueueGiveFromISR+0x78>
	__asm volatile
 80032e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e6:	f383 8811 	msr	BASEPRI, r3
 80032ea:	f3bf 8f6f 	isb	sy
 80032ee:	f3bf 8f4f 	dsb	sy
 80032f2:	61bb      	str	r3, [r7, #24]
}
 80032f4:	bf00      	nop
 80032f6:	e7fe      	b.n	80032f6 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80032f8:	f001 fcc2 	bl	8004c80 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80032fc:	f3ef 8211 	mrs	r2, BASEPRI
 8003300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003304:	f383 8811 	msr	BASEPRI, r3
 8003308:	f3bf 8f6f 	isb	sy
 800330c:	f3bf 8f4f 	dsb	sy
 8003310:	617a      	str	r2, [r7, #20]
 8003312:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003314:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003316:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800331e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003322:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003324:	429a      	cmp	r2, r3
 8003326:	d22b      	bcs.n	8003380 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800332a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800332e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003334:	1c5a      	adds	r2, r3, #1
 8003336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003338:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800333a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800333e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003342:	d112      	bne.n	800336a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003348:	2b00      	cmp	r3, #0
 800334a:	d016      	beq.n	800337a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800334c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334e:	3324      	adds	r3, #36	; 0x24
 8003350:	4618      	mov	r0, r3
 8003352:	f000 fedb 	bl	800410c <xTaskRemoveFromEventList>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00e      	beq.n	800337a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00b      	beq.n	800337a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	2201      	movs	r2, #1
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	e007      	b.n	800337a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800336a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800336e:	3301      	adds	r3, #1
 8003370:	b2db      	uxtb	r3, r3
 8003372:	b25a      	sxtb	r2, r3
 8003374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003376:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800337a:	2301      	movs	r3, #1
 800337c:	637b      	str	r3, [r7, #52]	; 0x34
 800337e:	e001      	b.n	8003384 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003380:	2300      	movs	r3, #0
 8003382:	637b      	str	r3, [r7, #52]	; 0x34
 8003384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003386:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800338e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003392:	4618      	mov	r0, r3
 8003394:	3738      	adds	r7, #56	; 0x38
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
	...

0800339c <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b08e      	sub	sp, #56	; 0x38
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80033a6:	2300      	movs	r3, #0
 80033a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80033ae:	2300      	movs	r3, #0
 80033b0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80033b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10a      	bne.n	80033ce <xQueueSemaphoreTake+0x32>
	__asm volatile
 80033b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033bc:	f383 8811 	msr	BASEPRI, r3
 80033c0:	f3bf 8f6f 	isb	sy
 80033c4:	f3bf 8f4f 	dsb	sy
 80033c8:	623b      	str	r3, [r7, #32]
}
 80033ca:	bf00      	nop
 80033cc:	e7fe      	b.n	80033cc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80033ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00a      	beq.n	80033ec <xQueueSemaphoreTake+0x50>
	__asm volatile
 80033d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033da:	f383 8811 	msr	BASEPRI, r3
 80033de:	f3bf 8f6f 	isb	sy
 80033e2:	f3bf 8f4f 	dsb	sy
 80033e6:	61fb      	str	r3, [r7, #28]
}
 80033e8:	bf00      	nop
 80033ea:	e7fe      	b.n	80033ea <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033ec:	f001 f84e 	bl	800448c <xTaskGetSchedulerState>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d102      	bne.n	80033fc <xQueueSemaphoreTake+0x60>
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <xQueueSemaphoreTake+0x64>
 80033fc:	2301      	movs	r3, #1
 80033fe:	e000      	b.n	8003402 <xQueueSemaphoreTake+0x66>
 8003400:	2300      	movs	r3, #0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10a      	bne.n	800341c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800340a:	f383 8811 	msr	BASEPRI, r3
 800340e:	f3bf 8f6f 	isb	sy
 8003412:	f3bf 8f4f 	dsb	sy
 8003416:	61bb      	str	r3, [r7, #24]
}
 8003418:	bf00      	nop
 800341a:	e7fe      	b.n	800341a <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800341c:	f001 fb6e 	bl	8004afc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003424:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003428:	2b00      	cmp	r3, #0
 800342a:	d024      	beq.n	8003476 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800342c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342e:	1e5a      	subs	r2, r3, #1
 8003430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003432:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d104      	bne.n	8003446 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800343c:	f001 f9f0 	bl	8004820 <pvTaskIncrementMutexHeldCount>
 8003440:	4602      	mov	r2, r0
 8003442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003444:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00f      	beq.n	800346e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800344e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003450:	3310      	adds	r3, #16
 8003452:	4618      	mov	r0, r3
 8003454:	f000 fe5a 	bl	800410c <xTaskRemoveFromEventList>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d007      	beq.n	800346e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800345e:	4b54      	ldr	r3, [pc, #336]	; (80035b0 <xQueueSemaphoreTake+0x214>)
 8003460:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	f3bf 8f4f 	dsb	sy
 800346a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800346e:	f001 fb75 	bl	8004b5c <vPortExitCritical>
				return pdPASS;
 8003472:	2301      	movs	r3, #1
 8003474:	e097      	b.n	80035a6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d111      	bne.n	80034a0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800347c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00a      	beq.n	8003498 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003486:	f383 8811 	msr	BASEPRI, r3
 800348a:	f3bf 8f6f 	isb	sy
 800348e:	f3bf 8f4f 	dsb	sy
 8003492:	617b      	str	r3, [r7, #20]
}
 8003494:	bf00      	nop
 8003496:	e7fe      	b.n	8003496 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003498:	f001 fb60 	bl	8004b5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800349c:	2300      	movs	r3, #0
 800349e:	e082      	b.n	80035a6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80034a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d106      	bne.n	80034b4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80034a6:	f107 030c 	add.w	r3, r7, #12
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 fe90 	bl	80041d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80034b0:	2301      	movs	r3, #1
 80034b2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80034b4:	f001 fb52 	bl	8004b5c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80034b8:	f000 fc42 	bl	8003d40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80034bc:	f001 fb1e 	bl	8004afc <vPortEnterCritical>
 80034c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034c6:	b25b      	sxtb	r3, r3
 80034c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034cc:	d103      	bne.n	80034d6 <xQueueSemaphoreTake+0x13a>
 80034ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034dc:	b25b      	sxtb	r3, r3
 80034de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e2:	d103      	bne.n	80034ec <xQueueSemaphoreTake+0x150>
 80034e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034ec:	f001 fb36 	bl	8004b5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034f0:	463a      	mov	r2, r7
 80034f2:	f107 030c 	add.w	r3, r7, #12
 80034f6:	4611      	mov	r1, r2
 80034f8:	4618      	mov	r0, r3
 80034fa:	f000 fe7f 	bl	80041fc <xTaskCheckForTimeOut>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d132      	bne.n	800356a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003504:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003506:	f000 f9ce 	bl	80038a6 <prvIsQueueEmpty>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d026      	beq.n	800355e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d109      	bne.n	800352c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003518:	f001 faf0 	bl	8004afc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800351c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	4618      	mov	r0, r3
 8003522:	f000 ffd1 	bl	80044c8 <xTaskPriorityInherit>
 8003526:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003528:	f001 fb18 	bl	8004b5c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800352c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352e:	3324      	adds	r3, #36	; 0x24
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	4611      	mov	r1, r2
 8003534:	4618      	mov	r0, r3
 8003536:	f000 fdc5 	bl	80040c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800353a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800353c:	f000 f961 	bl	8003802 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003540:	f000 fc0c 	bl	8003d5c <xTaskResumeAll>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	f47f af68 	bne.w	800341c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800354c:	4b18      	ldr	r3, [pc, #96]	; (80035b0 <xQueueSemaphoreTake+0x214>)
 800354e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	f3bf 8f4f 	dsb	sy
 8003558:	f3bf 8f6f 	isb	sy
 800355c:	e75e      	b.n	800341c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800355e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003560:	f000 f94f 	bl	8003802 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003564:	f000 fbfa 	bl	8003d5c <xTaskResumeAll>
 8003568:	e758      	b.n	800341c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800356a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800356c:	f000 f949 	bl	8003802 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003570:	f000 fbf4 	bl	8003d5c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003574:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003576:	f000 f996 	bl	80038a6 <prvIsQueueEmpty>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	f43f af4d 	beq.w	800341c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00d      	beq.n	80035a4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003588:	f001 fab8 	bl	8004afc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800358c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800358e:	f000 f891 	bl	80036b4 <prvGetDisinheritPriorityAfterTimeout>
 8003592:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8003594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800359a:	4618      	mov	r0, r3
 800359c:	f001 f8a0 	bl	80046e0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80035a0:	f001 fadc 	bl	8004b5c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80035a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3738      	adds	r7, #56	; 0x38
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	e000ed04 	.word	0xe000ed04

080035b4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b08e      	sub	sp, #56	; 0x38
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80035c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10a      	bne.n	80035e0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80035ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ce:	f383 8811 	msr	BASEPRI, r3
 80035d2:	f3bf 8f6f 	isb	sy
 80035d6:	f3bf 8f4f 	dsb	sy
 80035da:	623b      	str	r3, [r7, #32]
}
 80035dc:	bf00      	nop
 80035de:	e7fe      	b.n	80035de <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d103      	bne.n	80035ee <xQueueReceiveFromISR+0x3a>
 80035e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <xQueueReceiveFromISR+0x3e>
 80035ee:	2301      	movs	r3, #1
 80035f0:	e000      	b.n	80035f4 <xQueueReceiveFromISR+0x40>
 80035f2:	2300      	movs	r3, #0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10a      	bne.n	800360e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80035f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fc:	f383 8811 	msr	BASEPRI, r3
 8003600:	f3bf 8f6f 	isb	sy
 8003604:	f3bf 8f4f 	dsb	sy
 8003608:	61fb      	str	r3, [r7, #28]
}
 800360a:	bf00      	nop
 800360c:	e7fe      	b.n	800360c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800360e:	f001 fb37 	bl	8004c80 <vPortValidateInterruptPriority>
	__asm volatile
 8003612:	f3ef 8211 	mrs	r2, BASEPRI
 8003616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361a:	f383 8811 	msr	BASEPRI, r3
 800361e:	f3bf 8f6f 	isb	sy
 8003622:	f3bf 8f4f 	dsb	sy
 8003626:	61ba      	str	r2, [r7, #24]
 8003628:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800362a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800362c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800362e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003632:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003636:	2b00      	cmp	r3, #0
 8003638:	d02f      	beq.n	800369a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800363a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003640:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003644:	68b9      	ldr	r1, [r7, #8]
 8003646:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003648:	f000 f8b5 	bl	80037b6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800364c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800364e:	1e5a      	subs	r2, r3, #1
 8003650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003652:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003654:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800365c:	d112      	bne.n	8003684 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800365e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d016      	beq.n	8003694 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003668:	3310      	adds	r3, #16
 800366a:	4618      	mov	r0, r3
 800366c:	f000 fd4e 	bl	800410c <xTaskRemoveFromEventList>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00e      	beq.n	8003694 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00b      	beq.n	8003694 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	e007      	b.n	8003694 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003684:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003688:	3301      	adds	r3, #1
 800368a:	b2db      	uxtb	r3, r3
 800368c:	b25a      	sxtb	r2, r3
 800368e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003694:	2301      	movs	r3, #1
 8003696:	637b      	str	r3, [r7, #52]	; 0x34
 8003698:	e001      	b.n	800369e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800369a:	2300      	movs	r3, #0
 800369c:	637b      	str	r3, [r7, #52]	; 0x34
 800369e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	f383 8811 	msr	BASEPRI, r3
}
 80036a8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80036aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3738      	adds	r7, #56	; 0x38
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d006      	beq.n	80036d2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f1c3 0307 	rsb	r3, r3, #7
 80036ce:	60fb      	str	r3, [r7, #12]
 80036d0:	e001      	b.n	80036d6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80036d2:	2300      	movs	r3, #0
 80036d4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80036d6:	68fb      	ldr	r3, [r7, #12]
	}
 80036d8:	4618      	mov	r0, r3
 80036da:	3714      	adds	r7, #20
 80036dc:	46bd      	mov	sp, r7
 80036de:	bc80      	pop	{r7}
 80036e0:	4770      	bx	lr

080036e2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b086      	sub	sp, #24
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	60f8      	str	r0, [r7, #12]
 80036ea:	60b9      	str	r1, [r7, #8]
 80036ec:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10d      	bne.n	800371c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d14d      	bne.n	80037a4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	4618      	mov	r0, r3
 800370e:	f000 ff61 	bl	80045d4 <xTaskPriorityDisinherit>
 8003712:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	605a      	str	r2, [r3, #4]
 800371a:	e043      	b.n	80037a4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d119      	bne.n	8003756 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6898      	ldr	r0, [r3, #8]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372a:	461a      	mov	r2, r3
 800372c:	68b9      	ldr	r1, [r7, #8]
 800372e:	f001 fd11 	bl	8005154 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	689a      	ldr	r2, [r3, #8]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	441a      	add	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	429a      	cmp	r2, r3
 800374a:	d32b      	bcc.n	80037a4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	609a      	str	r2, [r3, #8]
 8003754:	e026      	b.n	80037a4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	68d8      	ldr	r0, [r3, #12]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	461a      	mov	r2, r3
 8003760:	68b9      	ldr	r1, [r7, #8]
 8003762:	f001 fcf7 	bl	8005154 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	68da      	ldr	r2, [r3, #12]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	425b      	negs	r3, r3
 8003770:	441a      	add	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	68da      	ldr	r2, [r3, #12]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	429a      	cmp	r2, r3
 8003780:	d207      	bcs.n	8003792 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	425b      	negs	r3, r3
 800378c:	441a      	add	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b02      	cmp	r3, #2
 8003796:	d105      	bne.n	80037a4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d002      	beq.n	80037a4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	3b01      	subs	r3, #1
 80037a2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	1c5a      	adds	r2, r3, #1
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80037ac:	697b      	ldr	r3, [r7, #20]
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3718      	adds	r7, #24
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b082      	sub	sp, #8
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
 80037be:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d018      	beq.n	80037fa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68da      	ldr	r2, [r3, #12]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d0:	441a      	add	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68da      	ldr	r2, [r3, #12]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d303      	bcc.n	80037ea <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68d9      	ldr	r1, [r3, #12]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	461a      	mov	r2, r3
 80037f4:	6838      	ldr	r0, [r7, #0]
 80037f6:	f001 fcad 	bl	8005154 <memcpy>
	}
}
 80037fa:	bf00      	nop
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b084      	sub	sp, #16
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800380a:	f001 f977 	bl	8004afc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003814:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003816:	e011      	b.n	800383c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381c:	2b00      	cmp	r3, #0
 800381e:	d012      	beq.n	8003846 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	3324      	adds	r3, #36	; 0x24
 8003824:	4618      	mov	r0, r3
 8003826:	f000 fc71 	bl	800410c <xTaskRemoveFromEventList>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003830:	f000 fd46 	bl	80042c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003834:	7bfb      	ldrb	r3, [r7, #15]
 8003836:	3b01      	subs	r3, #1
 8003838:	b2db      	uxtb	r3, r3
 800383a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800383c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003840:	2b00      	cmp	r3, #0
 8003842:	dce9      	bgt.n	8003818 <prvUnlockQueue+0x16>
 8003844:	e000      	b.n	8003848 <prvUnlockQueue+0x46>
					break;
 8003846:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	22ff      	movs	r2, #255	; 0xff
 800384c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003850:	f001 f984 	bl	8004b5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003854:	f001 f952 	bl	8004afc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800385e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003860:	e011      	b.n	8003886 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d012      	beq.n	8003890 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	3310      	adds	r3, #16
 800386e:	4618      	mov	r0, r3
 8003870:	f000 fc4c 	bl	800410c <xTaskRemoveFromEventList>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800387a:	f000 fd21 	bl	80042c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800387e:	7bbb      	ldrb	r3, [r7, #14]
 8003880:	3b01      	subs	r3, #1
 8003882:	b2db      	uxtb	r3, r3
 8003884:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003886:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800388a:	2b00      	cmp	r3, #0
 800388c:	dce9      	bgt.n	8003862 <prvUnlockQueue+0x60>
 800388e:	e000      	b.n	8003892 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003890:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	22ff      	movs	r2, #255	; 0xff
 8003896:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800389a:	f001 f95f 	bl	8004b5c <vPortExitCritical>
}
 800389e:	bf00      	nop
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b084      	sub	sp, #16
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038ae:	f001 f925 	bl	8004afc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d102      	bne.n	80038c0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80038ba:	2301      	movs	r3, #1
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	e001      	b.n	80038c4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80038c0:	2300      	movs	r3, #0
 80038c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038c4:	f001 f94a 	bl	8004b5c <vPortExitCritical>

	return xReturn;
 80038c8:	68fb      	ldr	r3, [r7, #12]
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b084      	sub	sp, #16
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038da:	f001 f90f 	bl	8004afc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d102      	bne.n	80038f0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80038ea:	2301      	movs	r3, #1
 80038ec:	60fb      	str	r3, [r7, #12]
 80038ee:	e001      	b.n	80038f4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80038f0:	2300      	movs	r3, #0
 80038f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038f4:	f001 f932 	bl	8004b5c <vPortExitCritical>

	return xReturn;
 80038f8:	68fb      	ldr	r3, [r7, #12]
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003902:	b580      	push	{r7, lr}
 8003904:	b08e      	sub	sp, #56	; 0x38
 8003906:	af04      	add	r7, sp, #16
 8003908:	60f8      	str	r0, [r7, #12]
 800390a:	60b9      	str	r1, [r7, #8]
 800390c:	607a      	str	r2, [r7, #4]
 800390e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10a      	bne.n	800392c <xTaskCreateStatic+0x2a>
	__asm volatile
 8003916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391a:	f383 8811 	msr	BASEPRI, r3
 800391e:	f3bf 8f6f 	isb	sy
 8003922:	f3bf 8f4f 	dsb	sy
 8003926:	623b      	str	r3, [r7, #32]
}
 8003928:	bf00      	nop
 800392a:	e7fe      	b.n	800392a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800392c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10a      	bne.n	8003948 <xTaskCreateStatic+0x46>
	__asm volatile
 8003932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003936:	f383 8811 	msr	BASEPRI, r3
 800393a:	f3bf 8f6f 	isb	sy
 800393e:	f3bf 8f4f 	dsb	sy
 8003942:	61fb      	str	r3, [r7, #28]
}
 8003944:	bf00      	nop
 8003946:	e7fe      	b.n	8003946 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003948:	2354      	movs	r3, #84	; 0x54
 800394a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	2b54      	cmp	r3, #84	; 0x54
 8003950:	d00a      	beq.n	8003968 <xTaskCreateStatic+0x66>
	__asm volatile
 8003952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003956:	f383 8811 	msr	BASEPRI, r3
 800395a:	f3bf 8f6f 	isb	sy
 800395e:	f3bf 8f4f 	dsb	sy
 8003962:	61bb      	str	r3, [r7, #24]
}
 8003964:	bf00      	nop
 8003966:	e7fe      	b.n	8003966 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800396a:	2b00      	cmp	r3, #0
 800396c:	d01e      	beq.n	80039ac <xTaskCreateStatic+0xaa>
 800396e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003970:	2b00      	cmp	r3, #0
 8003972:	d01b      	beq.n	80039ac <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003976:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800397c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800397e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003980:	2202      	movs	r2, #2
 8003982:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003986:	2300      	movs	r3, #0
 8003988:	9303      	str	r3, [sp, #12]
 800398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398c:	9302      	str	r3, [sp, #8]
 800398e:	f107 0314 	add.w	r3, r7, #20
 8003992:	9301      	str	r3, [sp, #4]
 8003994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	68b9      	ldr	r1, [r7, #8]
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f000 f850 	bl	8003a44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039a6:	f000 f8cd 	bl	8003b44 <prvAddNewTaskToReadyList>
 80039aa:	e001      	b.n	80039b0 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80039ac:	2300      	movs	r3, #0
 80039ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80039b0:	697b      	ldr	r3, [r7, #20]
	}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3728      	adds	r7, #40	; 0x28
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b08c      	sub	sp, #48	; 0x30
 80039be:	af04      	add	r7, sp, #16
 80039c0:	60f8      	str	r0, [r7, #12]
 80039c2:	60b9      	str	r1, [r7, #8]
 80039c4:	603b      	str	r3, [r7, #0]
 80039c6:	4613      	mov	r3, r2
 80039c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039ca:	88fb      	ldrh	r3, [r7, #6]
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	4618      	mov	r0, r3
 80039d0:	f001 f994 	bl	8004cfc <pvPortMalloc>
 80039d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00e      	beq.n	80039fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80039dc:	2054      	movs	r0, #84	; 0x54
 80039de:	f001 f98d 	bl	8004cfc <pvPortMalloc>
 80039e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d003      	beq.n	80039f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	631a      	str	r2, [r3, #48]	; 0x30
 80039f0:	e005      	b.n	80039fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80039f2:	6978      	ldr	r0, [r7, #20]
 80039f4:	f001 fa46 	bl	8004e84 <vPortFree>
 80039f8:	e001      	b.n	80039fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80039fa:	2300      	movs	r3, #0
 80039fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d017      	beq.n	8003a34 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a0c:	88fa      	ldrh	r2, [r7, #6]
 8003a0e:	2300      	movs	r3, #0
 8003a10:	9303      	str	r3, [sp, #12]
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	9302      	str	r3, [sp, #8]
 8003a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a18:	9301      	str	r3, [sp, #4]
 8003a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	68b9      	ldr	r1, [r7, #8]
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f000 f80e 	bl	8003a44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a28:	69f8      	ldr	r0, [r7, #28]
 8003a2a:	f000 f88b 	bl	8003b44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	61bb      	str	r3, [r7, #24]
 8003a32:	e002      	b.n	8003a3a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a34:	f04f 33ff 	mov.w	r3, #4294967295
 8003a38:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a3a:	69bb      	ldr	r3, [r7, #24]
	}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3720      	adds	r7, #32
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b088      	sub	sp, #32
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
 8003a50:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4413      	add	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	f023 0307 	bic.w	r3, r3, #7
 8003a6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	f003 0307 	and.w	r3, r3, #7
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00a      	beq.n	8003a8c <prvInitialiseNewTask+0x48>
	__asm volatile
 8003a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7a:	f383 8811 	msr	BASEPRI, r3
 8003a7e:	f3bf 8f6f 	isb	sy
 8003a82:	f3bf 8f4f 	dsb	sy
 8003a86:	617b      	str	r3, [r7, #20]
}
 8003a88:	bf00      	nop
 8003a8a:	e7fe      	b.n	8003a8a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	61fb      	str	r3, [r7, #28]
 8003a90:	e012      	b.n	8003ab8 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	4413      	add	r3, r2
 8003a98:	7819      	ldrb	r1, [r3, #0]
 8003a9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	3334      	adds	r3, #52	; 0x34
 8003aa2:	460a      	mov	r2, r1
 8003aa4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	4413      	add	r3, r2
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d006      	beq.n	8003ac0 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	61fb      	str	r3, [r7, #28]
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	2b0f      	cmp	r3, #15
 8003abc:	d9e9      	bls.n	8003a92 <prvInitialiseNewTask+0x4e>
 8003abe:	e000      	b.n	8003ac2 <prvInitialiseNewTask+0x7e>
		{
			break;
 8003ac0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003acc:	2b06      	cmp	r3, #6
 8003ace:	d901      	bls.n	8003ad4 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003ad0:	2306      	movs	r3, #6
 8003ad2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ad8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003adc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ade:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae8:	3304      	adds	r3, #4
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7ff f893 	bl	8002c16 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af2:	3318      	adds	r3, #24
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff f88e 	bl	8002c16 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003afe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b02:	f1c3 0207 	rsb	r2, r3, #7
 8003b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b08:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b0e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b12:	2200      	movs	r2, #0
 8003b14:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	68f9      	ldr	r1, [r7, #12]
 8003b22:	69b8      	ldr	r0, [r7, #24]
 8003b24:	f000 fef6 	bl	8004914 <pxPortInitialiseStack>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d002      	beq.n	8003b3a <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b3a:	bf00      	nop
 8003b3c:	3720      	adds	r7, #32
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
	...

08003b44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003b4c:	f000 ffd6 	bl	8004afc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003b50:	4b2a      	ldr	r3, [pc, #168]	; (8003bfc <prvAddNewTaskToReadyList+0xb8>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	3301      	adds	r3, #1
 8003b56:	4a29      	ldr	r2, [pc, #164]	; (8003bfc <prvAddNewTaskToReadyList+0xb8>)
 8003b58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003b5a:	4b29      	ldr	r3, [pc, #164]	; (8003c00 <prvAddNewTaskToReadyList+0xbc>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d109      	bne.n	8003b76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003b62:	4a27      	ldr	r2, [pc, #156]	; (8003c00 <prvAddNewTaskToReadyList+0xbc>)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b68:	4b24      	ldr	r3, [pc, #144]	; (8003bfc <prvAddNewTaskToReadyList+0xb8>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d110      	bne.n	8003b92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003b70:	f000 fbca 	bl	8004308 <prvInitialiseTaskLists>
 8003b74:	e00d      	b.n	8003b92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003b76:	4b23      	ldr	r3, [pc, #140]	; (8003c04 <prvAddNewTaskToReadyList+0xc0>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d109      	bne.n	8003b92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b7e:	4b20      	ldr	r3, [pc, #128]	; (8003c00 <prvAddNewTaskToReadyList+0xbc>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d802      	bhi.n	8003b92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003b8c:	4a1c      	ldr	r2, [pc, #112]	; (8003c00 <prvAddNewTaskToReadyList+0xbc>)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003b92:	4b1d      	ldr	r3, [pc, #116]	; (8003c08 <prvAddNewTaskToReadyList+0xc4>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	3301      	adds	r3, #1
 8003b98:	4a1b      	ldr	r2, [pc, #108]	; (8003c08 <prvAddNewTaskToReadyList+0xc4>)
 8003b9a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	409a      	lsls	r2, r3
 8003ba4:	4b19      	ldr	r3, [pc, #100]	; (8003c0c <prvAddNewTaskToReadyList+0xc8>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	4a18      	ldr	r2, [pc, #96]	; (8003c0c <prvAddNewTaskToReadyList+0xc8>)
 8003bac:	6013      	str	r3, [r2, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4413      	add	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4a15      	ldr	r2, [pc, #84]	; (8003c10 <prvAddNewTaskToReadyList+0xcc>)
 8003bbc:	441a      	add	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	3304      	adds	r3, #4
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	4610      	mov	r0, r2
 8003bc6:	f7ff f832 	bl	8002c2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003bca:	f000 ffc7 	bl	8004b5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003bce:	4b0d      	ldr	r3, [pc, #52]	; (8003c04 <prvAddNewTaskToReadyList+0xc0>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00e      	beq.n	8003bf4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003bd6:	4b0a      	ldr	r3, [pc, #40]	; (8003c00 <prvAddNewTaskToReadyList+0xbc>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d207      	bcs.n	8003bf4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003be4:	4b0b      	ldr	r3, [pc, #44]	; (8003c14 <prvAddNewTaskToReadyList+0xd0>)
 8003be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bea:	601a      	str	r2, [r3, #0]
 8003bec:	f3bf 8f4f 	dsb	sy
 8003bf0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003bf4:	bf00      	nop
 8003bf6:	3708      	adds	r7, #8
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	200004e4 	.word	0x200004e4
 8003c00:	200003e4 	.word	0x200003e4
 8003c04:	200004f0 	.word	0x200004f0
 8003c08:	20000500 	.word	0x20000500
 8003c0c:	200004ec 	.word	0x200004ec
 8003c10:	200003e8 	.word	0x200003e8
 8003c14:	e000ed04 	.word	0xe000ed04

08003c18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003c20:	2300      	movs	r3, #0
 8003c22:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d017      	beq.n	8003c5a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003c2a:	4b13      	ldr	r3, [pc, #76]	; (8003c78 <vTaskDelay+0x60>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00a      	beq.n	8003c48 <vTaskDelay+0x30>
	__asm volatile
 8003c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c36:	f383 8811 	msr	BASEPRI, r3
 8003c3a:	f3bf 8f6f 	isb	sy
 8003c3e:	f3bf 8f4f 	dsb	sy
 8003c42:	60bb      	str	r3, [r7, #8]
}
 8003c44:	bf00      	nop
 8003c46:	e7fe      	b.n	8003c46 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003c48:	f000 f87a 	bl	8003d40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 fdfa 	bl	8004848 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003c54:	f000 f882 	bl	8003d5c <xTaskResumeAll>
 8003c58:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d107      	bne.n	8003c70 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003c60:	4b06      	ldr	r3, [pc, #24]	; (8003c7c <vTaskDelay+0x64>)
 8003c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	f3bf 8f4f 	dsb	sy
 8003c6c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003c70:	bf00      	nop
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	2000050c 	.word	0x2000050c
 8003c7c:	e000ed04 	.word	0xe000ed04

08003c80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b08a      	sub	sp, #40	; 0x28
 8003c84:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003c86:	2300      	movs	r3, #0
 8003c88:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003c8e:	463a      	mov	r2, r7
 8003c90:	1d39      	adds	r1, r7, #4
 8003c92:	f107 0308 	add.w	r3, r7, #8
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7fc fad2 	bl	8000240 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003c9c:	6839      	ldr	r1, [r7, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	9202      	str	r2, [sp, #8]
 8003ca4:	9301      	str	r3, [sp, #4]
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	2300      	movs	r3, #0
 8003cac:	460a      	mov	r2, r1
 8003cae:	491e      	ldr	r1, [pc, #120]	; (8003d28 <vTaskStartScheduler+0xa8>)
 8003cb0:	481e      	ldr	r0, [pc, #120]	; (8003d2c <vTaskStartScheduler+0xac>)
 8003cb2:	f7ff fe26 	bl	8003902 <xTaskCreateStatic>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	4a1d      	ldr	r2, [pc, #116]	; (8003d30 <vTaskStartScheduler+0xb0>)
 8003cba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003cbc:	4b1c      	ldr	r3, [pc, #112]	; (8003d30 <vTaskStartScheduler+0xb0>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d002      	beq.n	8003cca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	617b      	str	r3, [r7, #20]
 8003cc8:	e001      	b.n	8003cce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d116      	bne.n	8003d02 <vTaskStartScheduler+0x82>
	__asm volatile
 8003cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd8:	f383 8811 	msr	BASEPRI, r3
 8003cdc:	f3bf 8f6f 	isb	sy
 8003ce0:	f3bf 8f4f 	dsb	sy
 8003ce4:	613b      	str	r3, [r7, #16]
}
 8003ce6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003ce8:	4b12      	ldr	r3, [pc, #72]	; (8003d34 <vTaskStartScheduler+0xb4>)
 8003cea:	f04f 32ff 	mov.w	r2, #4294967295
 8003cee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003cf0:	4b11      	ldr	r3, [pc, #68]	; (8003d38 <vTaskStartScheduler+0xb8>)
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003cf6:	4b11      	ldr	r3, [pc, #68]	; (8003d3c <vTaskStartScheduler+0xbc>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003cfc:	f000 fe8c 	bl	8004a18 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d00:	e00e      	b.n	8003d20 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d08:	d10a      	bne.n	8003d20 <vTaskStartScheduler+0xa0>
	__asm volatile
 8003d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d0e:	f383 8811 	msr	BASEPRI, r3
 8003d12:	f3bf 8f6f 	isb	sy
 8003d16:	f3bf 8f4f 	dsb	sy
 8003d1a:	60fb      	str	r3, [r7, #12]
}
 8003d1c:	bf00      	nop
 8003d1e:	e7fe      	b.n	8003d1e <vTaskStartScheduler+0x9e>
}
 8003d20:	bf00      	nop
 8003d22:	3718      	adds	r7, #24
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	08005b04 	.word	0x08005b04
 8003d2c:	080042d9 	.word	0x080042d9
 8003d30:	20000508 	.word	0x20000508
 8003d34:	20000504 	.word	0x20000504
 8003d38:	200004f0 	.word	0x200004f0
 8003d3c:	200004e8 	.word	0x200004e8

08003d40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003d44:	4b04      	ldr	r3, [pc, #16]	; (8003d58 <vTaskSuspendAll+0x18>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	3301      	adds	r3, #1
 8003d4a:	4a03      	ldr	r2, [pc, #12]	; (8003d58 <vTaskSuspendAll+0x18>)
 8003d4c:	6013      	str	r3, [r2, #0]
}
 8003d4e:	bf00      	nop
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bc80      	pop	{r7}
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	2000050c 	.word	0x2000050c

08003d5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003d62:	2300      	movs	r3, #0
 8003d64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003d66:	2300      	movs	r3, #0
 8003d68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003d6a:	4b41      	ldr	r3, [pc, #260]	; (8003e70 <xTaskResumeAll+0x114>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10a      	bne.n	8003d88 <xTaskResumeAll+0x2c>
	__asm volatile
 8003d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d76:	f383 8811 	msr	BASEPRI, r3
 8003d7a:	f3bf 8f6f 	isb	sy
 8003d7e:	f3bf 8f4f 	dsb	sy
 8003d82:	603b      	str	r3, [r7, #0]
}
 8003d84:	bf00      	nop
 8003d86:	e7fe      	b.n	8003d86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003d88:	f000 feb8 	bl	8004afc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003d8c:	4b38      	ldr	r3, [pc, #224]	; (8003e70 <xTaskResumeAll+0x114>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	3b01      	subs	r3, #1
 8003d92:	4a37      	ldr	r2, [pc, #220]	; (8003e70 <xTaskResumeAll+0x114>)
 8003d94:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d96:	4b36      	ldr	r3, [pc, #216]	; (8003e70 <xTaskResumeAll+0x114>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d161      	bne.n	8003e62 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d9e:	4b35      	ldr	r3, [pc, #212]	; (8003e74 <xTaskResumeAll+0x118>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d05d      	beq.n	8003e62 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003da6:	e02e      	b.n	8003e06 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003da8:	4b33      	ldr	r3, [pc, #204]	; (8003e78 <xTaskResumeAll+0x11c>)
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	3318      	adds	r3, #24
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7fe ff95 	bl	8002ce4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	3304      	adds	r3, #4
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7fe ff90 	bl	8002ce4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc8:	2201      	movs	r2, #1
 8003dca:	409a      	lsls	r2, r3
 8003dcc:	4b2b      	ldr	r3, [pc, #172]	; (8003e7c <xTaskResumeAll+0x120>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	4a2a      	ldr	r2, [pc, #168]	; (8003e7c <xTaskResumeAll+0x120>)
 8003dd4:	6013      	str	r3, [r2, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dda:	4613      	mov	r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	4413      	add	r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	4a27      	ldr	r2, [pc, #156]	; (8003e80 <xTaskResumeAll+0x124>)
 8003de4:	441a      	add	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	3304      	adds	r3, #4
 8003dea:	4619      	mov	r1, r3
 8003dec:	4610      	mov	r0, r2
 8003dee:	f7fe ff1e 	bl	8002c2e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df6:	4b23      	ldr	r3, [pc, #140]	; (8003e84 <xTaskResumeAll+0x128>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d302      	bcc.n	8003e06 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003e00:	4b21      	ldr	r3, [pc, #132]	; (8003e88 <xTaskResumeAll+0x12c>)
 8003e02:	2201      	movs	r2, #1
 8003e04:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e06:	4b1c      	ldr	r3, [pc, #112]	; (8003e78 <xTaskResumeAll+0x11c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1cc      	bne.n	8003da8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e14:	f000 fb16 	bl	8004444 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003e18:	4b1c      	ldr	r3, [pc, #112]	; (8003e8c <xTaskResumeAll+0x130>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d010      	beq.n	8003e46 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e24:	f000 f836 	bl	8003e94 <xTaskIncrementTick>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d002      	beq.n	8003e34 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003e2e:	4b16      	ldr	r3, [pc, #88]	; (8003e88 <xTaskResumeAll+0x12c>)
 8003e30:	2201      	movs	r2, #1
 8003e32:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	3b01      	subs	r3, #1
 8003e38:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1f1      	bne.n	8003e24 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003e40:	4b12      	ldr	r3, [pc, #72]	; (8003e8c <xTaskResumeAll+0x130>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e46:	4b10      	ldr	r3, [pc, #64]	; (8003e88 <xTaskResumeAll+0x12c>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d009      	beq.n	8003e62 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e52:	4b0f      	ldr	r3, [pc, #60]	; (8003e90 <xTaskResumeAll+0x134>)
 8003e54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	f3bf 8f4f 	dsb	sy
 8003e5e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e62:	f000 fe7b 	bl	8004b5c <vPortExitCritical>

	return xAlreadyYielded;
 8003e66:	68bb      	ldr	r3, [r7, #8]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	2000050c 	.word	0x2000050c
 8003e74:	200004e4 	.word	0x200004e4
 8003e78:	200004a4 	.word	0x200004a4
 8003e7c:	200004ec 	.word	0x200004ec
 8003e80:	200003e8 	.word	0x200003e8
 8003e84:	200003e4 	.word	0x200003e4
 8003e88:	200004f8 	.word	0x200004f8
 8003e8c:	200004f4 	.word	0x200004f4
 8003e90:	e000ed04 	.word	0xe000ed04

08003e94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e9e:	4b51      	ldr	r3, [pc, #324]	; (8003fe4 <xTaskIncrementTick+0x150>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f040 808d 	bne.w	8003fc2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ea8:	4b4f      	ldr	r3, [pc, #316]	; (8003fe8 <xTaskIncrementTick+0x154>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	3301      	adds	r3, #1
 8003eae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003eb0:	4a4d      	ldr	r2, [pc, #308]	; (8003fe8 <xTaskIncrementTick+0x154>)
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d120      	bne.n	8003efe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ebc:	4b4b      	ldr	r3, [pc, #300]	; (8003fec <xTaskIncrementTick+0x158>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00a      	beq.n	8003edc <xTaskIncrementTick+0x48>
	__asm volatile
 8003ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eca:	f383 8811 	msr	BASEPRI, r3
 8003ece:	f3bf 8f6f 	isb	sy
 8003ed2:	f3bf 8f4f 	dsb	sy
 8003ed6:	603b      	str	r3, [r7, #0]
}
 8003ed8:	bf00      	nop
 8003eda:	e7fe      	b.n	8003eda <xTaskIncrementTick+0x46>
 8003edc:	4b43      	ldr	r3, [pc, #268]	; (8003fec <xTaskIncrementTick+0x158>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	60fb      	str	r3, [r7, #12]
 8003ee2:	4b43      	ldr	r3, [pc, #268]	; (8003ff0 <xTaskIncrementTick+0x15c>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a41      	ldr	r2, [pc, #260]	; (8003fec <xTaskIncrementTick+0x158>)
 8003ee8:	6013      	str	r3, [r2, #0]
 8003eea:	4a41      	ldr	r2, [pc, #260]	; (8003ff0 <xTaskIncrementTick+0x15c>)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6013      	str	r3, [r2, #0]
 8003ef0:	4b40      	ldr	r3, [pc, #256]	; (8003ff4 <xTaskIncrementTick+0x160>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	4a3f      	ldr	r2, [pc, #252]	; (8003ff4 <xTaskIncrementTick+0x160>)
 8003ef8:	6013      	str	r3, [r2, #0]
 8003efa:	f000 faa3 	bl	8004444 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003efe:	4b3e      	ldr	r3, [pc, #248]	; (8003ff8 <xTaskIncrementTick+0x164>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d34d      	bcc.n	8003fa4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f08:	4b38      	ldr	r3, [pc, #224]	; (8003fec <xTaskIncrementTick+0x158>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <xTaskIncrementTick+0x82>
 8003f12:	2301      	movs	r3, #1
 8003f14:	e000      	b.n	8003f18 <xTaskIncrementTick+0x84>
 8003f16:	2300      	movs	r3, #0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d004      	beq.n	8003f26 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f1c:	4b36      	ldr	r3, [pc, #216]	; (8003ff8 <xTaskIncrementTick+0x164>)
 8003f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f22:	601a      	str	r2, [r3, #0]
					break;
 8003f24:	e03e      	b.n	8003fa4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003f26:	4b31      	ldr	r3, [pc, #196]	; (8003fec <xTaskIncrementTick+0x158>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d203      	bcs.n	8003f46 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003f3e:	4a2e      	ldr	r2, [pc, #184]	; (8003ff8 <xTaskIncrementTick+0x164>)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6013      	str	r3, [r2, #0]
						break;
 8003f44:	e02e      	b.n	8003fa4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	3304      	adds	r3, #4
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7fe feca 	bl	8002ce4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d004      	beq.n	8003f62 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	3318      	adds	r3, #24
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7fe fec1 	bl	8002ce4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f66:	2201      	movs	r2, #1
 8003f68:	409a      	lsls	r2, r3
 8003f6a:	4b24      	ldr	r3, [pc, #144]	; (8003ffc <xTaskIncrementTick+0x168>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	4a22      	ldr	r2, [pc, #136]	; (8003ffc <xTaskIncrementTick+0x168>)
 8003f72:	6013      	str	r3, [r2, #0]
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f78:	4613      	mov	r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4413      	add	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	4a1f      	ldr	r2, [pc, #124]	; (8004000 <xTaskIncrementTick+0x16c>)
 8003f82:	441a      	add	r2, r3
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	3304      	adds	r3, #4
 8003f88:	4619      	mov	r1, r3
 8003f8a:	4610      	mov	r0, r2
 8003f8c:	f7fe fe4f 	bl	8002c2e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f94:	4b1b      	ldr	r3, [pc, #108]	; (8004004 <xTaskIncrementTick+0x170>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d3b4      	bcc.n	8003f08 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fa2:	e7b1      	b.n	8003f08 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003fa4:	4b17      	ldr	r3, [pc, #92]	; (8004004 <xTaskIncrementTick+0x170>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003faa:	4915      	ldr	r1, [pc, #84]	; (8004000 <xTaskIncrementTick+0x16c>)
 8003fac:	4613      	mov	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4413      	add	r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	440b      	add	r3, r1
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d907      	bls.n	8003fcc <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	617b      	str	r3, [r7, #20]
 8003fc0:	e004      	b.n	8003fcc <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003fc2:	4b11      	ldr	r3, [pc, #68]	; (8004008 <xTaskIncrementTick+0x174>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	4a0f      	ldr	r2, [pc, #60]	; (8004008 <xTaskIncrementTick+0x174>)
 8003fca:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003fcc:	4b0f      	ldr	r3, [pc, #60]	; (800400c <xTaskIncrementTick+0x178>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003fd8:	697b      	ldr	r3, [r7, #20]
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3718      	adds	r7, #24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	2000050c 	.word	0x2000050c
 8003fe8:	200004e8 	.word	0x200004e8
 8003fec:	2000049c 	.word	0x2000049c
 8003ff0:	200004a0 	.word	0x200004a0
 8003ff4:	200004fc 	.word	0x200004fc
 8003ff8:	20000504 	.word	0x20000504
 8003ffc:	200004ec 	.word	0x200004ec
 8004000:	200003e8 	.word	0x200003e8
 8004004:	200003e4 	.word	0x200003e4
 8004008:	200004f4 	.word	0x200004f4
 800400c:	200004f8 	.word	0x200004f8

08004010 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004010:	b480      	push	{r7}
 8004012:	b087      	sub	sp, #28
 8004014:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004016:	4b26      	ldr	r3, [pc, #152]	; (80040b0 <vTaskSwitchContext+0xa0>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d003      	beq.n	8004026 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800401e:	4b25      	ldr	r3, [pc, #148]	; (80040b4 <vTaskSwitchContext+0xa4>)
 8004020:	2201      	movs	r2, #1
 8004022:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004024:	e03f      	b.n	80040a6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004026:	4b23      	ldr	r3, [pc, #140]	; (80040b4 <vTaskSwitchContext+0xa4>)
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800402c:	4b22      	ldr	r3, [pc, #136]	; (80040b8 <vTaskSwitchContext+0xa8>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	fab3 f383 	clz	r3, r3
 8004038:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800403a:	7afb      	ldrb	r3, [r7, #11]
 800403c:	f1c3 031f 	rsb	r3, r3, #31
 8004040:	617b      	str	r3, [r7, #20]
 8004042:	491e      	ldr	r1, [pc, #120]	; (80040bc <vTaskSwitchContext+0xac>)
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	4613      	mov	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4413      	add	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	440b      	add	r3, r1
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10a      	bne.n	800406c <vTaskSwitchContext+0x5c>
	__asm volatile
 8004056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405a:	f383 8811 	msr	BASEPRI, r3
 800405e:	f3bf 8f6f 	isb	sy
 8004062:	f3bf 8f4f 	dsb	sy
 8004066:	607b      	str	r3, [r7, #4]
}
 8004068:	bf00      	nop
 800406a:	e7fe      	b.n	800406a <vTaskSwitchContext+0x5a>
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	4613      	mov	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	4413      	add	r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	4a11      	ldr	r2, [pc, #68]	; (80040bc <vTaskSwitchContext+0xac>)
 8004078:	4413      	add	r3, r2
 800407a:	613b      	str	r3, [r7, #16]
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	605a      	str	r2, [r3, #4]
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	685a      	ldr	r2, [r3, #4]
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	3308      	adds	r3, #8
 800408e:	429a      	cmp	r2, r3
 8004090:	d104      	bne.n	800409c <vTaskSwitchContext+0x8c>
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	685a      	ldr	r2, [r3, #4]
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	605a      	str	r2, [r3, #4]
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	4a07      	ldr	r2, [pc, #28]	; (80040c0 <vTaskSwitchContext+0xb0>)
 80040a4:	6013      	str	r3, [r2, #0]
}
 80040a6:	bf00      	nop
 80040a8:	371c      	adds	r7, #28
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bc80      	pop	{r7}
 80040ae:	4770      	bx	lr
 80040b0:	2000050c 	.word	0x2000050c
 80040b4:	200004f8 	.word	0x200004f8
 80040b8:	200004ec 	.word	0x200004ec
 80040bc:	200003e8 	.word	0x200003e8
 80040c0:	200003e4 	.word	0x200003e4

080040c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10a      	bne.n	80040ea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80040d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d8:	f383 8811 	msr	BASEPRI, r3
 80040dc:	f3bf 8f6f 	isb	sy
 80040e0:	f3bf 8f4f 	dsb	sy
 80040e4:	60fb      	str	r3, [r7, #12]
}
 80040e6:	bf00      	nop
 80040e8:	e7fe      	b.n	80040e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040ea:	4b07      	ldr	r3, [pc, #28]	; (8004108 <vTaskPlaceOnEventList+0x44>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	3318      	adds	r3, #24
 80040f0:	4619      	mov	r1, r3
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7fe fdbe 	bl	8002c74 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80040f8:	2101      	movs	r1, #1
 80040fa:	6838      	ldr	r0, [r7, #0]
 80040fc:	f000 fba4 	bl	8004848 <prvAddCurrentTaskToDelayedList>
}
 8004100:	bf00      	nop
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	200003e4 	.word	0x200003e4

0800410c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10a      	bne.n	8004138 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004126:	f383 8811 	msr	BASEPRI, r3
 800412a:	f3bf 8f6f 	isb	sy
 800412e:	f3bf 8f4f 	dsb	sy
 8004132:	60fb      	str	r3, [r7, #12]
}
 8004134:	bf00      	nop
 8004136:	e7fe      	b.n	8004136 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	3318      	adds	r3, #24
 800413c:	4618      	mov	r0, r3
 800413e:	f7fe fdd1 	bl	8002ce4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004142:	4b1d      	ldr	r3, [pc, #116]	; (80041b8 <xTaskRemoveFromEventList+0xac>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d11c      	bne.n	8004184 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	3304      	adds	r3, #4
 800414e:	4618      	mov	r0, r3
 8004150:	f7fe fdc8 	bl	8002ce4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004158:	2201      	movs	r2, #1
 800415a:	409a      	lsls	r2, r3
 800415c:	4b17      	ldr	r3, [pc, #92]	; (80041bc <xTaskRemoveFromEventList+0xb0>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4313      	orrs	r3, r2
 8004162:	4a16      	ldr	r2, [pc, #88]	; (80041bc <xTaskRemoveFromEventList+0xb0>)
 8004164:	6013      	str	r3, [r2, #0]
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800416a:	4613      	mov	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	4413      	add	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4a13      	ldr	r2, [pc, #76]	; (80041c0 <xTaskRemoveFromEventList+0xb4>)
 8004174:	441a      	add	r2, r3
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	3304      	adds	r3, #4
 800417a:	4619      	mov	r1, r3
 800417c:	4610      	mov	r0, r2
 800417e:	f7fe fd56 	bl	8002c2e <vListInsertEnd>
 8004182:	e005      	b.n	8004190 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	3318      	adds	r3, #24
 8004188:	4619      	mov	r1, r3
 800418a:	480e      	ldr	r0, [pc, #56]	; (80041c4 <xTaskRemoveFromEventList+0xb8>)
 800418c:	f7fe fd4f 	bl	8002c2e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004194:	4b0c      	ldr	r3, [pc, #48]	; (80041c8 <xTaskRemoveFromEventList+0xbc>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419a:	429a      	cmp	r2, r3
 800419c:	d905      	bls.n	80041aa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800419e:	2301      	movs	r3, #1
 80041a0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80041a2:	4b0a      	ldr	r3, [pc, #40]	; (80041cc <xTaskRemoveFromEventList+0xc0>)
 80041a4:	2201      	movs	r2, #1
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	e001      	b.n	80041ae <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80041aa:	2300      	movs	r3, #0
 80041ac:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80041ae:	697b      	ldr	r3, [r7, #20]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3718      	adds	r7, #24
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	2000050c 	.word	0x2000050c
 80041bc:	200004ec 	.word	0x200004ec
 80041c0:	200003e8 	.word	0x200003e8
 80041c4:	200004a4 	.word	0x200004a4
 80041c8:	200003e4 	.word	0x200003e4
 80041cc:	200004f8 	.word	0x200004f8

080041d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80041d8:	4b06      	ldr	r3, [pc, #24]	; (80041f4 <vTaskInternalSetTimeOutState+0x24>)
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80041e0:	4b05      	ldr	r3, [pc, #20]	; (80041f8 <vTaskInternalSetTimeOutState+0x28>)
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	605a      	str	r2, [r3, #4]
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bc80      	pop	{r7}
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	200004fc 	.word	0x200004fc
 80041f8:	200004e8 	.word	0x200004e8

080041fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b088      	sub	sp, #32
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d10a      	bne.n	8004222 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800420c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004210:	f383 8811 	msr	BASEPRI, r3
 8004214:	f3bf 8f6f 	isb	sy
 8004218:	f3bf 8f4f 	dsb	sy
 800421c:	613b      	str	r3, [r7, #16]
}
 800421e:	bf00      	nop
 8004220:	e7fe      	b.n	8004220 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10a      	bne.n	800423e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422c:	f383 8811 	msr	BASEPRI, r3
 8004230:	f3bf 8f6f 	isb	sy
 8004234:	f3bf 8f4f 	dsb	sy
 8004238:	60fb      	str	r3, [r7, #12]
}
 800423a:	bf00      	nop
 800423c:	e7fe      	b.n	800423c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800423e:	f000 fc5d 	bl	8004afc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004242:	4b1d      	ldr	r3, [pc, #116]	; (80042b8 <xTaskCheckForTimeOut+0xbc>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800425a:	d102      	bne.n	8004262 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800425c:	2300      	movs	r3, #0
 800425e:	61fb      	str	r3, [r7, #28]
 8004260:	e023      	b.n	80042aa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	4b15      	ldr	r3, [pc, #84]	; (80042bc <xTaskCheckForTimeOut+0xc0>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	429a      	cmp	r2, r3
 800426c:	d007      	beq.n	800427e <xTaskCheckForTimeOut+0x82>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	429a      	cmp	r2, r3
 8004276:	d302      	bcc.n	800427e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004278:	2301      	movs	r3, #1
 800427a:	61fb      	str	r3, [r7, #28]
 800427c:	e015      	b.n	80042aa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	429a      	cmp	r2, r3
 8004286:	d20b      	bcs.n	80042a0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	1ad2      	subs	r2, r2, r3
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f7ff ff9b 	bl	80041d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800429a:	2300      	movs	r3, #0
 800429c:	61fb      	str	r3, [r7, #28]
 800429e:	e004      	b.n	80042aa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80042a6:	2301      	movs	r3, #1
 80042a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80042aa:	f000 fc57 	bl	8004b5c <vPortExitCritical>

	return xReturn;
 80042ae:	69fb      	ldr	r3, [r7, #28]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3720      	adds	r7, #32
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	200004e8 	.word	0x200004e8
 80042bc:	200004fc 	.word	0x200004fc

080042c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80042c0:	b480      	push	{r7}
 80042c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80042c4:	4b03      	ldr	r3, [pc, #12]	; (80042d4 <vTaskMissedYield+0x14>)
 80042c6:	2201      	movs	r2, #1
 80042c8:	601a      	str	r2, [r3, #0]
}
 80042ca:	bf00      	nop
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bc80      	pop	{r7}
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	200004f8 	.word	0x200004f8

080042d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80042e0:	f000 f852 	bl	8004388 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80042e4:	4b06      	ldr	r3, [pc, #24]	; (8004300 <prvIdleTask+0x28>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d9f9      	bls.n	80042e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80042ec:	4b05      	ldr	r3, [pc, #20]	; (8004304 <prvIdleTask+0x2c>)
 80042ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	f3bf 8f4f 	dsb	sy
 80042f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80042fc:	e7f0      	b.n	80042e0 <prvIdleTask+0x8>
 80042fe:	bf00      	nop
 8004300:	200003e8 	.word	0x200003e8
 8004304:	e000ed04 	.word	0xe000ed04

08004308 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800430e:	2300      	movs	r3, #0
 8004310:	607b      	str	r3, [r7, #4]
 8004312:	e00c      	b.n	800432e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	4613      	mov	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4413      	add	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	4a12      	ldr	r2, [pc, #72]	; (8004368 <prvInitialiseTaskLists+0x60>)
 8004320:	4413      	add	r3, r2
 8004322:	4618      	mov	r0, r3
 8004324:	f7fe fc58 	bl	8002bd8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	3301      	adds	r3, #1
 800432c:	607b      	str	r3, [r7, #4]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b06      	cmp	r3, #6
 8004332:	d9ef      	bls.n	8004314 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004334:	480d      	ldr	r0, [pc, #52]	; (800436c <prvInitialiseTaskLists+0x64>)
 8004336:	f7fe fc4f 	bl	8002bd8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800433a:	480d      	ldr	r0, [pc, #52]	; (8004370 <prvInitialiseTaskLists+0x68>)
 800433c:	f7fe fc4c 	bl	8002bd8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004340:	480c      	ldr	r0, [pc, #48]	; (8004374 <prvInitialiseTaskLists+0x6c>)
 8004342:	f7fe fc49 	bl	8002bd8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004346:	480c      	ldr	r0, [pc, #48]	; (8004378 <prvInitialiseTaskLists+0x70>)
 8004348:	f7fe fc46 	bl	8002bd8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800434c:	480b      	ldr	r0, [pc, #44]	; (800437c <prvInitialiseTaskLists+0x74>)
 800434e:	f7fe fc43 	bl	8002bd8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004352:	4b0b      	ldr	r3, [pc, #44]	; (8004380 <prvInitialiseTaskLists+0x78>)
 8004354:	4a05      	ldr	r2, [pc, #20]	; (800436c <prvInitialiseTaskLists+0x64>)
 8004356:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004358:	4b0a      	ldr	r3, [pc, #40]	; (8004384 <prvInitialiseTaskLists+0x7c>)
 800435a:	4a05      	ldr	r2, [pc, #20]	; (8004370 <prvInitialiseTaskLists+0x68>)
 800435c:	601a      	str	r2, [r3, #0]
}
 800435e:	bf00      	nop
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	200003e8 	.word	0x200003e8
 800436c:	20000474 	.word	0x20000474
 8004370:	20000488 	.word	0x20000488
 8004374:	200004a4 	.word	0x200004a4
 8004378:	200004b8 	.word	0x200004b8
 800437c:	200004d0 	.word	0x200004d0
 8004380:	2000049c 	.word	0x2000049c
 8004384:	200004a0 	.word	0x200004a0

08004388 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800438e:	e019      	b.n	80043c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004390:	f000 fbb4 	bl	8004afc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004394:	4b10      	ldr	r3, [pc, #64]	; (80043d8 <prvCheckTasksWaitingTermination+0x50>)
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	3304      	adds	r3, #4
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7fe fc9f 	bl	8002ce4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80043a6:	4b0d      	ldr	r3, [pc, #52]	; (80043dc <prvCheckTasksWaitingTermination+0x54>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	3b01      	subs	r3, #1
 80043ac:	4a0b      	ldr	r2, [pc, #44]	; (80043dc <prvCheckTasksWaitingTermination+0x54>)
 80043ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80043b0:	4b0b      	ldr	r3, [pc, #44]	; (80043e0 <prvCheckTasksWaitingTermination+0x58>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	3b01      	subs	r3, #1
 80043b6:	4a0a      	ldr	r2, [pc, #40]	; (80043e0 <prvCheckTasksWaitingTermination+0x58>)
 80043b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80043ba:	f000 fbcf 	bl	8004b5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 f810 	bl	80043e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043c4:	4b06      	ldr	r3, [pc, #24]	; (80043e0 <prvCheckTasksWaitingTermination+0x58>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1e1      	bne.n	8004390 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80043cc:	bf00      	nop
 80043ce:	bf00      	nop
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	200004b8 	.word	0x200004b8
 80043dc:	200004e4 	.word	0x200004e4
 80043e0:	200004cc 	.word	0x200004cc

080043e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d108      	bne.n	8004408 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 fd42 	bl	8004e84 <vPortFree>
				vPortFree( pxTCB );
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 fd3f 	bl	8004e84 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004406:	e018      	b.n	800443a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800440e:	2b01      	cmp	r3, #1
 8004410:	d103      	bne.n	800441a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 fd36 	bl	8004e84 <vPortFree>
	}
 8004418:	e00f      	b.n	800443a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004420:	2b02      	cmp	r3, #2
 8004422:	d00a      	beq.n	800443a <prvDeleteTCB+0x56>
	__asm volatile
 8004424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004428:	f383 8811 	msr	BASEPRI, r3
 800442c:	f3bf 8f6f 	isb	sy
 8004430:	f3bf 8f4f 	dsb	sy
 8004434:	60fb      	str	r3, [r7, #12]
}
 8004436:	bf00      	nop
 8004438:	e7fe      	b.n	8004438 <prvDeleteTCB+0x54>
	}
 800443a:	bf00      	nop
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
	...

08004444 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800444a:	4b0e      	ldr	r3, [pc, #56]	; (8004484 <prvResetNextTaskUnblockTime+0x40>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <prvResetNextTaskUnblockTime+0x14>
 8004454:	2301      	movs	r3, #1
 8004456:	e000      	b.n	800445a <prvResetNextTaskUnblockTime+0x16>
 8004458:	2300      	movs	r3, #0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d004      	beq.n	8004468 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800445e:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <prvResetNextTaskUnblockTime+0x44>)
 8004460:	f04f 32ff 	mov.w	r2, #4294967295
 8004464:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004466:	e008      	b.n	800447a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004468:	4b06      	ldr	r3, [pc, #24]	; (8004484 <prvResetNextTaskUnblockTime+0x40>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	4a04      	ldr	r2, [pc, #16]	; (8004488 <prvResetNextTaskUnblockTime+0x44>)
 8004478:	6013      	str	r3, [r2, #0]
}
 800447a:	bf00      	nop
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	bc80      	pop	{r7}
 8004482:	4770      	bx	lr
 8004484:	2000049c 	.word	0x2000049c
 8004488:	20000504 	.word	0x20000504

0800448c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004492:	4b0b      	ldr	r3, [pc, #44]	; (80044c0 <xTaskGetSchedulerState+0x34>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d102      	bne.n	80044a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800449a:	2301      	movs	r3, #1
 800449c:	607b      	str	r3, [r7, #4]
 800449e:	e008      	b.n	80044b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044a0:	4b08      	ldr	r3, [pc, #32]	; (80044c4 <xTaskGetSchedulerState+0x38>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d102      	bne.n	80044ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80044a8:	2302      	movs	r3, #2
 80044aa:	607b      	str	r3, [r7, #4]
 80044ac:	e001      	b.n	80044b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80044ae:	2300      	movs	r3, #0
 80044b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80044b2:	687b      	ldr	r3, [r7, #4]
	}
 80044b4:	4618      	mov	r0, r3
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bc80      	pop	{r7}
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	200004f0 	.word	0x200004f0
 80044c4:	2000050c 	.word	0x2000050c

080044c8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80044d4:	2300      	movs	r3, #0
 80044d6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d06e      	beq.n	80045bc <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e2:	4b39      	ldr	r3, [pc, #228]	; (80045c8 <xTaskPriorityInherit+0x100>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d25e      	bcs.n	80045aa <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	db06      	blt.n	8004502 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044f4:	4b34      	ldr	r3, [pc, #208]	; (80045c8 <xTaskPriorityInherit+0x100>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fa:	f1c3 0207 	rsb	r2, r3, #7
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	6959      	ldr	r1, [r3, #20]
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800450a:	4613      	mov	r3, r2
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	4413      	add	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4a2e      	ldr	r2, [pc, #184]	; (80045cc <xTaskPriorityInherit+0x104>)
 8004514:	4413      	add	r3, r2
 8004516:	4299      	cmp	r1, r3
 8004518:	d101      	bne.n	800451e <xTaskPriorityInherit+0x56>
 800451a:	2301      	movs	r3, #1
 800451c:	e000      	b.n	8004520 <xTaskPriorityInherit+0x58>
 800451e:	2300      	movs	r3, #0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d03a      	beq.n	800459a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	3304      	adds	r3, #4
 8004528:	4618      	mov	r0, r3
 800452a:	f7fe fbdb 	bl	8002ce4 <uxListRemove>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d115      	bne.n	8004560 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004538:	4924      	ldr	r1, [pc, #144]	; (80045cc <xTaskPriorityInherit+0x104>)
 800453a:	4613      	mov	r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	4413      	add	r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	440b      	add	r3, r1
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10a      	bne.n	8004560 <xTaskPriorityInherit+0x98>
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454e:	2201      	movs	r2, #1
 8004550:	fa02 f303 	lsl.w	r3, r2, r3
 8004554:	43da      	mvns	r2, r3
 8004556:	4b1e      	ldr	r3, [pc, #120]	; (80045d0 <xTaskPriorityInherit+0x108>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4013      	ands	r3, r2
 800455c:	4a1c      	ldr	r2, [pc, #112]	; (80045d0 <xTaskPriorityInherit+0x108>)
 800455e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004560:	4b19      	ldr	r3, [pc, #100]	; (80045c8 <xTaskPriorityInherit+0x100>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456e:	2201      	movs	r2, #1
 8004570:	409a      	lsls	r2, r3
 8004572:	4b17      	ldr	r3, [pc, #92]	; (80045d0 <xTaskPriorityInherit+0x108>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4313      	orrs	r3, r2
 8004578:	4a15      	ldr	r2, [pc, #84]	; (80045d0 <xTaskPriorityInherit+0x108>)
 800457a:	6013      	str	r3, [r2, #0]
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004580:	4613      	mov	r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	4413      	add	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4a10      	ldr	r2, [pc, #64]	; (80045cc <xTaskPriorityInherit+0x104>)
 800458a:	441a      	add	r2, r3
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	3304      	adds	r3, #4
 8004590:	4619      	mov	r1, r3
 8004592:	4610      	mov	r0, r2
 8004594:	f7fe fb4b 	bl	8002c2e <vListInsertEnd>
 8004598:	e004      	b.n	80045a4 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800459a:	4b0b      	ldr	r3, [pc, #44]	; (80045c8 <xTaskPriorityInherit+0x100>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80045a4:	2301      	movs	r3, #1
 80045a6:	60fb      	str	r3, [r7, #12]
 80045a8:	e008      	b.n	80045bc <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045ae:	4b06      	ldr	r3, [pc, #24]	; (80045c8 <xTaskPriorityInherit+0x100>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d201      	bcs.n	80045bc <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80045b8:	2301      	movs	r3, #1
 80045ba:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80045bc:	68fb      	ldr	r3, [r7, #12]
	}
 80045be:	4618      	mov	r0, r3
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	200003e4 	.word	0x200003e4
 80045cc:	200003e8 	.word	0x200003e8
 80045d0:	200004ec 	.word	0x200004ec

080045d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b086      	sub	sp, #24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80045e0:	2300      	movs	r3, #0
 80045e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d06e      	beq.n	80046c8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80045ea:	4b3a      	ldr	r3, [pc, #232]	; (80046d4 <xTaskPriorityDisinherit+0x100>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d00a      	beq.n	800460a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80045f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f8:	f383 8811 	msr	BASEPRI, r3
 80045fc:	f3bf 8f6f 	isb	sy
 8004600:	f3bf 8f4f 	dsb	sy
 8004604:	60fb      	str	r3, [r7, #12]
}
 8004606:	bf00      	nop
 8004608:	e7fe      	b.n	8004608 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10a      	bne.n	8004628 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004616:	f383 8811 	msr	BASEPRI, r3
 800461a:	f3bf 8f6f 	isb	sy
 800461e:	f3bf 8f4f 	dsb	sy
 8004622:	60bb      	str	r3, [r7, #8]
}
 8004624:	bf00      	nop
 8004626:	e7fe      	b.n	8004626 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800462c:	1e5a      	subs	r2, r3, #1
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800463a:	429a      	cmp	r2, r3
 800463c:	d044      	beq.n	80046c8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004642:	2b00      	cmp	r3, #0
 8004644:	d140      	bne.n	80046c8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	3304      	adds	r3, #4
 800464a:	4618      	mov	r0, r3
 800464c:	f7fe fb4a 	bl	8002ce4 <uxListRemove>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d115      	bne.n	8004682 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800465a:	491f      	ldr	r1, [pc, #124]	; (80046d8 <xTaskPriorityDisinherit+0x104>)
 800465c:	4613      	mov	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	440b      	add	r3, r1
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10a      	bne.n	8004682 <xTaskPriorityDisinherit+0xae>
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004670:	2201      	movs	r2, #1
 8004672:	fa02 f303 	lsl.w	r3, r2, r3
 8004676:	43da      	mvns	r2, r3
 8004678:	4b18      	ldr	r3, [pc, #96]	; (80046dc <xTaskPriorityDisinherit+0x108>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4013      	ands	r3, r2
 800467e:	4a17      	ldr	r2, [pc, #92]	; (80046dc <xTaskPriorityDisinherit+0x108>)
 8004680:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468e:	f1c3 0207 	rsb	r2, r3, #7
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469a:	2201      	movs	r2, #1
 800469c:	409a      	lsls	r2, r3
 800469e:	4b0f      	ldr	r3, [pc, #60]	; (80046dc <xTaskPriorityDisinherit+0x108>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	4a0d      	ldr	r2, [pc, #52]	; (80046dc <xTaskPriorityDisinherit+0x108>)
 80046a6:	6013      	str	r3, [r2, #0]
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ac:	4613      	mov	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4413      	add	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4a08      	ldr	r2, [pc, #32]	; (80046d8 <xTaskPriorityDisinherit+0x104>)
 80046b6:	441a      	add	r2, r3
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	3304      	adds	r3, #4
 80046bc:	4619      	mov	r1, r3
 80046be:	4610      	mov	r0, r2
 80046c0:	f7fe fab5 	bl	8002c2e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80046c4:	2301      	movs	r3, #1
 80046c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80046c8:	697b      	ldr	r3, [r7, #20]
	}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3718      	adds	r7, #24
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	200003e4 	.word	0x200003e4
 80046d8:	200003e8 	.word	0x200003e8
 80046dc:	200004ec 	.word	0x200004ec

080046e0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b088      	sub	sp, #32
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80046ee:	2301      	movs	r3, #1
 80046f0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f000 8088 	beq.w	800480a <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10a      	bne.n	8004718 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004706:	f383 8811 	msr	BASEPRI, r3
 800470a:	f3bf 8f6f 	isb	sy
 800470e:	f3bf 8f4f 	dsb	sy
 8004712:	60fb      	str	r3, [r7, #12]
}
 8004714:	bf00      	nop
 8004716:	e7fe      	b.n	8004716 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471c:	683a      	ldr	r2, [r7, #0]
 800471e:	429a      	cmp	r2, r3
 8004720:	d902      	bls.n	8004728 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	61fb      	str	r3, [r7, #28]
 8004726:	e002      	b.n	800472e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004732:	69fa      	ldr	r2, [r7, #28]
 8004734:	429a      	cmp	r2, r3
 8004736:	d068      	beq.n	800480a <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	429a      	cmp	r2, r3
 8004740:	d163      	bne.n	800480a <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004742:	4b34      	ldr	r3, [pc, #208]	; (8004814 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	429a      	cmp	r2, r3
 800474a:	d10a      	bne.n	8004762 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800474c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004750:	f383 8811 	msr	BASEPRI, r3
 8004754:	f3bf 8f6f 	isb	sy
 8004758:	f3bf 8f4f 	dsb	sy
 800475c:	60bb      	str	r3, [r7, #8]
}
 800475e:	bf00      	nop
 8004760:	e7fe      	b.n	8004760 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004766:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	69fa      	ldr	r2, [r7, #28]
 800476c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	2b00      	cmp	r3, #0
 8004774:	db04      	blt.n	8004780 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	f1c3 0207 	rsb	r2, r3, #7
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	6959      	ldr	r1, [r3, #20]
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	4613      	mov	r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4413      	add	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4a22      	ldr	r2, [pc, #136]	; (8004818 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004790:	4413      	add	r3, r2
 8004792:	4299      	cmp	r1, r3
 8004794:	d101      	bne.n	800479a <vTaskPriorityDisinheritAfterTimeout+0xba>
 8004796:	2301      	movs	r3, #1
 8004798:	e000      	b.n	800479c <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800479a:	2300      	movs	r3, #0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d034      	beq.n	800480a <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	3304      	adds	r3, #4
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7fe fa9d 	bl	8002ce4 <uxListRemove>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d115      	bne.n	80047dc <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b4:	4918      	ldr	r1, [pc, #96]	; (8004818 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80047b6:	4613      	mov	r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	4413      	add	r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	440b      	add	r3, r1
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10a      	bne.n	80047dc <vTaskPriorityDisinheritAfterTimeout+0xfc>
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ca:	2201      	movs	r2, #1
 80047cc:	fa02 f303 	lsl.w	r3, r2, r3
 80047d0:	43da      	mvns	r2, r3
 80047d2:	4b12      	ldr	r3, [pc, #72]	; (800481c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4013      	ands	r3, r2
 80047d8:	4a10      	ldr	r2, [pc, #64]	; (800481c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80047da:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e0:	2201      	movs	r2, #1
 80047e2:	409a      	lsls	r2, r3
 80047e4:	4b0d      	ldr	r3, [pc, #52]	; (800481c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	4a0c      	ldr	r2, [pc, #48]	; (800481c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80047ec:	6013      	str	r3, [r2, #0]
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047f2:	4613      	mov	r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	4413      	add	r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	4a07      	ldr	r2, [pc, #28]	; (8004818 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80047fc:	441a      	add	r2, r3
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	3304      	adds	r3, #4
 8004802:	4619      	mov	r1, r3
 8004804:	4610      	mov	r0, r2
 8004806:	f7fe fa12 	bl	8002c2e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800480a:	bf00      	nop
 800480c:	3720      	adds	r7, #32
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	200003e4 	.word	0x200003e4
 8004818:	200003e8 	.word	0x200003e8
 800481c:	200004ec 	.word	0x200004ec

08004820 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004820:	b480      	push	{r7}
 8004822:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004824:	4b07      	ldr	r3, [pc, #28]	; (8004844 <pvTaskIncrementMutexHeldCount+0x24>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d004      	beq.n	8004836 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800482c:	4b05      	ldr	r3, [pc, #20]	; (8004844 <pvTaskIncrementMutexHeldCount+0x24>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004832:	3201      	adds	r2, #1
 8004834:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8004836:	4b03      	ldr	r3, [pc, #12]	; (8004844 <pvTaskIncrementMutexHeldCount+0x24>)
 8004838:	681b      	ldr	r3, [r3, #0]
	}
 800483a:	4618      	mov	r0, r3
 800483c:	46bd      	mov	sp, r7
 800483e:	bc80      	pop	{r7}
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	200003e4 	.word	0x200003e4

08004848 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004852:	4b29      	ldr	r3, [pc, #164]	; (80048f8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004858:	4b28      	ldr	r3, [pc, #160]	; (80048fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	3304      	adds	r3, #4
 800485e:	4618      	mov	r0, r3
 8004860:	f7fe fa40 	bl	8002ce4 <uxListRemove>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10b      	bne.n	8004882 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800486a:	4b24      	ldr	r3, [pc, #144]	; (80048fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004870:	2201      	movs	r2, #1
 8004872:	fa02 f303 	lsl.w	r3, r2, r3
 8004876:	43da      	mvns	r2, r3
 8004878:	4b21      	ldr	r3, [pc, #132]	; (8004900 <prvAddCurrentTaskToDelayedList+0xb8>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4013      	ands	r3, r2
 800487e:	4a20      	ldr	r2, [pc, #128]	; (8004900 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004880:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004888:	d10a      	bne.n	80048a0 <prvAddCurrentTaskToDelayedList+0x58>
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d007      	beq.n	80048a0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004890:	4b1a      	ldr	r3, [pc, #104]	; (80048fc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	3304      	adds	r3, #4
 8004896:	4619      	mov	r1, r3
 8004898:	481a      	ldr	r0, [pc, #104]	; (8004904 <prvAddCurrentTaskToDelayedList+0xbc>)
 800489a:	f7fe f9c8 	bl	8002c2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800489e:	e026      	b.n	80048ee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4413      	add	r3, r2
 80048a6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80048a8:	4b14      	ldr	r3, [pc, #80]	; (80048fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68ba      	ldr	r2, [r7, #8]
 80048ae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d209      	bcs.n	80048cc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048b8:	4b13      	ldr	r3, [pc, #76]	; (8004908 <prvAddCurrentTaskToDelayedList+0xc0>)
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	4b0f      	ldr	r3, [pc, #60]	; (80048fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	3304      	adds	r3, #4
 80048c2:	4619      	mov	r1, r3
 80048c4:	4610      	mov	r0, r2
 80048c6:	f7fe f9d5 	bl	8002c74 <vListInsert>
}
 80048ca:	e010      	b.n	80048ee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048cc:	4b0f      	ldr	r3, [pc, #60]	; (800490c <prvAddCurrentTaskToDelayedList+0xc4>)
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	4b0a      	ldr	r3, [pc, #40]	; (80048fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	3304      	adds	r3, #4
 80048d6:	4619      	mov	r1, r3
 80048d8:	4610      	mov	r0, r2
 80048da:	f7fe f9cb 	bl	8002c74 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80048de:	4b0c      	ldr	r3, [pc, #48]	; (8004910 <prvAddCurrentTaskToDelayedList+0xc8>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68ba      	ldr	r2, [r7, #8]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d202      	bcs.n	80048ee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80048e8:	4a09      	ldr	r2, [pc, #36]	; (8004910 <prvAddCurrentTaskToDelayedList+0xc8>)
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	6013      	str	r3, [r2, #0]
}
 80048ee:	bf00      	nop
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	200004e8 	.word	0x200004e8
 80048fc:	200003e4 	.word	0x200003e4
 8004900:	200004ec 	.word	0x200004ec
 8004904:	200004d0 	.word	0x200004d0
 8004908:	200004a0 	.word	0x200004a0
 800490c:	2000049c 	.word	0x2000049c
 8004910:	20000504 	.word	0x20000504

08004914 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	3b04      	subs	r3, #4
 8004924:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800492c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	3b04      	subs	r3, #4
 8004932:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	f023 0201 	bic.w	r2, r3, #1
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	3b04      	subs	r3, #4
 8004942:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004944:	4a08      	ldr	r2, [pc, #32]	; (8004968 <pxPortInitialiseStack+0x54>)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	3b14      	subs	r3, #20
 800494e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	3b20      	subs	r3, #32
 800495a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800495c:	68fb      	ldr	r3, [r7, #12]
}
 800495e:	4618      	mov	r0, r3
 8004960:	3714      	adds	r7, #20
 8004962:	46bd      	mov	sp, r7
 8004964:	bc80      	pop	{r7}
 8004966:	4770      	bx	lr
 8004968:	0800496d 	.word	0x0800496d

0800496c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004972:	2300      	movs	r3, #0
 8004974:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004976:	4b12      	ldr	r3, [pc, #72]	; (80049c0 <prvTaskExitError+0x54>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497e:	d00a      	beq.n	8004996 <prvTaskExitError+0x2a>
	__asm volatile
 8004980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004984:	f383 8811 	msr	BASEPRI, r3
 8004988:	f3bf 8f6f 	isb	sy
 800498c:	f3bf 8f4f 	dsb	sy
 8004990:	60fb      	str	r3, [r7, #12]
}
 8004992:	bf00      	nop
 8004994:	e7fe      	b.n	8004994 <prvTaskExitError+0x28>
	__asm volatile
 8004996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499a:	f383 8811 	msr	BASEPRI, r3
 800499e:	f3bf 8f6f 	isb	sy
 80049a2:	f3bf 8f4f 	dsb	sy
 80049a6:	60bb      	str	r3, [r7, #8]
}
 80049a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80049aa:	bf00      	nop
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d0fc      	beq.n	80049ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80049b2:	bf00      	nop
 80049b4:	bf00      	nop
 80049b6:	3714      	adds	r7, #20
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bc80      	pop	{r7}
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	2000000c 	.word	0x2000000c
	...

080049d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80049d0:	4b07      	ldr	r3, [pc, #28]	; (80049f0 <pxCurrentTCBConst2>)
 80049d2:	6819      	ldr	r1, [r3, #0]
 80049d4:	6808      	ldr	r0, [r1, #0]
 80049d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80049da:	f380 8809 	msr	PSP, r0
 80049de:	f3bf 8f6f 	isb	sy
 80049e2:	f04f 0000 	mov.w	r0, #0
 80049e6:	f380 8811 	msr	BASEPRI, r0
 80049ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80049ee:	4770      	bx	lr

080049f0 <pxCurrentTCBConst2>:
 80049f0:	200003e4 	.word	0x200003e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80049f4:	bf00      	nop
 80049f6:	bf00      	nop

080049f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80049f8:	4806      	ldr	r0, [pc, #24]	; (8004a14 <prvPortStartFirstTask+0x1c>)
 80049fa:	6800      	ldr	r0, [r0, #0]
 80049fc:	6800      	ldr	r0, [r0, #0]
 80049fe:	f380 8808 	msr	MSP, r0
 8004a02:	b662      	cpsie	i
 8004a04:	b661      	cpsie	f
 8004a06:	f3bf 8f4f 	dsb	sy
 8004a0a:	f3bf 8f6f 	isb	sy
 8004a0e:	df00      	svc	0
 8004a10:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004a12:	bf00      	nop
 8004a14:	e000ed08 	.word	0xe000ed08

08004a18 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a1e:	4b32      	ldr	r3, [pc, #200]	; (8004ae8 <xPortStartScheduler+0xd0>)
 8004a20:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	22ff      	movs	r2, #255	; 0xff
 8004a2e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004a38:	78fb      	ldrb	r3, [r7, #3]
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a40:	b2da      	uxtb	r2, r3
 8004a42:	4b2a      	ldr	r3, [pc, #168]	; (8004aec <xPortStartScheduler+0xd4>)
 8004a44:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a46:	4b2a      	ldr	r3, [pc, #168]	; (8004af0 <xPortStartScheduler+0xd8>)
 8004a48:	2207      	movs	r2, #7
 8004a4a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a4c:	e009      	b.n	8004a62 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004a4e:	4b28      	ldr	r3, [pc, #160]	; (8004af0 <xPortStartScheduler+0xd8>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	3b01      	subs	r3, #1
 8004a54:	4a26      	ldr	r2, [pc, #152]	; (8004af0 <xPortStartScheduler+0xd8>)
 8004a56:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a58:	78fb      	ldrb	r3, [r7, #3]
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	005b      	lsls	r3, r3, #1
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a62:	78fb      	ldrb	r3, [r7, #3]
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a6a:	2b80      	cmp	r3, #128	; 0x80
 8004a6c:	d0ef      	beq.n	8004a4e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004a6e:	4b20      	ldr	r3, [pc, #128]	; (8004af0 <xPortStartScheduler+0xd8>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f1c3 0307 	rsb	r3, r3, #7
 8004a76:	2b04      	cmp	r3, #4
 8004a78:	d00a      	beq.n	8004a90 <xPortStartScheduler+0x78>
	__asm volatile
 8004a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7e:	f383 8811 	msr	BASEPRI, r3
 8004a82:	f3bf 8f6f 	isb	sy
 8004a86:	f3bf 8f4f 	dsb	sy
 8004a8a:	60bb      	str	r3, [r7, #8]
}
 8004a8c:	bf00      	nop
 8004a8e:	e7fe      	b.n	8004a8e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a90:	4b17      	ldr	r3, [pc, #92]	; (8004af0 <xPortStartScheduler+0xd8>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	021b      	lsls	r3, r3, #8
 8004a96:	4a16      	ldr	r2, [pc, #88]	; (8004af0 <xPortStartScheduler+0xd8>)
 8004a98:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a9a:	4b15      	ldr	r3, [pc, #84]	; (8004af0 <xPortStartScheduler+0xd8>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004aa2:	4a13      	ldr	r2, [pc, #76]	; (8004af0 <xPortStartScheduler+0xd8>)
 8004aa4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	b2da      	uxtb	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004aae:	4b11      	ldr	r3, [pc, #68]	; (8004af4 <xPortStartScheduler+0xdc>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a10      	ldr	r2, [pc, #64]	; (8004af4 <xPortStartScheduler+0xdc>)
 8004ab4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ab8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004aba:	4b0e      	ldr	r3, [pc, #56]	; (8004af4 <xPortStartScheduler+0xdc>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a0d      	ldr	r2, [pc, #52]	; (8004af4 <xPortStartScheduler+0xdc>)
 8004ac0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004ac4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004ac6:	f000 f8b9 	bl	8004c3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004aca:	4b0b      	ldr	r3, [pc, #44]	; (8004af8 <xPortStartScheduler+0xe0>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ad0:	f7ff ff92 	bl	80049f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004ad4:	f7ff fa9c 	bl	8004010 <vTaskSwitchContext>
	prvTaskExitError();
 8004ad8:	f7ff ff48 	bl	800496c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	e000e400 	.word	0xe000e400
 8004aec:	20000510 	.word	0x20000510
 8004af0:	20000514 	.word	0x20000514
 8004af4:	e000ed20 	.word	0xe000ed20
 8004af8:	2000000c 	.word	0x2000000c

08004afc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
	__asm volatile
 8004b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b06:	f383 8811 	msr	BASEPRI, r3
 8004b0a:	f3bf 8f6f 	isb	sy
 8004b0e:	f3bf 8f4f 	dsb	sy
 8004b12:	607b      	str	r3, [r7, #4]
}
 8004b14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004b16:	4b0f      	ldr	r3, [pc, #60]	; (8004b54 <vPortEnterCritical+0x58>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	4a0d      	ldr	r2, [pc, #52]	; (8004b54 <vPortEnterCritical+0x58>)
 8004b1e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004b20:	4b0c      	ldr	r3, [pc, #48]	; (8004b54 <vPortEnterCritical+0x58>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d10f      	bne.n	8004b48 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b28:	4b0b      	ldr	r3, [pc, #44]	; (8004b58 <vPortEnterCritical+0x5c>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00a      	beq.n	8004b48 <vPortEnterCritical+0x4c>
	__asm volatile
 8004b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b36:	f383 8811 	msr	BASEPRI, r3
 8004b3a:	f3bf 8f6f 	isb	sy
 8004b3e:	f3bf 8f4f 	dsb	sy
 8004b42:	603b      	str	r3, [r7, #0]
}
 8004b44:	bf00      	nop
 8004b46:	e7fe      	b.n	8004b46 <vPortEnterCritical+0x4a>
	}
}
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bc80      	pop	{r7}
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	2000000c 	.word	0x2000000c
 8004b58:	e000ed04 	.word	0xe000ed04

08004b5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004b62:	4b11      	ldr	r3, [pc, #68]	; (8004ba8 <vPortExitCritical+0x4c>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10a      	bne.n	8004b80 <vPortExitCritical+0x24>
	__asm volatile
 8004b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6e:	f383 8811 	msr	BASEPRI, r3
 8004b72:	f3bf 8f6f 	isb	sy
 8004b76:	f3bf 8f4f 	dsb	sy
 8004b7a:	607b      	str	r3, [r7, #4]
}
 8004b7c:	bf00      	nop
 8004b7e:	e7fe      	b.n	8004b7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004b80:	4b09      	ldr	r3, [pc, #36]	; (8004ba8 <vPortExitCritical+0x4c>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	3b01      	subs	r3, #1
 8004b86:	4a08      	ldr	r2, [pc, #32]	; (8004ba8 <vPortExitCritical+0x4c>)
 8004b88:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004b8a:	4b07      	ldr	r3, [pc, #28]	; (8004ba8 <vPortExitCritical+0x4c>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d105      	bne.n	8004b9e <vPortExitCritical+0x42>
 8004b92:	2300      	movs	r3, #0
 8004b94:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	f383 8811 	msr	BASEPRI, r3
}
 8004b9c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004b9e:	bf00      	nop
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bc80      	pop	{r7}
 8004ba6:	4770      	bx	lr
 8004ba8:	2000000c 	.word	0x2000000c
 8004bac:	00000000 	.word	0x00000000

08004bb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004bb0:	f3ef 8009 	mrs	r0, PSP
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	4b0d      	ldr	r3, [pc, #52]	; (8004bf0 <pxCurrentTCBConst>)
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004bc0:	6010      	str	r0, [r2, #0]
 8004bc2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004bc6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004bca:	f380 8811 	msr	BASEPRI, r0
 8004bce:	f7ff fa1f 	bl	8004010 <vTaskSwitchContext>
 8004bd2:	f04f 0000 	mov.w	r0, #0
 8004bd6:	f380 8811 	msr	BASEPRI, r0
 8004bda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004bde:	6819      	ldr	r1, [r3, #0]
 8004be0:	6808      	ldr	r0, [r1, #0]
 8004be2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004be6:	f380 8809 	msr	PSP, r0
 8004bea:	f3bf 8f6f 	isb	sy
 8004bee:	4770      	bx	lr

08004bf0 <pxCurrentTCBConst>:
 8004bf0:	200003e4 	.word	0x200003e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004bf4:	bf00      	nop
 8004bf6:	bf00      	nop

08004bf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
	__asm volatile
 8004bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c02:	f383 8811 	msr	BASEPRI, r3
 8004c06:	f3bf 8f6f 	isb	sy
 8004c0a:	f3bf 8f4f 	dsb	sy
 8004c0e:	607b      	str	r3, [r7, #4]
}
 8004c10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004c12:	f7ff f93f 	bl	8003e94 <xTaskIncrementTick>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c1c:	4b06      	ldr	r3, [pc, #24]	; (8004c38 <SysTick_Handler+0x40>)
 8004c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	2300      	movs	r3, #0
 8004c26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	f383 8811 	msr	BASEPRI, r3
}
 8004c2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004c30:	bf00      	nop
 8004c32:	3708      	adds	r7, #8
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	e000ed04 	.word	0xe000ed04

08004c3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004c40:	4b0a      	ldr	r3, [pc, #40]	; (8004c6c <vPortSetupTimerInterrupt+0x30>)
 8004c42:	2200      	movs	r2, #0
 8004c44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004c46:	4b0a      	ldr	r3, [pc, #40]	; (8004c70 <vPortSetupTimerInterrupt+0x34>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004c4c:	4b09      	ldr	r3, [pc, #36]	; (8004c74 <vPortSetupTimerInterrupt+0x38>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a09      	ldr	r2, [pc, #36]	; (8004c78 <vPortSetupTimerInterrupt+0x3c>)
 8004c52:	fba2 2303 	umull	r2, r3, r2, r3
 8004c56:	099b      	lsrs	r3, r3, #6
 8004c58:	4a08      	ldr	r2, [pc, #32]	; (8004c7c <vPortSetupTimerInterrupt+0x40>)
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004c5e:	4b03      	ldr	r3, [pc, #12]	; (8004c6c <vPortSetupTimerInterrupt+0x30>)
 8004c60:	2207      	movs	r2, #7
 8004c62:	601a      	str	r2, [r3, #0]
}
 8004c64:	bf00      	nop
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bc80      	pop	{r7}
 8004c6a:	4770      	bx	lr
 8004c6c:	e000e010 	.word	0xe000e010
 8004c70:	e000e018 	.word	0xe000e018
 8004c74:	20000000 	.word	0x20000000
 8004c78:	10624dd3 	.word	0x10624dd3
 8004c7c:	e000e014 	.word	0xe000e014

08004c80 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004c86:	f3ef 8305 	mrs	r3, IPSR
 8004c8a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2b0f      	cmp	r3, #15
 8004c90:	d914      	bls.n	8004cbc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004c92:	4a16      	ldr	r2, [pc, #88]	; (8004cec <vPortValidateInterruptPriority+0x6c>)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4413      	add	r3, r2
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004c9c:	4b14      	ldr	r3, [pc, #80]	; (8004cf0 <vPortValidateInterruptPriority+0x70>)
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	7afa      	ldrb	r2, [r7, #11]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d20a      	bcs.n	8004cbc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004caa:	f383 8811 	msr	BASEPRI, r3
 8004cae:	f3bf 8f6f 	isb	sy
 8004cb2:	f3bf 8f4f 	dsb	sy
 8004cb6:	607b      	str	r3, [r7, #4]
}
 8004cb8:	bf00      	nop
 8004cba:	e7fe      	b.n	8004cba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004cbc:	4b0d      	ldr	r3, [pc, #52]	; (8004cf4 <vPortValidateInterruptPriority+0x74>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004cc4:	4b0c      	ldr	r3, [pc, #48]	; (8004cf8 <vPortValidateInterruptPriority+0x78>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d90a      	bls.n	8004ce2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd0:	f383 8811 	msr	BASEPRI, r3
 8004cd4:	f3bf 8f6f 	isb	sy
 8004cd8:	f3bf 8f4f 	dsb	sy
 8004cdc:	603b      	str	r3, [r7, #0]
}
 8004cde:	bf00      	nop
 8004ce0:	e7fe      	b.n	8004ce0 <vPortValidateInterruptPriority+0x60>
	}
 8004ce2:	bf00      	nop
 8004ce4:	3714      	adds	r7, #20
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bc80      	pop	{r7}
 8004cea:	4770      	bx	lr
 8004cec:	e000e3f0 	.word	0xe000e3f0
 8004cf0:	20000510 	.word	0x20000510
 8004cf4:	e000ed0c 	.word	0xe000ed0c
 8004cf8:	20000514 	.word	0x20000514

08004cfc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b08a      	sub	sp, #40	; 0x28
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004d04:	2300      	movs	r3, #0
 8004d06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004d08:	f7ff f81a 	bl	8003d40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004d0c:	4b58      	ldr	r3, [pc, #352]	; (8004e70 <pvPortMalloc+0x174>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d101      	bne.n	8004d18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004d14:	f000 f910 	bl	8004f38 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004d18:	4b56      	ldr	r3, [pc, #344]	; (8004e74 <pvPortMalloc+0x178>)
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4013      	ands	r3, r2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f040 808e 	bne.w	8004e42 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d01d      	beq.n	8004d68 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004d2c:	2208      	movs	r2, #8
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4413      	add	r3, r2
 8004d32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f003 0307 	and.w	r3, r3, #7
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d014      	beq.n	8004d68 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f023 0307 	bic.w	r3, r3, #7
 8004d44:	3308      	adds	r3, #8
 8004d46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f003 0307 	and.w	r3, r3, #7
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00a      	beq.n	8004d68 <pvPortMalloc+0x6c>
	__asm volatile
 8004d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d56:	f383 8811 	msr	BASEPRI, r3
 8004d5a:	f3bf 8f6f 	isb	sy
 8004d5e:	f3bf 8f4f 	dsb	sy
 8004d62:	617b      	str	r3, [r7, #20]
}
 8004d64:	bf00      	nop
 8004d66:	e7fe      	b.n	8004d66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d069      	beq.n	8004e42 <pvPortMalloc+0x146>
 8004d6e:	4b42      	ldr	r3, [pc, #264]	; (8004e78 <pvPortMalloc+0x17c>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d864      	bhi.n	8004e42 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004d78:	4b40      	ldr	r3, [pc, #256]	; (8004e7c <pvPortMalloc+0x180>)
 8004d7a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004d7c:	4b3f      	ldr	r3, [pc, #252]	; (8004e7c <pvPortMalloc+0x180>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d82:	e004      	b.n	8004d8e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d86:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d903      	bls.n	8004da0 <pvPortMalloc+0xa4>
 8004d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1f1      	bne.n	8004d84 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004da0:	4b33      	ldr	r3, [pc, #204]	; (8004e70 <pvPortMalloc+0x174>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d04b      	beq.n	8004e42 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004daa:	6a3b      	ldr	r3, [r7, #32]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2208      	movs	r2, #8
 8004db0:	4413      	add	r3, r2
 8004db2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	6a3b      	ldr	r3, [r7, #32]
 8004dba:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	1ad2      	subs	r2, r2, r3
 8004dc4:	2308      	movs	r3, #8
 8004dc6:	005b      	lsls	r3, r3, #1
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d91f      	bls.n	8004e0c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	f003 0307 	and.w	r3, r3, #7
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00a      	beq.n	8004df4 <pvPortMalloc+0xf8>
	__asm volatile
 8004dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de2:	f383 8811 	msr	BASEPRI, r3
 8004de6:	f3bf 8f6f 	isb	sy
 8004dea:	f3bf 8f4f 	dsb	sy
 8004dee:	613b      	str	r3, [r7, #16]
}
 8004df0:	bf00      	nop
 8004df2:	e7fe      	b.n	8004df2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df6:	685a      	ldr	r2, [r3, #4]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	1ad2      	subs	r2, r2, r3
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004e06:	69b8      	ldr	r0, [r7, #24]
 8004e08:	f000 f8f8 	bl	8004ffc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004e0c:	4b1a      	ldr	r3, [pc, #104]	; (8004e78 <pvPortMalloc+0x17c>)
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	4a18      	ldr	r2, [pc, #96]	; (8004e78 <pvPortMalloc+0x17c>)
 8004e18:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004e1a:	4b17      	ldr	r3, [pc, #92]	; (8004e78 <pvPortMalloc+0x17c>)
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	4b18      	ldr	r3, [pc, #96]	; (8004e80 <pvPortMalloc+0x184>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d203      	bcs.n	8004e2e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004e26:	4b14      	ldr	r3, [pc, #80]	; (8004e78 <pvPortMalloc+0x17c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a15      	ldr	r2, [pc, #84]	; (8004e80 <pvPortMalloc+0x184>)
 8004e2c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	4b10      	ldr	r3, [pc, #64]	; (8004e74 <pvPortMalloc+0x178>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	431a      	orrs	r2, r3
 8004e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	2200      	movs	r2, #0
 8004e40:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004e42:	f7fe ff8b 	bl	8003d5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	f003 0307 	and.w	r3, r3, #7
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00a      	beq.n	8004e66 <pvPortMalloc+0x16a>
	__asm volatile
 8004e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e54:	f383 8811 	msr	BASEPRI, r3
 8004e58:	f3bf 8f6f 	isb	sy
 8004e5c:	f3bf 8f4f 	dsb	sy
 8004e60:	60fb      	str	r3, [r7, #12]
}
 8004e62:	bf00      	nop
 8004e64:	e7fe      	b.n	8004e64 <pvPortMalloc+0x168>
	return pvReturn;
 8004e66:	69fb      	ldr	r3, [r7, #28]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3728      	adds	r7, #40	; 0x28
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	20001520 	.word	0x20001520
 8004e74:	2000152c 	.word	0x2000152c
 8004e78:	20001524 	.word	0x20001524
 8004e7c:	20001518 	.word	0x20001518
 8004e80:	20001528 	.word	0x20001528

08004e84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d048      	beq.n	8004f28 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004e96:	2308      	movs	r3, #8
 8004e98:	425b      	negs	r3, r3
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	685a      	ldr	r2, [r3, #4]
 8004ea8:	4b21      	ldr	r3, [pc, #132]	; (8004f30 <vPortFree+0xac>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4013      	ands	r3, r2
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10a      	bne.n	8004ec8 <vPortFree+0x44>
	__asm volatile
 8004eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb6:	f383 8811 	msr	BASEPRI, r3
 8004eba:	f3bf 8f6f 	isb	sy
 8004ebe:	f3bf 8f4f 	dsb	sy
 8004ec2:	60fb      	str	r3, [r7, #12]
}
 8004ec4:	bf00      	nop
 8004ec6:	e7fe      	b.n	8004ec6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00a      	beq.n	8004ee6 <vPortFree+0x62>
	__asm volatile
 8004ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed4:	f383 8811 	msr	BASEPRI, r3
 8004ed8:	f3bf 8f6f 	isb	sy
 8004edc:	f3bf 8f4f 	dsb	sy
 8004ee0:	60bb      	str	r3, [r7, #8]
}
 8004ee2:	bf00      	nop
 8004ee4:	e7fe      	b.n	8004ee4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	685a      	ldr	r2, [r3, #4]
 8004eea:	4b11      	ldr	r3, [pc, #68]	; (8004f30 <vPortFree+0xac>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4013      	ands	r3, r2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d019      	beq.n	8004f28 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d115      	bne.n	8004f28 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	4b0b      	ldr	r3, [pc, #44]	; (8004f30 <vPortFree+0xac>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	43db      	mvns	r3, r3
 8004f06:	401a      	ands	r2, r3
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004f0c:	f7fe ff18 	bl	8003d40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	4b07      	ldr	r3, [pc, #28]	; (8004f34 <vPortFree+0xb0>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4413      	add	r3, r2
 8004f1a:	4a06      	ldr	r2, [pc, #24]	; (8004f34 <vPortFree+0xb0>)
 8004f1c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004f1e:	6938      	ldr	r0, [r7, #16]
 8004f20:	f000 f86c 	bl	8004ffc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004f24:	f7fe ff1a 	bl	8003d5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004f28:	bf00      	nop
 8004f2a:	3718      	adds	r7, #24
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	2000152c 	.word	0x2000152c
 8004f34:	20001524 	.word	0x20001524

08004f38 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004f3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f42:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004f44:	4b27      	ldr	r3, [pc, #156]	; (8004fe4 <prvHeapInit+0xac>)
 8004f46:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f003 0307 	and.w	r3, r3, #7
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00c      	beq.n	8004f6c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	3307      	adds	r3, #7
 8004f56:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f023 0307 	bic.w	r3, r3, #7
 8004f5e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	4a1f      	ldr	r2, [pc, #124]	; (8004fe4 <prvHeapInit+0xac>)
 8004f68:	4413      	add	r3, r2
 8004f6a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004f70:	4a1d      	ldr	r2, [pc, #116]	; (8004fe8 <prvHeapInit+0xb0>)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004f76:	4b1c      	ldr	r3, [pc, #112]	; (8004fe8 <prvHeapInit+0xb0>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	4413      	add	r3, r2
 8004f82:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004f84:	2208      	movs	r2, #8
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	1a9b      	subs	r3, r3, r2
 8004f8a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f023 0307 	bic.w	r3, r3, #7
 8004f92:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	4a15      	ldr	r2, [pc, #84]	; (8004fec <prvHeapInit+0xb4>)
 8004f98:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004f9a:	4b14      	ldr	r3, [pc, #80]	; (8004fec <prvHeapInit+0xb4>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004fa2:	4b12      	ldr	r3, [pc, #72]	; (8004fec <prvHeapInit+0xb4>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	1ad2      	subs	r2, r2, r3
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004fb8:	4b0c      	ldr	r3, [pc, #48]	; (8004fec <prvHeapInit+0xb4>)
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	4a0a      	ldr	r2, [pc, #40]	; (8004ff0 <prvHeapInit+0xb8>)
 8004fc6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	4a09      	ldr	r2, [pc, #36]	; (8004ff4 <prvHeapInit+0xbc>)
 8004fce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004fd0:	4b09      	ldr	r3, [pc, #36]	; (8004ff8 <prvHeapInit+0xc0>)
 8004fd2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004fd6:	601a      	str	r2, [r3, #0]
}
 8004fd8:	bf00      	nop
 8004fda:	3714      	adds	r7, #20
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bc80      	pop	{r7}
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	20000518 	.word	0x20000518
 8004fe8:	20001518 	.word	0x20001518
 8004fec:	20001520 	.word	0x20001520
 8004ff0:	20001528 	.word	0x20001528
 8004ff4:	20001524 	.word	0x20001524
 8004ff8:	2000152c 	.word	0x2000152c

08004ffc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005004:	4b27      	ldr	r3, [pc, #156]	; (80050a4 <prvInsertBlockIntoFreeList+0xa8>)
 8005006:	60fb      	str	r3, [r7, #12]
 8005008:	e002      	b.n	8005010 <prvInsertBlockIntoFreeList+0x14>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	60fb      	str	r3, [r7, #12]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	429a      	cmp	r2, r3
 8005018:	d8f7      	bhi.n	800500a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	4413      	add	r3, r2
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	429a      	cmp	r2, r3
 800502a:	d108      	bne.n	800503e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	685a      	ldr	r2, [r3, #4]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	441a      	add	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	441a      	add	r2, r3
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	429a      	cmp	r2, r3
 8005050:	d118      	bne.n	8005084 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	4b14      	ldr	r3, [pc, #80]	; (80050a8 <prvInsertBlockIntoFreeList+0xac>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	429a      	cmp	r2, r3
 800505c:	d00d      	beq.n	800507a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	685a      	ldr	r2, [r3, #4]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	441a      	add	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	601a      	str	r2, [r3, #0]
 8005078:	e008      	b.n	800508c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800507a:	4b0b      	ldr	r3, [pc, #44]	; (80050a8 <prvInsertBlockIntoFreeList+0xac>)
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	601a      	str	r2, [r3, #0]
 8005082:	e003      	b.n	800508c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	429a      	cmp	r2, r3
 8005092:	d002      	beq.n	800509a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800509a:	bf00      	nop
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	bc80      	pop	{r7}
 80050a2:	4770      	bx	lr
 80050a4:	20001518 	.word	0x20001518
 80050a8:	20001520 	.word	0x20001520

080050ac <siprintf>:
 80050ac:	b40e      	push	{r1, r2, r3}
 80050ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80050b2:	b500      	push	{lr}
 80050b4:	b09c      	sub	sp, #112	; 0x70
 80050b6:	ab1d      	add	r3, sp, #116	; 0x74
 80050b8:	9002      	str	r0, [sp, #8]
 80050ba:	9006      	str	r0, [sp, #24]
 80050bc:	9107      	str	r1, [sp, #28]
 80050be:	9104      	str	r1, [sp, #16]
 80050c0:	4808      	ldr	r0, [pc, #32]	; (80050e4 <siprintf+0x38>)
 80050c2:	4909      	ldr	r1, [pc, #36]	; (80050e8 <siprintf+0x3c>)
 80050c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80050c8:	9105      	str	r1, [sp, #20]
 80050ca:	6800      	ldr	r0, [r0, #0]
 80050cc:	a902      	add	r1, sp, #8
 80050ce:	9301      	str	r3, [sp, #4]
 80050d0:	f000 f99c 	bl	800540c <_svfiprintf_r>
 80050d4:	2200      	movs	r2, #0
 80050d6:	9b02      	ldr	r3, [sp, #8]
 80050d8:	701a      	strb	r2, [r3, #0]
 80050da:	b01c      	add	sp, #112	; 0x70
 80050dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80050e0:	b003      	add	sp, #12
 80050e2:	4770      	bx	lr
 80050e4:	2000005c 	.word	0x2000005c
 80050e8:	ffff0208 	.word	0xffff0208

080050ec <memset>:
 80050ec:	4603      	mov	r3, r0
 80050ee:	4402      	add	r2, r0
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d100      	bne.n	80050f6 <memset+0xa>
 80050f4:	4770      	bx	lr
 80050f6:	f803 1b01 	strb.w	r1, [r3], #1
 80050fa:	e7f9      	b.n	80050f0 <memset+0x4>

080050fc <__errno>:
 80050fc:	4b01      	ldr	r3, [pc, #4]	; (8005104 <__errno+0x8>)
 80050fe:	6818      	ldr	r0, [r3, #0]
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	2000005c 	.word	0x2000005c

08005108 <__libc_init_array>:
 8005108:	b570      	push	{r4, r5, r6, lr}
 800510a:	2600      	movs	r6, #0
 800510c:	4d0c      	ldr	r5, [pc, #48]	; (8005140 <__libc_init_array+0x38>)
 800510e:	4c0d      	ldr	r4, [pc, #52]	; (8005144 <__libc_init_array+0x3c>)
 8005110:	1b64      	subs	r4, r4, r5
 8005112:	10a4      	asrs	r4, r4, #2
 8005114:	42a6      	cmp	r6, r4
 8005116:	d109      	bne.n	800512c <__libc_init_array+0x24>
 8005118:	f000 fc7a 	bl	8005a10 <_init>
 800511c:	2600      	movs	r6, #0
 800511e:	4d0a      	ldr	r5, [pc, #40]	; (8005148 <__libc_init_array+0x40>)
 8005120:	4c0a      	ldr	r4, [pc, #40]	; (800514c <__libc_init_array+0x44>)
 8005122:	1b64      	subs	r4, r4, r5
 8005124:	10a4      	asrs	r4, r4, #2
 8005126:	42a6      	cmp	r6, r4
 8005128:	d105      	bne.n	8005136 <__libc_init_array+0x2e>
 800512a:	bd70      	pop	{r4, r5, r6, pc}
 800512c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005130:	4798      	blx	r3
 8005132:	3601      	adds	r6, #1
 8005134:	e7ee      	b.n	8005114 <__libc_init_array+0xc>
 8005136:	f855 3b04 	ldr.w	r3, [r5], #4
 800513a:	4798      	blx	r3
 800513c:	3601      	adds	r6, #1
 800513e:	e7f2      	b.n	8005126 <__libc_init_array+0x1e>
 8005140:	08005b58 	.word	0x08005b58
 8005144:	08005b58 	.word	0x08005b58
 8005148:	08005b58 	.word	0x08005b58
 800514c:	08005b5c 	.word	0x08005b5c

08005150 <__retarget_lock_acquire_recursive>:
 8005150:	4770      	bx	lr

08005152 <__retarget_lock_release_recursive>:
 8005152:	4770      	bx	lr

08005154 <memcpy>:
 8005154:	440a      	add	r2, r1
 8005156:	4291      	cmp	r1, r2
 8005158:	f100 33ff 	add.w	r3, r0, #4294967295
 800515c:	d100      	bne.n	8005160 <memcpy+0xc>
 800515e:	4770      	bx	lr
 8005160:	b510      	push	{r4, lr}
 8005162:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005166:	4291      	cmp	r1, r2
 8005168:	f803 4f01 	strb.w	r4, [r3, #1]!
 800516c:	d1f9      	bne.n	8005162 <memcpy+0xe>
 800516e:	bd10      	pop	{r4, pc}

08005170 <_free_r>:
 8005170:	b538      	push	{r3, r4, r5, lr}
 8005172:	4605      	mov	r5, r0
 8005174:	2900      	cmp	r1, #0
 8005176:	d040      	beq.n	80051fa <_free_r+0x8a>
 8005178:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800517c:	1f0c      	subs	r4, r1, #4
 800517e:	2b00      	cmp	r3, #0
 8005180:	bfb8      	it	lt
 8005182:	18e4      	addlt	r4, r4, r3
 8005184:	f000 f8dc 	bl	8005340 <__malloc_lock>
 8005188:	4a1c      	ldr	r2, [pc, #112]	; (80051fc <_free_r+0x8c>)
 800518a:	6813      	ldr	r3, [r2, #0]
 800518c:	b933      	cbnz	r3, 800519c <_free_r+0x2c>
 800518e:	6063      	str	r3, [r4, #4]
 8005190:	6014      	str	r4, [r2, #0]
 8005192:	4628      	mov	r0, r5
 8005194:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005198:	f000 b8d8 	b.w	800534c <__malloc_unlock>
 800519c:	42a3      	cmp	r3, r4
 800519e:	d908      	bls.n	80051b2 <_free_r+0x42>
 80051a0:	6820      	ldr	r0, [r4, #0]
 80051a2:	1821      	adds	r1, r4, r0
 80051a4:	428b      	cmp	r3, r1
 80051a6:	bf01      	itttt	eq
 80051a8:	6819      	ldreq	r1, [r3, #0]
 80051aa:	685b      	ldreq	r3, [r3, #4]
 80051ac:	1809      	addeq	r1, r1, r0
 80051ae:	6021      	streq	r1, [r4, #0]
 80051b0:	e7ed      	b.n	800518e <_free_r+0x1e>
 80051b2:	461a      	mov	r2, r3
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	b10b      	cbz	r3, 80051bc <_free_r+0x4c>
 80051b8:	42a3      	cmp	r3, r4
 80051ba:	d9fa      	bls.n	80051b2 <_free_r+0x42>
 80051bc:	6811      	ldr	r1, [r2, #0]
 80051be:	1850      	adds	r0, r2, r1
 80051c0:	42a0      	cmp	r0, r4
 80051c2:	d10b      	bne.n	80051dc <_free_r+0x6c>
 80051c4:	6820      	ldr	r0, [r4, #0]
 80051c6:	4401      	add	r1, r0
 80051c8:	1850      	adds	r0, r2, r1
 80051ca:	4283      	cmp	r3, r0
 80051cc:	6011      	str	r1, [r2, #0]
 80051ce:	d1e0      	bne.n	8005192 <_free_r+0x22>
 80051d0:	6818      	ldr	r0, [r3, #0]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	4408      	add	r0, r1
 80051d6:	6010      	str	r0, [r2, #0]
 80051d8:	6053      	str	r3, [r2, #4]
 80051da:	e7da      	b.n	8005192 <_free_r+0x22>
 80051dc:	d902      	bls.n	80051e4 <_free_r+0x74>
 80051de:	230c      	movs	r3, #12
 80051e0:	602b      	str	r3, [r5, #0]
 80051e2:	e7d6      	b.n	8005192 <_free_r+0x22>
 80051e4:	6820      	ldr	r0, [r4, #0]
 80051e6:	1821      	adds	r1, r4, r0
 80051e8:	428b      	cmp	r3, r1
 80051ea:	bf01      	itttt	eq
 80051ec:	6819      	ldreq	r1, [r3, #0]
 80051ee:	685b      	ldreq	r3, [r3, #4]
 80051f0:	1809      	addeq	r1, r1, r0
 80051f2:	6021      	streq	r1, [r4, #0]
 80051f4:	6063      	str	r3, [r4, #4]
 80051f6:	6054      	str	r4, [r2, #4]
 80051f8:	e7cb      	b.n	8005192 <_free_r+0x22>
 80051fa:	bd38      	pop	{r3, r4, r5, pc}
 80051fc:	20001670 	.word	0x20001670

08005200 <sbrk_aligned>:
 8005200:	b570      	push	{r4, r5, r6, lr}
 8005202:	4e0e      	ldr	r6, [pc, #56]	; (800523c <sbrk_aligned+0x3c>)
 8005204:	460c      	mov	r4, r1
 8005206:	6831      	ldr	r1, [r6, #0]
 8005208:	4605      	mov	r5, r0
 800520a:	b911      	cbnz	r1, 8005212 <sbrk_aligned+0x12>
 800520c:	f000 fbaa 	bl	8005964 <_sbrk_r>
 8005210:	6030      	str	r0, [r6, #0]
 8005212:	4621      	mov	r1, r4
 8005214:	4628      	mov	r0, r5
 8005216:	f000 fba5 	bl	8005964 <_sbrk_r>
 800521a:	1c43      	adds	r3, r0, #1
 800521c:	d00a      	beq.n	8005234 <sbrk_aligned+0x34>
 800521e:	1cc4      	adds	r4, r0, #3
 8005220:	f024 0403 	bic.w	r4, r4, #3
 8005224:	42a0      	cmp	r0, r4
 8005226:	d007      	beq.n	8005238 <sbrk_aligned+0x38>
 8005228:	1a21      	subs	r1, r4, r0
 800522a:	4628      	mov	r0, r5
 800522c:	f000 fb9a 	bl	8005964 <_sbrk_r>
 8005230:	3001      	adds	r0, #1
 8005232:	d101      	bne.n	8005238 <sbrk_aligned+0x38>
 8005234:	f04f 34ff 	mov.w	r4, #4294967295
 8005238:	4620      	mov	r0, r4
 800523a:	bd70      	pop	{r4, r5, r6, pc}
 800523c:	20001674 	.word	0x20001674

08005240 <_malloc_r>:
 8005240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005244:	1ccd      	adds	r5, r1, #3
 8005246:	f025 0503 	bic.w	r5, r5, #3
 800524a:	3508      	adds	r5, #8
 800524c:	2d0c      	cmp	r5, #12
 800524e:	bf38      	it	cc
 8005250:	250c      	movcc	r5, #12
 8005252:	2d00      	cmp	r5, #0
 8005254:	4607      	mov	r7, r0
 8005256:	db01      	blt.n	800525c <_malloc_r+0x1c>
 8005258:	42a9      	cmp	r1, r5
 800525a:	d905      	bls.n	8005268 <_malloc_r+0x28>
 800525c:	230c      	movs	r3, #12
 800525e:	2600      	movs	r6, #0
 8005260:	603b      	str	r3, [r7, #0]
 8005262:	4630      	mov	r0, r6
 8005264:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005268:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800533c <_malloc_r+0xfc>
 800526c:	f000 f868 	bl	8005340 <__malloc_lock>
 8005270:	f8d8 3000 	ldr.w	r3, [r8]
 8005274:	461c      	mov	r4, r3
 8005276:	bb5c      	cbnz	r4, 80052d0 <_malloc_r+0x90>
 8005278:	4629      	mov	r1, r5
 800527a:	4638      	mov	r0, r7
 800527c:	f7ff ffc0 	bl	8005200 <sbrk_aligned>
 8005280:	1c43      	adds	r3, r0, #1
 8005282:	4604      	mov	r4, r0
 8005284:	d155      	bne.n	8005332 <_malloc_r+0xf2>
 8005286:	f8d8 4000 	ldr.w	r4, [r8]
 800528a:	4626      	mov	r6, r4
 800528c:	2e00      	cmp	r6, #0
 800528e:	d145      	bne.n	800531c <_malloc_r+0xdc>
 8005290:	2c00      	cmp	r4, #0
 8005292:	d048      	beq.n	8005326 <_malloc_r+0xe6>
 8005294:	6823      	ldr	r3, [r4, #0]
 8005296:	4631      	mov	r1, r6
 8005298:	4638      	mov	r0, r7
 800529a:	eb04 0903 	add.w	r9, r4, r3
 800529e:	f000 fb61 	bl	8005964 <_sbrk_r>
 80052a2:	4581      	cmp	r9, r0
 80052a4:	d13f      	bne.n	8005326 <_malloc_r+0xe6>
 80052a6:	6821      	ldr	r1, [r4, #0]
 80052a8:	4638      	mov	r0, r7
 80052aa:	1a6d      	subs	r5, r5, r1
 80052ac:	4629      	mov	r1, r5
 80052ae:	f7ff ffa7 	bl	8005200 <sbrk_aligned>
 80052b2:	3001      	adds	r0, #1
 80052b4:	d037      	beq.n	8005326 <_malloc_r+0xe6>
 80052b6:	6823      	ldr	r3, [r4, #0]
 80052b8:	442b      	add	r3, r5
 80052ba:	6023      	str	r3, [r4, #0]
 80052bc:	f8d8 3000 	ldr.w	r3, [r8]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d038      	beq.n	8005336 <_malloc_r+0xf6>
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	42a2      	cmp	r2, r4
 80052c8:	d12b      	bne.n	8005322 <_malloc_r+0xe2>
 80052ca:	2200      	movs	r2, #0
 80052cc:	605a      	str	r2, [r3, #4]
 80052ce:	e00f      	b.n	80052f0 <_malloc_r+0xb0>
 80052d0:	6822      	ldr	r2, [r4, #0]
 80052d2:	1b52      	subs	r2, r2, r5
 80052d4:	d41f      	bmi.n	8005316 <_malloc_r+0xd6>
 80052d6:	2a0b      	cmp	r2, #11
 80052d8:	d917      	bls.n	800530a <_malloc_r+0xca>
 80052da:	1961      	adds	r1, r4, r5
 80052dc:	42a3      	cmp	r3, r4
 80052de:	6025      	str	r5, [r4, #0]
 80052e0:	bf18      	it	ne
 80052e2:	6059      	strne	r1, [r3, #4]
 80052e4:	6863      	ldr	r3, [r4, #4]
 80052e6:	bf08      	it	eq
 80052e8:	f8c8 1000 	streq.w	r1, [r8]
 80052ec:	5162      	str	r2, [r4, r5]
 80052ee:	604b      	str	r3, [r1, #4]
 80052f0:	4638      	mov	r0, r7
 80052f2:	f104 060b 	add.w	r6, r4, #11
 80052f6:	f000 f829 	bl	800534c <__malloc_unlock>
 80052fa:	f026 0607 	bic.w	r6, r6, #7
 80052fe:	1d23      	adds	r3, r4, #4
 8005300:	1af2      	subs	r2, r6, r3
 8005302:	d0ae      	beq.n	8005262 <_malloc_r+0x22>
 8005304:	1b9b      	subs	r3, r3, r6
 8005306:	50a3      	str	r3, [r4, r2]
 8005308:	e7ab      	b.n	8005262 <_malloc_r+0x22>
 800530a:	42a3      	cmp	r3, r4
 800530c:	6862      	ldr	r2, [r4, #4]
 800530e:	d1dd      	bne.n	80052cc <_malloc_r+0x8c>
 8005310:	f8c8 2000 	str.w	r2, [r8]
 8005314:	e7ec      	b.n	80052f0 <_malloc_r+0xb0>
 8005316:	4623      	mov	r3, r4
 8005318:	6864      	ldr	r4, [r4, #4]
 800531a:	e7ac      	b.n	8005276 <_malloc_r+0x36>
 800531c:	4634      	mov	r4, r6
 800531e:	6876      	ldr	r6, [r6, #4]
 8005320:	e7b4      	b.n	800528c <_malloc_r+0x4c>
 8005322:	4613      	mov	r3, r2
 8005324:	e7cc      	b.n	80052c0 <_malloc_r+0x80>
 8005326:	230c      	movs	r3, #12
 8005328:	4638      	mov	r0, r7
 800532a:	603b      	str	r3, [r7, #0]
 800532c:	f000 f80e 	bl	800534c <__malloc_unlock>
 8005330:	e797      	b.n	8005262 <_malloc_r+0x22>
 8005332:	6025      	str	r5, [r4, #0]
 8005334:	e7dc      	b.n	80052f0 <_malloc_r+0xb0>
 8005336:	605b      	str	r3, [r3, #4]
 8005338:	deff      	udf	#255	; 0xff
 800533a:	bf00      	nop
 800533c:	20001670 	.word	0x20001670

08005340 <__malloc_lock>:
 8005340:	4801      	ldr	r0, [pc, #4]	; (8005348 <__malloc_lock+0x8>)
 8005342:	f7ff bf05 	b.w	8005150 <__retarget_lock_acquire_recursive>
 8005346:	bf00      	nop
 8005348:	2000166c 	.word	0x2000166c

0800534c <__malloc_unlock>:
 800534c:	4801      	ldr	r0, [pc, #4]	; (8005354 <__malloc_unlock+0x8>)
 800534e:	f7ff bf00 	b.w	8005152 <__retarget_lock_release_recursive>
 8005352:	bf00      	nop
 8005354:	2000166c 	.word	0x2000166c

08005358 <__ssputs_r>:
 8005358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800535c:	461f      	mov	r7, r3
 800535e:	688e      	ldr	r6, [r1, #8]
 8005360:	4682      	mov	sl, r0
 8005362:	42be      	cmp	r6, r7
 8005364:	460c      	mov	r4, r1
 8005366:	4690      	mov	r8, r2
 8005368:	680b      	ldr	r3, [r1, #0]
 800536a:	d82c      	bhi.n	80053c6 <__ssputs_r+0x6e>
 800536c:	898a      	ldrh	r2, [r1, #12]
 800536e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005372:	d026      	beq.n	80053c2 <__ssputs_r+0x6a>
 8005374:	6965      	ldr	r5, [r4, #20]
 8005376:	6909      	ldr	r1, [r1, #16]
 8005378:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800537c:	eba3 0901 	sub.w	r9, r3, r1
 8005380:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005384:	1c7b      	adds	r3, r7, #1
 8005386:	444b      	add	r3, r9
 8005388:	106d      	asrs	r5, r5, #1
 800538a:	429d      	cmp	r5, r3
 800538c:	bf38      	it	cc
 800538e:	461d      	movcc	r5, r3
 8005390:	0553      	lsls	r3, r2, #21
 8005392:	d527      	bpl.n	80053e4 <__ssputs_r+0x8c>
 8005394:	4629      	mov	r1, r5
 8005396:	f7ff ff53 	bl	8005240 <_malloc_r>
 800539a:	4606      	mov	r6, r0
 800539c:	b360      	cbz	r0, 80053f8 <__ssputs_r+0xa0>
 800539e:	464a      	mov	r2, r9
 80053a0:	6921      	ldr	r1, [r4, #16]
 80053a2:	f7ff fed7 	bl	8005154 <memcpy>
 80053a6:	89a3      	ldrh	r3, [r4, #12]
 80053a8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80053ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053b0:	81a3      	strh	r3, [r4, #12]
 80053b2:	6126      	str	r6, [r4, #16]
 80053b4:	444e      	add	r6, r9
 80053b6:	6026      	str	r6, [r4, #0]
 80053b8:	463e      	mov	r6, r7
 80053ba:	6165      	str	r5, [r4, #20]
 80053bc:	eba5 0509 	sub.w	r5, r5, r9
 80053c0:	60a5      	str	r5, [r4, #8]
 80053c2:	42be      	cmp	r6, r7
 80053c4:	d900      	bls.n	80053c8 <__ssputs_r+0x70>
 80053c6:	463e      	mov	r6, r7
 80053c8:	4632      	mov	r2, r6
 80053ca:	4641      	mov	r1, r8
 80053cc:	6820      	ldr	r0, [r4, #0]
 80053ce:	f000 faaf 	bl	8005930 <memmove>
 80053d2:	2000      	movs	r0, #0
 80053d4:	68a3      	ldr	r3, [r4, #8]
 80053d6:	1b9b      	subs	r3, r3, r6
 80053d8:	60a3      	str	r3, [r4, #8]
 80053da:	6823      	ldr	r3, [r4, #0]
 80053dc:	4433      	add	r3, r6
 80053de:	6023      	str	r3, [r4, #0]
 80053e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053e4:	462a      	mov	r2, r5
 80053e6:	f000 fadb 	bl	80059a0 <_realloc_r>
 80053ea:	4606      	mov	r6, r0
 80053ec:	2800      	cmp	r0, #0
 80053ee:	d1e0      	bne.n	80053b2 <__ssputs_r+0x5a>
 80053f0:	4650      	mov	r0, sl
 80053f2:	6921      	ldr	r1, [r4, #16]
 80053f4:	f7ff febc 	bl	8005170 <_free_r>
 80053f8:	230c      	movs	r3, #12
 80053fa:	f8ca 3000 	str.w	r3, [sl]
 80053fe:	89a3      	ldrh	r3, [r4, #12]
 8005400:	f04f 30ff 	mov.w	r0, #4294967295
 8005404:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005408:	81a3      	strh	r3, [r4, #12]
 800540a:	e7e9      	b.n	80053e0 <__ssputs_r+0x88>

0800540c <_svfiprintf_r>:
 800540c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005410:	4698      	mov	r8, r3
 8005412:	898b      	ldrh	r3, [r1, #12]
 8005414:	4607      	mov	r7, r0
 8005416:	061b      	lsls	r3, r3, #24
 8005418:	460d      	mov	r5, r1
 800541a:	4614      	mov	r4, r2
 800541c:	b09d      	sub	sp, #116	; 0x74
 800541e:	d50e      	bpl.n	800543e <_svfiprintf_r+0x32>
 8005420:	690b      	ldr	r3, [r1, #16]
 8005422:	b963      	cbnz	r3, 800543e <_svfiprintf_r+0x32>
 8005424:	2140      	movs	r1, #64	; 0x40
 8005426:	f7ff ff0b 	bl	8005240 <_malloc_r>
 800542a:	6028      	str	r0, [r5, #0]
 800542c:	6128      	str	r0, [r5, #16]
 800542e:	b920      	cbnz	r0, 800543a <_svfiprintf_r+0x2e>
 8005430:	230c      	movs	r3, #12
 8005432:	603b      	str	r3, [r7, #0]
 8005434:	f04f 30ff 	mov.w	r0, #4294967295
 8005438:	e0d0      	b.n	80055dc <_svfiprintf_r+0x1d0>
 800543a:	2340      	movs	r3, #64	; 0x40
 800543c:	616b      	str	r3, [r5, #20]
 800543e:	2300      	movs	r3, #0
 8005440:	9309      	str	r3, [sp, #36]	; 0x24
 8005442:	2320      	movs	r3, #32
 8005444:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005448:	2330      	movs	r3, #48	; 0x30
 800544a:	f04f 0901 	mov.w	r9, #1
 800544e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005452:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80055f4 <_svfiprintf_r+0x1e8>
 8005456:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800545a:	4623      	mov	r3, r4
 800545c:	469a      	mov	sl, r3
 800545e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005462:	b10a      	cbz	r2, 8005468 <_svfiprintf_r+0x5c>
 8005464:	2a25      	cmp	r2, #37	; 0x25
 8005466:	d1f9      	bne.n	800545c <_svfiprintf_r+0x50>
 8005468:	ebba 0b04 	subs.w	fp, sl, r4
 800546c:	d00b      	beq.n	8005486 <_svfiprintf_r+0x7a>
 800546e:	465b      	mov	r3, fp
 8005470:	4622      	mov	r2, r4
 8005472:	4629      	mov	r1, r5
 8005474:	4638      	mov	r0, r7
 8005476:	f7ff ff6f 	bl	8005358 <__ssputs_r>
 800547a:	3001      	adds	r0, #1
 800547c:	f000 80a9 	beq.w	80055d2 <_svfiprintf_r+0x1c6>
 8005480:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005482:	445a      	add	r2, fp
 8005484:	9209      	str	r2, [sp, #36]	; 0x24
 8005486:	f89a 3000 	ldrb.w	r3, [sl]
 800548a:	2b00      	cmp	r3, #0
 800548c:	f000 80a1 	beq.w	80055d2 <_svfiprintf_r+0x1c6>
 8005490:	2300      	movs	r3, #0
 8005492:	f04f 32ff 	mov.w	r2, #4294967295
 8005496:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800549a:	f10a 0a01 	add.w	sl, sl, #1
 800549e:	9304      	str	r3, [sp, #16]
 80054a0:	9307      	str	r3, [sp, #28]
 80054a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80054a6:	931a      	str	r3, [sp, #104]	; 0x68
 80054a8:	4654      	mov	r4, sl
 80054aa:	2205      	movs	r2, #5
 80054ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054b0:	4850      	ldr	r0, [pc, #320]	; (80055f4 <_svfiprintf_r+0x1e8>)
 80054b2:	f000 fa67 	bl	8005984 <memchr>
 80054b6:	9a04      	ldr	r2, [sp, #16]
 80054b8:	b9d8      	cbnz	r0, 80054f2 <_svfiprintf_r+0xe6>
 80054ba:	06d0      	lsls	r0, r2, #27
 80054bc:	bf44      	itt	mi
 80054be:	2320      	movmi	r3, #32
 80054c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054c4:	0711      	lsls	r1, r2, #28
 80054c6:	bf44      	itt	mi
 80054c8:	232b      	movmi	r3, #43	; 0x2b
 80054ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054ce:	f89a 3000 	ldrb.w	r3, [sl]
 80054d2:	2b2a      	cmp	r3, #42	; 0x2a
 80054d4:	d015      	beq.n	8005502 <_svfiprintf_r+0xf6>
 80054d6:	4654      	mov	r4, sl
 80054d8:	2000      	movs	r0, #0
 80054da:	f04f 0c0a 	mov.w	ip, #10
 80054de:	9a07      	ldr	r2, [sp, #28]
 80054e0:	4621      	mov	r1, r4
 80054e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054e6:	3b30      	subs	r3, #48	; 0x30
 80054e8:	2b09      	cmp	r3, #9
 80054ea:	d94d      	bls.n	8005588 <_svfiprintf_r+0x17c>
 80054ec:	b1b0      	cbz	r0, 800551c <_svfiprintf_r+0x110>
 80054ee:	9207      	str	r2, [sp, #28]
 80054f0:	e014      	b.n	800551c <_svfiprintf_r+0x110>
 80054f2:	eba0 0308 	sub.w	r3, r0, r8
 80054f6:	fa09 f303 	lsl.w	r3, r9, r3
 80054fa:	4313      	orrs	r3, r2
 80054fc:	46a2      	mov	sl, r4
 80054fe:	9304      	str	r3, [sp, #16]
 8005500:	e7d2      	b.n	80054a8 <_svfiprintf_r+0x9c>
 8005502:	9b03      	ldr	r3, [sp, #12]
 8005504:	1d19      	adds	r1, r3, #4
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	9103      	str	r1, [sp, #12]
 800550a:	2b00      	cmp	r3, #0
 800550c:	bfbb      	ittet	lt
 800550e:	425b      	neglt	r3, r3
 8005510:	f042 0202 	orrlt.w	r2, r2, #2
 8005514:	9307      	strge	r3, [sp, #28]
 8005516:	9307      	strlt	r3, [sp, #28]
 8005518:	bfb8      	it	lt
 800551a:	9204      	strlt	r2, [sp, #16]
 800551c:	7823      	ldrb	r3, [r4, #0]
 800551e:	2b2e      	cmp	r3, #46	; 0x2e
 8005520:	d10c      	bne.n	800553c <_svfiprintf_r+0x130>
 8005522:	7863      	ldrb	r3, [r4, #1]
 8005524:	2b2a      	cmp	r3, #42	; 0x2a
 8005526:	d134      	bne.n	8005592 <_svfiprintf_r+0x186>
 8005528:	9b03      	ldr	r3, [sp, #12]
 800552a:	3402      	adds	r4, #2
 800552c:	1d1a      	adds	r2, r3, #4
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	9203      	str	r2, [sp, #12]
 8005532:	2b00      	cmp	r3, #0
 8005534:	bfb8      	it	lt
 8005536:	f04f 33ff 	movlt.w	r3, #4294967295
 800553a:	9305      	str	r3, [sp, #20]
 800553c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80055f8 <_svfiprintf_r+0x1ec>
 8005540:	2203      	movs	r2, #3
 8005542:	4650      	mov	r0, sl
 8005544:	7821      	ldrb	r1, [r4, #0]
 8005546:	f000 fa1d 	bl	8005984 <memchr>
 800554a:	b138      	cbz	r0, 800555c <_svfiprintf_r+0x150>
 800554c:	2240      	movs	r2, #64	; 0x40
 800554e:	9b04      	ldr	r3, [sp, #16]
 8005550:	eba0 000a 	sub.w	r0, r0, sl
 8005554:	4082      	lsls	r2, r0
 8005556:	4313      	orrs	r3, r2
 8005558:	3401      	adds	r4, #1
 800555a:	9304      	str	r3, [sp, #16]
 800555c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005560:	2206      	movs	r2, #6
 8005562:	4826      	ldr	r0, [pc, #152]	; (80055fc <_svfiprintf_r+0x1f0>)
 8005564:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005568:	f000 fa0c 	bl	8005984 <memchr>
 800556c:	2800      	cmp	r0, #0
 800556e:	d038      	beq.n	80055e2 <_svfiprintf_r+0x1d6>
 8005570:	4b23      	ldr	r3, [pc, #140]	; (8005600 <_svfiprintf_r+0x1f4>)
 8005572:	bb1b      	cbnz	r3, 80055bc <_svfiprintf_r+0x1b0>
 8005574:	9b03      	ldr	r3, [sp, #12]
 8005576:	3307      	adds	r3, #7
 8005578:	f023 0307 	bic.w	r3, r3, #7
 800557c:	3308      	adds	r3, #8
 800557e:	9303      	str	r3, [sp, #12]
 8005580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005582:	4433      	add	r3, r6
 8005584:	9309      	str	r3, [sp, #36]	; 0x24
 8005586:	e768      	b.n	800545a <_svfiprintf_r+0x4e>
 8005588:	460c      	mov	r4, r1
 800558a:	2001      	movs	r0, #1
 800558c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005590:	e7a6      	b.n	80054e0 <_svfiprintf_r+0xd4>
 8005592:	2300      	movs	r3, #0
 8005594:	f04f 0c0a 	mov.w	ip, #10
 8005598:	4619      	mov	r1, r3
 800559a:	3401      	adds	r4, #1
 800559c:	9305      	str	r3, [sp, #20]
 800559e:	4620      	mov	r0, r4
 80055a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055a4:	3a30      	subs	r2, #48	; 0x30
 80055a6:	2a09      	cmp	r2, #9
 80055a8:	d903      	bls.n	80055b2 <_svfiprintf_r+0x1a6>
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d0c6      	beq.n	800553c <_svfiprintf_r+0x130>
 80055ae:	9105      	str	r1, [sp, #20]
 80055b0:	e7c4      	b.n	800553c <_svfiprintf_r+0x130>
 80055b2:	4604      	mov	r4, r0
 80055b4:	2301      	movs	r3, #1
 80055b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80055ba:	e7f0      	b.n	800559e <_svfiprintf_r+0x192>
 80055bc:	ab03      	add	r3, sp, #12
 80055be:	9300      	str	r3, [sp, #0]
 80055c0:	462a      	mov	r2, r5
 80055c2:	4638      	mov	r0, r7
 80055c4:	4b0f      	ldr	r3, [pc, #60]	; (8005604 <_svfiprintf_r+0x1f8>)
 80055c6:	a904      	add	r1, sp, #16
 80055c8:	f3af 8000 	nop.w
 80055cc:	1c42      	adds	r2, r0, #1
 80055ce:	4606      	mov	r6, r0
 80055d0:	d1d6      	bne.n	8005580 <_svfiprintf_r+0x174>
 80055d2:	89ab      	ldrh	r3, [r5, #12]
 80055d4:	065b      	lsls	r3, r3, #25
 80055d6:	f53f af2d 	bmi.w	8005434 <_svfiprintf_r+0x28>
 80055da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055dc:	b01d      	add	sp, #116	; 0x74
 80055de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055e2:	ab03      	add	r3, sp, #12
 80055e4:	9300      	str	r3, [sp, #0]
 80055e6:	462a      	mov	r2, r5
 80055e8:	4638      	mov	r0, r7
 80055ea:	4b06      	ldr	r3, [pc, #24]	; (8005604 <_svfiprintf_r+0x1f8>)
 80055ec:	a904      	add	r1, sp, #16
 80055ee:	f000 f87d 	bl	80056ec <_printf_i>
 80055f2:	e7eb      	b.n	80055cc <_svfiprintf_r+0x1c0>
 80055f4:	08005b24 	.word	0x08005b24
 80055f8:	08005b2a 	.word	0x08005b2a
 80055fc:	08005b2e 	.word	0x08005b2e
 8005600:	00000000 	.word	0x00000000
 8005604:	08005359 	.word	0x08005359

08005608 <_printf_common>:
 8005608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800560c:	4616      	mov	r6, r2
 800560e:	4699      	mov	r9, r3
 8005610:	688a      	ldr	r2, [r1, #8]
 8005612:	690b      	ldr	r3, [r1, #16]
 8005614:	4607      	mov	r7, r0
 8005616:	4293      	cmp	r3, r2
 8005618:	bfb8      	it	lt
 800561a:	4613      	movlt	r3, r2
 800561c:	6033      	str	r3, [r6, #0]
 800561e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005622:	460c      	mov	r4, r1
 8005624:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005628:	b10a      	cbz	r2, 800562e <_printf_common+0x26>
 800562a:	3301      	adds	r3, #1
 800562c:	6033      	str	r3, [r6, #0]
 800562e:	6823      	ldr	r3, [r4, #0]
 8005630:	0699      	lsls	r1, r3, #26
 8005632:	bf42      	ittt	mi
 8005634:	6833      	ldrmi	r3, [r6, #0]
 8005636:	3302      	addmi	r3, #2
 8005638:	6033      	strmi	r3, [r6, #0]
 800563a:	6825      	ldr	r5, [r4, #0]
 800563c:	f015 0506 	ands.w	r5, r5, #6
 8005640:	d106      	bne.n	8005650 <_printf_common+0x48>
 8005642:	f104 0a19 	add.w	sl, r4, #25
 8005646:	68e3      	ldr	r3, [r4, #12]
 8005648:	6832      	ldr	r2, [r6, #0]
 800564a:	1a9b      	subs	r3, r3, r2
 800564c:	42ab      	cmp	r3, r5
 800564e:	dc2b      	bgt.n	80056a8 <_printf_common+0xa0>
 8005650:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005654:	1e13      	subs	r3, r2, #0
 8005656:	6822      	ldr	r2, [r4, #0]
 8005658:	bf18      	it	ne
 800565a:	2301      	movne	r3, #1
 800565c:	0692      	lsls	r2, r2, #26
 800565e:	d430      	bmi.n	80056c2 <_printf_common+0xba>
 8005660:	4649      	mov	r1, r9
 8005662:	4638      	mov	r0, r7
 8005664:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005668:	47c0      	blx	r8
 800566a:	3001      	adds	r0, #1
 800566c:	d023      	beq.n	80056b6 <_printf_common+0xae>
 800566e:	6823      	ldr	r3, [r4, #0]
 8005670:	6922      	ldr	r2, [r4, #16]
 8005672:	f003 0306 	and.w	r3, r3, #6
 8005676:	2b04      	cmp	r3, #4
 8005678:	bf14      	ite	ne
 800567a:	2500      	movne	r5, #0
 800567c:	6833      	ldreq	r3, [r6, #0]
 800567e:	f04f 0600 	mov.w	r6, #0
 8005682:	bf08      	it	eq
 8005684:	68e5      	ldreq	r5, [r4, #12]
 8005686:	f104 041a 	add.w	r4, r4, #26
 800568a:	bf08      	it	eq
 800568c:	1aed      	subeq	r5, r5, r3
 800568e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005692:	bf08      	it	eq
 8005694:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005698:	4293      	cmp	r3, r2
 800569a:	bfc4      	itt	gt
 800569c:	1a9b      	subgt	r3, r3, r2
 800569e:	18ed      	addgt	r5, r5, r3
 80056a0:	42b5      	cmp	r5, r6
 80056a2:	d11a      	bne.n	80056da <_printf_common+0xd2>
 80056a4:	2000      	movs	r0, #0
 80056a6:	e008      	b.n	80056ba <_printf_common+0xb2>
 80056a8:	2301      	movs	r3, #1
 80056aa:	4652      	mov	r2, sl
 80056ac:	4649      	mov	r1, r9
 80056ae:	4638      	mov	r0, r7
 80056b0:	47c0      	blx	r8
 80056b2:	3001      	adds	r0, #1
 80056b4:	d103      	bne.n	80056be <_printf_common+0xb6>
 80056b6:	f04f 30ff 	mov.w	r0, #4294967295
 80056ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056be:	3501      	adds	r5, #1
 80056c0:	e7c1      	b.n	8005646 <_printf_common+0x3e>
 80056c2:	2030      	movs	r0, #48	; 0x30
 80056c4:	18e1      	adds	r1, r4, r3
 80056c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056ca:	1c5a      	adds	r2, r3, #1
 80056cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056d0:	4422      	add	r2, r4
 80056d2:	3302      	adds	r3, #2
 80056d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056d8:	e7c2      	b.n	8005660 <_printf_common+0x58>
 80056da:	2301      	movs	r3, #1
 80056dc:	4622      	mov	r2, r4
 80056de:	4649      	mov	r1, r9
 80056e0:	4638      	mov	r0, r7
 80056e2:	47c0      	blx	r8
 80056e4:	3001      	adds	r0, #1
 80056e6:	d0e6      	beq.n	80056b6 <_printf_common+0xae>
 80056e8:	3601      	adds	r6, #1
 80056ea:	e7d9      	b.n	80056a0 <_printf_common+0x98>

080056ec <_printf_i>:
 80056ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056f0:	7e0f      	ldrb	r7, [r1, #24]
 80056f2:	4691      	mov	r9, r2
 80056f4:	2f78      	cmp	r7, #120	; 0x78
 80056f6:	4680      	mov	r8, r0
 80056f8:	460c      	mov	r4, r1
 80056fa:	469a      	mov	sl, r3
 80056fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80056fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005702:	d807      	bhi.n	8005714 <_printf_i+0x28>
 8005704:	2f62      	cmp	r7, #98	; 0x62
 8005706:	d80a      	bhi.n	800571e <_printf_i+0x32>
 8005708:	2f00      	cmp	r7, #0
 800570a:	f000 80d5 	beq.w	80058b8 <_printf_i+0x1cc>
 800570e:	2f58      	cmp	r7, #88	; 0x58
 8005710:	f000 80c1 	beq.w	8005896 <_printf_i+0x1aa>
 8005714:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005718:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800571c:	e03a      	b.n	8005794 <_printf_i+0xa8>
 800571e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005722:	2b15      	cmp	r3, #21
 8005724:	d8f6      	bhi.n	8005714 <_printf_i+0x28>
 8005726:	a101      	add	r1, pc, #4	; (adr r1, 800572c <_printf_i+0x40>)
 8005728:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800572c:	08005785 	.word	0x08005785
 8005730:	08005799 	.word	0x08005799
 8005734:	08005715 	.word	0x08005715
 8005738:	08005715 	.word	0x08005715
 800573c:	08005715 	.word	0x08005715
 8005740:	08005715 	.word	0x08005715
 8005744:	08005799 	.word	0x08005799
 8005748:	08005715 	.word	0x08005715
 800574c:	08005715 	.word	0x08005715
 8005750:	08005715 	.word	0x08005715
 8005754:	08005715 	.word	0x08005715
 8005758:	0800589f 	.word	0x0800589f
 800575c:	080057c5 	.word	0x080057c5
 8005760:	08005859 	.word	0x08005859
 8005764:	08005715 	.word	0x08005715
 8005768:	08005715 	.word	0x08005715
 800576c:	080058c1 	.word	0x080058c1
 8005770:	08005715 	.word	0x08005715
 8005774:	080057c5 	.word	0x080057c5
 8005778:	08005715 	.word	0x08005715
 800577c:	08005715 	.word	0x08005715
 8005780:	08005861 	.word	0x08005861
 8005784:	682b      	ldr	r3, [r5, #0]
 8005786:	1d1a      	adds	r2, r3, #4
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	602a      	str	r2, [r5, #0]
 800578c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005790:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005794:	2301      	movs	r3, #1
 8005796:	e0a0      	b.n	80058da <_printf_i+0x1ee>
 8005798:	6820      	ldr	r0, [r4, #0]
 800579a:	682b      	ldr	r3, [r5, #0]
 800579c:	0607      	lsls	r7, r0, #24
 800579e:	f103 0104 	add.w	r1, r3, #4
 80057a2:	6029      	str	r1, [r5, #0]
 80057a4:	d501      	bpl.n	80057aa <_printf_i+0xbe>
 80057a6:	681e      	ldr	r6, [r3, #0]
 80057a8:	e003      	b.n	80057b2 <_printf_i+0xc6>
 80057aa:	0646      	lsls	r6, r0, #25
 80057ac:	d5fb      	bpl.n	80057a6 <_printf_i+0xba>
 80057ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 80057b2:	2e00      	cmp	r6, #0
 80057b4:	da03      	bge.n	80057be <_printf_i+0xd2>
 80057b6:	232d      	movs	r3, #45	; 0x2d
 80057b8:	4276      	negs	r6, r6
 80057ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057be:	230a      	movs	r3, #10
 80057c0:	4859      	ldr	r0, [pc, #356]	; (8005928 <_printf_i+0x23c>)
 80057c2:	e012      	b.n	80057ea <_printf_i+0xfe>
 80057c4:	682b      	ldr	r3, [r5, #0]
 80057c6:	6820      	ldr	r0, [r4, #0]
 80057c8:	1d19      	adds	r1, r3, #4
 80057ca:	6029      	str	r1, [r5, #0]
 80057cc:	0605      	lsls	r5, r0, #24
 80057ce:	d501      	bpl.n	80057d4 <_printf_i+0xe8>
 80057d0:	681e      	ldr	r6, [r3, #0]
 80057d2:	e002      	b.n	80057da <_printf_i+0xee>
 80057d4:	0641      	lsls	r1, r0, #25
 80057d6:	d5fb      	bpl.n	80057d0 <_printf_i+0xe4>
 80057d8:	881e      	ldrh	r6, [r3, #0]
 80057da:	2f6f      	cmp	r7, #111	; 0x6f
 80057dc:	bf0c      	ite	eq
 80057de:	2308      	moveq	r3, #8
 80057e0:	230a      	movne	r3, #10
 80057e2:	4851      	ldr	r0, [pc, #324]	; (8005928 <_printf_i+0x23c>)
 80057e4:	2100      	movs	r1, #0
 80057e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057ea:	6865      	ldr	r5, [r4, #4]
 80057ec:	2d00      	cmp	r5, #0
 80057ee:	bfa8      	it	ge
 80057f0:	6821      	ldrge	r1, [r4, #0]
 80057f2:	60a5      	str	r5, [r4, #8]
 80057f4:	bfa4      	itt	ge
 80057f6:	f021 0104 	bicge.w	r1, r1, #4
 80057fa:	6021      	strge	r1, [r4, #0]
 80057fc:	b90e      	cbnz	r6, 8005802 <_printf_i+0x116>
 80057fe:	2d00      	cmp	r5, #0
 8005800:	d04b      	beq.n	800589a <_printf_i+0x1ae>
 8005802:	4615      	mov	r5, r2
 8005804:	fbb6 f1f3 	udiv	r1, r6, r3
 8005808:	fb03 6711 	mls	r7, r3, r1, r6
 800580c:	5dc7      	ldrb	r7, [r0, r7]
 800580e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005812:	4637      	mov	r7, r6
 8005814:	42bb      	cmp	r3, r7
 8005816:	460e      	mov	r6, r1
 8005818:	d9f4      	bls.n	8005804 <_printf_i+0x118>
 800581a:	2b08      	cmp	r3, #8
 800581c:	d10b      	bne.n	8005836 <_printf_i+0x14a>
 800581e:	6823      	ldr	r3, [r4, #0]
 8005820:	07de      	lsls	r6, r3, #31
 8005822:	d508      	bpl.n	8005836 <_printf_i+0x14a>
 8005824:	6923      	ldr	r3, [r4, #16]
 8005826:	6861      	ldr	r1, [r4, #4]
 8005828:	4299      	cmp	r1, r3
 800582a:	bfde      	ittt	le
 800582c:	2330      	movle	r3, #48	; 0x30
 800582e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005832:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005836:	1b52      	subs	r2, r2, r5
 8005838:	6122      	str	r2, [r4, #16]
 800583a:	464b      	mov	r3, r9
 800583c:	4621      	mov	r1, r4
 800583e:	4640      	mov	r0, r8
 8005840:	f8cd a000 	str.w	sl, [sp]
 8005844:	aa03      	add	r2, sp, #12
 8005846:	f7ff fedf 	bl	8005608 <_printf_common>
 800584a:	3001      	adds	r0, #1
 800584c:	d14a      	bne.n	80058e4 <_printf_i+0x1f8>
 800584e:	f04f 30ff 	mov.w	r0, #4294967295
 8005852:	b004      	add	sp, #16
 8005854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005858:	6823      	ldr	r3, [r4, #0]
 800585a:	f043 0320 	orr.w	r3, r3, #32
 800585e:	6023      	str	r3, [r4, #0]
 8005860:	2778      	movs	r7, #120	; 0x78
 8005862:	4832      	ldr	r0, [pc, #200]	; (800592c <_printf_i+0x240>)
 8005864:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005868:	6823      	ldr	r3, [r4, #0]
 800586a:	6829      	ldr	r1, [r5, #0]
 800586c:	061f      	lsls	r7, r3, #24
 800586e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005872:	d402      	bmi.n	800587a <_printf_i+0x18e>
 8005874:	065f      	lsls	r7, r3, #25
 8005876:	bf48      	it	mi
 8005878:	b2b6      	uxthmi	r6, r6
 800587a:	07df      	lsls	r7, r3, #31
 800587c:	bf48      	it	mi
 800587e:	f043 0320 	orrmi.w	r3, r3, #32
 8005882:	6029      	str	r1, [r5, #0]
 8005884:	bf48      	it	mi
 8005886:	6023      	strmi	r3, [r4, #0]
 8005888:	b91e      	cbnz	r6, 8005892 <_printf_i+0x1a6>
 800588a:	6823      	ldr	r3, [r4, #0]
 800588c:	f023 0320 	bic.w	r3, r3, #32
 8005890:	6023      	str	r3, [r4, #0]
 8005892:	2310      	movs	r3, #16
 8005894:	e7a6      	b.n	80057e4 <_printf_i+0xf8>
 8005896:	4824      	ldr	r0, [pc, #144]	; (8005928 <_printf_i+0x23c>)
 8005898:	e7e4      	b.n	8005864 <_printf_i+0x178>
 800589a:	4615      	mov	r5, r2
 800589c:	e7bd      	b.n	800581a <_printf_i+0x12e>
 800589e:	682b      	ldr	r3, [r5, #0]
 80058a0:	6826      	ldr	r6, [r4, #0]
 80058a2:	1d18      	adds	r0, r3, #4
 80058a4:	6961      	ldr	r1, [r4, #20]
 80058a6:	6028      	str	r0, [r5, #0]
 80058a8:	0635      	lsls	r5, r6, #24
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	d501      	bpl.n	80058b2 <_printf_i+0x1c6>
 80058ae:	6019      	str	r1, [r3, #0]
 80058b0:	e002      	b.n	80058b8 <_printf_i+0x1cc>
 80058b2:	0670      	lsls	r0, r6, #25
 80058b4:	d5fb      	bpl.n	80058ae <_printf_i+0x1c2>
 80058b6:	8019      	strh	r1, [r3, #0]
 80058b8:	2300      	movs	r3, #0
 80058ba:	4615      	mov	r5, r2
 80058bc:	6123      	str	r3, [r4, #16]
 80058be:	e7bc      	b.n	800583a <_printf_i+0x14e>
 80058c0:	682b      	ldr	r3, [r5, #0]
 80058c2:	2100      	movs	r1, #0
 80058c4:	1d1a      	adds	r2, r3, #4
 80058c6:	602a      	str	r2, [r5, #0]
 80058c8:	681d      	ldr	r5, [r3, #0]
 80058ca:	6862      	ldr	r2, [r4, #4]
 80058cc:	4628      	mov	r0, r5
 80058ce:	f000 f859 	bl	8005984 <memchr>
 80058d2:	b108      	cbz	r0, 80058d8 <_printf_i+0x1ec>
 80058d4:	1b40      	subs	r0, r0, r5
 80058d6:	6060      	str	r0, [r4, #4]
 80058d8:	6863      	ldr	r3, [r4, #4]
 80058da:	6123      	str	r3, [r4, #16]
 80058dc:	2300      	movs	r3, #0
 80058de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058e2:	e7aa      	b.n	800583a <_printf_i+0x14e>
 80058e4:	462a      	mov	r2, r5
 80058e6:	4649      	mov	r1, r9
 80058e8:	4640      	mov	r0, r8
 80058ea:	6923      	ldr	r3, [r4, #16]
 80058ec:	47d0      	blx	sl
 80058ee:	3001      	adds	r0, #1
 80058f0:	d0ad      	beq.n	800584e <_printf_i+0x162>
 80058f2:	6823      	ldr	r3, [r4, #0]
 80058f4:	079b      	lsls	r3, r3, #30
 80058f6:	d413      	bmi.n	8005920 <_printf_i+0x234>
 80058f8:	68e0      	ldr	r0, [r4, #12]
 80058fa:	9b03      	ldr	r3, [sp, #12]
 80058fc:	4298      	cmp	r0, r3
 80058fe:	bfb8      	it	lt
 8005900:	4618      	movlt	r0, r3
 8005902:	e7a6      	b.n	8005852 <_printf_i+0x166>
 8005904:	2301      	movs	r3, #1
 8005906:	4632      	mov	r2, r6
 8005908:	4649      	mov	r1, r9
 800590a:	4640      	mov	r0, r8
 800590c:	47d0      	blx	sl
 800590e:	3001      	adds	r0, #1
 8005910:	d09d      	beq.n	800584e <_printf_i+0x162>
 8005912:	3501      	adds	r5, #1
 8005914:	68e3      	ldr	r3, [r4, #12]
 8005916:	9903      	ldr	r1, [sp, #12]
 8005918:	1a5b      	subs	r3, r3, r1
 800591a:	42ab      	cmp	r3, r5
 800591c:	dcf2      	bgt.n	8005904 <_printf_i+0x218>
 800591e:	e7eb      	b.n	80058f8 <_printf_i+0x20c>
 8005920:	2500      	movs	r5, #0
 8005922:	f104 0619 	add.w	r6, r4, #25
 8005926:	e7f5      	b.n	8005914 <_printf_i+0x228>
 8005928:	08005b35 	.word	0x08005b35
 800592c:	08005b46 	.word	0x08005b46

08005930 <memmove>:
 8005930:	4288      	cmp	r0, r1
 8005932:	b510      	push	{r4, lr}
 8005934:	eb01 0402 	add.w	r4, r1, r2
 8005938:	d902      	bls.n	8005940 <memmove+0x10>
 800593a:	4284      	cmp	r4, r0
 800593c:	4623      	mov	r3, r4
 800593e:	d807      	bhi.n	8005950 <memmove+0x20>
 8005940:	1e43      	subs	r3, r0, #1
 8005942:	42a1      	cmp	r1, r4
 8005944:	d008      	beq.n	8005958 <memmove+0x28>
 8005946:	f811 2b01 	ldrb.w	r2, [r1], #1
 800594a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800594e:	e7f8      	b.n	8005942 <memmove+0x12>
 8005950:	4601      	mov	r1, r0
 8005952:	4402      	add	r2, r0
 8005954:	428a      	cmp	r2, r1
 8005956:	d100      	bne.n	800595a <memmove+0x2a>
 8005958:	bd10      	pop	{r4, pc}
 800595a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800595e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005962:	e7f7      	b.n	8005954 <memmove+0x24>

08005964 <_sbrk_r>:
 8005964:	b538      	push	{r3, r4, r5, lr}
 8005966:	2300      	movs	r3, #0
 8005968:	4d05      	ldr	r5, [pc, #20]	; (8005980 <_sbrk_r+0x1c>)
 800596a:	4604      	mov	r4, r0
 800596c:	4608      	mov	r0, r1
 800596e:	602b      	str	r3, [r5, #0]
 8005970:	f7fa ffae 	bl	80008d0 <_sbrk>
 8005974:	1c43      	adds	r3, r0, #1
 8005976:	d102      	bne.n	800597e <_sbrk_r+0x1a>
 8005978:	682b      	ldr	r3, [r5, #0]
 800597a:	b103      	cbz	r3, 800597e <_sbrk_r+0x1a>
 800597c:	6023      	str	r3, [r4, #0]
 800597e:	bd38      	pop	{r3, r4, r5, pc}
 8005980:	20001668 	.word	0x20001668

08005984 <memchr>:
 8005984:	4603      	mov	r3, r0
 8005986:	b510      	push	{r4, lr}
 8005988:	b2c9      	uxtb	r1, r1
 800598a:	4402      	add	r2, r0
 800598c:	4293      	cmp	r3, r2
 800598e:	4618      	mov	r0, r3
 8005990:	d101      	bne.n	8005996 <memchr+0x12>
 8005992:	2000      	movs	r0, #0
 8005994:	e003      	b.n	800599e <memchr+0x1a>
 8005996:	7804      	ldrb	r4, [r0, #0]
 8005998:	3301      	adds	r3, #1
 800599a:	428c      	cmp	r4, r1
 800599c:	d1f6      	bne.n	800598c <memchr+0x8>
 800599e:	bd10      	pop	{r4, pc}

080059a0 <_realloc_r>:
 80059a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059a4:	4680      	mov	r8, r0
 80059a6:	4614      	mov	r4, r2
 80059a8:	460e      	mov	r6, r1
 80059aa:	b921      	cbnz	r1, 80059b6 <_realloc_r+0x16>
 80059ac:	4611      	mov	r1, r2
 80059ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059b2:	f7ff bc45 	b.w	8005240 <_malloc_r>
 80059b6:	b92a      	cbnz	r2, 80059c4 <_realloc_r+0x24>
 80059b8:	f7ff fbda 	bl	8005170 <_free_r>
 80059bc:	4625      	mov	r5, r4
 80059be:	4628      	mov	r0, r5
 80059c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059c4:	f000 f81b 	bl	80059fe <_malloc_usable_size_r>
 80059c8:	4284      	cmp	r4, r0
 80059ca:	4607      	mov	r7, r0
 80059cc:	d802      	bhi.n	80059d4 <_realloc_r+0x34>
 80059ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80059d2:	d812      	bhi.n	80059fa <_realloc_r+0x5a>
 80059d4:	4621      	mov	r1, r4
 80059d6:	4640      	mov	r0, r8
 80059d8:	f7ff fc32 	bl	8005240 <_malloc_r>
 80059dc:	4605      	mov	r5, r0
 80059de:	2800      	cmp	r0, #0
 80059e0:	d0ed      	beq.n	80059be <_realloc_r+0x1e>
 80059e2:	42bc      	cmp	r4, r7
 80059e4:	4622      	mov	r2, r4
 80059e6:	4631      	mov	r1, r6
 80059e8:	bf28      	it	cs
 80059ea:	463a      	movcs	r2, r7
 80059ec:	f7ff fbb2 	bl	8005154 <memcpy>
 80059f0:	4631      	mov	r1, r6
 80059f2:	4640      	mov	r0, r8
 80059f4:	f7ff fbbc 	bl	8005170 <_free_r>
 80059f8:	e7e1      	b.n	80059be <_realloc_r+0x1e>
 80059fa:	4635      	mov	r5, r6
 80059fc:	e7df      	b.n	80059be <_realloc_r+0x1e>

080059fe <_malloc_usable_size_r>:
 80059fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a02:	1f18      	subs	r0, r3, #4
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	bfbc      	itt	lt
 8005a08:	580b      	ldrlt	r3, [r1, r0]
 8005a0a:	18c0      	addlt	r0, r0, r3
 8005a0c:	4770      	bx	lr
	...

08005a10 <_init>:
 8005a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a12:	bf00      	nop
 8005a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a16:	bc08      	pop	{r3}
 8005a18:	469e      	mov	lr, r3
 8005a1a:	4770      	bx	lr

08005a1c <_fini>:
 8005a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a1e:	bf00      	nop
 8005a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a22:	bc08      	pop	{r3}
 8005a24:	469e      	mov	lr, r3
 8005a26:	4770      	bx	lr
