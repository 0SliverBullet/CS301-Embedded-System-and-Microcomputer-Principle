
Lab14.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f64  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08005154  08005154  00015154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005238  08005238  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08005238  08005238  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005238  08005238  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005238  08005238  00015238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800523c  0800523c  0001523c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005240  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011fc  20000060  080052a0  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000125c  080052a0  0002125c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011a6b  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e13  00000000  00000000  00031b37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001138  00000000  00000000  00034950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d5d  00000000  00000000  00035a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b100  00000000  00000000  000367e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012948  00000000  00000000  000518e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a0a28  00000000  00000000  0006422d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004c6c  00000000  00000000  00104c58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  001098c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000060 	.word	0x20000060
 800020c:	00000000 	.word	0x00000000
 8000210:	0800513c 	.word	0x0800513c

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000064 	.word	0x20000064
 800022c:	0800513c 	.word	0x0800513c

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000240:	b480      	push	{r7}
 8000242:	b085      	sub	sp, #20
 8000244:	af00      	add	r7, sp, #0
 8000246:	60f8      	str	r0, [r7, #12]
 8000248:	60b9      	str	r1, [r7, #8]
 800024a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	4a06      	ldr	r2, [pc, #24]	; (8000268 <vApplicationGetIdleTaskMemory+0x28>)
 8000250:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000252:	68bb      	ldr	r3, [r7, #8]
 8000254:	4a05      	ldr	r2, [pc, #20]	; (800026c <vApplicationGetIdleTaskMemory+0x2c>)
 8000256:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	2280      	movs	r2, #128	; 0x80
 800025c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800025e:	bf00      	nop
 8000260:	3714      	adds	r7, #20
 8000262:	46bd      	mov	sp, r7
 8000264:	bc80      	pop	{r7}
 8000266:	4770      	bx	lr
 8000268:	2000007c 	.word	0x2000007c
 800026c:	2000011c 	.word	0x2000011c

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b5b0      	push	{r4, r5, r7, lr}
 8000272:	b09a      	sub	sp, #104	; 0x68
 8000274:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000276:	f000 fb19 	bl	80008ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027a:	f000 f877 	bl	800036c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027e:	f000 f8e5 	bl	800044c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000282:	f000 f8b9 	bl	80003f8 <MX_USART1_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of bSemEmpty */
  osSemaphoreDef(bSemEmpty);
 8000286:	2300      	movs	r3, #0
 8000288:	663b      	str	r3, [r7, #96]	; 0x60
 800028a:	2300      	movs	r3, #0
 800028c:	667b      	str	r3, [r7, #100]	; 0x64
  bSemEmptyHandle = osSemaphoreCreate(osSemaphore(bSemEmpty), 4);
 800028e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000292:	2104      	movs	r1, #4
 8000294:	4618      	mov	r0, r3
 8000296:	f001 fec0 	bl	800201a <osSemaphoreCreate>
 800029a:	4603      	mov	r3, r0
 800029c:	4a2a      	ldr	r2, [pc, #168]	; (8000348 <main+0xd8>)
 800029e:	6013      	str	r3, [r2, #0]

  /* definition and creation of bSemFilled */
  osSemaphoreDef(bSemFilled);
 80002a0:	2300      	movs	r3, #0
 80002a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80002a4:	2300      	movs	r3, #0
 80002a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  bSemFilledHandle = osSemaphoreCreate(osSemaphore(bSemFilled), 4);
 80002a8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80002ac:	2104      	movs	r1, #4
 80002ae:	4618      	mov	r0, r3
 80002b0:	f001 feb3 	bl	800201a <osSemaphoreCreate>
 80002b4:	4603      	mov	r3, r0
 80002b6:	4a25      	ldr	r2, [pc, #148]	; (800034c <main+0xdc>)
 80002b8:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 16, uint16_t);
 80002ba:	4b25      	ldr	r3, [pc, #148]	; (8000350 <main+0xe0>)
 80002bc:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80002c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 80002c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80002ca:	2100      	movs	r1, #0
 80002cc:	4618      	mov	r0, r3
 80002ce:	f001 ffe2 	bl	8002296 <osMessageCreate>
 80002d2:	4603      	mov	r3, r0
 80002d4:	4a1f      	ldr	r2, [pc, #124]	; (8000354 <main+0xe4>)
 80002d6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* add queues, ... */
  osMailQDef(mail01, 4, mailStruct);
 80002d8:	2304      	movs	r3, #4
 80002da:	63bb      	str	r3, [r7, #56]	; 0x38
 80002dc:	2302      	movs	r3, #2
 80002de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80002e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80002e4:	643b      	str	r3, [r7, #64]	; 0x40
  mail01Handle = osMailCreate(osMailQ(mail01),
 80002e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80002ea:	2100      	movs	r1, #0
 80002ec:	4618      	mov	r0, r3
 80002ee:	f001 fffa 	bl	80022e6 <osMailCreate>
 80002f2:	4603      	mov	r3, r0
 80002f4:	4a18      	ldr	r2, [pc, #96]	; (8000358 <main+0xe8>)
 80002f6:	6013      	str	r3, [r2, #0]
  NULL);
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of MsgProducer */
  osThreadDef(MsgProducer, MsgProducerTask, osPriorityNormal, 0, 128);
 80002f8:	4b18      	ldr	r3, [pc, #96]	; (800035c <main+0xec>)
 80002fa:	f107 041c 	add.w	r4, r7, #28
 80002fe:	461d      	mov	r5, r3
 8000300:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000302:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000304:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000308:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MsgProducerHandle = osThreadCreate(osThread(MsgProducer), NULL);
 800030c:	f107 031c 	add.w	r3, r7, #28
 8000310:	2100      	movs	r1, #0
 8000312:	4618      	mov	r0, r3
 8000314:	f001 fe35 	bl	8001f82 <osThreadCreate>
 8000318:	4603      	mov	r3, r0
 800031a:	4a11      	ldr	r2, [pc, #68]	; (8000360 <main+0xf0>)
 800031c:	6013      	str	r3, [r2, #0]

  /* definition and creation of MsgConsumer */
  osThreadDef(MsgConsumer, MsgConsumerTask, osPriorityNormal, 0, 128);
 800031e:	4b11      	ldr	r3, [pc, #68]	; (8000364 <main+0xf4>)
 8000320:	463c      	mov	r4, r7
 8000322:	461d      	mov	r5, r3
 8000324:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000326:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000328:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800032c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MsgConsumerHandle = osThreadCreate(osThread(MsgConsumer), NULL);
 8000330:	463b      	mov	r3, r7
 8000332:	2100      	movs	r1, #0
 8000334:	4618      	mov	r0, r3
 8000336:	f001 fe24 	bl	8001f82 <osThreadCreate>
 800033a:	4603      	mov	r3, r0
 800033c:	4a0a      	ldr	r2, [pc, #40]	; (8000368 <main+0xf8>)
 800033e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000340:	f001 fe18 	bl	8001f74 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000344:	e7fe      	b.n	8000344 <main+0xd4>
 8000346:	bf00      	nop
 8000348:	2000036c 	.word	0x2000036c
 800034c:	20000370 	.word	0x20000370
 8000350:	08005154 	.word	0x08005154
 8000354:	20000368 	.word	0x20000368
 8000358:	20000374 	.word	0x20000374
 800035c:	08005170 	.word	0x08005170
 8000360:	20000360 	.word	0x20000360
 8000364:	08005198 	.word	0x08005198
 8000368:	20000364 	.word	0x20000364

0800036c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b090      	sub	sp, #64	; 0x40
 8000370:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000372:	f107 0318 	add.w	r3, r7, #24
 8000376:	2228      	movs	r2, #40	; 0x28
 8000378:	2100      	movs	r1, #0
 800037a:	4618      	mov	r0, r3
 800037c:	f004 f9f6 	bl	800476c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000380:	1d3b      	adds	r3, r7, #4
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	605a      	str	r2, [r3, #4]
 8000388:	609a      	str	r2, [r3, #8]
 800038a:	60da      	str	r2, [r3, #12]
 800038c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800038e:	2301      	movs	r3, #1
 8000390:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000392:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000396:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000398:	2300      	movs	r3, #0
 800039a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800039c:	2301      	movs	r3, #1
 800039e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003a0:	2302      	movs	r3, #2
 80003a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003aa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b0:	f107 0318 	add.w	r3, r7, #24
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 fd43 	bl	8000e40 <HAL_RCC_OscConfig>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003c0:	f000 f8ea 	bl	8000598 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c4:	230f      	movs	r3, #15
 80003c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c8:	2302      	movs	r3, #2
 80003ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003cc:	2300      	movs	r3, #0
 80003ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d6:	2300      	movs	r3, #0
 80003d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	2102      	movs	r1, #2
 80003de:	4618      	mov	r0, r3
 80003e0:	f000 ffb0 	bl	8001344 <HAL_RCC_ClockConfig>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003ea:	f000 f8d5 	bl	8000598 <Error_Handler>
  }
}
 80003ee:	bf00      	nop
 80003f0:	3740      	adds	r7, #64	; 0x40
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
	...

080003f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003fc:	4b11      	ldr	r3, [pc, #68]	; (8000444 <MX_USART1_UART_Init+0x4c>)
 80003fe:	4a12      	ldr	r2, [pc, #72]	; (8000448 <MX_USART1_UART_Init+0x50>)
 8000400:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000402:	4b10      	ldr	r3, [pc, #64]	; (8000444 <MX_USART1_UART_Init+0x4c>)
 8000404:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000408:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800040a:	4b0e      	ldr	r3, [pc, #56]	; (8000444 <MX_USART1_UART_Init+0x4c>)
 800040c:	2200      	movs	r2, #0
 800040e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000410:	4b0c      	ldr	r3, [pc, #48]	; (8000444 <MX_USART1_UART_Init+0x4c>)
 8000412:	2200      	movs	r2, #0
 8000414:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000416:	4b0b      	ldr	r3, [pc, #44]	; (8000444 <MX_USART1_UART_Init+0x4c>)
 8000418:	2200      	movs	r2, #0
 800041a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800041c:	4b09      	ldr	r3, [pc, #36]	; (8000444 <MX_USART1_UART_Init+0x4c>)
 800041e:	220c      	movs	r2, #12
 8000420:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000422:	4b08      	ldr	r3, [pc, #32]	; (8000444 <MX_USART1_UART_Init+0x4c>)
 8000424:	2200      	movs	r2, #0
 8000426:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000428:	4b06      	ldr	r3, [pc, #24]	; (8000444 <MX_USART1_UART_Init+0x4c>)
 800042a:	2200      	movs	r2, #0
 800042c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800042e:	4805      	ldr	r0, [pc, #20]	; (8000444 <MX_USART1_UART_Init+0x4c>)
 8000430:	f001 fbc0 	bl	8001bb4 <HAL_UART_Init>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800043a:	f000 f8ad 	bl	8000598 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800043e:	bf00      	nop
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	2000031c 	.word	0x2000031c
 8000448:	40013800 	.word	0x40013800

0800044c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000452:	4b0e      	ldr	r3, [pc, #56]	; (800048c <MX_GPIO_Init+0x40>)
 8000454:	699b      	ldr	r3, [r3, #24]
 8000456:	4a0d      	ldr	r2, [pc, #52]	; (800048c <MX_GPIO_Init+0x40>)
 8000458:	f043 0320 	orr.w	r3, r3, #32
 800045c:	6193      	str	r3, [r2, #24]
 800045e:	4b0b      	ldr	r3, [pc, #44]	; (800048c <MX_GPIO_Init+0x40>)
 8000460:	699b      	ldr	r3, [r3, #24]
 8000462:	f003 0320 	and.w	r3, r3, #32
 8000466:	607b      	str	r3, [r7, #4]
 8000468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800046a:	4b08      	ldr	r3, [pc, #32]	; (800048c <MX_GPIO_Init+0x40>)
 800046c:	699b      	ldr	r3, [r3, #24]
 800046e:	4a07      	ldr	r2, [pc, #28]	; (800048c <MX_GPIO_Init+0x40>)
 8000470:	f043 0304 	orr.w	r3, r3, #4
 8000474:	6193      	str	r3, [r2, #24]
 8000476:	4b05      	ldr	r3, [pc, #20]	; (800048c <MX_GPIO_Init+0x40>)
 8000478:	699b      	ldr	r3, [r3, #24]
 800047a:	f003 0304 	and.w	r3, r3, #4
 800047e:	603b      	str	r3, [r7, #0]
 8000480:	683b      	ldr	r3, [r7, #0]

}
 8000482:	bf00      	nop
 8000484:	370c      	adds	r7, #12
 8000486:	46bd      	mov	sp, r7
 8000488:	bc80      	pop	{r7}
 800048a:	4770      	bx	lr
 800048c:	40021000 	.word	0x40021000

08000490 <MsgProducerTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_MsgProducerTask */
void MsgProducerTask(void const * argument)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b088      	sub	sp, #32
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
//	sprintf(msg, "produce: %d\r\n", mail->var);
//	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg),HAL_MAX_DELAY);
//	osDelay(1000);
//	osMailPut(mail01Handle, mail);
//	osDelay(2000);
	mail = (mailStruct *)osMailAlloc(mail01Handle,
 8000498:	4b16      	ldr	r3, [pc, #88]	; (80004f4 <MsgProducerTask+0x64>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	f04f 31ff 	mov.w	r1, #4294967295
 80004a0:	4618      	mov	r0, r3
 80004a2:	f001 ff78 	bl	8002396 <osMailAlloc>
 80004a6:	61f8      	str	r0, [r7, #28]
	osWaitForever);
	mail->var = 2;
 80004a8:	69fb      	ldr	r3, [r7, #28]
 80004aa:	2202      	movs	r2, #2
 80004ac:	801a      	strh	r2, [r3, #0]
	sprintf(msg, "produce: %d\r\n", mail->var);
 80004ae:	69fb      	ldr	r3, [r7, #28]
 80004b0:	881b      	ldrh	r3, [r3, #0]
 80004b2:	461a      	mov	r2, r3
 80004b4:	f107 0308 	add.w	r3, r7, #8
 80004b8:	490f      	ldr	r1, [pc, #60]	; (80004f8 <MsgProducerTask+0x68>)
 80004ba:	4618      	mov	r0, r3
 80004bc:	f004 f936 	bl	800472c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg),HAL_MAX_DELAY);
 80004c0:	f107 0308 	add.w	r3, r7, #8
 80004c4:	4618      	mov	r0, r3
 80004c6:	f7ff feb3 	bl	8000230 <strlen>
 80004ca:	4603      	mov	r3, r0
 80004cc:	b29a      	uxth	r2, r3
 80004ce:	f107 0108 	add.w	r1, r7, #8
 80004d2:	f04f 33ff 	mov.w	r3, #4294967295
 80004d6:	4809      	ldr	r0, [pc, #36]	; (80004fc <MsgProducerTask+0x6c>)
 80004d8:	f001 fbb9 	bl	8001c4e <HAL_UART_Transmit>
	//osDelay(1000);
	HAL_Delay(1000);
 80004dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004e0:	f000 fa16 	bl	8000910 <HAL_Delay>
	osMailPut(mail01Handle, mail);
 80004e4:	4b03      	ldr	r3, [pc, #12]	; (80004f4 <MsgProducerTask+0x64>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	69f9      	ldr	r1, [r7, #28]
 80004ea:	4618      	mov	r0, r3
 80004ec:	f001 ff68 	bl	80023c0 <osMailPut>
	{
 80004f0:	e7d2      	b.n	8000498 <MsgProducerTask+0x8>
 80004f2:	bf00      	nop
 80004f4:	20000374 	.word	0x20000374
 80004f8:	080051b4 	.word	0x080051b4
 80004fc:	2000031c 	.word	0x2000031c

08000500 <MsgConsumerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MsgConsumerTask */
void MsgConsumerTask(void const * argument)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08c      	sub	sp, #48	; 0x30
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
	char msg[20];
	/* Infinite loop */
	for(;;)
	{
	//osSemaphoreWait(bSemFilledHandle, osWaitForever);
	event = osMailGet(mail01Handle, osWaitForever);
 8000508:	4b17      	ldr	r3, [pc, #92]	; (8000568 <MsgConsumerTask+0x68>)
 800050a:	6819      	ldr	r1, [r3, #0]
 800050c:	f107 0320 	add.w	r3, r7, #32
 8000510:	f04f 32ff 	mov.w	r2, #4294967295
 8000514:	4618      	mov	r0, r3
 8000516:	f001 ff91 	bl	800243c <osMailGet>
	if (event.status == osEventMail)
 800051a:	6a3b      	ldr	r3, [r7, #32]
 800051c:	2b20      	cmp	r3, #32
 800051e:	d1f3      	bne.n	8000508 <MsgConsumerTask+0x8>
	{
	pMail = event.value.p;
 8000520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000522:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(msg, "consume: %d\r\n", pMail->var);
 8000524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000526:	881b      	ldrh	r3, [r3, #0]
 8000528:	461a      	mov	r2, r3
 800052a:	f107 030c 	add.w	r3, r7, #12
 800052e:	490f      	ldr	r1, [pc, #60]	; (800056c <MsgConsumerTask+0x6c>)
 8000530:	4618      	mov	r0, r3
 8000532:	f004 f8fb 	bl	800472c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg),HAL_MAX_DELAY);
 8000536:	f107 030c 	add.w	r3, r7, #12
 800053a:	4618      	mov	r0, r3
 800053c:	f7ff fe78 	bl	8000230 <strlen>
 8000540:	4603      	mov	r3, r0
 8000542:	b29a      	uxth	r2, r3
 8000544:	f107 010c 	add.w	r1, r7, #12
 8000548:	f04f 33ff 	mov.w	r3, #4294967295
 800054c:	4808      	ldr	r0, [pc, #32]	; (8000570 <MsgConsumerTask+0x70>)
 800054e:	f001 fb7e 	bl	8001c4e <HAL_UART_Transmit>
	HAL_Delay(6000);
 8000552:	f241 7070 	movw	r0, #6000	; 0x1770
 8000556:	f000 f9db 	bl	8000910 <HAL_Delay>
	osMailFree(mail01Handle, pMail);
 800055a:	4b03      	ldr	r3, [pc, #12]	; (8000568 <MsgConsumerTask+0x68>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000560:	4618      	mov	r0, r3
 8000562:	f001 ffdf 	bl	8002524 <osMailFree>
	event = osMailGet(mail01Handle, osWaitForever);
 8000566:	e7cf      	b.n	8000508 <MsgConsumerTask+0x8>
 8000568:	20000374 	.word	0x20000374
 800056c:	080051c4 	.word	0x080051c4
 8000570:	2000031c 	.word	0x2000031c

08000574 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a04      	ldr	r2, [pc, #16]	; (8000594 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d101      	bne.n	800058a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000586:	f000 f9a7 	bl	80008d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40000400 	.word	0x40000400

08000598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800059c:	b672      	cpsid	i
}
 800059e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <Error_Handler+0x8>
	...

080005a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005aa:	4b18      	ldr	r3, [pc, #96]	; (800060c <HAL_MspInit+0x68>)
 80005ac:	699b      	ldr	r3, [r3, #24]
 80005ae:	4a17      	ldr	r2, [pc, #92]	; (800060c <HAL_MspInit+0x68>)
 80005b0:	f043 0301 	orr.w	r3, r3, #1
 80005b4:	6193      	str	r3, [r2, #24]
 80005b6:	4b15      	ldr	r3, [pc, #84]	; (800060c <HAL_MspInit+0x68>)
 80005b8:	699b      	ldr	r3, [r3, #24]
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c2:	4b12      	ldr	r3, [pc, #72]	; (800060c <HAL_MspInit+0x68>)
 80005c4:	69db      	ldr	r3, [r3, #28]
 80005c6:	4a11      	ldr	r2, [pc, #68]	; (800060c <HAL_MspInit+0x68>)
 80005c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005cc:	61d3      	str	r3, [r2, #28]
 80005ce:	4b0f      	ldr	r3, [pc, #60]	; (800060c <HAL_MspInit+0x68>)
 80005d0:	69db      	ldr	r3, [r3, #28]
 80005d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005da:	2200      	movs	r2, #0
 80005dc:	210f      	movs	r1, #15
 80005de:	f06f 0001 	mvn.w	r0, #1
 80005e2:	f000 fa6e 	bl	8000ac2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005e6:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <HAL_MspInit+0x6c>)
 80005e8:	685b      	ldr	r3, [r3, #4]
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	4a04      	ldr	r2, [pc, #16]	; (8000610 <HAL_MspInit+0x6c>)
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000602:	bf00      	nop
 8000604:	3710      	adds	r7, #16
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40021000 	.word	0x40021000
 8000610:	40010000 	.word	0x40010000

08000614 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b088      	sub	sp, #32
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	f107 0310 	add.w	r3, r7, #16
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a1c      	ldr	r2, [pc, #112]	; (80006a0 <HAL_UART_MspInit+0x8c>)
 8000630:	4293      	cmp	r3, r2
 8000632:	d131      	bne.n	8000698 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000634:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <HAL_UART_MspInit+0x90>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	4a1a      	ldr	r2, [pc, #104]	; (80006a4 <HAL_UART_MspInit+0x90>)
 800063a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800063e:	6193      	str	r3, [r2, #24]
 8000640:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <HAL_UART_MspInit+0x90>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800064c:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <HAL_UART_MspInit+0x90>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	4a14      	ldr	r2, [pc, #80]	; (80006a4 <HAL_UART_MspInit+0x90>)
 8000652:	f043 0304 	orr.w	r3, r3, #4
 8000656:	6193      	str	r3, [r2, #24]
 8000658:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <HAL_UART_MspInit+0x90>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	f003 0304 	and.w	r3, r3, #4
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000664:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000668:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066a:	2302      	movs	r3, #2
 800066c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800066e:	2303      	movs	r3, #3
 8000670:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000672:	f107 0310 	add.w	r3, r7, #16
 8000676:	4619      	mov	r1, r3
 8000678:	480b      	ldr	r0, [pc, #44]	; (80006a8 <HAL_UART_MspInit+0x94>)
 800067a:	f000 fa4d 	bl	8000b18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800067e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000682:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068c:	f107 0310 	add.w	r3, r7, #16
 8000690:	4619      	mov	r1, r3
 8000692:	4805      	ldr	r0, [pc, #20]	; (80006a8 <HAL_UART_MspInit+0x94>)
 8000694:	f000 fa40 	bl	8000b18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000698:	bf00      	nop
 800069a:	3720      	adds	r7, #32
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40013800 	.word	0x40013800
 80006a4:	40021000 	.word	0x40021000
 80006a8:	40010800 	.word	0x40010800

080006ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08e      	sub	sp, #56	; 0x38
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80006b4:	2300      	movs	r3, #0
 80006b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80006b8:	2300      	movs	r3, #0
 80006ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80006bc:	2300      	movs	r3, #0
 80006be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80006c2:	4b34      	ldr	r3, [pc, #208]	; (8000794 <HAL_InitTick+0xe8>)
 80006c4:	69db      	ldr	r3, [r3, #28]
 80006c6:	4a33      	ldr	r2, [pc, #204]	; (8000794 <HAL_InitTick+0xe8>)
 80006c8:	f043 0302 	orr.w	r3, r3, #2
 80006cc:	61d3      	str	r3, [r2, #28]
 80006ce:	4b31      	ldr	r3, [pc, #196]	; (8000794 <HAL_InitTick+0xe8>)
 80006d0:	69db      	ldr	r3, [r3, #28]
 80006d2:	f003 0302 	and.w	r3, r3, #2
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006da:	f107 0210 	add.w	r2, r7, #16
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4611      	mov	r1, r2
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 ffa7 	bl	8001638 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80006ea:	6a3b      	ldr	r3, [r7, #32]
 80006ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80006ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d103      	bne.n	80006fc <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80006f4:	f000 ff78 	bl	80015e8 <HAL_RCC_GetPCLK1Freq>
 80006f8:	6378      	str	r0, [r7, #52]	; 0x34
 80006fa:	e004      	b.n	8000706 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80006fc:	f000 ff74 	bl	80015e8 <HAL_RCC_GetPCLK1Freq>
 8000700:	4603      	mov	r3, r0
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000708:	4a23      	ldr	r2, [pc, #140]	; (8000798 <HAL_InitTick+0xec>)
 800070a:	fba2 2303 	umull	r2, r3, r2, r3
 800070e:	0c9b      	lsrs	r3, r3, #18
 8000710:	3b01      	subs	r3, #1
 8000712:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000714:	4b21      	ldr	r3, [pc, #132]	; (800079c <HAL_InitTick+0xf0>)
 8000716:	4a22      	ldr	r2, [pc, #136]	; (80007a0 <HAL_InitTick+0xf4>)
 8000718:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 800071a:	4b20      	ldr	r3, [pc, #128]	; (800079c <HAL_InitTick+0xf0>)
 800071c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000720:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000722:	4a1e      	ldr	r2, [pc, #120]	; (800079c <HAL_InitTick+0xf0>)
 8000724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000726:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000728:	4b1c      	ldr	r3, [pc, #112]	; (800079c <HAL_InitTick+0xf0>)
 800072a:	2200      	movs	r2, #0
 800072c:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800072e:	4b1b      	ldr	r3, [pc, #108]	; (800079c <HAL_InitTick+0xf0>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000734:	4b19      	ldr	r3, [pc, #100]	; (800079c <HAL_InitTick+0xf0>)
 8000736:	2200      	movs	r2, #0
 8000738:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 800073a:	4818      	ldr	r0, [pc, #96]	; (800079c <HAL_InitTick+0xf0>)
 800073c:	f000 ffca 	bl	80016d4 <HAL_TIM_Base_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000746:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800074a:	2b00      	cmp	r3, #0
 800074c:	d11b      	bne.n	8000786 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 800074e:	4813      	ldr	r0, [pc, #76]	; (800079c <HAL_InitTick+0xf0>)
 8000750:	f001 f818 	bl	8001784 <HAL_TIM_Base_Start_IT>
 8000754:	4603      	mov	r3, r0
 8000756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800075a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800075e:	2b00      	cmp	r3, #0
 8000760:	d111      	bne.n	8000786 <HAL_InitTick+0xda>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000762:	201d      	movs	r0, #29
 8000764:	f000 f9c9 	bl	8000afa <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2b0f      	cmp	r3, #15
 800076c:	d808      	bhi.n	8000780 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 800076e:	2200      	movs	r2, #0
 8000770:	6879      	ldr	r1, [r7, #4]
 8000772:	201d      	movs	r0, #29
 8000774:	f000 f9a5 	bl	8000ac2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000778:	4a0a      	ldr	r2, [pc, #40]	; (80007a4 <HAL_InitTick+0xf8>)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	6013      	str	r3, [r2, #0]
 800077e:	e002      	b.n	8000786 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000780:	2301      	movs	r3, #1
 8000782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000786:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800078a:	4618      	mov	r0, r3
 800078c:	3738      	adds	r7, #56	; 0x38
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40021000 	.word	0x40021000
 8000798:	431bde83 	.word	0x431bde83
 800079c:	20000378 	.word	0x20000378
 80007a0:	40000400 	.word	0x40000400
 80007a4:	20000004 	.word	0x20000004

080007a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007ac:	e7fe      	b.n	80007ac <NMI_Handler+0x4>

080007ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b2:	e7fe      	b.n	80007b2 <HardFault_Handler+0x4>

080007b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <MemManage_Handler+0x4>

080007ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007be:	e7fe      	b.n	80007be <BusFault_Handler+0x4>

080007c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <UsageFault_Handler+0x4>

080007c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bc80      	pop	{r7}
 80007d0:	4770      	bx	lr
	...

080007d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80007d8:	4802      	ldr	r0, [pc, #8]	; (80007e4 <TIM3_IRQHandler+0x10>)
 80007da:	f001 f833 	bl	8001844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000378 	.word	0x20000378

080007e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007f0:	4a14      	ldr	r2, [pc, #80]	; (8000844 <_sbrk+0x5c>)
 80007f2:	4b15      	ldr	r3, [pc, #84]	; (8000848 <_sbrk+0x60>)
 80007f4:	1ad3      	subs	r3, r2, r3
 80007f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007fc:	4b13      	ldr	r3, [pc, #76]	; (800084c <_sbrk+0x64>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d102      	bne.n	800080a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000804:	4b11      	ldr	r3, [pc, #68]	; (800084c <_sbrk+0x64>)
 8000806:	4a12      	ldr	r2, [pc, #72]	; (8000850 <_sbrk+0x68>)
 8000808:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800080a:	4b10      	ldr	r3, [pc, #64]	; (800084c <_sbrk+0x64>)
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4413      	add	r3, r2
 8000812:	693a      	ldr	r2, [r7, #16]
 8000814:	429a      	cmp	r2, r3
 8000816:	d207      	bcs.n	8000828 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000818:	f004 f806 	bl	8004828 <__errno>
 800081c:	4603      	mov	r3, r0
 800081e:	220c      	movs	r2, #12
 8000820:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000822:	f04f 33ff 	mov.w	r3, #4294967295
 8000826:	e009      	b.n	800083c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000828:	4b08      	ldr	r3, [pc, #32]	; (800084c <_sbrk+0x64>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800082e:	4b07      	ldr	r3, [pc, #28]	; (800084c <_sbrk+0x64>)
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4413      	add	r3, r2
 8000836:	4a05      	ldr	r2, [pc, #20]	; (800084c <_sbrk+0x64>)
 8000838:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800083a:	68fb      	ldr	r3, [r7, #12]
}
 800083c:	4618      	mov	r0, r3
 800083e:	3718      	adds	r7, #24
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	2000c000 	.word	0x2000c000
 8000848:	00000400 	.word	0x00000400
 800084c:	200003c0 	.word	0x200003c0
 8000850:	20001260 	.word	0x20001260

08000854 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr

08000860 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000860:	480c      	ldr	r0, [pc, #48]	; (8000894 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000862:	490d      	ldr	r1, [pc, #52]	; (8000898 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000864:	4a0d      	ldr	r2, [pc, #52]	; (800089c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000868:	e002      	b.n	8000870 <LoopCopyDataInit>

0800086a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800086a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800086c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800086e:	3304      	adds	r3, #4

08000870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000874:	d3f9      	bcc.n	800086a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000876:	4a0a      	ldr	r2, [pc, #40]	; (80008a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000878:	4c0a      	ldr	r4, [pc, #40]	; (80008a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800087a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800087c:	e001      	b.n	8000882 <LoopFillZerobss>

0800087e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800087e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000880:	3204      	adds	r2, #4

08000882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000884:	d3fb      	bcc.n	800087e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000886:	f7ff ffe5 	bl	8000854 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800088a:	f003 ffd3 	bl	8004834 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800088e:	f7ff fcef 	bl	8000270 <main>
  bx lr
 8000892:	4770      	bx	lr
  ldr r0, =_sdata
 8000894:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000898:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800089c:	08005240 	.word	0x08005240
  ldr r2, =_sbss
 80008a0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80008a4:	2000125c 	.word	0x2000125c

080008a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008a8:	e7fe      	b.n	80008a8 <ADC1_2_IRQHandler>
	...

080008ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008b0:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <HAL_Init+0x28>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a07      	ldr	r2, [pc, #28]	; (80008d4 <HAL_Init+0x28>)
 80008b6:	f043 0310 	orr.w	r3, r3, #16
 80008ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008bc:	2003      	movs	r0, #3
 80008be:	f000 f8f5 	bl	8000aac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008c2:	200f      	movs	r0, #15
 80008c4:	f7ff fef2 	bl	80006ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008c8:	f7ff fe6c 	bl	80005a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008cc:	2300      	movs	r3, #0
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40022000 	.word	0x40022000

080008d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008dc:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <HAL_IncTick+0x1c>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	461a      	mov	r2, r3
 80008e2:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <HAL_IncTick+0x20>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4413      	add	r3, r2
 80008e8:	4a03      	ldr	r2, [pc, #12]	; (80008f8 <HAL_IncTick+0x20>)
 80008ea:	6013      	str	r3, [r2, #0]
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr
 80008f4:	20000008 	.word	0x20000008
 80008f8:	200003c4 	.word	0x200003c4

080008fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000900:	4b02      	ldr	r3, [pc, #8]	; (800090c <HAL_GetTick+0x10>)
 8000902:	681b      	ldr	r3, [r3, #0]
}
 8000904:	4618      	mov	r0, r3
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr
 800090c:	200003c4 	.word	0x200003c4

08000910 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000918:	f7ff fff0 	bl	80008fc <HAL_GetTick>
 800091c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000928:	d005      	beq.n	8000936 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800092a:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <HAL_Delay+0x44>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	461a      	mov	r2, r3
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	4413      	add	r3, r2
 8000934:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000936:	bf00      	nop
 8000938:	f7ff ffe0 	bl	80008fc <HAL_GetTick>
 800093c:	4602      	mov	r2, r0
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	68fa      	ldr	r2, [r7, #12]
 8000944:	429a      	cmp	r2, r3
 8000946:	d8f7      	bhi.n	8000938 <HAL_Delay+0x28>
  {
  }
}
 8000948:	bf00      	nop
 800094a:	bf00      	nop
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000008 	.word	0x20000008

08000958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f003 0307 	and.w	r3, r3, #7
 8000966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <__NVIC_SetPriorityGrouping+0x44>)
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800096e:	68ba      	ldr	r2, [r7, #8]
 8000970:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000974:	4013      	ands	r3, r2
 8000976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000980:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800098a:	4a04      	ldr	r2, [pc, #16]	; (800099c <__NVIC_SetPriorityGrouping+0x44>)
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	60d3      	str	r3, [r2, #12]
}
 8000990:	bf00      	nop
 8000992:	3714      	adds	r7, #20
 8000994:	46bd      	mov	sp, r7
 8000996:	bc80      	pop	{r7}
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009a4:	4b04      	ldr	r3, [pc, #16]	; (80009b8 <__NVIC_GetPriorityGrouping+0x18>)
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	0a1b      	lsrs	r3, r3, #8
 80009aa:	f003 0307 	and.w	r3, r3, #7
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bc80      	pop	{r7}
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	db0b      	blt.n	80009e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	f003 021f 	and.w	r2, r3, #31
 80009d4:	4906      	ldr	r1, [pc, #24]	; (80009f0 <__NVIC_EnableIRQ+0x34>)
 80009d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009da:	095b      	lsrs	r3, r3, #5
 80009dc:	2001      	movs	r0, #1
 80009de:	fa00 f202 	lsl.w	r2, r0, r2
 80009e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009e6:	bf00      	nop
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr
 80009f0:	e000e100 	.word	0xe000e100

080009f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	6039      	str	r1, [r7, #0]
 80009fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	db0a      	blt.n	8000a1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	b2da      	uxtb	r2, r3
 8000a0c:	490c      	ldr	r1, [pc, #48]	; (8000a40 <__NVIC_SetPriority+0x4c>)
 8000a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a12:	0112      	lsls	r2, r2, #4
 8000a14:	b2d2      	uxtb	r2, r2
 8000a16:	440b      	add	r3, r1
 8000a18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a1c:	e00a      	b.n	8000a34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	4908      	ldr	r1, [pc, #32]	; (8000a44 <__NVIC_SetPriority+0x50>)
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	f003 030f 	and.w	r3, r3, #15
 8000a2a:	3b04      	subs	r3, #4
 8000a2c:	0112      	lsls	r2, r2, #4
 8000a2e:	b2d2      	uxtb	r2, r2
 8000a30:	440b      	add	r3, r1
 8000a32:	761a      	strb	r2, [r3, #24]
}
 8000a34:	bf00      	nop
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bc80      	pop	{r7}
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	e000e100 	.word	0xe000e100
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b089      	sub	sp, #36	; 0x24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a5c:	69fb      	ldr	r3, [r7, #28]
 8000a5e:	f1c3 0307 	rsb	r3, r3, #7
 8000a62:	2b04      	cmp	r3, #4
 8000a64:	bf28      	it	cs
 8000a66:	2304      	movcs	r3, #4
 8000a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	3304      	adds	r3, #4
 8000a6e:	2b06      	cmp	r3, #6
 8000a70:	d902      	bls.n	8000a78 <NVIC_EncodePriority+0x30>
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	3b03      	subs	r3, #3
 8000a76:	e000      	b.n	8000a7a <NVIC_EncodePriority+0x32>
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	fa02 f303 	lsl.w	r3, r2, r3
 8000a86:	43da      	mvns	r2, r3
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	401a      	ands	r2, r3
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a90:	f04f 31ff 	mov.w	r1, #4294967295
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9a:	43d9      	mvns	r1, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa0:	4313      	orrs	r3, r2
         );
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3724      	adds	r7, #36	; 0x24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr

08000aac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f7ff ff4f 	bl	8000958 <__NVIC_SetPriorityGrouping>
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b086      	sub	sp, #24
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	4603      	mov	r3, r0
 8000aca:	60b9      	str	r1, [r7, #8]
 8000acc:	607a      	str	r2, [r7, #4]
 8000ace:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ad4:	f7ff ff64 	bl	80009a0 <__NVIC_GetPriorityGrouping>
 8000ad8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	68b9      	ldr	r1, [r7, #8]
 8000ade:	6978      	ldr	r0, [r7, #20]
 8000ae0:	f7ff ffb2 	bl	8000a48 <NVIC_EncodePriority>
 8000ae4:	4602      	mov	r2, r0
 8000ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aea:	4611      	mov	r1, r2
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff ff81 	bl	80009f4 <__NVIC_SetPriority>
}
 8000af2:	bf00      	nop
 8000af4:	3718      	adds	r7, #24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b082      	sub	sp, #8
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	4603      	mov	r3, r0
 8000b02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff ff57 	bl	80009bc <__NVIC_EnableIRQ>
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
	...

08000b18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b08b      	sub	sp, #44	; 0x2c
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b22:	2300      	movs	r3, #0
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b2a:	e179      	b.n	8000e20 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b30:	fa02 f303 	lsl.w	r3, r2, r3
 8000b34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	69fa      	ldr	r2, [r7, #28]
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b40:	69ba      	ldr	r2, [r7, #24]
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	f040 8168 	bne.w	8000e1a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	4a96      	ldr	r2, [pc, #600]	; (8000da8 <HAL_GPIO_Init+0x290>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d05e      	beq.n	8000c12 <HAL_GPIO_Init+0xfa>
 8000b54:	4a94      	ldr	r2, [pc, #592]	; (8000da8 <HAL_GPIO_Init+0x290>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d875      	bhi.n	8000c46 <HAL_GPIO_Init+0x12e>
 8000b5a:	4a94      	ldr	r2, [pc, #592]	; (8000dac <HAL_GPIO_Init+0x294>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d058      	beq.n	8000c12 <HAL_GPIO_Init+0xfa>
 8000b60:	4a92      	ldr	r2, [pc, #584]	; (8000dac <HAL_GPIO_Init+0x294>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d86f      	bhi.n	8000c46 <HAL_GPIO_Init+0x12e>
 8000b66:	4a92      	ldr	r2, [pc, #584]	; (8000db0 <HAL_GPIO_Init+0x298>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d052      	beq.n	8000c12 <HAL_GPIO_Init+0xfa>
 8000b6c:	4a90      	ldr	r2, [pc, #576]	; (8000db0 <HAL_GPIO_Init+0x298>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d869      	bhi.n	8000c46 <HAL_GPIO_Init+0x12e>
 8000b72:	4a90      	ldr	r2, [pc, #576]	; (8000db4 <HAL_GPIO_Init+0x29c>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d04c      	beq.n	8000c12 <HAL_GPIO_Init+0xfa>
 8000b78:	4a8e      	ldr	r2, [pc, #568]	; (8000db4 <HAL_GPIO_Init+0x29c>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d863      	bhi.n	8000c46 <HAL_GPIO_Init+0x12e>
 8000b7e:	4a8e      	ldr	r2, [pc, #568]	; (8000db8 <HAL_GPIO_Init+0x2a0>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d046      	beq.n	8000c12 <HAL_GPIO_Init+0xfa>
 8000b84:	4a8c      	ldr	r2, [pc, #560]	; (8000db8 <HAL_GPIO_Init+0x2a0>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d85d      	bhi.n	8000c46 <HAL_GPIO_Init+0x12e>
 8000b8a:	2b12      	cmp	r3, #18
 8000b8c:	d82a      	bhi.n	8000be4 <HAL_GPIO_Init+0xcc>
 8000b8e:	2b12      	cmp	r3, #18
 8000b90:	d859      	bhi.n	8000c46 <HAL_GPIO_Init+0x12e>
 8000b92:	a201      	add	r2, pc, #4	; (adr r2, 8000b98 <HAL_GPIO_Init+0x80>)
 8000b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b98:	08000c13 	.word	0x08000c13
 8000b9c:	08000bed 	.word	0x08000bed
 8000ba0:	08000bff 	.word	0x08000bff
 8000ba4:	08000c41 	.word	0x08000c41
 8000ba8:	08000c47 	.word	0x08000c47
 8000bac:	08000c47 	.word	0x08000c47
 8000bb0:	08000c47 	.word	0x08000c47
 8000bb4:	08000c47 	.word	0x08000c47
 8000bb8:	08000c47 	.word	0x08000c47
 8000bbc:	08000c47 	.word	0x08000c47
 8000bc0:	08000c47 	.word	0x08000c47
 8000bc4:	08000c47 	.word	0x08000c47
 8000bc8:	08000c47 	.word	0x08000c47
 8000bcc:	08000c47 	.word	0x08000c47
 8000bd0:	08000c47 	.word	0x08000c47
 8000bd4:	08000c47 	.word	0x08000c47
 8000bd8:	08000c47 	.word	0x08000c47
 8000bdc:	08000bf5 	.word	0x08000bf5
 8000be0:	08000c09 	.word	0x08000c09
 8000be4:	4a75      	ldr	r2, [pc, #468]	; (8000dbc <HAL_GPIO_Init+0x2a4>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d013      	beq.n	8000c12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bea:	e02c      	b.n	8000c46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	623b      	str	r3, [r7, #32]
          break;
 8000bf2:	e029      	b.n	8000c48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	3304      	adds	r3, #4
 8000bfa:	623b      	str	r3, [r7, #32]
          break;
 8000bfc:	e024      	b.n	8000c48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	68db      	ldr	r3, [r3, #12]
 8000c02:	3308      	adds	r3, #8
 8000c04:	623b      	str	r3, [r7, #32]
          break;
 8000c06:	e01f      	b.n	8000c48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	330c      	adds	r3, #12
 8000c0e:	623b      	str	r3, [r7, #32]
          break;
 8000c10:	e01a      	b.n	8000c48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	689b      	ldr	r3, [r3, #8]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d102      	bne.n	8000c20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c1a:	2304      	movs	r3, #4
 8000c1c:	623b      	str	r3, [r7, #32]
          break;
 8000c1e:	e013      	b.n	8000c48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	689b      	ldr	r3, [r3, #8]
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d105      	bne.n	8000c34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c28:	2308      	movs	r3, #8
 8000c2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	69fa      	ldr	r2, [r7, #28]
 8000c30:	611a      	str	r2, [r3, #16]
          break;
 8000c32:	e009      	b.n	8000c48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c34:	2308      	movs	r3, #8
 8000c36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	69fa      	ldr	r2, [r7, #28]
 8000c3c:	615a      	str	r2, [r3, #20]
          break;
 8000c3e:	e003      	b.n	8000c48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c40:	2300      	movs	r3, #0
 8000c42:	623b      	str	r3, [r7, #32]
          break;
 8000c44:	e000      	b.n	8000c48 <HAL_GPIO_Init+0x130>
          break;
 8000c46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c48:	69bb      	ldr	r3, [r7, #24]
 8000c4a:	2bff      	cmp	r3, #255	; 0xff
 8000c4c:	d801      	bhi.n	8000c52 <HAL_GPIO_Init+0x13a>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	e001      	b.n	8000c56 <HAL_GPIO_Init+0x13e>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	3304      	adds	r3, #4
 8000c56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	2bff      	cmp	r3, #255	; 0xff
 8000c5c:	d802      	bhi.n	8000c64 <HAL_GPIO_Init+0x14c>
 8000c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	e002      	b.n	8000c6a <HAL_GPIO_Init+0x152>
 8000c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c66:	3b08      	subs	r3, #8
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	210f      	movs	r1, #15
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	fa01 f303 	lsl.w	r3, r1, r3
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	401a      	ands	r2, r3
 8000c7c:	6a39      	ldr	r1, [r7, #32]
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	fa01 f303 	lsl.w	r3, r1, r3
 8000c84:	431a      	orrs	r2, r3
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f000 80c1 	beq.w	8000e1a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c98:	4b49      	ldr	r3, [pc, #292]	; (8000dc0 <HAL_GPIO_Init+0x2a8>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	4a48      	ldr	r2, [pc, #288]	; (8000dc0 <HAL_GPIO_Init+0x2a8>)
 8000c9e:	f043 0301 	orr.w	r3, r3, #1
 8000ca2:	6193      	str	r3, [r2, #24]
 8000ca4:	4b46      	ldr	r3, [pc, #280]	; (8000dc0 <HAL_GPIO_Init+0x2a8>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	f003 0301 	and.w	r3, r3, #1
 8000cac:	60bb      	str	r3, [r7, #8]
 8000cae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cb0:	4a44      	ldr	r2, [pc, #272]	; (8000dc4 <HAL_GPIO_Init+0x2ac>)
 8000cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb4:	089b      	lsrs	r3, r3, #2
 8000cb6:	3302      	adds	r3, #2
 8000cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cbc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc0:	f003 0303 	and.w	r3, r3, #3
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	220f      	movs	r2, #15
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4a3c      	ldr	r2, [pc, #240]	; (8000dc8 <HAL_GPIO_Init+0x2b0>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d01f      	beq.n	8000d1c <HAL_GPIO_Init+0x204>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4a3b      	ldr	r2, [pc, #236]	; (8000dcc <HAL_GPIO_Init+0x2b4>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d019      	beq.n	8000d18 <HAL_GPIO_Init+0x200>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a3a      	ldr	r2, [pc, #232]	; (8000dd0 <HAL_GPIO_Init+0x2b8>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d013      	beq.n	8000d14 <HAL_GPIO_Init+0x1fc>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4a39      	ldr	r2, [pc, #228]	; (8000dd4 <HAL_GPIO_Init+0x2bc>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d00d      	beq.n	8000d10 <HAL_GPIO_Init+0x1f8>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a38      	ldr	r2, [pc, #224]	; (8000dd8 <HAL_GPIO_Init+0x2c0>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d007      	beq.n	8000d0c <HAL_GPIO_Init+0x1f4>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4a37      	ldr	r2, [pc, #220]	; (8000ddc <HAL_GPIO_Init+0x2c4>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d101      	bne.n	8000d08 <HAL_GPIO_Init+0x1f0>
 8000d04:	2305      	movs	r3, #5
 8000d06:	e00a      	b.n	8000d1e <HAL_GPIO_Init+0x206>
 8000d08:	2306      	movs	r3, #6
 8000d0a:	e008      	b.n	8000d1e <HAL_GPIO_Init+0x206>
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	e006      	b.n	8000d1e <HAL_GPIO_Init+0x206>
 8000d10:	2303      	movs	r3, #3
 8000d12:	e004      	b.n	8000d1e <HAL_GPIO_Init+0x206>
 8000d14:	2302      	movs	r3, #2
 8000d16:	e002      	b.n	8000d1e <HAL_GPIO_Init+0x206>
 8000d18:	2301      	movs	r3, #1
 8000d1a:	e000      	b.n	8000d1e <HAL_GPIO_Init+0x206>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d20:	f002 0203 	and.w	r2, r2, #3
 8000d24:	0092      	lsls	r2, r2, #2
 8000d26:	4093      	lsls	r3, r2
 8000d28:	68fa      	ldr	r2, [r7, #12]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d2e:	4925      	ldr	r1, [pc, #148]	; (8000dc4 <HAL_GPIO_Init+0x2ac>)
 8000d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d32:	089b      	lsrs	r3, r3, #2
 8000d34:	3302      	adds	r3, #2
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d006      	beq.n	8000d56 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d48:	4b25      	ldr	r3, [pc, #148]	; (8000de0 <HAL_GPIO_Init+0x2c8>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4924      	ldr	r1, [pc, #144]	; (8000de0 <HAL_GPIO_Init+0x2c8>)
 8000d4e:	69bb      	ldr	r3, [r7, #24]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	600b      	str	r3, [r1, #0]
 8000d54:	e006      	b.n	8000d64 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d56:	4b22      	ldr	r3, [pc, #136]	; (8000de0 <HAL_GPIO_Init+0x2c8>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	4920      	ldr	r1, [pc, #128]	; (8000de0 <HAL_GPIO_Init+0x2c8>)
 8000d60:	4013      	ands	r3, r2
 8000d62:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d006      	beq.n	8000d7e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d70:	4b1b      	ldr	r3, [pc, #108]	; (8000de0 <HAL_GPIO_Init+0x2c8>)
 8000d72:	685a      	ldr	r2, [r3, #4]
 8000d74:	491a      	ldr	r1, [pc, #104]	; (8000de0 <HAL_GPIO_Init+0x2c8>)
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	604b      	str	r3, [r1, #4]
 8000d7c:	e006      	b.n	8000d8c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d7e:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <HAL_GPIO_Init+0x2c8>)
 8000d80:	685a      	ldr	r2, [r3, #4]
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	43db      	mvns	r3, r3
 8000d86:	4916      	ldr	r1, [pc, #88]	; (8000de0 <HAL_GPIO_Init+0x2c8>)
 8000d88:	4013      	ands	r3, r2
 8000d8a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d025      	beq.n	8000de4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d98:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <HAL_GPIO_Init+0x2c8>)
 8000d9a:	689a      	ldr	r2, [r3, #8]
 8000d9c:	4910      	ldr	r1, [pc, #64]	; (8000de0 <HAL_GPIO_Init+0x2c8>)
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	608b      	str	r3, [r1, #8]
 8000da4:	e025      	b.n	8000df2 <HAL_GPIO_Init+0x2da>
 8000da6:	bf00      	nop
 8000da8:	10320000 	.word	0x10320000
 8000dac:	10310000 	.word	0x10310000
 8000db0:	10220000 	.word	0x10220000
 8000db4:	10210000 	.word	0x10210000
 8000db8:	10120000 	.word	0x10120000
 8000dbc:	10110000 	.word	0x10110000
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	40010000 	.word	0x40010000
 8000dc8:	40010800 	.word	0x40010800
 8000dcc:	40010c00 	.word	0x40010c00
 8000dd0:	40011000 	.word	0x40011000
 8000dd4:	40011400 	.word	0x40011400
 8000dd8:	40011800 	.word	0x40011800
 8000ddc:	40011c00 	.word	0x40011c00
 8000de0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000de4:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <HAL_GPIO_Init+0x324>)
 8000de6:	689a      	ldr	r2, [r3, #8]
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	43db      	mvns	r3, r3
 8000dec:	4913      	ldr	r1, [pc, #76]	; (8000e3c <HAL_GPIO_Init+0x324>)
 8000dee:	4013      	ands	r3, r2
 8000df0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d006      	beq.n	8000e0c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000dfe:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <HAL_GPIO_Init+0x324>)
 8000e00:	68da      	ldr	r2, [r3, #12]
 8000e02:	490e      	ldr	r1, [pc, #56]	; (8000e3c <HAL_GPIO_Init+0x324>)
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	60cb      	str	r3, [r1, #12]
 8000e0a:	e006      	b.n	8000e1a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e0c:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <HAL_GPIO_Init+0x324>)
 8000e0e:	68da      	ldr	r2, [r3, #12]
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	43db      	mvns	r3, r3
 8000e14:	4909      	ldr	r1, [pc, #36]	; (8000e3c <HAL_GPIO_Init+0x324>)
 8000e16:	4013      	ands	r3, r2
 8000e18:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e26:	fa22 f303 	lsr.w	r3, r2, r3
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	f47f ae7e 	bne.w	8000b2c <HAL_GPIO_Init+0x14>
  }
}
 8000e30:	bf00      	nop
 8000e32:	bf00      	nop
 8000e34:	372c      	adds	r7, #44	; 0x2c
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr
 8000e3c:	40010400 	.word	0x40010400

08000e40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d101      	bne.n	8000e52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e272      	b.n	8001338 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f000 8087 	beq.w	8000f6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e60:	4b92      	ldr	r3, [pc, #584]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 030c 	and.w	r3, r3, #12
 8000e68:	2b04      	cmp	r3, #4
 8000e6a:	d00c      	beq.n	8000e86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e6c:	4b8f      	ldr	r3, [pc, #572]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 030c 	and.w	r3, r3, #12
 8000e74:	2b08      	cmp	r3, #8
 8000e76:	d112      	bne.n	8000e9e <HAL_RCC_OscConfig+0x5e>
 8000e78:	4b8c      	ldr	r3, [pc, #560]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e84:	d10b      	bne.n	8000e9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e86:	4b89      	ldr	r3, [pc, #548]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d06c      	beq.n	8000f6c <HAL_RCC_OscConfig+0x12c>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d168      	bne.n	8000f6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e24c      	b.n	8001338 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ea6:	d106      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x76>
 8000ea8:	4b80      	ldr	r3, [pc, #512]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a7f      	ldr	r2, [pc, #508]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eb2:	6013      	str	r3, [r2, #0]
 8000eb4:	e02e      	b.n	8000f14 <HAL_RCC_OscConfig+0xd4>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d10c      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x98>
 8000ebe:	4b7b      	ldr	r3, [pc, #492]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a7a      	ldr	r2, [pc, #488]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000ec4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ec8:	6013      	str	r3, [r2, #0]
 8000eca:	4b78      	ldr	r3, [pc, #480]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a77      	ldr	r2, [pc, #476]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000ed0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ed4:	6013      	str	r3, [r2, #0]
 8000ed6:	e01d      	b.n	8000f14 <HAL_RCC_OscConfig+0xd4>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ee0:	d10c      	bne.n	8000efc <HAL_RCC_OscConfig+0xbc>
 8000ee2:	4b72      	ldr	r3, [pc, #456]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a71      	ldr	r2, [pc, #452]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000ee8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eec:	6013      	str	r3, [r2, #0]
 8000eee:	4b6f      	ldr	r3, [pc, #444]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a6e      	ldr	r2, [pc, #440]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ef8:	6013      	str	r3, [r2, #0]
 8000efa:	e00b      	b.n	8000f14 <HAL_RCC_OscConfig+0xd4>
 8000efc:	4b6b      	ldr	r3, [pc, #428]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a6a      	ldr	r2, [pc, #424]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000f02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f06:	6013      	str	r3, [r2, #0]
 8000f08:	4b68      	ldr	r3, [pc, #416]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a67      	ldr	r2, [pc, #412]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000f0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d013      	beq.n	8000f44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f1c:	f7ff fcee 	bl	80008fc <HAL_GetTick>
 8000f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f22:	e008      	b.n	8000f36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f24:	f7ff fcea 	bl	80008fc <HAL_GetTick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	2b64      	cmp	r3, #100	; 0x64
 8000f30:	d901      	bls.n	8000f36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f32:	2303      	movs	r3, #3
 8000f34:	e200      	b.n	8001338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f36:	4b5d      	ldr	r3, [pc, #372]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d0f0      	beq.n	8000f24 <HAL_RCC_OscConfig+0xe4>
 8000f42:	e014      	b.n	8000f6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f44:	f7ff fcda 	bl	80008fc <HAL_GetTick>
 8000f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f4a:	e008      	b.n	8000f5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f4c:	f7ff fcd6 	bl	80008fc <HAL_GetTick>
 8000f50:	4602      	mov	r2, r0
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	2b64      	cmp	r3, #100	; 0x64
 8000f58:	d901      	bls.n	8000f5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	e1ec      	b.n	8001338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f5e:	4b53      	ldr	r3, [pc, #332]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d1f0      	bne.n	8000f4c <HAL_RCC_OscConfig+0x10c>
 8000f6a:	e000      	b.n	8000f6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f003 0302 	and.w	r3, r3, #2
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d063      	beq.n	8001042 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f7a:	4b4c      	ldr	r3, [pc, #304]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f003 030c 	and.w	r3, r3, #12
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d00b      	beq.n	8000f9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f86:	4b49      	ldr	r3, [pc, #292]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f003 030c 	and.w	r3, r3, #12
 8000f8e:	2b08      	cmp	r3, #8
 8000f90:	d11c      	bne.n	8000fcc <HAL_RCC_OscConfig+0x18c>
 8000f92:	4b46      	ldr	r3, [pc, #280]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d116      	bne.n	8000fcc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f9e:	4b43      	ldr	r3, [pc, #268]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d005      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x176>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	691b      	ldr	r3, [r3, #16]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d001      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e1c0      	b.n	8001338 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fb6:	4b3d      	ldr	r3, [pc, #244]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	695b      	ldr	r3, [r3, #20]
 8000fc2:	00db      	lsls	r3, r3, #3
 8000fc4:	4939      	ldr	r1, [pc, #228]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fca:	e03a      	b.n	8001042 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	691b      	ldr	r3, [r3, #16]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d020      	beq.n	8001016 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fd4:	4b36      	ldr	r3, [pc, #216]	; (80010b0 <HAL_RCC_OscConfig+0x270>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fda:	f7ff fc8f 	bl	80008fc <HAL_GetTick>
 8000fde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fe0:	e008      	b.n	8000ff4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fe2:	f7ff fc8b 	bl	80008fc <HAL_GetTick>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d901      	bls.n	8000ff4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	e1a1      	b.n	8001338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ff4:	4b2d      	ldr	r3, [pc, #180]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f003 0302 	and.w	r3, r3, #2
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d0f0      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001000:	4b2a      	ldr	r3, [pc, #168]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	695b      	ldr	r3, [r3, #20]
 800100c:	00db      	lsls	r3, r3, #3
 800100e:	4927      	ldr	r1, [pc, #156]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8001010:	4313      	orrs	r3, r2
 8001012:	600b      	str	r3, [r1, #0]
 8001014:	e015      	b.n	8001042 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001016:	4b26      	ldr	r3, [pc, #152]	; (80010b0 <HAL_RCC_OscConfig+0x270>)
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800101c:	f7ff fc6e 	bl	80008fc <HAL_GetTick>
 8001020:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001022:	e008      	b.n	8001036 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001024:	f7ff fc6a 	bl	80008fc <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b02      	cmp	r3, #2
 8001030:	d901      	bls.n	8001036 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e180      	b.n	8001338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001036:	4b1d      	ldr	r3, [pc, #116]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	2b00      	cmp	r3, #0
 8001040:	d1f0      	bne.n	8001024 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 0308 	and.w	r3, r3, #8
 800104a:	2b00      	cmp	r3, #0
 800104c:	d03a      	beq.n	80010c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d019      	beq.n	800108a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001056:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <HAL_RCC_OscConfig+0x274>)
 8001058:	2201      	movs	r2, #1
 800105a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800105c:	f7ff fc4e 	bl	80008fc <HAL_GetTick>
 8001060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001062:	e008      	b.n	8001076 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001064:	f7ff fc4a 	bl	80008fc <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	2b02      	cmp	r3, #2
 8001070:	d901      	bls.n	8001076 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001072:	2303      	movs	r3, #3
 8001074:	e160      	b.n	8001338 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001076:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8001078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	2b00      	cmp	r3, #0
 8001080:	d0f0      	beq.n	8001064 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001082:	2001      	movs	r0, #1
 8001084:	f000 fb08 	bl	8001698 <RCC_Delay>
 8001088:	e01c      	b.n	80010c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800108a:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <HAL_RCC_OscConfig+0x274>)
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001090:	f7ff fc34 	bl	80008fc <HAL_GetTick>
 8001094:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001096:	e00f      	b.n	80010b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001098:	f7ff fc30 	bl	80008fc <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d908      	bls.n	80010b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e146      	b.n	8001338 <HAL_RCC_OscConfig+0x4f8>
 80010aa:	bf00      	nop
 80010ac:	40021000 	.word	0x40021000
 80010b0:	42420000 	.word	0x42420000
 80010b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010b8:	4b92      	ldr	r3, [pc, #584]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 80010ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d1e9      	bne.n	8001098 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 0304 	and.w	r3, r3, #4
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	f000 80a6 	beq.w	800121e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010d2:	2300      	movs	r3, #0
 80010d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010d6:	4b8b      	ldr	r3, [pc, #556]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d10d      	bne.n	80010fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010e2:	4b88      	ldr	r3, [pc, #544]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	4a87      	ldr	r2, [pc, #540]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 80010e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ec:	61d3      	str	r3, [r2, #28]
 80010ee:	4b85      	ldr	r3, [pc, #532]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010fa:	2301      	movs	r3, #1
 80010fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010fe:	4b82      	ldr	r3, [pc, #520]	; (8001308 <HAL_RCC_OscConfig+0x4c8>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001106:	2b00      	cmp	r3, #0
 8001108:	d118      	bne.n	800113c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800110a:	4b7f      	ldr	r3, [pc, #508]	; (8001308 <HAL_RCC_OscConfig+0x4c8>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a7e      	ldr	r2, [pc, #504]	; (8001308 <HAL_RCC_OscConfig+0x4c8>)
 8001110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001114:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001116:	f7ff fbf1 	bl	80008fc <HAL_GetTick>
 800111a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800111c:	e008      	b.n	8001130 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800111e:	f7ff fbed 	bl	80008fc <HAL_GetTick>
 8001122:	4602      	mov	r2, r0
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	2b64      	cmp	r3, #100	; 0x64
 800112a:	d901      	bls.n	8001130 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800112c:	2303      	movs	r3, #3
 800112e:	e103      	b.n	8001338 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001130:	4b75      	ldr	r3, [pc, #468]	; (8001308 <HAL_RCC_OscConfig+0x4c8>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001138:	2b00      	cmp	r3, #0
 800113a:	d0f0      	beq.n	800111e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d106      	bne.n	8001152 <HAL_RCC_OscConfig+0x312>
 8001144:	4b6f      	ldr	r3, [pc, #444]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 8001146:	6a1b      	ldr	r3, [r3, #32]
 8001148:	4a6e      	ldr	r2, [pc, #440]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 800114a:	f043 0301 	orr.w	r3, r3, #1
 800114e:	6213      	str	r3, [r2, #32]
 8001150:	e02d      	b.n	80011ae <HAL_RCC_OscConfig+0x36e>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d10c      	bne.n	8001174 <HAL_RCC_OscConfig+0x334>
 800115a:	4b6a      	ldr	r3, [pc, #424]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 800115c:	6a1b      	ldr	r3, [r3, #32]
 800115e:	4a69      	ldr	r2, [pc, #420]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 8001160:	f023 0301 	bic.w	r3, r3, #1
 8001164:	6213      	str	r3, [r2, #32]
 8001166:	4b67      	ldr	r3, [pc, #412]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 8001168:	6a1b      	ldr	r3, [r3, #32]
 800116a:	4a66      	ldr	r2, [pc, #408]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 800116c:	f023 0304 	bic.w	r3, r3, #4
 8001170:	6213      	str	r3, [r2, #32]
 8001172:	e01c      	b.n	80011ae <HAL_RCC_OscConfig+0x36e>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	2b05      	cmp	r3, #5
 800117a:	d10c      	bne.n	8001196 <HAL_RCC_OscConfig+0x356>
 800117c:	4b61      	ldr	r3, [pc, #388]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	4a60      	ldr	r2, [pc, #384]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 8001182:	f043 0304 	orr.w	r3, r3, #4
 8001186:	6213      	str	r3, [r2, #32]
 8001188:	4b5e      	ldr	r3, [pc, #376]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 800118a:	6a1b      	ldr	r3, [r3, #32]
 800118c:	4a5d      	ldr	r2, [pc, #372]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	6213      	str	r3, [r2, #32]
 8001194:	e00b      	b.n	80011ae <HAL_RCC_OscConfig+0x36e>
 8001196:	4b5b      	ldr	r3, [pc, #364]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 8001198:	6a1b      	ldr	r3, [r3, #32]
 800119a:	4a5a      	ldr	r2, [pc, #360]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 800119c:	f023 0301 	bic.w	r3, r3, #1
 80011a0:	6213      	str	r3, [r2, #32]
 80011a2:	4b58      	ldr	r3, [pc, #352]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 80011a4:	6a1b      	ldr	r3, [r3, #32]
 80011a6:	4a57      	ldr	r2, [pc, #348]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 80011a8:	f023 0304 	bic.w	r3, r3, #4
 80011ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d015      	beq.n	80011e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011b6:	f7ff fba1 	bl	80008fc <HAL_GetTick>
 80011ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011bc:	e00a      	b.n	80011d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011be:	f7ff fb9d 	bl	80008fc <HAL_GetTick>
 80011c2:	4602      	mov	r2, r0
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d901      	bls.n	80011d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e0b1      	b.n	8001338 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011d4:	4b4b      	ldr	r3, [pc, #300]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 80011d6:	6a1b      	ldr	r3, [r3, #32]
 80011d8:	f003 0302 	and.w	r3, r3, #2
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d0ee      	beq.n	80011be <HAL_RCC_OscConfig+0x37e>
 80011e0:	e014      	b.n	800120c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011e2:	f7ff fb8b 	bl	80008fc <HAL_GetTick>
 80011e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011e8:	e00a      	b.n	8001200 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011ea:	f7ff fb87 	bl	80008fc <HAL_GetTick>
 80011ee:	4602      	mov	r2, r0
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e09b      	b.n	8001338 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001200:	4b40      	ldr	r3, [pc, #256]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 8001202:	6a1b      	ldr	r3, [r3, #32]
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	2b00      	cmp	r3, #0
 800120a:	d1ee      	bne.n	80011ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800120c:	7dfb      	ldrb	r3, [r7, #23]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d105      	bne.n	800121e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001212:	4b3c      	ldr	r3, [pc, #240]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	4a3b      	ldr	r2, [pc, #236]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 8001218:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800121c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	2b00      	cmp	r3, #0
 8001224:	f000 8087 	beq.w	8001336 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001228:	4b36      	ldr	r3, [pc, #216]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 030c 	and.w	r3, r3, #12
 8001230:	2b08      	cmp	r3, #8
 8001232:	d061      	beq.n	80012f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	69db      	ldr	r3, [r3, #28]
 8001238:	2b02      	cmp	r3, #2
 800123a:	d146      	bne.n	80012ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800123c:	4b33      	ldr	r3, [pc, #204]	; (800130c <HAL_RCC_OscConfig+0x4cc>)
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001242:	f7ff fb5b 	bl	80008fc <HAL_GetTick>
 8001246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001248:	e008      	b.n	800125c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800124a:	f7ff fb57 	bl	80008fc <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	2b02      	cmp	r3, #2
 8001256:	d901      	bls.n	800125c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e06d      	b.n	8001338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800125c:	4b29      	ldr	r3, [pc, #164]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d1f0      	bne.n	800124a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a1b      	ldr	r3, [r3, #32]
 800126c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001270:	d108      	bne.n	8001284 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001272:	4b24      	ldr	r3, [pc, #144]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	4921      	ldr	r1, [pc, #132]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 8001280:	4313      	orrs	r3, r2
 8001282:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001284:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6a19      	ldr	r1, [r3, #32]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001294:	430b      	orrs	r3, r1
 8001296:	491b      	ldr	r1, [pc, #108]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 8001298:	4313      	orrs	r3, r2
 800129a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800129c:	4b1b      	ldr	r3, [pc, #108]	; (800130c <HAL_RCC_OscConfig+0x4cc>)
 800129e:	2201      	movs	r2, #1
 80012a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a2:	f7ff fb2b 	bl	80008fc <HAL_GetTick>
 80012a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012a8:	e008      	b.n	80012bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012aa:	f7ff fb27 	bl	80008fc <HAL_GetTick>
 80012ae:	4602      	mov	r2, r0
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d901      	bls.n	80012bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	e03d      	b.n	8001338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d0f0      	beq.n	80012aa <HAL_RCC_OscConfig+0x46a>
 80012c8:	e035      	b.n	8001336 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012ca:	4b10      	ldr	r3, [pc, #64]	; (800130c <HAL_RCC_OscConfig+0x4cc>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d0:	f7ff fb14 	bl	80008fc <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012d8:	f7ff fb10 	bl	80008fc <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e026      	b.n	8001338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1f0      	bne.n	80012d8 <HAL_RCC_OscConfig+0x498>
 80012f6:	e01e      	b.n	8001336 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	69db      	ldr	r3, [r3, #28]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d107      	bne.n	8001310 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e019      	b.n	8001338 <HAL_RCC_OscConfig+0x4f8>
 8001304:	40021000 	.word	0x40021000
 8001308:	40007000 	.word	0x40007000
 800130c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001310:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <HAL_RCC_OscConfig+0x500>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a1b      	ldr	r3, [r3, #32]
 8001320:	429a      	cmp	r2, r3
 8001322:	d106      	bne.n	8001332 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800132e:	429a      	cmp	r2, r3
 8001330:	d001      	beq.n	8001336 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e000      	b.n	8001338 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001336:	2300      	movs	r3, #0
}
 8001338:	4618      	mov	r0, r3
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40021000 	.word	0x40021000

08001344 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d101      	bne.n	8001358 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e0d0      	b.n	80014fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001358:	4b6a      	ldr	r3, [pc, #424]	; (8001504 <HAL_RCC_ClockConfig+0x1c0>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0307 	and.w	r3, r3, #7
 8001360:	683a      	ldr	r2, [r7, #0]
 8001362:	429a      	cmp	r2, r3
 8001364:	d910      	bls.n	8001388 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001366:	4b67      	ldr	r3, [pc, #412]	; (8001504 <HAL_RCC_ClockConfig+0x1c0>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f023 0207 	bic.w	r2, r3, #7
 800136e:	4965      	ldr	r1, [pc, #404]	; (8001504 <HAL_RCC_ClockConfig+0x1c0>)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	4313      	orrs	r3, r2
 8001374:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001376:	4b63      	ldr	r3, [pc, #396]	; (8001504 <HAL_RCC_ClockConfig+0x1c0>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	683a      	ldr	r2, [r7, #0]
 8001380:	429a      	cmp	r2, r3
 8001382:	d001      	beq.n	8001388 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e0b8      	b.n	80014fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	2b00      	cmp	r3, #0
 8001392:	d020      	beq.n	80013d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0304 	and.w	r3, r3, #4
 800139c:	2b00      	cmp	r3, #0
 800139e:	d005      	beq.n	80013ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013a0:	4b59      	ldr	r3, [pc, #356]	; (8001508 <HAL_RCC_ClockConfig+0x1c4>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	4a58      	ldr	r2, [pc, #352]	; (8001508 <HAL_RCC_ClockConfig+0x1c4>)
 80013a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0308 	and.w	r3, r3, #8
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d005      	beq.n	80013c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013b8:	4b53      	ldr	r3, [pc, #332]	; (8001508 <HAL_RCC_ClockConfig+0x1c4>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	4a52      	ldr	r2, [pc, #328]	; (8001508 <HAL_RCC_ClockConfig+0x1c4>)
 80013be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80013c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013c4:	4b50      	ldr	r3, [pc, #320]	; (8001508 <HAL_RCC_ClockConfig+0x1c4>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	494d      	ldr	r1, [pc, #308]	; (8001508 <HAL_RCC_ClockConfig+0x1c4>)
 80013d2:	4313      	orrs	r3, r2
 80013d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d040      	beq.n	8001464 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d107      	bne.n	80013fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ea:	4b47      	ldr	r3, [pc, #284]	; (8001508 <HAL_RCC_ClockConfig+0x1c4>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d115      	bne.n	8001422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e07f      	b.n	80014fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d107      	bne.n	8001412 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001402:	4b41      	ldr	r3, [pc, #260]	; (8001508 <HAL_RCC_ClockConfig+0x1c4>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d109      	bne.n	8001422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e073      	b.n	80014fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001412:	4b3d      	ldr	r3, [pc, #244]	; (8001508 <HAL_RCC_ClockConfig+0x1c4>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d101      	bne.n	8001422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e06b      	b.n	80014fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001422:	4b39      	ldr	r3, [pc, #228]	; (8001508 <HAL_RCC_ClockConfig+0x1c4>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f023 0203 	bic.w	r2, r3, #3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	4936      	ldr	r1, [pc, #216]	; (8001508 <HAL_RCC_ClockConfig+0x1c4>)
 8001430:	4313      	orrs	r3, r2
 8001432:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001434:	f7ff fa62 	bl	80008fc <HAL_GetTick>
 8001438:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800143a:	e00a      	b.n	8001452 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800143c:	f7ff fa5e 	bl	80008fc <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	f241 3288 	movw	r2, #5000	; 0x1388
 800144a:	4293      	cmp	r3, r2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e053      	b.n	80014fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001452:	4b2d      	ldr	r3, [pc, #180]	; (8001508 <HAL_RCC_ClockConfig+0x1c4>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f003 020c 	and.w	r2, r3, #12
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	429a      	cmp	r2, r3
 8001462:	d1eb      	bne.n	800143c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001464:	4b27      	ldr	r3, [pc, #156]	; (8001504 <HAL_RCC_ClockConfig+0x1c0>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0307 	and.w	r3, r3, #7
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	429a      	cmp	r2, r3
 8001470:	d210      	bcs.n	8001494 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001472:	4b24      	ldr	r3, [pc, #144]	; (8001504 <HAL_RCC_ClockConfig+0x1c0>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f023 0207 	bic.w	r2, r3, #7
 800147a:	4922      	ldr	r1, [pc, #136]	; (8001504 <HAL_RCC_ClockConfig+0x1c0>)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	4313      	orrs	r3, r2
 8001480:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001482:	4b20      	ldr	r3, [pc, #128]	; (8001504 <HAL_RCC_ClockConfig+0x1c0>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	683a      	ldr	r2, [r7, #0]
 800148c:	429a      	cmp	r2, r3
 800148e:	d001      	beq.n	8001494 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e032      	b.n	80014fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	2b00      	cmp	r3, #0
 800149e:	d008      	beq.n	80014b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014a0:	4b19      	ldr	r3, [pc, #100]	; (8001508 <HAL_RCC_ClockConfig+0x1c4>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	4916      	ldr	r1, [pc, #88]	; (8001508 <HAL_RCC_ClockConfig+0x1c4>)
 80014ae:	4313      	orrs	r3, r2
 80014b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0308 	and.w	r3, r3, #8
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d009      	beq.n	80014d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014be:	4b12      	ldr	r3, [pc, #72]	; (8001508 <HAL_RCC_ClockConfig+0x1c4>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	490e      	ldr	r1, [pc, #56]	; (8001508 <HAL_RCC_ClockConfig+0x1c4>)
 80014ce:	4313      	orrs	r3, r2
 80014d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014d2:	f000 f821 	bl	8001518 <HAL_RCC_GetSysClockFreq>
 80014d6:	4602      	mov	r2, r0
 80014d8:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <HAL_RCC_ClockConfig+0x1c4>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	091b      	lsrs	r3, r3, #4
 80014de:	f003 030f 	and.w	r3, r3, #15
 80014e2:	490a      	ldr	r1, [pc, #40]	; (800150c <HAL_RCC_ClockConfig+0x1c8>)
 80014e4:	5ccb      	ldrb	r3, [r1, r3]
 80014e6:	fa22 f303 	lsr.w	r3, r2, r3
 80014ea:	4a09      	ldr	r2, [pc, #36]	; (8001510 <HAL_RCC_ClockConfig+0x1cc>)
 80014ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80014ee:	4b09      	ldr	r3, [pc, #36]	; (8001514 <HAL_RCC_ClockConfig+0x1d0>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff f8da 	bl	80006ac <HAL_InitTick>

  return HAL_OK;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40022000 	.word	0x40022000
 8001508:	40021000 	.word	0x40021000
 800150c:	080051ec 	.word	0x080051ec
 8001510:	20000000 	.word	0x20000000
 8001514:	20000004 	.word	0x20000004

08001518 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001518:	b490      	push	{r4, r7}
 800151a:	b08a      	sub	sp, #40	; 0x28
 800151c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800151e:	4b29      	ldr	r3, [pc, #164]	; (80015c4 <HAL_RCC_GetSysClockFreq+0xac>)
 8001520:	1d3c      	adds	r4, r7, #4
 8001522:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001524:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001528:	f240 2301 	movw	r3, #513	; 0x201
 800152c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
 8001532:	2300      	movs	r3, #0
 8001534:	61bb      	str	r3, [r7, #24]
 8001536:	2300      	movs	r3, #0
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800153e:	2300      	movs	r3, #0
 8001540:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001542:	4b21      	ldr	r3, [pc, #132]	; (80015c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	f003 030c 	and.w	r3, r3, #12
 800154e:	2b04      	cmp	r3, #4
 8001550:	d002      	beq.n	8001558 <HAL_RCC_GetSysClockFreq+0x40>
 8001552:	2b08      	cmp	r3, #8
 8001554:	d003      	beq.n	800155e <HAL_RCC_GetSysClockFreq+0x46>
 8001556:	e02b      	b.n	80015b0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001558:	4b1c      	ldr	r3, [pc, #112]	; (80015cc <HAL_RCC_GetSysClockFreq+0xb4>)
 800155a:	623b      	str	r3, [r7, #32]
      break;
 800155c:	e02b      	b.n	80015b6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	0c9b      	lsrs	r3, r3, #18
 8001562:	f003 030f 	and.w	r3, r3, #15
 8001566:	3328      	adds	r3, #40	; 0x28
 8001568:	443b      	add	r3, r7
 800156a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800156e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d012      	beq.n	80015a0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800157a:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	0c5b      	lsrs	r3, r3, #17
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	3328      	adds	r3, #40	; 0x28
 8001586:	443b      	add	r3, r7
 8001588:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800158c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	4a0e      	ldr	r2, [pc, #56]	; (80015cc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001592:	fb03 f202 	mul.w	r2, r3, r2
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	fbb2 f3f3 	udiv	r3, r2, r3
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
 800159e:	e004      	b.n	80015aa <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	4a0b      	ldr	r2, [pc, #44]	; (80015d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015a4:	fb02 f303 	mul.w	r3, r2, r3
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	623b      	str	r3, [r7, #32]
      break;
 80015ae:	e002      	b.n	80015b6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_RCC_GetSysClockFreq+0xb4>)
 80015b2:	623b      	str	r3, [r7, #32]
      break;
 80015b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015b6:	6a3b      	ldr	r3, [r7, #32]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3728      	adds	r7, #40	; 0x28
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc90      	pop	{r4, r7}
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	080051d4 	.word	0x080051d4
 80015c8:	40021000 	.word	0x40021000
 80015cc:	007a1200 	.word	0x007a1200
 80015d0:	003d0900 	.word	0x003d0900

080015d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015d8:	4b02      	ldr	r3, [pc, #8]	; (80015e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80015da:	681b      	ldr	r3, [r3, #0]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr
 80015e4:	20000000 	.word	0x20000000

080015e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015ec:	f7ff fff2 	bl	80015d4 <HAL_RCC_GetHCLKFreq>
 80015f0:	4602      	mov	r2, r0
 80015f2:	4b05      	ldr	r3, [pc, #20]	; (8001608 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	0a1b      	lsrs	r3, r3, #8
 80015f8:	f003 0307 	and.w	r3, r3, #7
 80015fc:	4903      	ldr	r1, [pc, #12]	; (800160c <HAL_RCC_GetPCLK1Freq+0x24>)
 80015fe:	5ccb      	ldrb	r3, [r1, r3]
 8001600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001604:	4618      	mov	r0, r3
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40021000 	.word	0x40021000
 800160c:	080051fc 	.word	0x080051fc

08001610 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001614:	f7ff ffde 	bl	80015d4 <HAL_RCC_GetHCLKFreq>
 8001618:	4602      	mov	r2, r0
 800161a:	4b05      	ldr	r3, [pc, #20]	; (8001630 <HAL_RCC_GetPCLK2Freq+0x20>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	0adb      	lsrs	r3, r3, #11
 8001620:	f003 0307 	and.w	r3, r3, #7
 8001624:	4903      	ldr	r1, [pc, #12]	; (8001634 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001626:	5ccb      	ldrb	r3, [r1, r3]
 8001628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800162c:	4618      	mov	r0, r3
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40021000 	.word	0x40021000
 8001634:	080051fc 	.word	0x080051fc

08001638 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	220f      	movs	r2, #15
 8001646:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <HAL_RCC_GetClockConfig+0x58>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f003 0203 	and.w	r2, r3, #3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001654:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <HAL_RCC_GetClockConfig+0x58>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001660:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <HAL_RCC_GetClockConfig+0x58>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800166c:	4b08      	ldr	r3, [pc, #32]	; (8001690 <HAL_RCC_GetClockConfig+0x58>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	08db      	lsrs	r3, r3, #3
 8001672:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <HAL_RCC_GetClockConfig+0x5c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0207 	and.w	r2, r3, #7
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr
 8001690:	40021000 	.word	0x40021000
 8001694:	40022000 	.word	0x40022000

08001698 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016a0:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <RCC_Delay+0x34>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <RCC_Delay+0x38>)
 80016a6:	fba2 2303 	umull	r2, r3, r2, r3
 80016aa:	0a5b      	lsrs	r3, r3, #9
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	fb02 f303 	mul.w	r3, r2, r3
 80016b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016b4:	bf00      	nop
  }
  while (Delay --);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	1e5a      	subs	r2, r3, #1
 80016ba:	60fa      	str	r2, [r7, #12]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1f9      	bne.n	80016b4 <RCC_Delay+0x1c>
}
 80016c0:	bf00      	nop
 80016c2:	bf00      	nop
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr
 80016cc:	20000000 	.word	0x20000000
 80016d0:	10624dd3 	.word	0x10624dd3

080016d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d101      	bne.n	80016e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e041      	b.n	800176a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d106      	bne.n	8001700 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 f839 	bl	8001772 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2202      	movs	r2, #2
 8001704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3304      	adds	r3, #4
 8001710:	4619      	mov	r1, r3
 8001712:	4610      	mov	r0, r2
 8001714:	f000 f9c2 	bl	8001a9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2201      	movs	r2, #1
 800171c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2201      	movs	r2, #1
 8001724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2201      	movs	r2, #1
 8001734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2201      	movs	r2, #1
 800173c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2201      	movs	r2, #1
 8001744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2201      	movs	r2, #1
 8001754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2201      	movs	r2, #1
 800175c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr

08001784 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001792:	b2db      	uxtb	r3, r3
 8001794:	2b01      	cmp	r3, #1
 8001796:	d001      	beq.n	800179c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e044      	b.n	8001826 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2202      	movs	r2, #2
 80017a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	68da      	ldr	r2, [r3, #12]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f042 0201 	orr.w	r2, r2, #1
 80017b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a1d      	ldr	r2, [pc, #116]	; (8001830 <HAL_TIM_Base_Start_IT+0xac>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d018      	beq.n	80017f0 <HAL_TIM_Base_Start_IT+0x6c>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a1c      	ldr	r2, [pc, #112]	; (8001834 <HAL_TIM_Base_Start_IT+0xb0>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d013      	beq.n	80017f0 <HAL_TIM_Base_Start_IT+0x6c>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017d0:	d00e      	beq.n	80017f0 <HAL_TIM_Base_Start_IT+0x6c>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a18      	ldr	r2, [pc, #96]	; (8001838 <HAL_TIM_Base_Start_IT+0xb4>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d009      	beq.n	80017f0 <HAL_TIM_Base_Start_IT+0x6c>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a16      	ldr	r2, [pc, #88]	; (800183c <HAL_TIM_Base_Start_IT+0xb8>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d004      	beq.n	80017f0 <HAL_TIM_Base_Start_IT+0x6c>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a15      	ldr	r2, [pc, #84]	; (8001840 <HAL_TIM_Base_Start_IT+0xbc>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d111      	bne.n	8001814 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2b06      	cmp	r3, #6
 8001800:	d010      	beq.n	8001824 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f042 0201 	orr.w	r2, r2, #1
 8001810:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001812:	e007      	b.n	8001824 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f042 0201 	orr.w	r2, r2, #1
 8001822:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3714      	adds	r7, #20
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr
 8001830:	40012c00 	.word	0x40012c00
 8001834:	40013400 	.word	0x40013400
 8001838:	40000400 	.word	0x40000400
 800183c:	40000800 	.word	0x40000800
 8001840:	40000c00 	.word	0x40000c00

08001844 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b02      	cmp	r3, #2
 8001858:	d122      	bne.n	80018a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b02      	cmp	r3, #2
 8001866:	d11b      	bne.n	80018a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f06f 0202 	mvn.w	r2, #2
 8001870:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2201      	movs	r2, #1
 8001876:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	f003 0303 	and.w	r3, r3, #3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f000 f8ed 	bl	8001a66 <HAL_TIM_IC_CaptureCallback>
 800188c:	e005      	b.n	800189a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 f8e0 	bl	8001a54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f000 f8ef 	bl	8001a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	f003 0304 	and.w	r3, r3, #4
 80018aa:	2b04      	cmp	r3, #4
 80018ac:	d122      	bne.n	80018f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	2b04      	cmp	r3, #4
 80018ba:	d11b      	bne.n	80018f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f06f 0204 	mvn.w	r2, #4
 80018c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2202      	movs	r2, #2
 80018ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 f8c3 	bl	8001a66 <HAL_TIM_IC_CaptureCallback>
 80018e0:	e005      	b.n	80018ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 f8b6 	bl	8001a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f000 f8c5 	bl	8001a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	f003 0308 	and.w	r3, r3, #8
 80018fe:	2b08      	cmp	r3, #8
 8001900:	d122      	bne.n	8001948 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	f003 0308 	and.w	r3, r3, #8
 800190c:	2b08      	cmp	r3, #8
 800190e:	d11b      	bne.n	8001948 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f06f 0208 	mvn.w	r2, #8
 8001918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2204      	movs	r2, #4
 800191e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	f003 0303 	and.w	r3, r3, #3
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 f899 	bl	8001a66 <HAL_TIM_IC_CaptureCallback>
 8001934:	e005      	b.n	8001942 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f000 f88c 	bl	8001a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f000 f89b 	bl	8001a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	f003 0310 	and.w	r3, r3, #16
 8001952:	2b10      	cmp	r3, #16
 8001954:	d122      	bne.n	800199c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	f003 0310 	and.w	r3, r3, #16
 8001960:	2b10      	cmp	r3, #16
 8001962:	d11b      	bne.n	800199c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f06f 0210 	mvn.w	r2, #16
 800196c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2208      	movs	r2, #8
 8001972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f000 f86f 	bl	8001a66 <HAL_TIM_IC_CaptureCallback>
 8001988:	e005      	b.n	8001996 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f000 f862 	bl	8001a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f000 f871 	bl	8001a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d10e      	bne.n	80019c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d107      	bne.n	80019c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f06f 0201 	mvn.w	r2, #1
 80019c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7fe fdd6 	bl	8000574 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d2:	2b80      	cmp	r3, #128	; 0x80
 80019d4:	d10e      	bne.n	80019f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019e0:	2b80      	cmp	r3, #128	; 0x80
 80019e2:	d107      	bne.n	80019f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80019ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f000 f8d7 	bl	8001ba2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019fe:	2b40      	cmp	r3, #64	; 0x40
 8001a00:	d10e      	bne.n	8001a20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a0c:	2b40      	cmp	r3, #64	; 0x40
 8001a0e:	d107      	bne.n	8001a20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 f835 	bl	8001a8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	f003 0320 	and.w	r3, r3, #32
 8001a2a:	2b20      	cmp	r3, #32
 8001a2c:	d10e      	bne.n	8001a4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	f003 0320 	and.w	r3, r3, #32
 8001a38:	2b20      	cmp	r3, #32
 8001a3a:	d107      	bne.n	8001a4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f06f 0220 	mvn.w	r2, #32
 8001a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 f8a2 	bl	8001b90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a4c:	bf00      	nop
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr

08001a66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr

08001a78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr

08001a8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b083      	sub	sp, #12
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr

08001a9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4a33      	ldr	r2, [pc, #204]	; (8001b7c <TIM_Base_SetConfig+0xe0>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d013      	beq.n	8001adc <TIM_Base_SetConfig+0x40>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a32      	ldr	r2, [pc, #200]	; (8001b80 <TIM_Base_SetConfig+0xe4>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d00f      	beq.n	8001adc <TIM_Base_SetConfig+0x40>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ac2:	d00b      	beq.n	8001adc <TIM_Base_SetConfig+0x40>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a2f      	ldr	r2, [pc, #188]	; (8001b84 <TIM_Base_SetConfig+0xe8>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d007      	beq.n	8001adc <TIM_Base_SetConfig+0x40>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a2e      	ldr	r2, [pc, #184]	; (8001b88 <TIM_Base_SetConfig+0xec>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d003      	beq.n	8001adc <TIM_Base_SetConfig+0x40>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a2d      	ldr	r2, [pc, #180]	; (8001b8c <TIM_Base_SetConfig+0xf0>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d108      	bne.n	8001aee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ae2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a22      	ldr	r2, [pc, #136]	; (8001b7c <TIM_Base_SetConfig+0xe0>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d013      	beq.n	8001b1e <TIM_Base_SetConfig+0x82>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a21      	ldr	r2, [pc, #132]	; (8001b80 <TIM_Base_SetConfig+0xe4>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d00f      	beq.n	8001b1e <TIM_Base_SetConfig+0x82>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b04:	d00b      	beq.n	8001b1e <TIM_Base_SetConfig+0x82>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a1e      	ldr	r2, [pc, #120]	; (8001b84 <TIM_Base_SetConfig+0xe8>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d007      	beq.n	8001b1e <TIM_Base_SetConfig+0x82>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a1d      	ldr	r2, [pc, #116]	; (8001b88 <TIM_Base_SetConfig+0xec>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d003      	beq.n	8001b1e <TIM_Base_SetConfig+0x82>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a1c      	ldr	r2, [pc, #112]	; (8001b8c <TIM_Base_SetConfig+0xf0>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d108      	bne.n	8001b30 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a09      	ldr	r2, [pc, #36]	; (8001b7c <TIM_Base_SetConfig+0xe0>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d003      	beq.n	8001b64 <TIM_Base_SetConfig+0xc8>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a08      	ldr	r2, [pc, #32]	; (8001b80 <TIM_Base_SetConfig+0xe4>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d103      	bne.n	8001b6c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	691a      	ldr	r2, [r3, #16]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	615a      	str	r2, [r3, #20]
}
 8001b72:	bf00      	nop
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr
 8001b7c:	40012c00 	.word	0x40012c00
 8001b80:	40013400 	.word	0x40013400
 8001b84:	40000400 	.word	0x40000400
 8001b88:	40000800 	.word	0x40000800
 8001b8c:	40000c00 	.word	0x40000c00

08001b90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr

08001ba2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr

08001bb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e03f      	b.n	8001c46 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d106      	bne.n	8001be0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7fe fd1a 	bl	8000614 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2224      	movs	r2, #36	; 0x24
 8001be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68da      	ldr	r2, [r3, #12]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bf6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 f905 	bl	8001e08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	691a      	ldr	r2, [r3, #16]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	695a      	ldr	r2, [r3, #20]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68da      	ldr	r2, [r3, #12]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2220      	movs	r2, #32
 8001c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2220      	movs	r2, #32
 8001c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b08a      	sub	sp, #40	; 0x28
 8001c52:	af02      	add	r7, sp, #8
 8001c54:	60f8      	str	r0, [r7, #12]
 8001c56:	60b9      	str	r1, [r7, #8]
 8001c58:	603b      	str	r3, [r7, #0]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b20      	cmp	r3, #32
 8001c6c:	d17c      	bne.n	8001d68 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d002      	beq.n	8001c7a <HAL_UART_Transmit+0x2c>
 8001c74:	88fb      	ldrh	r3, [r7, #6]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e075      	b.n	8001d6a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d101      	bne.n	8001c8c <HAL_UART_Transmit+0x3e>
 8001c88:	2302      	movs	r3, #2
 8001c8a:	e06e      	b.n	8001d6a <HAL_UART_Transmit+0x11c>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2200      	movs	r2, #0
 8001c98:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2221      	movs	r2, #33	; 0x21
 8001c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ca2:	f7fe fe2b 	bl	80008fc <HAL_GetTick>
 8001ca6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	88fa      	ldrh	r2, [r7, #6]
 8001cac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	88fa      	ldrh	r2, [r7, #6]
 8001cb2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cbc:	d108      	bne.n	8001cd0 <HAL_UART_Transmit+0x82>
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d104      	bne.n	8001cd0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	61bb      	str	r3, [r7, #24]
 8001cce:	e003      	b.n	8001cd8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001ce0:	e02a      	b.n	8001d38 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	2180      	movs	r1, #128	; 0x80
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f000 f840 	bl	8001d72 <UART_WaitOnFlagUntilTimeout>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e036      	b.n	8001d6a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10b      	bne.n	8001d1a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	881b      	ldrh	r3, [r3, #0]
 8001d06:	461a      	mov	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	3302      	adds	r3, #2
 8001d16:	61bb      	str	r3, [r7, #24]
 8001d18:	e007      	b.n	8001d2a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	781a      	ldrb	r2, [r3, #0]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	3301      	adds	r3, #1
 8001d28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	3b01      	subs	r3, #1
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1cf      	bne.n	8001ce2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2140      	movs	r1, #64	; 0x40
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f000 f810 	bl	8001d72 <UART_WaitOnFlagUntilTimeout>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e006      	b.n	8001d6a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2220      	movs	r2, #32
 8001d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001d64:	2300      	movs	r3, #0
 8001d66:	e000      	b.n	8001d6a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001d68:	2302      	movs	r3, #2
  }
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3720      	adds	r7, #32
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b084      	sub	sp, #16
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	60f8      	str	r0, [r7, #12]
 8001d7a:	60b9      	str	r1, [r7, #8]
 8001d7c:	603b      	str	r3, [r7, #0]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d82:	e02c      	b.n	8001dde <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d8a:	d028      	beq.n	8001dde <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d007      	beq.n	8001da2 <UART_WaitOnFlagUntilTimeout+0x30>
 8001d92:	f7fe fdb3 	bl	80008fc <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d21d      	bcs.n	8001dde <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68da      	ldr	r2, [r3, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001db0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	695a      	ldr	r2, [r3, #20]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 0201 	bic.w	r2, r2, #1
 8001dc0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2220      	movs	r2, #32
 8001dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2220      	movs	r2, #32
 8001dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e00f      	b.n	8001dfe <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	4013      	ands	r3, r2
 8001de8:	68ba      	ldr	r2, [r7, #8]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	bf0c      	ite	eq
 8001dee:	2301      	moveq	r3, #1
 8001df0:	2300      	movne	r3, #0
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	461a      	mov	r2, r3
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d0c3      	beq.n	8001d84 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
	...

08001e08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68da      	ldr	r2, [r3, #12]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	689a      	ldr	r2, [r3, #8]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	431a      	orrs	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	695b      	ldr	r3, [r3, #20]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001e42:	f023 030c 	bic.w	r3, r3, #12
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6812      	ldr	r2, [r2, #0]
 8001e4a:	68b9      	ldr	r1, [r7, #8]
 8001e4c:	430b      	orrs	r3, r1
 8001e4e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	699a      	ldr	r2, [r3, #24]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a2c      	ldr	r2, [pc, #176]	; (8001f1c <UART_SetConfig+0x114>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d103      	bne.n	8001e78 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001e70:	f7ff fbce 	bl	8001610 <HAL_RCC_GetPCLK2Freq>
 8001e74:	60f8      	str	r0, [r7, #12]
 8001e76:	e002      	b.n	8001e7e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001e78:	f7ff fbb6 	bl	80015e8 <HAL_RCC_GetPCLK1Freq>
 8001e7c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	4613      	mov	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	4413      	add	r3, r2
 8001e86:	009a      	lsls	r2, r3, #2
 8001e88:	441a      	add	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e94:	4a22      	ldr	r2, [pc, #136]	; (8001f20 <UART_SetConfig+0x118>)
 8001e96:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9a:	095b      	lsrs	r3, r3, #5
 8001e9c:	0119      	lsls	r1, r3, #4
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	009a      	lsls	r2, r3, #2
 8001ea8:	441a      	add	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <UART_SetConfig+0x118>)
 8001eb6:	fba3 0302 	umull	r0, r3, r3, r2
 8001eba:	095b      	lsrs	r3, r3, #5
 8001ebc:	2064      	movs	r0, #100	; 0x64
 8001ebe:	fb00 f303 	mul.w	r3, r0, r3
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	011b      	lsls	r3, r3, #4
 8001ec6:	3332      	adds	r3, #50	; 0x32
 8001ec8:	4a15      	ldr	r2, [pc, #84]	; (8001f20 <UART_SetConfig+0x118>)
 8001eca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ece:	095b      	lsrs	r3, r3, #5
 8001ed0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ed4:	4419      	add	r1, r3
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	4413      	add	r3, r2
 8001ede:	009a      	lsls	r2, r3, #2
 8001ee0:	441a      	add	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001eec:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <UART_SetConfig+0x118>)
 8001eee:	fba3 0302 	umull	r0, r3, r3, r2
 8001ef2:	095b      	lsrs	r3, r3, #5
 8001ef4:	2064      	movs	r0, #100	; 0x64
 8001ef6:	fb00 f303 	mul.w	r3, r0, r3
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	011b      	lsls	r3, r3, #4
 8001efe:	3332      	adds	r3, #50	; 0x32
 8001f00:	4a07      	ldr	r2, [pc, #28]	; (8001f20 <UART_SetConfig+0x118>)
 8001f02:	fba2 2303 	umull	r2, r3, r2, r3
 8001f06:	095b      	lsrs	r3, r3, #5
 8001f08:	f003 020f 	and.w	r2, r3, #15
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	440a      	add	r2, r1
 8001f12:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001f14:	bf00      	nop
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40013800 	.word	0x40013800
 8001f20:	51eb851f 	.word	0x51eb851f

08001f24 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001f32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f36:	2b84      	cmp	r3, #132	; 0x84
 8001f38:	d005      	beq.n	8001f46 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001f3a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	4413      	add	r3, r2
 8001f42:	3303      	adds	r3, #3
 8001f44:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001f46:	68fb      	ldr	r3, [r7, #12]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr

08001f52 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f58:	f3ef 8305 	mrs	r3, IPSR
 8001f5c:	607b      	str	r3, [r7, #4]
  return(result);
 8001f5e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	bf14      	ite	ne
 8001f64:	2301      	movne	r3, #1
 8001f66:	2300      	moveq	r3, #0
 8001f68:	b2db      	uxtb	r3, r3
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr

08001f74 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001f78:	f001 fae6 	bl	8003548 <vTaskStartScheduler>
  
  return osOK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001f82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f84:	b089      	sub	sp, #36	; 0x24
 8001f86:	af04      	add	r7, sp, #16
 8001f88:	6078      	str	r0, [r7, #4]
 8001f8a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	695b      	ldr	r3, [r3, #20]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d020      	beq.n	8001fd6 <osThreadCreate+0x54>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d01c      	beq.n	8001fd6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685c      	ldr	r4, [r3, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	691e      	ldr	r6, [r3, #16]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff ffb8 	bl	8001f24 <makeFreeRtosPriority>
 8001fb4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001fbe:	9202      	str	r2, [sp, #8]
 8001fc0:	9301      	str	r3, [sp, #4]
 8001fc2:	9100      	str	r1, [sp, #0]
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	4632      	mov	r2, r6
 8001fc8:	4629      	mov	r1, r5
 8001fca:	4620      	mov	r0, r4
 8001fcc:	f001 f91a 	bl	8003204 <xTaskCreateStatic>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	e01c      	b.n	8002010 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685c      	ldr	r4, [r3, #4]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001fe2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff ff9a 	bl	8001f24 <makeFreeRtosPriority>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	f107 030c 	add.w	r3, r7, #12
 8001ff6:	9301      	str	r3, [sp, #4]
 8001ff8:	9200      	str	r2, [sp, #0]
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	4632      	mov	r2, r6
 8001ffe:	4629      	mov	r1, r5
 8002000:	4620      	mov	r0, r4
 8002002:	f001 f95b 	bl	80032bc <xTaskCreate>
 8002006:	4603      	mov	r3, r0
 8002008:	2b01      	cmp	r3, #1
 800200a:	d001      	beq.n	8002010 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800200c:	2300      	movs	r3, #0
 800200e:	e000      	b.n	8002012 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002010:	68fb      	ldr	r3, [r7, #12]
}
 8002012:	4618      	mov	r0, r3
 8002014:	3714      	adds	r7, #20
 8002016:	46bd      	mov	sp, r7
 8002018:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800201a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800201a:	b580      	push	{r7, lr}
 800201c:	b086      	sub	sp, #24
 800201e:	af02      	add	r7, sp, #8
 8002020:	6078      	str	r0, [r7, #4]
 8002022:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d016      	beq.n	800205a <osSemaphoreCreate+0x40>
    if (count == 1) {
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d10a      	bne.n	8002048 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	2203      	movs	r2, #3
 8002038:	9200      	str	r2, [sp, #0]
 800203a:	2200      	movs	r2, #0
 800203c:	2100      	movs	r1, #0
 800203e:	2001      	movs	r0, #1
 8002040:	f000 fb9c 	bl	800277c <xQueueGenericCreateStatic>
 8002044:	4603      	mov	r3, r0
 8002046:	e023      	b.n	8002090 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 8002048:	6838      	ldr	r0, [r7, #0]
 800204a:	6839      	ldr	r1, [r7, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	461a      	mov	r2, r3
 8002052:	f000 fc67 	bl	8002924 <xQueueCreateCountingSemaphoreStatic>
 8002056:	4603      	mov	r3, r0
 8002058:	e01a      	b.n	8002090 <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d110      	bne.n	8002082 <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 8002060:	2203      	movs	r2, #3
 8002062:	2100      	movs	r1, #0
 8002064:	2001      	movs	r0, #1
 8002066:	f000 fc00 	bl	800286a <xQueueGenericCreate>
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d005      	beq.n	800207e <osSemaphoreCreate+0x64>
 8002072:	2300      	movs	r3, #0
 8002074:	2200      	movs	r2, #0
 8002076:	2100      	movs	r1, #0
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	f000 fcbd 	bl	80029f8 <xQueueGenericSend>
      return sema;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	e006      	b.n	8002090 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	4611      	mov	r1, r2
 8002088:	4618      	mov	r0, r3
 800208a:	f000 fc82 	bl	8002992 <xQueueCreateCountingSemaphore>
 800208e:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8002090:	4618      	mov	r0, r3
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	3303      	adds	r3, #3
 80020a6:	f023 0303 	bic.w	r3, r3, #3
 80020aa:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 80020ac:	2014      	movs	r0, #20
 80020ae:	f002 f965 	bl	800437c <pvPortMalloc>
 80020b2:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d046      	beq.n	8002148 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	2200      	movs	r2, #0
 80020cc:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f002 f952 	bl	800437c <pvPortMalloc>
 80020d8:	4602      	mov	r2, r0
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d02b      	beq.n	800213e <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	fb02 f303 	mul.w	r3, r2, r3
 80020f0:	4618      	mov	r0, r3
 80020f2:	f002 f943 	bl	800437c <pvPortMalloc>
 80020f6:	4602      	mov	r2, r0
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d011      	beq.n	8002128 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8002104:	2300      	movs	r3, #0
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	e008      	b.n	800211c <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	4413      	add	r3, r2
 8002112:	2200      	movs	r2, #0
 8002114:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	3301      	adds	r3, #1
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	429a      	cmp	r2, r3
 8002124:	d3f1      	bcc.n	800210a <osPoolCreate+0x72>
 8002126:	e00f      	b.n	8002148 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	4618      	mov	r0, r3
 800212e:	f002 f9e9 	bl	8004504 <vPortFree>
        vPortFree(thePool);
 8002132:	6978      	ldr	r0, [r7, #20]
 8002134:	f002 f9e6 	bl	8004504 <vPortFree>
        thePool = NULL;
 8002138:	2300      	movs	r3, #0
 800213a:	617b      	str	r3, [r7, #20]
 800213c:	e004      	b.n	8002148 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 800213e:	6978      	ldr	r0, [r7, #20]
 8002140:	f002 f9e0 	bl	8004504 <vPortFree>
      thePool = NULL;
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8002148:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 800214a:	4618      	mov	r0, r3
 800214c:	3718      	adds	r7, #24
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b08a      	sub	sp, #40	; 0x28
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 800215a:	2300      	movs	r3, #0
 800215c:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 800215e:	2300      	movs	r3, #0
 8002160:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8002162:	f7ff fef6 	bl	8001f52 <inHandlerMode>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00e      	beq.n	800218a <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800216c:	f3ef 8211 	mrs	r2, BASEPRI
 8002170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002174:	f383 8811 	msr	BASEPRI, r3
 8002178:	f3bf 8f6f 	isb	sy
 800217c:	f3bf 8f4f 	dsb	sy
 8002180:	617a      	str	r2, [r7, #20]
 8002182:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002184:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8002186:	627b      	str	r3, [r7, #36]	; 0x24
 8002188:	e001      	b.n	800218e <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 800218a:	f001 fff7 	bl	800417c <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 800218e:	2300      	movs	r3, #0
 8002190:	61fb      	str	r3, [r7, #28]
 8002192:	e029      	b.n	80021e8 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	691a      	ldr	r2, [r3, #16]
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	4413      	add	r3, r2
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	6892      	ldr	r2, [r2, #8]
 80021a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80021a4:	fb01 f202 	mul.w	r2, r1, r2
 80021a8:	1a9b      	subs	r3, r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685a      	ldr	r2, [r3, #4]
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	4413      	add	r3, r2
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d113      	bne.n	80021e2 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	4413      	add	r3, r2
 80021c2:	2201      	movs	r2, #1
 80021c4:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4619      	mov	r1, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	fb02 f303 	mul.w	r3, r2, r3
 80021d6:	440b      	add	r3, r1
 80021d8:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	611a      	str	r2, [r3, #16]
      break;
 80021e0:	e007      	b.n	80021f2 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	3301      	adds	r3, #1
 80021e6:	61fb      	str	r3, [r7, #28]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	69fa      	ldr	r2, [r7, #28]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d3d0      	bcc.n	8002194 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 80021f2:	f7ff feae 	bl	8001f52 <inHandlerMode>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d005      	beq.n	8002208 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 80021fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fe:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002206:	e001      	b.n	800220c <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8002208:	f001 ffe8 	bl	80041dc <vPortExitCritical>
  }
  
  return p;
 800220c:	6a3b      	ldr	r3, [r7, #32]
}
 800220e:	4618      	mov	r0, r3
 8002210:	3728      	adds	r7, #40	; 0x28
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8002216:	b480      	push	{r7}
 8002218:	b085      	sub	sp, #20
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
 800221e:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <osPoolFree+0x14>
    return osErrorParameter;
 8002226:	2380      	movs	r3, #128	; 0x80
 8002228:	e030      	b.n	800228c <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <osPoolFree+0x1e>
    return osErrorParameter;
 8002230:	2380      	movs	r3, #128	; 0x80
 8002232:	e02b      	b.n	800228c <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	429a      	cmp	r2, r3
 800223c:	d201      	bcs.n	8002242 <osPoolFree+0x2c>
    return osErrorParameter;
 800223e:	2380      	movs	r3, #128	; 0x80
 8002240:	e024      	b.n	800228c <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6812      	ldr	r2, [r2, #0]
 8002248:	1a9b      	subs	r3, r3, r2
 800224a:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68da      	ldr	r2, [r3, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	fbb3 f1f2 	udiv	r1, r3, r2
 8002256:	fb01 f202 	mul.w	r2, r1, r2
 800225a:	1a9b      	subs	r3, r3, r2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <osPoolFree+0x4e>
    return osErrorParameter;
 8002260:	2380      	movs	r3, #128	; 0x80
 8002262:	e013      	b.n	800228c <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	fbb2 f3f3 	udiv	r3, r2, r3
 800226e:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	429a      	cmp	r2, r3
 8002278:	d301      	bcc.n	800227e <osPoolFree+0x68>
    return osErrorParameter;
 800227a:	2380      	movs	r3, #128	; 0x80
 800227c:	e006      	b.n	800228c <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	4413      	add	r3, r2
 8002286:	2200      	movs	r2, #0
 8002288:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr

08002296 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8002296:	b590      	push	{r4, r7, lr}
 8002298:	b085      	sub	sp, #20
 800229a:	af02      	add	r7, sp, #8
 800229c:	6078      	str	r0, [r7, #4]
 800229e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d011      	beq.n	80022cc <osMessageCreate+0x36>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00d      	beq.n	80022cc <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6818      	ldr	r0, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6859      	ldr	r1, [r3, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	2400      	movs	r4, #0
 80022c2:	9400      	str	r4, [sp, #0]
 80022c4:	f000 fa5a 	bl	800277c <xQueueGenericCreateStatic>
 80022c8:	4603      	mov	r3, r0
 80022ca:	e008      	b.n	80022de <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6818      	ldr	r0, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	4619      	mov	r1, r3
 80022d8:	f000 fac7 	bl	800286a <xQueueGenericCreate>
 80022dc:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80022de:	4618      	mov	r0, r3
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd90      	pop	{r4, r7, pc}

080022e6 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 80022e6:	b590      	push	{r4, r7, lr}
 80022e8:	b087      	sub	sp, #28
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
 80022ee:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	613b      	str	r3, [r7, #16]
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689c      	ldr	r4, [r3, #8]
 8002304:	200c      	movs	r0, #12
 8002306:	f002 f839 	bl	800437c <pvPortMalloc>
 800230a:	4603      	mov	r3, r0
 800230c:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <osMailCreate+0x36>
    return NULL;
 8002318:	2300      	movs	r3, #0
 800231a:	e038      	b.n	800238e <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6818      	ldr	r0, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	681c      	ldr	r4, [r3, #0]
 8002330:	2200      	movs	r2, #0
 8002332:	2104      	movs	r1, #4
 8002334:	f000 fa99 	bl	800286a <xQueueGenericCreate>
 8002338:	4603      	mov	r3, r0
 800233a:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d107      	bne.n	8002358 <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f002 f8d8 	bl	8004504 <vPortFree>
    return NULL;
 8002354:	2300      	movs	r3, #0
 8002356:	e01a      	b.n	800238e <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	681c      	ldr	r4, [r3, #0]
 800235e:	f107 030c 	add.w	r3, r7, #12
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff fe98 	bl	8002098 <osPoolCreate>
 8002368:	4603      	mov	r3, r0
 800236a:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d107      	bne.n	8002388 <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f002 f8c0 	bl	8004504 <vPortFree>
    return NULL;
 8002384:	2300      	movs	r3, #0
 8002386:	e002      	b.n	800238e <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 800238e:	4618      	mov	r0, r3
 8002390:	371c      	adds	r7, #28
 8002392:	46bd      	mov	sp, r7
 8002394:	bd90      	pop	{r4, r7, pc}

08002396 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b084      	sub	sp, #16
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
 800239e:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <osMailAlloc+0x14>
    return NULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	e006      	b.n	80023b8 <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff fecf 	bl	8002152 <osPoolAlloc>
 80023b4:	60f8      	str	r0, [r7, #12]
  
  return p;
 80023b6:	68fb      	ldr	r3, [r7, #12]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <osMailPut+0x14>
    return osErrorParameter;
 80023d0:	2380      	movs	r3, #128	; 0x80
 80023d2:	e02c      	b.n	800242e <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 80023d4:	2300      	movs	r3, #0
 80023d6:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 80023d8:	f7ff fdbb 	bl	8001f52 <inHandlerMode>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d018      	beq.n	8002414 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6858      	ldr	r0, [r3, #4]
 80023e6:	f107 020c 	add.w	r2, r7, #12
 80023ea:	4639      	mov	r1, r7
 80023ec:	2300      	movs	r3, #0
 80023ee:	f000 fc01 	bl	8002bf4 <xQueueGenericSendFromISR>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d001      	beq.n	80023fc <osMailPut+0x3c>
      return osErrorOS;
 80023f8:	23ff      	movs	r3, #255	; 0xff
 80023fa:	e018      	b.n	800242e <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d014      	beq.n	800242c <osMailPut+0x6c>
 8002402:	4b0d      	ldr	r3, [pc, #52]	; (8002438 <osMailPut+0x78>)
 8002404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	f3bf 8f4f 	dsb	sy
 800240e:	f3bf 8f6f 	isb	sy
 8002412:	e00b      	b.n	800242c <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6858      	ldr	r0, [r3, #4]
 8002418:	4639      	mov	r1, r7
 800241a:	2300      	movs	r3, #0
 800241c:	2200      	movs	r2, #0
 800241e:	f000 faeb 	bl	80029f8 <xQueueGenericSend>
 8002422:	4603      	mov	r3, r0
 8002424:	2b01      	cmp	r3, #1
 8002426:	d001      	beq.n	800242c <osMailPut+0x6c>
      return osErrorOS;
 8002428:	23ff      	movs	r3, #255	; 0xff
 800242a:	e000      	b.n	800242e <osMailPut+0x6e>
    }
  }
  
  return osOK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	e000ed04 	.word	0xe000ed04

0800243c <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 800243c:	b590      	push	{r4, r7, lr}
 800243e:	b08b      	sub	sp, #44	; 0x2c
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10a      	bne.n	8002468 <osMailGet+0x2c>
    event.status = osErrorParameter;
 8002452:	2380      	movs	r3, #128	; 0x80
 8002454:	617b      	str	r3, [r7, #20]
    return event;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	461c      	mov	r4, r3
 800245a:	f107 0314 	add.w	r3, r7, #20
 800245e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002462:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002466:	e056      	b.n	8002516 <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8002468:	2300      	movs	r3, #0
 800246a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800246c:	2300      	movs	r3, #0
 800246e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002476:	d103      	bne.n	8002480 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8002478:	f04f 33ff 	mov.w	r3, #4294967295
 800247c:	627b      	str	r3, [r7, #36]	; 0x24
 800247e:	e009      	b.n	8002494 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d006      	beq.n	8002494 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	2b00      	cmp	r3, #0
 800248e:	d101      	bne.n	8002494 <osMailGet+0x58>
      ticks = 1;
 8002490:	2301      	movs	r3, #1
 8002492:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8002494:	f7ff fd5d 	bl	8001f52 <inHandlerMode>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d01d      	beq.n	80024da <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	6858      	ldr	r0, [r3, #4]
 80024a2:	f107 0220 	add.w	r2, r7, #32
 80024a6:	f107 0314 	add.w	r3, r7, #20
 80024aa:	3304      	adds	r3, #4
 80024ac:	4619      	mov	r1, r3
 80024ae:	f000 fd19 	bl	8002ee4 <xQueueReceiveFromISR>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d102      	bne.n	80024be <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 80024b8:	2320      	movs	r3, #32
 80024ba:	617b      	str	r3, [r7, #20]
 80024bc:	e001      	b.n	80024c2 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80024c2:	6a3b      	ldr	r3, [r7, #32]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d01e      	beq.n	8002506 <osMailGet+0xca>
 80024c8:	4b15      	ldr	r3, [pc, #84]	; (8002520 <osMailGet+0xe4>)
 80024ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	f3bf 8f4f 	dsb	sy
 80024d4:	f3bf 8f6f 	isb	sy
 80024d8:	e015      	b.n	8002506 <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	6858      	ldr	r0, [r3, #4]
 80024de:	f107 0314 	add.w	r3, r7, #20
 80024e2:	3304      	adds	r3, #4
 80024e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e6:	4619      	mov	r1, r3
 80024e8:	f000 fc1c 	bl	8002d24 <xQueueReceive>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d102      	bne.n	80024f8 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 80024f2:	2320      	movs	r3, #32
 80024f4:	617b      	str	r3, [r7, #20]
 80024f6:	e006      	b.n	8002506 <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <osMailGet+0xc6>
 80024fe:	2300      	movs	r3, #0
 8002500:	e000      	b.n	8002504 <osMailGet+0xc8>
 8002502:	2340      	movs	r3, #64	; 0x40
 8002504:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	461c      	mov	r4, r3
 800250a:	f107 0314 	add.w	r3, r7, #20
 800250e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002512:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	372c      	adds	r7, #44	; 0x2c
 800251a:	46bd      	mov	sp, r7
 800251c:	bd90      	pop	{r4, r7, pc}
 800251e:	bf00      	nop
 8002520:	e000ed04 	.word	0xe000ed04

08002524 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d101      	bne.n	8002538 <osMailFree+0x14>
    return osErrorParameter;
 8002534:	2380      	movs	r3, #128	; 0x80
 8002536:	e006      	b.n	8002546 <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	6839      	ldr	r1, [r7, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff fe69 	bl	8002216 <osPoolFree>
 8002544:	4603      	mov	r3, r0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800254e:	b480      	push	{r7}
 8002550:	b083      	sub	sp, #12
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f103 0208 	add.w	r2, r3, #8
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f04f 32ff 	mov.w	r2, #4294967295
 8002566:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f103 0208 	add.w	r2, r3, #8
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f103 0208 	add.w	r2, r3, #8
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr

0800258c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr

080025a4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	689a      	ldr	r2, [r3, #8]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	1c5a      	adds	r2, r3, #1
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	601a      	str	r2, [r3, #0]
}
 80025e0:	bf00      	nop
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr

080025ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80025ea:	b480      	push	{r7}
 80025ec:	b085      	sub	sp, #20
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
 80025f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002600:	d103      	bne.n	800260a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	e00c      	b.n	8002624 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	3308      	adds	r3, #8
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	e002      	b.n	8002618 <vListInsert+0x2e>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	429a      	cmp	r2, r3
 8002622:	d2f6      	bcs.n	8002612 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	1c5a      	adds	r2, r3, #1
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	601a      	str	r2, [r3, #0]
}
 8002650:	bf00      	nop
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	bc80      	pop	{r7}
 8002658:	4770      	bx	lr

0800265a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800265a:	b480      	push	{r7}
 800265c:	b085      	sub	sp, #20
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	6892      	ldr	r2, [r2, #8]
 8002670:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	6852      	ldr	r2, [r2, #4]
 800267a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	429a      	cmp	r2, r3
 8002684:	d103      	bne.n	800268e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	1e5a      	subs	r2, r3, #1
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3714      	adds	r7, #20
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr

080026ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10a      	bne.n	80026d6 <xQueueGenericReset+0x2a>
	__asm volatile
 80026c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c4:	f383 8811 	msr	BASEPRI, r3
 80026c8:	f3bf 8f6f 	isb	sy
 80026cc:	f3bf 8f4f 	dsb	sy
 80026d0:	60bb      	str	r3, [r7, #8]
}
 80026d2:	bf00      	nop
 80026d4:	e7fe      	b.n	80026d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80026d6:	f001 fd51 	bl	800417c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e2:	68f9      	ldr	r1, [r7, #12]
 80026e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80026e6:	fb01 f303 	mul.w	r3, r1, r3
 80026ea:	441a      	add	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002706:	3b01      	subs	r3, #1
 8002708:	68f9      	ldr	r1, [r7, #12]
 800270a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800270c:	fb01 f303 	mul.w	r3, r1, r3
 8002710:	441a      	add	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	22ff      	movs	r2, #255	; 0xff
 800271a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	22ff      	movs	r2, #255	; 0xff
 8002722:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d114      	bne.n	8002756 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d01a      	beq.n	800276a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	3310      	adds	r3, #16
 8002738:	4618      	mov	r0, r3
 800273a:	f001 f95d 	bl	80039f8 <xTaskRemoveFromEventList>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d012      	beq.n	800276a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002744:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <xQueueGenericReset+0xcc>)
 8002746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	f3bf 8f4f 	dsb	sy
 8002750:	f3bf 8f6f 	isb	sy
 8002754:	e009      	b.n	800276a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	3310      	adds	r3, #16
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff fef7 	bl	800254e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	3324      	adds	r3, #36	; 0x24
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff fef2 	bl	800254e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800276a:	f001 fd37 	bl	80041dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800276e:	2301      	movs	r3, #1
}
 8002770:	4618      	mov	r0, r3
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	e000ed04 	.word	0xe000ed04

0800277c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800277c:	b580      	push	{r7, lr}
 800277e:	b08e      	sub	sp, #56	; 0x38
 8002780:	af02      	add	r7, sp, #8
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
 8002788:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10a      	bne.n	80027a6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002794:	f383 8811 	msr	BASEPRI, r3
 8002798:	f3bf 8f6f 	isb	sy
 800279c:	f3bf 8f4f 	dsb	sy
 80027a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80027a2:	bf00      	nop
 80027a4:	e7fe      	b.n	80027a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10a      	bne.n	80027c2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80027ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027b0:	f383 8811 	msr	BASEPRI, r3
 80027b4:	f3bf 8f6f 	isb	sy
 80027b8:	f3bf 8f4f 	dsb	sy
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80027be:	bf00      	nop
 80027c0:	e7fe      	b.n	80027c0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d002      	beq.n	80027ce <xQueueGenericCreateStatic+0x52>
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <xQueueGenericCreateStatic+0x56>
 80027ce:	2301      	movs	r3, #1
 80027d0:	e000      	b.n	80027d4 <xQueueGenericCreateStatic+0x58>
 80027d2:	2300      	movs	r3, #0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d10a      	bne.n	80027ee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80027d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027dc:	f383 8811 	msr	BASEPRI, r3
 80027e0:	f3bf 8f6f 	isb	sy
 80027e4:	f3bf 8f4f 	dsb	sy
 80027e8:	623b      	str	r3, [r7, #32]
}
 80027ea:	bf00      	nop
 80027ec:	e7fe      	b.n	80027ec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d102      	bne.n	80027fa <xQueueGenericCreateStatic+0x7e>
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <xQueueGenericCreateStatic+0x82>
 80027fa:	2301      	movs	r3, #1
 80027fc:	e000      	b.n	8002800 <xQueueGenericCreateStatic+0x84>
 80027fe:	2300      	movs	r3, #0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10a      	bne.n	800281a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002808:	f383 8811 	msr	BASEPRI, r3
 800280c:	f3bf 8f6f 	isb	sy
 8002810:	f3bf 8f4f 	dsb	sy
 8002814:	61fb      	str	r3, [r7, #28]
}
 8002816:	bf00      	nop
 8002818:	e7fe      	b.n	8002818 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800281a:	2348      	movs	r3, #72	; 0x48
 800281c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	2b48      	cmp	r3, #72	; 0x48
 8002822:	d00a      	beq.n	800283a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002828:	f383 8811 	msr	BASEPRI, r3
 800282c:	f3bf 8f6f 	isb	sy
 8002830:	f3bf 8f4f 	dsb	sy
 8002834:	61bb      	str	r3, [r7, #24]
}
 8002836:	bf00      	nop
 8002838:	e7fe      	b.n	8002838 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800283e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00d      	beq.n	8002860 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800284c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	4613      	mov	r3, r2
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	68b9      	ldr	r1, [r7, #8]
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 f843 	bl	80028e6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002862:	4618      	mov	r0, r3
 8002864:	3730      	adds	r7, #48	; 0x30
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800286a:	b580      	push	{r7, lr}
 800286c:	b08a      	sub	sp, #40	; 0x28
 800286e:	af02      	add	r7, sp, #8
 8002870:	60f8      	str	r0, [r7, #12]
 8002872:	60b9      	str	r1, [r7, #8]
 8002874:	4613      	mov	r3, r2
 8002876:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10a      	bne.n	8002894 <xQueueGenericCreate+0x2a>
	__asm volatile
 800287e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002882:	f383 8811 	msr	BASEPRI, r3
 8002886:	f3bf 8f6f 	isb	sy
 800288a:	f3bf 8f4f 	dsb	sy
 800288e:	613b      	str	r3, [r7, #16]
}
 8002890:	bf00      	nop
 8002892:	e7fe      	b.n	8002892 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d102      	bne.n	80028a0 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800289a:	2300      	movs	r3, #0
 800289c:	61fb      	str	r3, [r7, #28]
 800289e:	e004      	b.n	80028aa <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	68ba      	ldr	r2, [r7, #8]
 80028a4:	fb02 f303 	mul.w	r3, r2, r3
 80028a8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	3348      	adds	r3, #72	; 0x48
 80028ae:	4618      	mov	r0, r3
 80028b0:	f001 fd64 	bl	800437c <pvPortMalloc>
 80028b4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00f      	beq.n	80028dc <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	3348      	adds	r3, #72	; 0x48
 80028c0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80028ca:	79fa      	ldrb	r2, [r7, #7]
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	4613      	mov	r3, r2
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	68b9      	ldr	r1, [r7, #8]
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 f805 	bl	80028e6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80028dc:	69bb      	ldr	r3, [r7, #24]
	}
 80028de:	4618      	mov	r0, r3
 80028e0:	3720      	adds	r7, #32
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b084      	sub	sp, #16
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	60f8      	str	r0, [r7, #12]
 80028ee:	60b9      	str	r1, [r7, #8]
 80028f0:	607a      	str	r2, [r7, #4]
 80028f2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d103      	bne.n	8002902 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	e002      	b.n	8002908 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	68ba      	ldr	r2, [r7, #8]
 8002912:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002914:	2101      	movs	r1, #1
 8002916:	69b8      	ldr	r0, [r7, #24]
 8002918:	f7ff fec8 	bl	80026ac <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800291c:	bf00      	nop
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8002924:	b580      	push	{r7, lr}
 8002926:	b08a      	sub	sp, #40	; 0x28
 8002928:	af02      	add	r7, sp, #8
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10a      	bne.n	800294c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8002936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800293a:	f383 8811 	msr	BASEPRI, r3
 800293e:	f3bf 8f6f 	isb	sy
 8002942:	f3bf 8f4f 	dsb	sy
 8002946:	61bb      	str	r3, [r7, #24]
}
 8002948:	bf00      	nop
 800294a:	e7fe      	b.n	800294a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800294c:	68ba      	ldr	r2, [r7, #8]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	429a      	cmp	r2, r3
 8002952:	d90a      	bls.n	800296a <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8002954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002958:	f383 8811 	msr	BASEPRI, r3
 800295c:	f3bf 8f6f 	isb	sy
 8002960:	f3bf 8f4f 	dsb	sy
 8002964:	617b      	str	r3, [r7, #20]
}
 8002966:	bf00      	nop
 8002968:	e7fe      	b.n	8002968 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800296a:	2302      	movs	r3, #2
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	2100      	movs	r1, #0
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f7ff ff01 	bl	800277c <xQueueGenericCreateStatic>
 800297a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d002      	beq.n	8002988 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	68ba      	ldr	r2, [r7, #8]
 8002986:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002988:	69fb      	ldr	r3, [r7, #28]
	}
 800298a:	4618      	mov	r0, r3
 800298c:	3720      	adds	r7, #32
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8002992:	b580      	push	{r7, lr}
 8002994:	b086      	sub	sp, #24
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
 800299a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10a      	bne.n	80029b8 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80029a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a6:	f383 8811 	msr	BASEPRI, r3
 80029aa:	f3bf 8f6f 	isb	sy
 80029ae:	f3bf 8f4f 	dsb	sy
 80029b2:	613b      	str	r3, [r7, #16]
}
 80029b4:	bf00      	nop
 80029b6:	e7fe      	b.n	80029b6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d90a      	bls.n	80029d6 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80029c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c4:	f383 8811 	msr	BASEPRI, r3
 80029c8:	f3bf 8f6f 	isb	sy
 80029cc:	f3bf 8f4f 	dsb	sy
 80029d0:	60fb      	str	r3, [r7, #12]
}
 80029d2:	bf00      	nop
 80029d4:	e7fe      	b.n	80029d4 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80029d6:	2202      	movs	r2, #2
 80029d8:	2100      	movs	r1, #0
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7ff ff45 	bl	800286a <xQueueGenericCreate>
 80029e0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d002      	beq.n	80029ee <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80029ee:	697b      	ldr	r3, [r7, #20]
	}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b08e      	sub	sp, #56	; 0x38
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
 8002a04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002a06:	2300      	movs	r3, #0
 8002a08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10a      	bne.n	8002a2a <xQueueGenericSend+0x32>
	__asm volatile
 8002a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a18:	f383 8811 	msr	BASEPRI, r3
 8002a1c:	f3bf 8f6f 	isb	sy
 8002a20:	f3bf 8f4f 	dsb	sy
 8002a24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a26:	bf00      	nop
 8002a28:	e7fe      	b.n	8002a28 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d103      	bne.n	8002a38 <xQueueGenericSend+0x40>
 8002a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <xQueueGenericSend+0x44>
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e000      	b.n	8002a3e <xQueueGenericSend+0x46>
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10a      	bne.n	8002a58 <xQueueGenericSend+0x60>
	__asm volatile
 8002a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a46:	f383 8811 	msr	BASEPRI, r3
 8002a4a:	f3bf 8f6f 	isb	sy
 8002a4e:	f3bf 8f4f 	dsb	sy
 8002a52:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a54:	bf00      	nop
 8002a56:	e7fe      	b.n	8002a56 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d103      	bne.n	8002a66 <xQueueGenericSend+0x6e>
 8002a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d101      	bne.n	8002a6a <xQueueGenericSend+0x72>
 8002a66:	2301      	movs	r3, #1
 8002a68:	e000      	b.n	8002a6c <xQueueGenericSend+0x74>
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10a      	bne.n	8002a86 <xQueueGenericSend+0x8e>
	__asm volatile
 8002a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a74:	f383 8811 	msr	BASEPRI, r3
 8002a78:	f3bf 8f6f 	isb	sy
 8002a7c:	f3bf 8f4f 	dsb	sy
 8002a80:	623b      	str	r3, [r7, #32]
}
 8002a82:	bf00      	nop
 8002a84:	e7fe      	b.n	8002a84 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a86:	f001 f97b 	bl	8003d80 <xTaskGetSchedulerState>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d102      	bne.n	8002a96 <xQueueGenericSend+0x9e>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <xQueueGenericSend+0xa2>
 8002a96:	2301      	movs	r3, #1
 8002a98:	e000      	b.n	8002a9c <xQueueGenericSend+0xa4>
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10a      	bne.n	8002ab6 <xQueueGenericSend+0xbe>
	__asm volatile
 8002aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa4:	f383 8811 	msr	BASEPRI, r3
 8002aa8:	f3bf 8f6f 	isb	sy
 8002aac:	f3bf 8f4f 	dsb	sy
 8002ab0:	61fb      	str	r3, [r7, #28]
}
 8002ab2:	bf00      	nop
 8002ab4:	e7fe      	b.n	8002ab4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ab6:	f001 fb61 	bl	800417c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002abc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d302      	bcc.n	8002acc <xQueueGenericSend+0xd4>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d129      	bne.n	8002b20 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	68b9      	ldr	r1, [r7, #8]
 8002ad0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ad2:	f000 fa87 	bl	8002fe4 <prvCopyDataToQueue>
 8002ad6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d010      	beq.n	8002b02 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae2:	3324      	adds	r3, #36	; 0x24
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f000 ff87 	bl	80039f8 <xTaskRemoveFromEventList>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d013      	beq.n	8002b18 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002af0:	4b3f      	ldr	r3, [pc, #252]	; (8002bf0 <xQueueGenericSend+0x1f8>)
 8002af2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	f3bf 8f4f 	dsb	sy
 8002afc:	f3bf 8f6f 	isb	sy
 8002b00:	e00a      	b.n	8002b18 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d007      	beq.n	8002b18 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002b08:	4b39      	ldr	r3, [pc, #228]	; (8002bf0 <xQueueGenericSend+0x1f8>)
 8002b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	f3bf 8f4f 	dsb	sy
 8002b14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002b18:	f001 fb60 	bl	80041dc <vPortExitCritical>
				return pdPASS;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e063      	b.n	8002be8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d103      	bne.n	8002b2e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b26:	f001 fb59 	bl	80041dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	e05c      	b.n	8002be8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d106      	bne.n	8002b42 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b34:	f107 0314 	add.w	r3, r7, #20
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 ffbf 	bl	8003abc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b42:	f001 fb4b 	bl	80041dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b46:	f000 fd69 	bl	800361c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b4a:	f001 fb17 	bl	800417c <vPortEnterCritical>
 8002b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b54:	b25b      	sxtb	r3, r3
 8002b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b5a:	d103      	bne.n	8002b64 <xQueueGenericSend+0x16c>
 8002b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b6a:	b25b      	sxtb	r3, r3
 8002b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b70:	d103      	bne.n	8002b7a <xQueueGenericSend+0x182>
 8002b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b7a:	f001 fb2f 	bl	80041dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b7e:	1d3a      	adds	r2, r7, #4
 8002b80:	f107 0314 	add.w	r3, r7, #20
 8002b84:	4611      	mov	r1, r2
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 ffae 	bl	8003ae8 <xTaskCheckForTimeOut>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d124      	bne.n	8002bdc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002b92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b94:	f000 fb1e 	bl	80031d4 <prvIsQueueFull>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d018      	beq.n	8002bd0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba0:	3310      	adds	r3, #16
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	4611      	mov	r1, r2
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 ff02 	bl	80039b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002bac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bae:	f000 faa9 	bl	8003104 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002bb2:	f000 fd41 	bl	8003638 <xTaskResumeAll>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f47f af7c 	bne.w	8002ab6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002bbe:	4b0c      	ldr	r3, [pc, #48]	; (8002bf0 <xQueueGenericSend+0x1f8>)
 8002bc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	f3bf 8f4f 	dsb	sy
 8002bca:	f3bf 8f6f 	isb	sy
 8002bce:	e772      	b.n	8002ab6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002bd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bd2:	f000 fa97 	bl	8003104 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002bd6:	f000 fd2f 	bl	8003638 <xTaskResumeAll>
 8002bda:	e76c      	b.n	8002ab6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002bdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bde:	f000 fa91 	bl	8003104 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002be2:	f000 fd29 	bl	8003638 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002be6:	2300      	movs	r3, #0
		}
	}
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3738      	adds	r7, #56	; 0x38
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	e000ed04 	.word	0xe000ed04

08002bf4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b08e      	sub	sp, #56	; 0x38
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
 8002c00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10a      	bne.n	8002c22 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c10:	f383 8811 	msr	BASEPRI, r3
 8002c14:	f3bf 8f6f 	isb	sy
 8002c18:	f3bf 8f4f 	dsb	sy
 8002c1c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c1e:	bf00      	nop
 8002c20:	e7fe      	b.n	8002c20 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d103      	bne.n	8002c30 <xQueueGenericSendFromISR+0x3c>
 8002c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <xQueueGenericSendFromISR+0x40>
 8002c30:	2301      	movs	r3, #1
 8002c32:	e000      	b.n	8002c36 <xQueueGenericSendFromISR+0x42>
 8002c34:	2300      	movs	r3, #0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10a      	bne.n	8002c50 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3e:	f383 8811 	msr	BASEPRI, r3
 8002c42:	f3bf 8f6f 	isb	sy
 8002c46:	f3bf 8f4f 	dsb	sy
 8002c4a:	623b      	str	r3, [r7, #32]
}
 8002c4c:	bf00      	nop
 8002c4e:	e7fe      	b.n	8002c4e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d103      	bne.n	8002c5e <xQueueGenericSendFromISR+0x6a>
 8002c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d101      	bne.n	8002c62 <xQueueGenericSendFromISR+0x6e>
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e000      	b.n	8002c64 <xQueueGenericSendFromISR+0x70>
 8002c62:	2300      	movs	r3, #0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10a      	bne.n	8002c7e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c6c:	f383 8811 	msr	BASEPRI, r3
 8002c70:	f3bf 8f6f 	isb	sy
 8002c74:	f3bf 8f4f 	dsb	sy
 8002c78:	61fb      	str	r3, [r7, #28]
}
 8002c7a:	bf00      	nop
 8002c7c:	e7fe      	b.n	8002c7c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c7e:	f001 fb3f 	bl	8004300 <vPortValidateInterruptPriority>
	__asm volatile
 8002c82:	f3ef 8211 	mrs	r2, BASEPRI
 8002c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c8a:	f383 8811 	msr	BASEPRI, r3
 8002c8e:	f3bf 8f6f 	isb	sy
 8002c92:	f3bf 8f4f 	dsb	sy
 8002c96:	61ba      	str	r2, [r7, #24]
 8002c98:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002c9a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d302      	bcc.n	8002cb0 <xQueueGenericSendFromISR+0xbc>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d12c      	bne.n	8002d0a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	68b9      	ldr	r1, [r7, #8]
 8002cbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cc0:	f000 f990 	bl	8002fe4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002cc4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ccc:	d112      	bne.n	8002cf4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d016      	beq.n	8002d04 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd8:	3324      	adds	r3, #36	; 0x24
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 fe8c 	bl	80039f8 <xTaskRemoveFromEventList>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00e      	beq.n	8002d04 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00b      	beq.n	8002d04 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	e007      	b.n	8002d04 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002cf4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	b25a      	sxtb	r2, r3
 8002cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002d04:	2301      	movs	r3, #1
 8002d06:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002d08:	e001      	b.n	8002d0e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	637b      	str	r3, [r7, #52]	; 0x34
 8002d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d10:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	f383 8811 	msr	BASEPRI, r3
}
 8002d18:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3738      	adds	r7, #56	; 0x38
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b08c      	sub	sp, #48	; 0x30
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002d30:	2300      	movs	r3, #0
 8002d32:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10a      	bne.n	8002d54 <xQueueReceive+0x30>
	__asm volatile
 8002d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d42:	f383 8811 	msr	BASEPRI, r3
 8002d46:	f3bf 8f6f 	isb	sy
 8002d4a:	f3bf 8f4f 	dsb	sy
 8002d4e:	623b      	str	r3, [r7, #32]
}
 8002d50:	bf00      	nop
 8002d52:	e7fe      	b.n	8002d52 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d103      	bne.n	8002d62 <xQueueReceive+0x3e>
 8002d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <xQueueReceive+0x42>
 8002d62:	2301      	movs	r3, #1
 8002d64:	e000      	b.n	8002d68 <xQueueReceive+0x44>
 8002d66:	2300      	movs	r3, #0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10a      	bne.n	8002d82 <xQueueReceive+0x5e>
	__asm volatile
 8002d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d70:	f383 8811 	msr	BASEPRI, r3
 8002d74:	f3bf 8f6f 	isb	sy
 8002d78:	f3bf 8f4f 	dsb	sy
 8002d7c:	61fb      	str	r3, [r7, #28]
}
 8002d7e:	bf00      	nop
 8002d80:	e7fe      	b.n	8002d80 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d82:	f000 fffd 	bl	8003d80 <xTaskGetSchedulerState>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d102      	bne.n	8002d92 <xQueueReceive+0x6e>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <xQueueReceive+0x72>
 8002d92:	2301      	movs	r3, #1
 8002d94:	e000      	b.n	8002d98 <xQueueReceive+0x74>
 8002d96:	2300      	movs	r3, #0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d10a      	bne.n	8002db2 <xQueueReceive+0x8e>
	__asm volatile
 8002d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da0:	f383 8811 	msr	BASEPRI, r3
 8002da4:	f3bf 8f6f 	isb	sy
 8002da8:	f3bf 8f4f 	dsb	sy
 8002dac:	61bb      	str	r3, [r7, #24]
}
 8002dae:	bf00      	nop
 8002db0:	e7fe      	b.n	8002db0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002db2:	f001 f9e3 	bl	800417c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d01f      	beq.n	8002e02 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002dc2:	68b9      	ldr	r1, [r7, #8]
 8002dc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dc6:	f000 f977 	bl	80030b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	1e5a      	subs	r2, r3, #1
 8002dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00f      	beq.n	8002dfa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ddc:	3310      	adds	r3, #16
 8002dde:	4618      	mov	r0, r3
 8002de0:	f000 fe0a 	bl	80039f8 <xTaskRemoveFromEventList>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d007      	beq.n	8002dfa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002dea:	4b3d      	ldr	r3, [pc, #244]	; (8002ee0 <xQueueReceive+0x1bc>)
 8002dec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	f3bf 8f4f 	dsb	sy
 8002df6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002dfa:	f001 f9ef 	bl	80041dc <vPortExitCritical>
				return pdPASS;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e069      	b.n	8002ed6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d103      	bne.n	8002e10 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e08:	f001 f9e8 	bl	80041dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	e062      	b.n	8002ed6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d106      	bne.n	8002e24 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e16:	f107 0310 	add.w	r3, r7, #16
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f000 fe4e 	bl	8003abc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e20:	2301      	movs	r3, #1
 8002e22:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e24:	f001 f9da 	bl	80041dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e28:	f000 fbf8 	bl	800361c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e2c:	f001 f9a6 	bl	800417c <vPortEnterCritical>
 8002e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e36:	b25b      	sxtb	r3, r3
 8002e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e3c:	d103      	bne.n	8002e46 <xQueueReceive+0x122>
 8002e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e4c:	b25b      	sxtb	r3, r3
 8002e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e52:	d103      	bne.n	8002e5c <xQueueReceive+0x138>
 8002e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e5c:	f001 f9be 	bl	80041dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e60:	1d3a      	adds	r2, r7, #4
 8002e62:	f107 0310 	add.w	r3, r7, #16
 8002e66:	4611      	mov	r1, r2
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f000 fe3d 	bl	8003ae8 <xTaskCheckForTimeOut>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d123      	bne.n	8002ebc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e76:	f000 f997 	bl	80031a8 <prvIsQueueEmpty>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d017      	beq.n	8002eb0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e82:	3324      	adds	r3, #36	; 0x24
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	4611      	mov	r1, r2
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f000 fd91 	bl	80039b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002e8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e90:	f000 f938 	bl	8003104 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002e94:	f000 fbd0 	bl	8003638 <xTaskResumeAll>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d189      	bne.n	8002db2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002e9e:	4b10      	ldr	r3, [pc, #64]	; (8002ee0 <xQueueReceive+0x1bc>)
 8002ea0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	f3bf 8f4f 	dsb	sy
 8002eaa:	f3bf 8f6f 	isb	sy
 8002eae:	e780      	b.n	8002db2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002eb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eb2:	f000 f927 	bl	8003104 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002eb6:	f000 fbbf 	bl	8003638 <xTaskResumeAll>
 8002eba:	e77a      	b.n	8002db2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002ebc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ebe:	f000 f921 	bl	8003104 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ec2:	f000 fbb9 	bl	8003638 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ec6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ec8:	f000 f96e 	bl	80031a8 <prvIsQueueEmpty>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f43f af6f 	beq.w	8002db2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002ed4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3730      	adds	r7, #48	; 0x30
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	e000ed04 	.word	0xe000ed04

08002ee4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08e      	sub	sp, #56	; 0x38
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10a      	bne.n	8002f10 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8002efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002efe:	f383 8811 	msr	BASEPRI, r3
 8002f02:	f3bf 8f6f 	isb	sy
 8002f06:	f3bf 8f4f 	dsb	sy
 8002f0a:	623b      	str	r3, [r7, #32]
}
 8002f0c:	bf00      	nop
 8002f0e:	e7fe      	b.n	8002f0e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d103      	bne.n	8002f1e <xQueueReceiveFromISR+0x3a>
 8002f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <xQueueReceiveFromISR+0x3e>
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e000      	b.n	8002f24 <xQueueReceiveFromISR+0x40>
 8002f22:	2300      	movs	r3, #0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10a      	bne.n	8002f3e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8002f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f2c:	f383 8811 	msr	BASEPRI, r3
 8002f30:	f3bf 8f6f 	isb	sy
 8002f34:	f3bf 8f4f 	dsb	sy
 8002f38:	61fb      	str	r3, [r7, #28]
}
 8002f3a:	bf00      	nop
 8002f3c:	e7fe      	b.n	8002f3c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f3e:	f001 f9df 	bl	8004300 <vPortValidateInterruptPriority>
	__asm volatile
 8002f42:	f3ef 8211 	mrs	r2, BASEPRI
 8002f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f4a:	f383 8811 	msr	BASEPRI, r3
 8002f4e:	f3bf 8f6f 	isb	sy
 8002f52:	f3bf 8f4f 	dsb	sy
 8002f56:	61ba      	str	r2, [r7, #24]
 8002f58:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002f5a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f62:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d02f      	beq.n	8002fca <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002f74:	68b9      	ldr	r1, [r7, #8]
 8002f76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f78:	f000 f89e 	bl	80030b8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7e:	1e5a      	subs	r2, r3, #1
 8002f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f82:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002f84:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8c:	d112      	bne.n	8002fb4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d016      	beq.n	8002fc4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f98:	3310      	adds	r3, #16
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 fd2c 	bl	80039f8 <xTaskRemoveFromEventList>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00e      	beq.n	8002fc4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00b      	beq.n	8002fc4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	e007      	b.n	8002fc4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002fb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fb8:	3301      	adds	r3, #1
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	b25a      	sxtb	r2, r3
 8002fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	637b      	str	r3, [r7, #52]	; 0x34
 8002fc8:	e001      	b.n	8002fce <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	637b      	str	r3, [r7, #52]	; 0x34
 8002fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	f383 8811 	msr	BASEPRI, r3
}
 8002fd8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3738      	adds	r7, #56	; 0x38
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10d      	bne.n	800301e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d14d      	bne.n	80030a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	4618      	mov	r0, r3
 8003010:	f000 fed4 	bl	8003dbc <xTaskPriorityDisinherit>
 8003014:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	605a      	str	r2, [r3, #4]
 800301c:	e043      	b.n	80030a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d119      	bne.n	8003058 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6898      	ldr	r0, [r3, #8]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	461a      	mov	r2, r3
 800302e:	68b9      	ldr	r1, [r7, #8]
 8003030:	f001 fc26 	bl	8004880 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303c:	441a      	add	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	689a      	ldr	r2, [r3, #8]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	429a      	cmp	r2, r3
 800304c:	d32b      	bcc.n	80030a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	609a      	str	r2, [r3, #8]
 8003056:	e026      	b.n	80030a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	68d8      	ldr	r0, [r3, #12]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003060:	461a      	mov	r2, r3
 8003062:	68b9      	ldr	r1, [r7, #8]
 8003064:	f001 fc0c 	bl	8004880 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	68da      	ldr	r2, [r3, #12]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003070:	425b      	negs	r3, r3
 8003072:	441a      	add	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	68da      	ldr	r2, [r3, #12]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	429a      	cmp	r2, r3
 8003082:	d207      	bcs.n	8003094 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308c:	425b      	negs	r3, r3
 800308e:	441a      	add	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b02      	cmp	r3, #2
 8003098:	d105      	bne.n	80030a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d002      	beq.n	80030a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	3b01      	subs	r3, #1
 80030a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1c5a      	adds	r2, r3, #1
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80030ae:	697b      	ldr	r3, [r7, #20]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3718      	adds	r7, #24
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d018      	beq.n	80030fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	441a      	add	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68da      	ldr	r2, [r3, #12]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d303      	bcc.n	80030ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68d9      	ldr	r1, [r3, #12]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f4:	461a      	mov	r2, r3
 80030f6:	6838      	ldr	r0, [r7, #0]
 80030f8:	f001 fbc2 	bl	8004880 <memcpy>
	}
}
 80030fc:	bf00      	nop
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800310c:	f001 f836 	bl	800417c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003116:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003118:	e011      	b.n	800313e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	2b00      	cmp	r3, #0
 8003120:	d012      	beq.n	8003148 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	3324      	adds	r3, #36	; 0x24
 8003126:	4618      	mov	r0, r3
 8003128:	f000 fc66 	bl	80039f8 <xTaskRemoveFromEventList>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003132:	f000 fd3b 	bl	8003bac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003136:	7bfb      	ldrb	r3, [r7, #15]
 8003138:	3b01      	subs	r3, #1
 800313a:	b2db      	uxtb	r3, r3
 800313c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800313e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003142:	2b00      	cmp	r3, #0
 8003144:	dce9      	bgt.n	800311a <prvUnlockQueue+0x16>
 8003146:	e000      	b.n	800314a <prvUnlockQueue+0x46>
					break;
 8003148:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	22ff      	movs	r2, #255	; 0xff
 800314e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003152:	f001 f843 	bl	80041dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003156:	f001 f811 	bl	800417c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003160:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003162:	e011      	b.n	8003188 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d012      	beq.n	8003192 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	3310      	adds	r3, #16
 8003170:	4618      	mov	r0, r3
 8003172:	f000 fc41 	bl	80039f8 <xTaskRemoveFromEventList>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800317c:	f000 fd16 	bl	8003bac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003180:	7bbb      	ldrb	r3, [r7, #14]
 8003182:	3b01      	subs	r3, #1
 8003184:	b2db      	uxtb	r3, r3
 8003186:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003188:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800318c:	2b00      	cmp	r3, #0
 800318e:	dce9      	bgt.n	8003164 <prvUnlockQueue+0x60>
 8003190:	e000      	b.n	8003194 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003192:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	22ff      	movs	r2, #255	; 0xff
 8003198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800319c:	f001 f81e 	bl	80041dc <vPortExitCritical>
}
 80031a0:	bf00      	nop
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80031b0:	f000 ffe4 	bl	800417c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d102      	bne.n	80031c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80031bc:	2301      	movs	r3, #1
 80031be:	60fb      	str	r3, [r7, #12]
 80031c0:	e001      	b.n	80031c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80031c2:	2300      	movs	r3, #0
 80031c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80031c6:	f001 f809 	bl	80041dc <vPortExitCritical>

	return xReturn;
 80031ca:	68fb      	ldr	r3, [r7, #12]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80031dc:	f000 ffce 	bl	800417c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d102      	bne.n	80031f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80031ec:	2301      	movs	r3, #1
 80031ee:	60fb      	str	r3, [r7, #12]
 80031f0:	e001      	b.n	80031f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80031f2:	2300      	movs	r3, #0
 80031f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80031f6:	f000 fff1 	bl	80041dc <vPortExitCritical>

	return xReturn;
 80031fa:	68fb      	ldr	r3, [r7, #12]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003204:	b580      	push	{r7, lr}
 8003206:	b08e      	sub	sp, #56	; 0x38
 8003208:	af04      	add	r7, sp, #16
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
 8003210:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10a      	bne.n	800322e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800321c:	f383 8811 	msr	BASEPRI, r3
 8003220:	f3bf 8f6f 	isb	sy
 8003224:	f3bf 8f4f 	dsb	sy
 8003228:	623b      	str	r3, [r7, #32]
}
 800322a:	bf00      	nop
 800322c:	e7fe      	b.n	800322c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800322e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10a      	bne.n	800324a <xTaskCreateStatic+0x46>
	__asm volatile
 8003234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003238:	f383 8811 	msr	BASEPRI, r3
 800323c:	f3bf 8f6f 	isb	sy
 8003240:	f3bf 8f4f 	dsb	sy
 8003244:	61fb      	str	r3, [r7, #28]
}
 8003246:	bf00      	nop
 8003248:	e7fe      	b.n	8003248 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800324a:	23a0      	movs	r3, #160	; 0xa0
 800324c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	2ba0      	cmp	r3, #160	; 0xa0
 8003252:	d00a      	beq.n	800326a <xTaskCreateStatic+0x66>
	__asm volatile
 8003254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003258:	f383 8811 	msr	BASEPRI, r3
 800325c:	f3bf 8f6f 	isb	sy
 8003260:	f3bf 8f4f 	dsb	sy
 8003264:	61bb      	str	r3, [r7, #24]
}
 8003266:	bf00      	nop
 8003268:	e7fe      	b.n	8003268 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800326a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800326c:	2b00      	cmp	r3, #0
 800326e:	d01e      	beq.n	80032ae <xTaskCreateStatic+0xaa>
 8003270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003272:	2b00      	cmp	r3, #0
 8003274:	d01b      	beq.n	80032ae <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003278:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800327e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	2202      	movs	r2, #2
 8003284:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003288:	2300      	movs	r3, #0
 800328a:	9303      	str	r3, [sp, #12]
 800328c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328e:	9302      	str	r3, [sp, #8]
 8003290:	f107 0314 	add.w	r3, r7, #20
 8003294:	9301      	str	r3, [sp, #4]
 8003296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	68b9      	ldr	r1, [r7, #8]
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 f851 	bl	8003348 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032a8:	f000 f8e4 	bl	8003474 <prvAddNewTaskToReadyList>
 80032ac:	e001      	b.n	80032b2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80032ae:	2300      	movs	r3, #0
 80032b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80032b2:	697b      	ldr	r3, [r7, #20]
	}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3728      	adds	r7, #40	; 0x28
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b08c      	sub	sp, #48	; 0x30
 80032c0:	af04      	add	r7, sp, #16
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	603b      	str	r3, [r7, #0]
 80032c8:	4613      	mov	r3, r2
 80032ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032cc:	88fb      	ldrh	r3, [r7, #6]
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4618      	mov	r0, r3
 80032d2:	f001 f853 	bl	800437c <pvPortMalloc>
 80032d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00e      	beq.n	80032fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80032de:	20a0      	movs	r0, #160	; 0xa0
 80032e0:	f001 f84c 	bl	800437c <pvPortMalloc>
 80032e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d003      	beq.n	80032f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	631a      	str	r2, [r3, #48]	; 0x30
 80032f2:	e005      	b.n	8003300 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80032f4:	6978      	ldr	r0, [r7, #20]
 80032f6:	f001 f905 	bl	8004504 <vPortFree>
 80032fa:	e001      	b.n	8003300 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80032fc:	2300      	movs	r3, #0
 80032fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d017      	beq.n	8003336 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800330e:	88fa      	ldrh	r2, [r7, #6]
 8003310:	2300      	movs	r3, #0
 8003312:	9303      	str	r3, [sp, #12]
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	9302      	str	r3, [sp, #8]
 8003318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800331a:	9301      	str	r3, [sp, #4]
 800331c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	68b9      	ldr	r1, [r7, #8]
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f000 f80f 	bl	8003348 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800332a:	69f8      	ldr	r0, [r7, #28]
 800332c:	f000 f8a2 	bl	8003474 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003330:	2301      	movs	r3, #1
 8003332:	61bb      	str	r3, [r7, #24]
 8003334:	e002      	b.n	800333c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003336:	f04f 33ff 	mov.w	r3, #4294967295
 800333a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800333c:	69bb      	ldr	r3, [r7, #24]
	}
 800333e:	4618      	mov	r0, r3
 8003340:	3720      	adds	r7, #32
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
	...

08003348 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b088      	sub	sp, #32
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
 8003354:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003358:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003360:	3b01      	subs	r3, #1
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	f023 0307 	bic.w	r3, r3, #7
 800336e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	f003 0307 	and.w	r3, r3, #7
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00a      	beq.n	8003390 <prvInitialiseNewTask+0x48>
	__asm volatile
 800337a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800337e:	f383 8811 	msr	BASEPRI, r3
 8003382:	f3bf 8f6f 	isb	sy
 8003386:	f3bf 8f4f 	dsb	sy
 800338a:	617b      	str	r3, [r7, #20]
}
 800338c:	bf00      	nop
 800338e:	e7fe      	b.n	800338e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003390:	2300      	movs	r3, #0
 8003392:	61fb      	str	r3, [r7, #28]
 8003394:	e012      	b.n	80033bc <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	4413      	add	r3, r2
 800339c:	7819      	ldrb	r1, [r3, #0]
 800339e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	4413      	add	r3, r2
 80033a4:	3334      	adds	r3, #52	; 0x34
 80033a6:	460a      	mov	r2, r1
 80033a8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	4413      	add	r3, r2
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d006      	beq.n	80033c4 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	3301      	adds	r3, #1
 80033ba:	61fb      	str	r3, [r7, #28]
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	2b0f      	cmp	r3, #15
 80033c0:	d9e9      	bls.n	8003396 <prvInitialiseNewTask+0x4e>
 80033c2:	e000      	b.n	80033c6 <prvInitialiseNewTask+0x7e>
		{
			break;
 80033c4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80033c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80033ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d0:	2b06      	cmp	r3, #6
 80033d2:	d901      	bls.n	80033d8 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80033d4:	2306      	movs	r3, #6
 80033d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80033d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80033de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033e2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80033e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e6:	2200      	movs	r2, #0
 80033e8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80033ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ec:	3304      	adds	r3, #4
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7ff f8cc 	bl	800258c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80033f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f6:	3318      	adds	r3, #24
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff f8c7 	bl	800258c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80033fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003402:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003406:	f1c3 0207 	rsb	r2, r3, #7
 800340a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800340e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003412:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003416:	2200      	movs	r2, #0
 8003418:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800341c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341e:	2200      	movs	r2, #0
 8003420:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003426:	334c      	adds	r3, #76	; 0x4c
 8003428:	224c      	movs	r2, #76	; 0x4c
 800342a:	2100      	movs	r1, #0
 800342c:	4618      	mov	r0, r3
 800342e:	f001 f99d 	bl	800476c <memset>
 8003432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003434:	4a0c      	ldr	r2, [pc, #48]	; (8003468 <prvInitialiseNewTask+0x120>)
 8003436:	651a      	str	r2, [r3, #80]	; 0x50
 8003438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343a:	4a0c      	ldr	r2, [pc, #48]	; (800346c <prvInitialiseNewTask+0x124>)
 800343c:	655a      	str	r2, [r3, #84]	; 0x54
 800343e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003440:	4a0b      	ldr	r2, [pc, #44]	; (8003470 <prvInitialiseNewTask+0x128>)
 8003442:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	68f9      	ldr	r1, [r7, #12]
 8003448:	69b8      	ldr	r0, [r7, #24]
 800344a:	f000 fda3 	bl	8003f94 <pxPortInitialiseStack>
 800344e:	4602      	mov	r2, r0
 8003450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003452:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003456:	2b00      	cmp	r3, #0
 8003458:	d002      	beq.n	8003460 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800345a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800345c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800345e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003460:	bf00      	nop
 8003462:	3720      	adds	r7, #32
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	20001114 	.word	0x20001114
 800346c:	2000117c 	.word	0x2000117c
 8003470:	200011e4 	.word	0x200011e4

08003474 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800347c:	f000 fe7e 	bl	800417c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003480:	4b2a      	ldr	r3, [pc, #168]	; (800352c <prvAddNewTaskToReadyList+0xb8>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	3301      	adds	r3, #1
 8003486:	4a29      	ldr	r2, [pc, #164]	; (800352c <prvAddNewTaskToReadyList+0xb8>)
 8003488:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800348a:	4b29      	ldr	r3, [pc, #164]	; (8003530 <prvAddNewTaskToReadyList+0xbc>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d109      	bne.n	80034a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003492:	4a27      	ldr	r2, [pc, #156]	; (8003530 <prvAddNewTaskToReadyList+0xbc>)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003498:	4b24      	ldr	r3, [pc, #144]	; (800352c <prvAddNewTaskToReadyList+0xb8>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d110      	bne.n	80034c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80034a0:	f000 fba8 	bl	8003bf4 <prvInitialiseTaskLists>
 80034a4:	e00d      	b.n	80034c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80034a6:	4b23      	ldr	r3, [pc, #140]	; (8003534 <prvAddNewTaskToReadyList+0xc0>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d109      	bne.n	80034c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80034ae:	4b20      	ldr	r3, [pc, #128]	; (8003530 <prvAddNewTaskToReadyList+0xbc>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d802      	bhi.n	80034c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80034bc:	4a1c      	ldr	r2, [pc, #112]	; (8003530 <prvAddNewTaskToReadyList+0xbc>)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80034c2:	4b1d      	ldr	r3, [pc, #116]	; (8003538 <prvAddNewTaskToReadyList+0xc4>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	3301      	adds	r3, #1
 80034c8:	4a1b      	ldr	r2, [pc, #108]	; (8003538 <prvAddNewTaskToReadyList+0xc4>)
 80034ca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d0:	2201      	movs	r2, #1
 80034d2:	409a      	lsls	r2, r3
 80034d4:	4b19      	ldr	r3, [pc, #100]	; (800353c <prvAddNewTaskToReadyList+0xc8>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4313      	orrs	r3, r2
 80034da:	4a18      	ldr	r2, [pc, #96]	; (800353c <prvAddNewTaskToReadyList+0xc8>)
 80034dc:	6013      	str	r3, [r2, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e2:	4613      	mov	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4413      	add	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4a15      	ldr	r2, [pc, #84]	; (8003540 <prvAddNewTaskToReadyList+0xcc>)
 80034ec:	441a      	add	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	3304      	adds	r3, #4
 80034f2:	4619      	mov	r1, r3
 80034f4:	4610      	mov	r0, r2
 80034f6:	f7ff f855 	bl	80025a4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80034fa:	f000 fe6f 	bl	80041dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80034fe:	4b0d      	ldr	r3, [pc, #52]	; (8003534 <prvAddNewTaskToReadyList+0xc0>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00e      	beq.n	8003524 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003506:	4b0a      	ldr	r3, [pc, #40]	; (8003530 <prvAddNewTaskToReadyList+0xbc>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003510:	429a      	cmp	r2, r3
 8003512:	d207      	bcs.n	8003524 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003514:	4b0b      	ldr	r3, [pc, #44]	; (8003544 <prvAddNewTaskToReadyList+0xd0>)
 8003516:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	f3bf 8f4f 	dsb	sy
 8003520:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003524:	bf00      	nop
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	200004c8 	.word	0x200004c8
 8003530:	200003c8 	.word	0x200003c8
 8003534:	200004d4 	.word	0x200004d4
 8003538:	200004e4 	.word	0x200004e4
 800353c:	200004d0 	.word	0x200004d0
 8003540:	200003cc 	.word	0x200003cc
 8003544:	e000ed04 	.word	0xe000ed04

08003548 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b08a      	sub	sp, #40	; 0x28
 800354c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800354e:	2300      	movs	r3, #0
 8003550:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003552:	2300      	movs	r3, #0
 8003554:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003556:	463a      	mov	r2, r7
 8003558:	1d39      	adds	r1, r7, #4
 800355a:	f107 0308 	add.w	r3, r7, #8
 800355e:	4618      	mov	r0, r3
 8003560:	f7fc fe6e 	bl	8000240 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003564:	6839      	ldr	r1, [r7, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68ba      	ldr	r2, [r7, #8]
 800356a:	9202      	str	r2, [sp, #8]
 800356c:	9301      	str	r3, [sp, #4]
 800356e:	2300      	movs	r3, #0
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	2300      	movs	r3, #0
 8003574:	460a      	mov	r2, r1
 8003576:	4921      	ldr	r1, [pc, #132]	; (80035fc <vTaskStartScheduler+0xb4>)
 8003578:	4821      	ldr	r0, [pc, #132]	; (8003600 <vTaskStartScheduler+0xb8>)
 800357a:	f7ff fe43 	bl	8003204 <xTaskCreateStatic>
 800357e:	4603      	mov	r3, r0
 8003580:	4a20      	ldr	r2, [pc, #128]	; (8003604 <vTaskStartScheduler+0xbc>)
 8003582:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003584:	4b1f      	ldr	r3, [pc, #124]	; (8003604 <vTaskStartScheduler+0xbc>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d002      	beq.n	8003592 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800358c:	2301      	movs	r3, #1
 800358e:	617b      	str	r3, [r7, #20]
 8003590:	e001      	b.n	8003596 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003592:	2300      	movs	r3, #0
 8003594:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d11b      	bne.n	80035d4 <vTaskStartScheduler+0x8c>
	__asm volatile
 800359c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a0:	f383 8811 	msr	BASEPRI, r3
 80035a4:	f3bf 8f6f 	isb	sy
 80035a8:	f3bf 8f4f 	dsb	sy
 80035ac:	613b      	str	r3, [r7, #16]
}
 80035ae:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80035b0:	4b15      	ldr	r3, [pc, #84]	; (8003608 <vTaskStartScheduler+0xc0>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	334c      	adds	r3, #76	; 0x4c
 80035b6:	4a15      	ldr	r2, [pc, #84]	; (800360c <vTaskStartScheduler+0xc4>)
 80035b8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80035ba:	4b15      	ldr	r3, [pc, #84]	; (8003610 <vTaskStartScheduler+0xc8>)
 80035bc:	f04f 32ff 	mov.w	r2, #4294967295
 80035c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80035c2:	4b14      	ldr	r3, [pc, #80]	; (8003614 <vTaskStartScheduler+0xcc>)
 80035c4:	2201      	movs	r2, #1
 80035c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80035c8:	4b13      	ldr	r3, [pc, #76]	; (8003618 <vTaskStartScheduler+0xd0>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80035ce:	f000 fd63 	bl	8004098 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80035d2:	e00e      	b.n	80035f2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035da:	d10a      	bne.n	80035f2 <vTaskStartScheduler+0xaa>
	__asm volatile
 80035dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e0:	f383 8811 	msr	BASEPRI, r3
 80035e4:	f3bf 8f6f 	isb	sy
 80035e8:	f3bf 8f4f 	dsb	sy
 80035ec:	60fb      	str	r3, [r7, #12]
}
 80035ee:	bf00      	nop
 80035f0:	e7fe      	b.n	80035f0 <vTaskStartScheduler+0xa8>
}
 80035f2:	bf00      	nop
 80035f4:	3718      	adds	r7, #24
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	080051e4 	.word	0x080051e4
 8003600:	08003bc5 	.word	0x08003bc5
 8003604:	200004ec 	.word	0x200004ec
 8003608:	200003c8 	.word	0x200003c8
 800360c:	2000005c 	.word	0x2000005c
 8003610:	200004e8 	.word	0x200004e8
 8003614:	200004d4 	.word	0x200004d4
 8003618:	200004cc 	.word	0x200004cc

0800361c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003620:	4b04      	ldr	r3, [pc, #16]	; (8003634 <vTaskSuspendAll+0x18>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	3301      	adds	r3, #1
 8003626:	4a03      	ldr	r2, [pc, #12]	; (8003634 <vTaskSuspendAll+0x18>)
 8003628:	6013      	str	r3, [r2, #0]
}
 800362a:	bf00      	nop
 800362c:	46bd      	mov	sp, r7
 800362e:	bc80      	pop	{r7}
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	200004f0 	.word	0x200004f0

08003638 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800363e:	2300      	movs	r3, #0
 8003640:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003642:	2300      	movs	r3, #0
 8003644:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003646:	4b41      	ldr	r3, [pc, #260]	; (800374c <xTaskResumeAll+0x114>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10a      	bne.n	8003664 <xTaskResumeAll+0x2c>
	__asm volatile
 800364e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003652:	f383 8811 	msr	BASEPRI, r3
 8003656:	f3bf 8f6f 	isb	sy
 800365a:	f3bf 8f4f 	dsb	sy
 800365e:	603b      	str	r3, [r7, #0]
}
 8003660:	bf00      	nop
 8003662:	e7fe      	b.n	8003662 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003664:	f000 fd8a 	bl	800417c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003668:	4b38      	ldr	r3, [pc, #224]	; (800374c <xTaskResumeAll+0x114>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	3b01      	subs	r3, #1
 800366e:	4a37      	ldr	r2, [pc, #220]	; (800374c <xTaskResumeAll+0x114>)
 8003670:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003672:	4b36      	ldr	r3, [pc, #216]	; (800374c <xTaskResumeAll+0x114>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d161      	bne.n	800373e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800367a:	4b35      	ldr	r3, [pc, #212]	; (8003750 <xTaskResumeAll+0x118>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d05d      	beq.n	800373e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003682:	e02e      	b.n	80036e2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003684:	4b33      	ldr	r3, [pc, #204]	; (8003754 <xTaskResumeAll+0x11c>)
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	3318      	adds	r3, #24
 8003690:	4618      	mov	r0, r3
 8003692:	f7fe ffe2 	bl	800265a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	3304      	adds	r3, #4
 800369a:	4618      	mov	r0, r3
 800369c:	f7fe ffdd 	bl	800265a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a4:	2201      	movs	r2, #1
 80036a6:	409a      	lsls	r2, r3
 80036a8:	4b2b      	ldr	r3, [pc, #172]	; (8003758 <xTaskResumeAll+0x120>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	4a2a      	ldr	r2, [pc, #168]	; (8003758 <xTaskResumeAll+0x120>)
 80036b0:	6013      	str	r3, [r2, #0]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b6:	4613      	mov	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	4413      	add	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4a27      	ldr	r2, [pc, #156]	; (800375c <xTaskResumeAll+0x124>)
 80036c0:	441a      	add	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	3304      	adds	r3, #4
 80036c6:	4619      	mov	r1, r3
 80036c8:	4610      	mov	r0, r2
 80036ca:	f7fe ff6b 	bl	80025a4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d2:	4b23      	ldr	r3, [pc, #140]	; (8003760 <xTaskResumeAll+0x128>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d8:	429a      	cmp	r2, r3
 80036da:	d302      	bcc.n	80036e2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80036dc:	4b21      	ldr	r3, [pc, #132]	; (8003764 <xTaskResumeAll+0x12c>)
 80036de:	2201      	movs	r2, #1
 80036e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036e2:	4b1c      	ldr	r3, [pc, #112]	; (8003754 <xTaskResumeAll+0x11c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1cc      	bne.n	8003684 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80036f0:	f000 fb22 	bl	8003d38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80036f4:	4b1c      	ldr	r3, [pc, #112]	; (8003768 <xTaskResumeAll+0x130>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d010      	beq.n	8003722 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003700:	f000 f836 	bl	8003770 <xTaskIncrementTick>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d002      	beq.n	8003710 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800370a:	4b16      	ldr	r3, [pc, #88]	; (8003764 <xTaskResumeAll+0x12c>)
 800370c:	2201      	movs	r2, #1
 800370e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	3b01      	subs	r3, #1
 8003714:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1f1      	bne.n	8003700 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800371c:	4b12      	ldr	r3, [pc, #72]	; (8003768 <xTaskResumeAll+0x130>)
 800371e:	2200      	movs	r2, #0
 8003720:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003722:	4b10      	ldr	r3, [pc, #64]	; (8003764 <xTaskResumeAll+0x12c>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d009      	beq.n	800373e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800372a:	2301      	movs	r3, #1
 800372c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800372e:	4b0f      	ldr	r3, [pc, #60]	; (800376c <xTaskResumeAll+0x134>)
 8003730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003734:	601a      	str	r2, [r3, #0]
 8003736:	f3bf 8f4f 	dsb	sy
 800373a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800373e:	f000 fd4d 	bl	80041dc <vPortExitCritical>

	return xAlreadyYielded;
 8003742:	68bb      	ldr	r3, [r7, #8]
}
 8003744:	4618      	mov	r0, r3
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	200004f0 	.word	0x200004f0
 8003750:	200004c8 	.word	0x200004c8
 8003754:	20000488 	.word	0x20000488
 8003758:	200004d0 	.word	0x200004d0
 800375c:	200003cc 	.word	0x200003cc
 8003760:	200003c8 	.word	0x200003c8
 8003764:	200004dc 	.word	0x200004dc
 8003768:	200004d8 	.word	0x200004d8
 800376c:	e000ed04 	.word	0xe000ed04

08003770 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003776:	2300      	movs	r3, #0
 8003778:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800377a:	4b51      	ldr	r3, [pc, #324]	; (80038c0 <xTaskIncrementTick+0x150>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	f040 808d 	bne.w	800389e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003784:	4b4f      	ldr	r3, [pc, #316]	; (80038c4 <xTaskIncrementTick+0x154>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	3301      	adds	r3, #1
 800378a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800378c:	4a4d      	ldr	r2, [pc, #308]	; (80038c4 <xTaskIncrementTick+0x154>)
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d120      	bne.n	80037da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003798:	4b4b      	ldr	r3, [pc, #300]	; (80038c8 <xTaskIncrementTick+0x158>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00a      	beq.n	80037b8 <xTaskIncrementTick+0x48>
	__asm volatile
 80037a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a6:	f383 8811 	msr	BASEPRI, r3
 80037aa:	f3bf 8f6f 	isb	sy
 80037ae:	f3bf 8f4f 	dsb	sy
 80037b2:	603b      	str	r3, [r7, #0]
}
 80037b4:	bf00      	nop
 80037b6:	e7fe      	b.n	80037b6 <xTaskIncrementTick+0x46>
 80037b8:	4b43      	ldr	r3, [pc, #268]	; (80038c8 <xTaskIncrementTick+0x158>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	60fb      	str	r3, [r7, #12]
 80037be:	4b43      	ldr	r3, [pc, #268]	; (80038cc <xTaskIncrementTick+0x15c>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a41      	ldr	r2, [pc, #260]	; (80038c8 <xTaskIncrementTick+0x158>)
 80037c4:	6013      	str	r3, [r2, #0]
 80037c6:	4a41      	ldr	r2, [pc, #260]	; (80038cc <xTaskIncrementTick+0x15c>)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6013      	str	r3, [r2, #0]
 80037cc:	4b40      	ldr	r3, [pc, #256]	; (80038d0 <xTaskIncrementTick+0x160>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	3301      	adds	r3, #1
 80037d2:	4a3f      	ldr	r2, [pc, #252]	; (80038d0 <xTaskIncrementTick+0x160>)
 80037d4:	6013      	str	r3, [r2, #0]
 80037d6:	f000 faaf 	bl	8003d38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80037da:	4b3e      	ldr	r3, [pc, #248]	; (80038d4 <xTaskIncrementTick+0x164>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d34d      	bcc.n	8003880 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037e4:	4b38      	ldr	r3, [pc, #224]	; (80038c8 <xTaskIncrementTick+0x158>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <xTaskIncrementTick+0x82>
 80037ee:	2301      	movs	r3, #1
 80037f0:	e000      	b.n	80037f4 <xTaskIncrementTick+0x84>
 80037f2:	2300      	movs	r3, #0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d004      	beq.n	8003802 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037f8:	4b36      	ldr	r3, [pc, #216]	; (80038d4 <xTaskIncrementTick+0x164>)
 80037fa:	f04f 32ff 	mov.w	r2, #4294967295
 80037fe:	601a      	str	r2, [r3, #0]
					break;
 8003800:	e03e      	b.n	8003880 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003802:	4b31      	ldr	r3, [pc, #196]	; (80038c8 <xTaskIncrementTick+0x158>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	429a      	cmp	r2, r3
 8003818:	d203      	bcs.n	8003822 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800381a:	4a2e      	ldr	r2, [pc, #184]	; (80038d4 <xTaskIncrementTick+0x164>)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6013      	str	r3, [r2, #0]
						break;
 8003820:	e02e      	b.n	8003880 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	3304      	adds	r3, #4
 8003826:	4618      	mov	r0, r3
 8003828:	f7fe ff17 	bl	800265a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003830:	2b00      	cmp	r3, #0
 8003832:	d004      	beq.n	800383e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	3318      	adds	r3, #24
 8003838:	4618      	mov	r0, r3
 800383a:	f7fe ff0e 	bl	800265a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003842:	2201      	movs	r2, #1
 8003844:	409a      	lsls	r2, r3
 8003846:	4b24      	ldr	r3, [pc, #144]	; (80038d8 <xTaskIncrementTick+0x168>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4313      	orrs	r3, r2
 800384c:	4a22      	ldr	r2, [pc, #136]	; (80038d8 <xTaskIncrementTick+0x168>)
 800384e:	6013      	str	r3, [r2, #0]
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003854:	4613      	mov	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	4413      	add	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4a1f      	ldr	r2, [pc, #124]	; (80038dc <xTaskIncrementTick+0x16c>)
 800385e:	441a      	add	r2, r3
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	3304      	adds	r3, #4
 8003864:	4619      	mov	r1, r3
 8003866:	4610      	mov	r0, r2
 8003868:	f7fe fe9c 	bl	80025a4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003870:	4b1b      	ldr	r3, [pc, #108]	; (80038e0 <xTaskIncrementTick+0x170>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003876:	429a      	cmp	r2, r3
 8003878:	d3b4      	bcc.n	80037e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800387a:	2301      	movs	r3, #1
 800387c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800387e:	e7b1      	b.n	80037e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003880:	4b17      	ldr	r3, [pc, #92]	; (80038e0 <xTaskIncrementTick+0x170>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003886:	4915      	ldr	r1, [pc, #84]	; (80038dc <xTaskIncrementTick+0x16c>)
 8003888:	4613      	mov	r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4413      	add	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d907      	bls.n	80038a8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003898:	2301      	movs	r3, #1
 800389a:	617b      	str	r3, [r7, #20]
 800389c:	e004      	b.n	80038a8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800389e:	4b11      	ldr	r3, [pc, #68]	; (80038e4 <xTaskIncrementTick+0x174>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	3301      	adds	r3, #1
 80038a4:	4a0f      	ldr	r2, [pc, #60]	; (80038e4 <xTaskIncrementTick+0x174>)
 80038a6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80038a8:	4b0f      	ldr	r3, [pc, #60]	; (80038e8 <xTaskIncrementTick+0x178>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80038b0:	2301      	movs	r3, #1
 80038b2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80038b4:	697b      	ldr	r3, [r7, #20]
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3718      	adds	r7, #24
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	200004f0 	.word	0x200004f0
 80038c4:	200004cc 	.word	0x200004cc
 80038c8:	20000480 	.word	0x20000480
 80038cc:	20000484 	.word	0x20000484
 80038d0:	200004e0 	.word	0x200004e0
 80038d4:	200004e8 	.word	0x200004e8
 80038d8:	200004d0 	.word	0x200004d0
 80038dc:	200003cc 	.word	0x200003cc
 80038e0:	200003c8 	.word	0x200003c8
 80038e4:	200004d8 	.word	0x200004d8
 80038e8:	200004dc 	.word	0x200004dc

080038ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80038ec:	b480      	push	{r7}
 80038ee:	b087      	sub	sp, #28
 80038f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80038f2:	4b29      	ldr	r3, [pc, #164]	; (8003998 <vTaskSwitchContext+0xac>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d003      	beq.n	8003902 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80038fa:	4b28      	ldr	r3, [pc, #160]	; (800399c <vTaskSwitchContext+0xb0>)
 80038fc:	2201      	movs	r2, #1
 80038fe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003900:	e044      	b.n	800398c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8003902:	4b26      	ldr	r3, [pc, #152]	; (800399c <vTaskSwitchContext+0xb0>)
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003908:	4b25      	ldr	r3, [pc, #148]	; (80039a0 <vTaskSwitchContext+0xb4>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	fab3 f383 	clz	r3, r3
 8003914:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003916:	7afb      	ldrb	r3, [r7, #11]
 8003918:	f1c3 031f 	rsb	r3, r3, #31
 800391c:	617b      	str	r3, [r7, #20]
 800391e:	4921      	ldr	r1, [pc, #132]	; (80039a4 <vTaskSwitchContext+0xb8>)
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	4613      	mov	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4413      	add	r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	440b      	add	r3, r1
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10a      	bne.n	8003948 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003936:	f383 8811 	msr	BASEPRI, r3
 800393a:	f3bf 8f6f 	isb	sy
 800393e:	f3bf 8f4f 	dsb	sy
 8003942:	607b      	str	r3, [r7, #4]
}
 8003944:	bf00      	nop
 8003946:	e7fe      	b.n	8003946 <vTaskSwitchContext+0x5a>
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	4613      	mov	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4413      	add	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	4a14      	ldr	r2, [pc, #80]	; (80039a4 <vTaskSwitchContext+0xb8>)
 8003954:	4413      	add	r3, r2
 8003956:	613b      	str	r3, [r7, #16]
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	605a      	str	r2, [r3, #4]
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	3308      	adds	r3, #8
 800396a:	429a      	cmp	r2, r3
 800396c:	d104      	bne.n	8003978 <vTaskSwitchContext+0x8c>
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	605a      	str	r2, [r3, #4]
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	4a0a      	ldr	r2, [pc, #40]	; (80039a8 <vTaskSwitchContext+0xbc>)
 8003980:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003982:	4b09      	ldr	r3, [pc, #36]	; (80039a8 <vTaskSwitchContext+0xbc>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	334c      	adds	r3, #76	; 0x4c
 8003988:	4a08      	ldr	r2, [pc, #32]	; (80039ac <vTaskSwitchContext+0xc0>)
 800398a:	6013      	str	r3, [r2, #0]
}
 800398c:	bf00      	nop
 800398e:	371c      	adds	r7, #28
 8003990:	46bd      	mov	sp, r7
 8003992:	bc80      	pop	{r7}
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	200004f0 	.word	0x200004f0
 800399c:	200004dc 	.word	0x200004dc
 80039a0:	200004d0 	.word	0x200004d0
 80039a4:	200003cc 	.word	0x200003cc
 80039a8:	200003c8 	.word	0x200003c8
 80039ac:	2000005c 	.word	0x2000005c

080039b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d10a      	bne.n	80039d6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80039c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c4:	f383 8811 	msr	BASEPRI, r3
 80039c8:	f3bf 8f6f 	isb	sy
 80039cc:	f3bf 8f4f 	dsb	sy
 80039d0:	60fb      	str	r3, [r7, #12]
}
 80039d2:	bf00      	nop
 80039d4:	e7fe      	b.n	80039d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80039d6:	4b07      	ldr	r3, [pc, #28]	; (80039f4 <vTaskPlaceOnEventList+0x44>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	3318      	adds	r3, #24
 80039dc:	4619      	mov	r1, r3
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7fe fe03 	bl	80025ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80039e4:	2101      	movs	r1, #1
 80039e6:	6838      	ldr	r0, [r7, #0]
 80039e8:	f000 fa6e 	bl	8003ec8 <prvAddCurrentTaskToDelayedList>
}
 80039ec:	bf00      	nop
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	200003c8 	.word	0x200003c8

080039f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10a      	bne.n	8003a24 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a12:	f383 8811 	msr	BASEPRI, r3
 8003a16:	f3bf 8f6f 	isb	sy
 8003a1a:	f3bf 8f4f 	dsb	sy
 8003a1e:	60fb      	str	r3, [r7, #12]
}
 8003a20:	bf00      	nop
 8003a22:	e7fe      	b.n	8003a22 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	3318      	adds	r3, #24
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7fe fe16 	bl	800265a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a2e:	4b1d      	ldr	r3, [pc, #116]	; (8003aa4 <xTaskRemoveFromEventList+0xac>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d11c      	bne.n	8003a70 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	3304      	adds	r3, #4
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7fe fe0d 	bl	800265a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a44:	2201      	movs	r2, #1
 8003a46:	409a      	lsls	r2, r3
 8003a48:	4b17      	ldr	r3, [pc, #92]	; (8003aa8 <xTaskRemoveFromEventList+0xb0>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	4a16      	ldr	r2, [pc, #88]	; (8003aa8 <xTaskRemoveFromEventList+0xb0>)
 8003a50:	6013      	str	r3, [r2, #0]
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a56:	4613      	mov	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	4413      	add	r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4a13      	ldr	r2, [pc, #76]	; (8003aac <xTaskRemoveFromEventList+0xb4>)
 8003a60:	441a      	add	r2, r3
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	3304      	adds	r3, #4
 8003a66:	4619      	mov	r1, r3
 8003a68:	4610      	mov	r0, r2
 8003a6a:	f7fe fd9b 	bl	80025a4 <vListInsertEnd>
 8003a6e:	e005      	b.n	8003a7c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	3318      	adds	r3, #24
 8003a74:	4619      	mov	r1, r3
 8003a76:	480e      	ldr	r0, [pc, #56]	; (8003ab0 <xTaskRemoveFromEventList+0xb8>)
 8003a78:	f7fe fd94 	bl	80025a4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a80:	4b0c      	ldr	r3, [pc, #48]	; (8003ab4 <xTaskRemoveFromEventList+0xbc>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d905      	bls.n	8003a96 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003a8e:	4b0a      	ldr	r3, [pc, #40]	; (8003ab8 <xTaskRemoveFromEventList+0xc0>)
 8003a90:	2201      	movs	r2, #1
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	e001      	b.n	8003a9a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003a96:	2300      	movs	r3, #0
 8003a98:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003a9a:	697b      	ldr	r3, [r7, #20]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3718      	adds	r7, #24
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	200004f0 	.word	0x200004f0
 8003aa8:	200004d0 	.word	0x200004d0
 8003aac:	200003cc 	.word	0x200003cc
 8003ab0:	20000488 	.word	0x20000488
 8003ab4:	200003c8 	.word	0x200003c8
 8003ab8:	200004dc 	.word	0x200004dc

08003abc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003ac4:	4b06      	ldr	r3, [pc, #24]	; (8003ae0 <vTaskInternalSetTimeOutState+0x24>)
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003acc:	4b05      	ldr	r3, [pc, #20]	; (8003ae4 <vTaskInternalSetTimeOutState+0x28>)
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	605a      	str	r2, [r3, #4]
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bc80      	pop	{r7}
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	200004e0 	.word	0x200004e0
 8003ae4:	200004cc 	.word	0x200004cc

08003ae8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b088      	sub	sp, #32
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10a      	bne.n	8003b0e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afc:	f383 8811 	msr	BASEPRI, r3
 8003b00:	f3bf 8f6f 	isb	sy
 8003b04:	f3bf 8f4f 	dsb	sy
 8003b08:	613b      	str	r3, [r7, #16]
}
 8003b0a:	bf00      	nop
 8003b0c:	e7fe      	b.n	8003b0c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10a      	bne.n	8003b2a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b18:	f383 8811 	msr	BASEPRI, r3
 8003b1c:	f3bf 8f6f 	isb	sy
 8003b20:	f3bf 8f4f 	dsb	sy
 8003b24:	60fb      	str	r3, [r7, #12]
}
 8003b26:	bf00      	nop
 8003b28:	e7fe      	b.n	8003b28 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003b2a:	f000 fb27 	bl	800417c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003b2e:	4b1d      	ldr	r3, [pc, #116]	; (8003ba4 <xTaskCheckForTimeOut+0xbc>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b46:	d102      	bne.n	8003b4e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	61fb      	str	r3, [r7, #28]
 8003b4c:	e023      	b.n	8003b96 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	4b15      	ldr	r3, [pc, #84]	; (8003ba8 <xTaskCheckForTimeOut+0xc0>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d007      	beq.n	8003b6a <xTaskCheckForTimeOut+0x82>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	69ba      	ldr	r2, [r7, #24]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d302      	bcc.n	8003b6a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003b64:	2301      	movs	r3, #1
 8003b66:	61fb      	str	r3, [r7, #28]
 8003b68:	e015      	b.n	8003b96 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d20b      	bcs.n	8003b8c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	1ad2      	subs	r2, r2, r3
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f7ff ff9b 	bl	8003abc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003b86:	2300      	movs	r3, #0
 8003b88:	61fb      	str	r3, [r7, #28]
 8003b8a:	e004      	b.n	8003b96 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003b92:	2301      	movs	r3, #1
 8003b94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003b96:	f000 fb21 	bl	80041dc <vPortExitCritical>

	return xReturn;
 8003b9a:	69fb      	ldr	r3, [r7, #28]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3720      	adds	r7, #32
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	200004cc 	.word	0x200004cc
 8003ba8:	200004e0 	.word	0x200004e0

08003bac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003bb0:	4b03      	ldr	r3, [pc, #12]	; (8003bc0 <vTaskMissedYield+0x14>)
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	601a      	str	r2, [r3, #0]
}
 8003bb6:	bf00      	nop
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bc80      	pop	{r7}
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	200004dc 	.word	0x200004dc

08003bc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003bcc:	f000 f852 	bl	8003c74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003bd0:	4b06      	ldr	r3, [pc, #24]	; (8003bec <prvIdleTask+0x28>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d9f9      	bls.n	8003bcc <prvIdleTask+0x8>
			{
				taskYIELD();
 8003bd8:	4b05      	ldr	r3, [pc, #20]	; (8003bf0 <prvIdleTask+0x2c>)
 8003bda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	f3bf 8f4f 	dsb	sy
 8003be4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003be8:	e7f0      	b.n	8003bcc <prvIdleTask+0x8>
 8003bea:	bf00      	nop
 8003bec:	200003cc 	.word	0x200003cc
 8003bf0:	e000ed04 	.word	0xe000ed04

08003bf4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	607b      	str	r3, [r7, #4]
 8003bfe:	e00c      	b.n	8003c1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	4613      	mov	r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4413      	add	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	4a12      	ldr	r2, [pc, #72]	; (8003c54 <prvInitialiseTaskLists+0x60>)
 8003c0c:	4413      	add	r3, r2
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7fe fc9d 	bl	800254e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	3301      	adds	r3, #1
 8003c18:	607b      	str	r3, [r7, #4]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b06      	cmp	r3, #6
 8003c1e:	d9ef      	bls.n	8003c00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003c20:	480d      	ldr	r0, [pc, #52]	; (8003c58 <prvInitialiseTaskLists+0x64>)
 8003c22:	f7fe fc94 	bl	800254e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003c26:	480d      	ldr	r0, [pc, #52]	; (8003c5c <prvInitialiseTaskLists+0x68>)
 8003c28:	f7fe fc91 	bl	800254e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003c2c:	480c      	ldr	r0, [pc, #48]	; (8003c60 <prvInitialiseTaskLists+0x6c>)
 8003c2e:	f7fe fc8e 	bl	800254e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003c32:	480c      	ldr	r0, [pc, #48]	; (8003c64 <prvInitialiseTaskLists+0x70>)
 8003c34:	f7fe fc8b 	bl	800254e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003c38:	480b      	ldr	r0, [pc, #44]	; (8003c68 <prvInitialiseTaskLists+0x74>)
 8003c3a:	f7fe fc88 	bl	800254e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003c3e:	4b0b      	ldr	r3, [pc, #44]	; (8003c6c <prvInitialiseTaskLists+0x78>)
 8003c40:	4a05      	ldr	r2, [pc, #20]	; (8003c58 <prvInitialiseTaskLists+0x64>)
 8003c42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c44:	4b0a      	ldr	r3, [pc, #40]	; (8003c70 <prvInitialiseTaskLists+0x7c>)
 8003c46:	4a05      	ldr	r2, [pc, #20]	; (8003c5c <prvInitialiseTaskLists+0x68>)
 8003c48:	601a      	str	r2, [r3, #0]
}
 8003c4a:	bf00      	nop
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	200003cc 	.word	0x200003cc
 8003c58:	20000458 	.word	0x20000458
 8003c5c:	2000046c 	.word	0x2000046c
 8003c60:	20000488 	.word	0x20000488
 8003c64:	2000049c 	.word	0x2000049c
 8003c68:	200004b4 	.word	0x200004b4
 8003c6c:	20000480 	.word	0x20000480
 8003c70:	20000484 	.word	0x20000484

08003c74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c7a:	e019      	b.n	8003cb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003c7c:	f000 fa7e 	bl	800417c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003c80:	4b10      	ldr	r3, [pc, #64]	; (8003cc4 <prvCheckTasksWaitingTermination+0x50>)
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	3304      	adds	r3, #4
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7fe fce4 	bl	800265a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003c92:	4b0d      	ldr	r3, [pc, #52]	; (8003cc8 <prvCheckTasksWaitingTermination+0x54>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	3b01      	subs	r3, #1
 8003c98:	4a0b      	ldr	r2, [pc, #44]	; (8003cc8 <prvCheckTasksWaitingTermination+0x54>)
 8003c9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003c9c:	4b0b      	ldr	r3, [pc, #44]	; (8003ccc <prvCheckTasksWaitingTermination+0x58>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	4a0a      	ldr	r2, [pc, #40]	; (8003ccc <prvCheckTasksWaitingTermination+0x58>)
 8003ca4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003ca6:	f000 fa99 	bl	80041dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f810 	bl	8003cd0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003cb0:	4b06      	ldr	r3, [pc, #24]	; (8003ccc <prvCheckTasksWaitingTermination+0x58>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1e1      	bne.n	8003c7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003cb8:	bf00      	nop
 8003cba:	bf00      	nop
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	2000049c 	.word	0x2000049c
 8003cc8:	200004c8 	.word	0x200004c8
 8003ccc:	200004b0 	.word	0x200004b0

08003cd0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	334c      	adds	r3, #76	; 0x4c
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f000 fd4d 	bl	800477c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d108      	bne.n	8003cfe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f000 fc07 	bl	8004504 <vPortFree>
				vPortFree( pxTCB );
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 fc04 	bl	8004504 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003cfc:	e018      	b.n	8003d30 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d103      	bne.n	8003d10 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 fbfb 	bl	8004504 <vPortFree>
	}
 8003d0e:	e00f      	b.n	8003d30 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d00a      	beq.n	8003d30 <prvDeleteTCB+0x60>
	__asm volatile
 8003d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1e:	f383 8811 	msr	BASEPRI, r3
 8003d22:	f3bf 8f6f 	isb	sy
 8003d26:	f3bf 8f4f 	dsb	sy
 8003d2a:	60fb      	str	r3, [r7, #12]
}
 8003d2c:	bf00      	nop
 8003d2e:	e7fe      	b.n	8003d2e <prvDeleteTCB+0x5e>
	}
 8003d30:	bf00      	nop
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d3e:	4b0e      	ldr	r3, [pc, #56]	; (8003d78 <prvResetNextTaskUnblockTime+0x40>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <prvResetNextTaskUnblockTime+0x14>
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e000      	b.n	8003d4e <prvResetNextTaskUnblockTime+0x16>
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d004      	beq.n	8003d5c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003d52:	4b0a      	ldr	r3, [pc, #40]	; (8003d7c <prvResetNextTaskUnblockTime+0x44>)
 8003d54:	f04f 32ff 	mov.w	r2, #4294967295
 8003d58:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003d5a:	e008      	b.n	8003d6e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003d5c:	4b06      	ldr	r3, [pc, #24]	; (8003d78 <prvResetNextTaskUnblockTime+0x40>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	4a04      	ldr	r2, [pc, #16]	; (8003d7c <prvResetNextTaskUnblockTime+0x44>)
 8003d6c:	6013      	str	r3, [r2, #0]
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bc80      	pop	{r7}
 8003d76:	4770      	bx	lr
 8003d78:	20000480 	.word	0x20000480
 8003d7c:	200004e8 	.word	0x200004e8

08003d80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003d86:	4b0b      	ldr	r3, [pc, #44]	; (8003db4 <xTaskGetSchedulerState+0x34>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d102      	bne.n	8003d94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	607b      	str	r3, [r7, #4]
 8003d92:	e008      	b.n	8003da6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d94:	4b08      	ldr	r3, [pc, #32]	; (8003db8 <xTaskGetSchedulerState+0x38>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d102      	bne.n	8003da2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	607b      	str	r3, [r7, #4]
 8003da0:	e001      	b.n	8003da6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003da2:	2300      	movs	r3, #0
 8003da4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003da6:	687b      	ldr	r3, [r7, #4]
	}
 8003da8:	4618      	mov	r0, r3
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bc80      	pop	{r7}
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	200004d4 	.word	0x200004d4
 8003db8:	200004f0 	.word	0x200004f0

08003dbc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d06e      	beq.n	8003eb0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003dd2:	4b3a      	ldr	r3, [pc, #232]	; (8003ebc <xTaskPriorityDisinherit+0x100>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d00a      	beq.n	8003df2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de0:	f383 8811 	msr	BASEPRI, r3
 8003de4:	f3bf 8f6f 	isb	sy
 8003de8:	f3bf 8f4f 	dsb	sy
 8003dec:	60fb      	str	r3, [r7, #12]
}
 8003dee:	bf00      	nop
 8003df0:	e7fe      	b.n	8003df0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10a      	bne.n	8003e10 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dfe:	f383 8811 	msr	BASEPRI, r3
 8003e02:	f3bf 8f6f 	isb	sy
 8003e06:	f3bf 8f4f 	dsb	sy
 8003e0a:	60bb      	str	r3, [r7, #8]
}
 8003e0c:	bf00      	nop
 8003e0e:	e7fe      	b.n	8003e0e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e14:	1e5a      	subs	r2, r3, #1
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d044      	beq.n	8003eb0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d140      	bne.n	8003eb0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	3304      	adds	r3, #4
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7fe fc11 	bl	800265a <uxListRemove>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d115      	bne.n	8003e6a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e42:	491f      	ldr	r1, [pc, #124]	; (8003ec0 <xTaskPriorityDisinherit+0x104>)
 8003e44:	4613      	mov	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	4413      	add	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	440b      	add	r3, r1
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10a      	bne.n	8003e6a <xTaskPriorityDisinherit+0xae>
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e58:	2201      	movs	r2, #1
 8003e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5e:	43da      	mvns	r2, r3
 8003e60:	4b18      	ldr	r3, [pc, #96]	; (8003ec4 <xTaskPriorityDisinherit+0x108>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4013      	ands	r3, r2
 8003e66:	4a17      	ldr	r2, [pc, #92]	; (8003ec4 <xTaskPriorityDisinherit+0x108>)
 8003e68:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e76:	f1c3 0207 	rsb	r2, r3, #7
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e82:	2201      	movs	r2, #1
 8003e84:	409a      	lsls	r2, r3
 8003e86:	4b0f      	ldr	r3, [pc, #60]	; (8003ec4 <xTaskPriorityDisinherit+0x108>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	4a0d      	ldr	r2, [pc, #52]	; (8003ec4 <xTaskPriorityDisinherit+0x108>)
 8003e8e:	6013      	str	r3, [r2, #0]
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e94:	4613      	mov	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	4413      	add	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4a08      	ldr	r2, [pc, #32]	; (8003ec0 <xTaskPriorityDisinherit+0x104>)
 8003e9e:	441a      	add	r2, r3
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	3304      	adds	r3, #4
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	4610      	mov	r0, r2
 8003ea8:	f7fe fb7c 	bl	80025a4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003eac:	2301      	movs	r3, #1
 8003eae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003eb0:	697b      	ldr	r3, [r7, #20]
	}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3718      	adds	r7, #24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	200003c8 	.word	0x200003c8
 8003ec0:	200003cc 	.word	0x200003cc
 8003ec4:	200004d0 	.word	0x200004d0

08003ec8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003ed2:	4b29      	ldr	r3, [pc, #164]	; (8003f78 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ed8:	4b28      	ldr	r3, [pc, #160]	; (8003f7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	3304      	adds	r3, #4
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7fe fbbb 	bl	800265a <uxListRemove>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10b      	bne.n	8003f02 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003eea:	4b24      	ldr	r3, [pc, #144]	; (8003f7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	43da      	mvns	r2, r3
 8003ef8:	4b21      	ldr	r3, [pc, #132]	; (8003f80 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4013      	ands	r3, r2
 8003efe:	4a20      	ldr	r2, [pc, #128]	; (8003f80 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003f00:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f08:	d10a      	bne.n	8003f20 <prvAddCurrentTaskToDelayedList+0x58>
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d007      	beq.n	8003f20 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f10:	4b1a      	ldr	r3, [pc, #104]	; (8003f7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	3304      	adds	r3, #4
 8003f16:	4619      	mov	r1, r3
 8003f18:	481a      	ldr	r0, [pc, #104]	; (8003f84 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003f1a:	f7fe fb43 	bl	80025a4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003f1e:	e026      	b.n	8003f6e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4413      	add	r3, r2
 8003f26:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f28:	4b14      	ldr	r3, [pc, #80]	; (8003f7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68ba      	ldr	r2, [r7, #8]
 8003f2e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d209      	bcs.n	8003f4c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f38:	4b13      	ldr	r3, [pc, #76]	; (8003f88 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	4b0f      	ldr	r3, [pc, #60]	; (8003f7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	3304      	adds	r3, #4
 8003f42:	4619      	mov	r1, r3
 8003f44:	4610      	mov	r0, r2
 8003f46:	f7fe fb50 	bl	80025ea <vListInsert>
}
 8003f4a:	e010      	b.n	8003f6e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f4c:	4b0f      	ldr	r3, [pc, #60]	; (8003f8c <prvAddCurrentTaskToDelayedList+0xc4>)
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	4b0a      	ldr	r3, [pc, #40]	; (8003f7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	3304      	adds	r3, #4
 8003f56:	4619      	mov	r1, r3
 8003f58:	4610      	mov	r0, r2
 8003f5a:	f7fe fb46 	bl	80025ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003f5e:	4b0c      	ldr	r3, [pc, #48]	; (8003f90 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68ba      	ldr	r2, [r7, #8]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d202      	bcs.n	8003f6e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003f68:	4a09      	ldr	r2, [pc, #36]	; (8003f90 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	6013      	str	r3, [r2, #0]
}
 8003f6e:	bf00      	nop
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	200004cc 	.word	0x200004cc
 8003f7c:	200003c8 	.word	0x200003c8
 8003f80:	200004d0 	.word	0x200004d0
 8003f84:	200004b4 	.word	0x200004b4
 8003f88:	20000484 	.word	0x20000484
 8003f8c:	20000480 	.word	0x20000480
 8003f90:	200004e8 	.word	0x200004e8

08003f94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	3b04      	subs	r3, #4
 8003fa4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003fac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	3b04      	subs	r3, #4
 8003fb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	f023 0201 	bic.w	r2, r3, #1
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	3b04      	subs	r3, #4
 8003fc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003fc4:	4a08      	ldr	r2, [pc, #32]	; (8003fe8 <pxPortInitialiseStack+0x54>)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	3b14      	subs	r3, #20
 8003fce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	3b20      	subs	r3, #32
 8003fda:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3714      	adds	r7, #20
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bc80      	pop	{r7}
 8003fe6:	4770      	bx	lr
 8003fe8:	08003fed 	.word	0x08003fed

08003fec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003ff6:	4b12      	ldr	r3, [pc, #72]	; (8004040 <prvTaskExitError+0x54>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffe:	d00a      	beq.n	8004016 <prvTaskExitError+0x2a>
	__asm volatile
 8004000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004004:	f383 8811 	msr	BASEPRI, r3
 8004008:	f3bf 8f6f 	isb	sy
 800400c:	f3bf 8f4f 	dsb	sy
 8004010:	60fb      	str	r3, [r7, #12]
}
 8004012:	bf00      	nop
 8004014:	e7fe      	b.n	8004014 <prvTaskExitError+0x28>
	__asm volatile
 8004016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800401a:	f383 8811 	msr	BASEPRI, r3
 800401e:	f3bf 8f6f 	isb	sy
 8004022:	f3bf 8f4f 	dsb	sy
 8004026:	60bb      	str	r3, [r7, #8]
}
 8004028:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800402a:	bf00      	nop
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d0fc      	beq.n	800402c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004032:	bf00      	nop
 8004034:	bf00      	nop
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	bc80      	pop	{r7}
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	2000000c 	.word	0x2000000c
	...

08004050 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004050:	4b07      	ldr	r3, [pc, #28]	; (8004070 <pxCurrentTCBConst2>)
 8004052:	6819      	ldr	r1, [r3, #0]
 8004054:	6808      	ldr	r0, [r1, #0]
 8004056:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800405a:	f380 8809 	msr	PSP, r0
 800405e:	f3bf 8f6f 	isb	sy
 8004062:	f04f 0000 	mov.w	r0, #0
 8004066:	f380 8811 	msr	BASEPRI, r0
 800406a:	f04e 0e0d 	orr.w	lr, lr, #13
 800406e:	4770      	bx	lr

08004070 <pxCurrentTCBConst2>:
 8004070:	200003c8 	.word	0x200003c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004074:	bf00      	nop
 8004076:	bf00      	nop

08004078 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004078:	4806      	ldr	r0, [pc, #24]	; (8004094 <prvPortStartFirstTask+0x1c>)
 800407a:	6800      	ldr	r0, [r0, #0]
 800407c:	6800      	ldr	r0, [r0, #0]
 800407e:	f380 8808 	msr	MSP, r0
 8004082:	b662      	cpsie	i
 8004084:	b661      	cpsie	f
 8004086:	f3bf 8f4f 	dsb	sy
 800408a:	f3bf 8f6f 	isb	sy
 800408e:	df00      	svc	0
 8004090:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004092:	bf00      	nop
 8004094:	e000ed08 	.word	0xe000ed08

08004098 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800409e:	4b32      	ldr	r3, [pc, #200]	; (8004168 <xPortStartScheduler+0xd0>)
 80040a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	22ff      	movs	r2, #255	; 0xff
 80040ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80040b8:	78fb      	ldrb	r3, [r7, #3]
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	4b2a      	ldr	r3, [pc, #168]	; (800416c <xPortStartScheduler+0xd4>)
 80040c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80040c6:	4b2a      	ldr	r3, [pc, #168]	; (8004170 <xPortStartScheduler+0xd8>)
 80040c8:	2207      	movs	r2, #7
 80040ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80040cc:	e009      	b.n	80040e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80040ce:	4b28      	ldr	r3, [pc, #160]	; (8004170 <xPortStartScheduler+0xd8>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	3b01      	subs	r3, #1
 80040d4:	4a26      	ldr	r2, [pc, #152]	; (8004170 <xPortStartScheduler+0xd8>)
 80040d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80040d8:	78fb      	ldrb	r3, [r7, #3]
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80040e2:	78fb      	ldrb	r3, [r7, #3]
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ea:	2b80      	cmp	r3, #128	; 0x80
 80040ec:	d0ef      	beq.n	80040ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80040ee:	4b20      	ldr	r3, [pc, #128]	; (8004170 <xPortStartScheduler+0xd8>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f1c3 0307 	rsb	r3, r3, #7
 80040f6:	2b04      	cmp	r3, #4
 80040f8:	d00a      	beq.n	8004110 <xPortStartScheduler+0x78>
	__asm volatile
 80040fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fe:	f383 8811 	msr	BASEPRI, r3
 8004102:	f3bf 8f6f 	isb	sy
 8004106:	f3bf 8f4f 	dsb	sy
 800410a:	60bb      	str	r3, [r7, #8]
}
 800410c:	bf00      	nop
 800410e:	e7fe      	b.n	800410e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004110:	4b17      	ldr	r3, [pc, #92]	; (8004170 <xPortStartScheduler+0xd8>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	021b      	lsls	r3, r3, #8
 8004116:	4a16      	ldr	r2, [pc, #88]	; (8004170 <xPortStartScheduler+0xd8>)
 8004118:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800411a:	4b15      	ldr	r3, [pc, #84]	; (8004170 <xPortStartScheduler+0xd8>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004122:	4a13      	ldr	r2, [pc, #76]	; (8004170 <xPortStartScheduler+0xd8>)
 8004124:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	b2da      	uxtb	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800412e:	4b11      	ldr	r3, [pc, #68]	; (8004174 <xPortStartScheduler+0xdc>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a10      	ldr	r2, [pc, #64]	; (8004174 <xPortStartScheduler+0xdc>)
 8004134:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004138:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800413a:	4b0e      	ldr	r3, [pc, #56]	; (8004174 <xPortStartScheduler+0xdc>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a0d      	ldr	r2, [pc, #52]	; (8004174 <xPortStartScheduler+0xdc>)
 8004140:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004144:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004146:	f000 f8b9 	bl	80042bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800414a:	4b0b      	ldr	r3, [pc, #44]	; (8004178 <xPortStartScheduler+0xe0>)
 800414c:	2200      	movs	r2, #0
 800414e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004150:	f7ff ff92 	bl	8004078 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004154:	f7ff fbca 	bl	80038ec <vTaskSwitchContext>
	prvTaskExitError();
 8004158:	f7ff ff48 	bl	8003fec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	e000e400 	.word	0xe000e400
 800416c:	200004f4 	.word	0x200004f4
 8004170:	200004f8 	.word	0x200004f8
 8004174:	e000ed20 	.word	0xe000ed20
 8004178:	2000000c 	.word	0x2000000c

0800417c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
	__asm volatile
 8004182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004186:	f383 8811 	msr	BASEPRI, r3
 800418a:	f3bf 8f6f 	isb	sy
 800418e:	f3bf 8f4f 	dsb	sy
 8004192:	607b      	str	r3, [r7, #4]
}
 8004194:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004196:	4b0f      	ldr	r3, [pc, #60]	; (80041d4 <vPortEnterCritical+0x58>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	3301      	adds	r3, #1
 800419c:	4a0d      	ldr	r2, [pc, #52]	; (80041d4 <vPortEnterCritical+0x58>)
 800419e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80041a0:	4b0c      	ldr	r3, [pc, #48]	; (80041d4 <vPortEnterCritical+0x58>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d10f      	bne.n	80041c8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80041a8:	4b0b      	ldr	r3, [pc, #44]	; (80041d8 <vPortEnterCritical+0x5c>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00a      	beq.n	80041c8 <vPortEnterCritical+0x4c>
	__asm volatile
 80041b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b6:	f383 8811 	msr	BASEPRI, r3
 80041ba:	f3bf 8f6f 	isb	sy
 80041be:	f3bf 8f4f 	dsb	sy
 80041c2:	603b      	str	r3, [r7, #0]
}
 80041c4:	bf00      	nop
 80041c6:	e7fe      	b.n	80041c6 <vPortEnterCritical+0x4a>
	}
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bc80      	pop	{r7}
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	2000000c 	.word	0x2000000c
 80041d8:	e000ed04 	.word	0xe000ed04

080041dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80041e2:	4b11      	ldr	r3, [pc, #68]	; (8004228 <vPortExitCritical+0x4c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10a      	bne.n	8004200 <vPortExitCritical+0x24>
	__asm volatile
 80041ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ee:	f383 8811 	msr	BASEPRI, r3
 80041f2:	f3bf 8f6f 	isb	sy
 80041f6:	f3bf 8f4f 	dsb	sy
 80041fa:	607b      	str	r3, [r7, #4]
}
 80041fc:	bf00      	nop
 80041fe:	e7fe      	b.n	80041fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004200:	4b09      	ldr	r3, [pc, #36]	; (8004228 <vPortExitCritical+0x4c>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	3b01      	subs	r3, #1
 8004206:	4a08      	ldr	r2, [pc, #32]	; (8004228 <vPortExitCritical+0x4c>)
 8004208:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800420a:	4b07      	ldr	r3, [pc, #28]	; (8004228 <vPortExitCritical+0x4c>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d105      	bne.n	800421e <vPortExitCritical+0x42>
 8004212:	2300      	movs	r3, #0
 8004214:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	f383 8811 	msr	BASEPRI, r3
}
 800421c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800421e:	bf00      	nop
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	bc80      	pop	{r7}
 8004226:	4770      	bx	lr
 8004228:	2000000c 	.word	0x2000000c
 800422c:	00000000 	.word	0x00000000

08004230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004230:	f3ef 8009 	mrs	r0, PSP
 8004234:	f3bf 8f6f 	isb	sy
 8004238:	4b0d      	ldr	r3, [pc, #52]	; (8004270 <pxCurrentTCBConst>)
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004240:	6010      	str	r0, [r2, #0]
 8004242:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004246:	f04f 0050 	mov.w	r0, #80	; 0x50
 800424a:	f380 8811 	msr	BASEPRI, r0
 800424e:	f7ff fb4d 	bl	80038ec <vTaskSwitchContext>
 8004252:	f04f 0000 	mov.w	r0, #0
 8004256:	f380 8811 	msr	BASEPRI, r0
 800425a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800425e:	6819      	ldr	r1, [r3, #0]
 8004260:	6808      	ldr	r0, [r1, #0]
 8004262:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004266:	f380 8809 	msr	PSP, r0
 800426a:	f3bf 8f6f 	isb	sy
 800426e:	4770      	bx	lr

08004270 <pxCurrentTCBConst>:
 8004270:	200003c8 	.word	0x200003c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004274:	bf00      	nop
 8004276:	bf00      	nop

08004278 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
	__asm volatile
 800427e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004282:	f383 8811 	msr	BASEPRI, r3
 8004286:	f3bf 8f6f 	isb	sy
 800428a:	f3bf 8f4f 	dsb	sy
 800428e:	607b      	str	r3, [r7, #4]
}
 8004290:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004292:	f7ff fa6d 	bl	8003770 <xTaskIncrementTick>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800429c:	4b06      	ldr	r3, [pc, #24]	; (80042b8 <SysTick_Handler+0x40>)
 800429e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	2300      	movs	r3, #0
 80042a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	f383 8811 	msr	BASEPRI, r3
}
 80042ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80042b0:	bf00      	nop
 80042b2:	3708      	adds	r7, #8
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	e000ed04 	.word	0xe000ed04

080042bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80042c0:	4b0a      	ldr	r3, [pc, #40]	; (80042ec <vPortSetupTimerInterrupt+0x30>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80042c6:	4b0a      	ldr	r3, [pc, #40]	; (80042f0 <vPortSetupTimerInterrupt+0x34>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80042cc:	4b09      	ldr	r3, [pc, #36]	; (80042f4 <vPortSetupTimerInterrupt+0x38>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a09      	ldr	r2, [pc, #36]	; (80042f8 <vPortSetupTimerInterrupt+0x3c>)
 80042d2:	fba2 2303 	umull	r2, r3, r2, r3
 80042d6:	099b      	lsrs	r3, r3, #6
 80042d8:	4a08      	ldr	r2, [pc, #32]	; (80042fc <vPortSetupTimerInterrupt+0x40>)
 80042da:	3b01      	subs	r3, #1
 80042dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80042de:	4b03      	ldr	r3, [pc, #12]	; (80042ec <vPortSetupTimerInterrupt+0x30>)
 80042e0:	2207      	movs	r2, #7
 80042e2:	601a      	str	r2, [r3, #0]
}
 80042e4:	bf00      	nop
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bc80      	pop	{r7}
 80042ea:	4770      	bx	lr
 80042ec:	e000e010 	.word	0xe000e010
 80042f0:	e000e018 	.word	0xe000e018
 80042f4:	20000000 	.word	0x20000000
 80042f8:	10624dd3 	.word	0x10624dd3
 80042fc:	e000e014 	.word	0xe000e014

08004300 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004306:	f3ef 8305 	mrs	r3, IPSR
 800430a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2b0f      	cmp	r3, #15
 8004310:	d914      	bls.n	800433c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004312:	4a16      	ldr	r2, [pc, #88]	; (800436c <vPortValidateInterruptPriority+0x6c>)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4413      	add	r3, r2
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800431c:	4b14      	ldr	r3, [pc, #80]	; (8004370 <vPortValidateInterruptPriority+0x70>)
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	7afa      	ldrb	r2, [r7, #11]
 8004322:	429a      	cmp	r2, r3
 8004324:	d20a      	bcs.n	800433c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432a:	f383 8811 	msr	BASEPRI, r3
 800432e:	f3bf 8f6f 	isb	sy
 8004332:	f3bf 8f4f 	dsb	sy
 8004336:	607b      	str	r3, [r7, #4]
}
 8004338:	bf00      	nop
 800433a:	e7fe      	b.n	800433a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800433c:	4b0d      	ldr	r3, [pc, #52]	; (8004374 <vPortValidateInterruptPriority+0x74>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004344:	4b0c      	ldr	r3, [pc, #48]	; (8004378 <vPortValidateInterruptPriority+0x78>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	429a      	cmp	r2, r3
 800434a:	d90a      	bls.n	8004362 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800434c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004350:	f383 8811 	msr	BASEPRI, r3
 8004354:	f3bf 8f6f 	isb	sy
 8004358:	f3bf 8f4f 	dsb	sy
 800435c:	603b      	str	r3, [r7, #0]
}
 800435e:	bf00      	nop
 8004360:	e7fe      	b.n	8004360 <vPortValidateInterruptPriority+0x60>
	}
 8004362:	bf00      	nop
 8004364:	3714      	adds	r7, #20
 8004366:	46bd      	mov	sp, r7
 8004368:	bc80      	pop	{r7}
 800436a:	4770      	bx	lr
 800436c:	e000e3f0 	.word	0xe000e3f0
 8004370:	200004f4 	.word	0x200004f4
 8004374:	e000ed0c 	.word	0xe000ed0c
 8004378:	200004f8 	.word	0x200004f8

0800437c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b08a      	sub	sp, #40	; 0x28
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004384:	2300      	movs	r3, #0
 8004386:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004388:	f7ff f948 	bl	800361c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800438c:	4b58      	ldr	r3, [pc, #352]	; (80044f0 <pvPortMalloc+0x174>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d101      	bne.n	8004398 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004394:	f000 f910 	bl	80045b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004398:	4b56      	ldr	r3, [pc, #344]	; (80044f4 <pvPortMalloc+0x178>)
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4013      	ands	r3, r2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f040 808e 	bne.w	80044c2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d01d      	beq.n	80043e8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80043ac:	2208      	movs	r2, #8
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4413      	add	r3, r2
 80043b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f003 0307 	and.w	r3, r3, #7
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d014      	beq.n	80043e8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f023 0307 	bic.w	r3, r3, #7
 80043c4:	3308      	adds	r3, #8
 80043c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f003 0307 	and.w	r3, r3, #7
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00a      	beq.n	80043e8 <pvPortMalloc+0x6c>
	__asm volatile
 80043d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d6:	f383 8811 	msr	BASEPRI, r3
 80043da:	f3bf 8f6f 	isb	sy
 80043de:	f3bf 8f4f 	dsb	sy
 80043e2:	617b      	str	r3, [r7, #20]
}
 80043e4:	bf00      	nop
 80043e6:	e7fe      	b.n	80043e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d069      	beq.n	80044c2 <pvPortMalloc+0x146>
 80043ee:	4b42      	ldr	r3, [pc, #264]	; (80044f8 <pvPortMalloc+0x17c>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d864      	bhi.n	80044c2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80043f8:	4b40      	ldr	r3, [pc, #256]	; (80044fc <pvPortMalloc+0x180>)
 80043fa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80043fc:	4b3f      	ldr	r3, [pc, #252]	; (80044fc <pvPortMalloc+0x180>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004402:	e004      	b.n	800440e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	429a      	cmp	r2, r3
 8004416:	d903      	bls.n	8004420 <pvPortMalloc+0xa4>
 8004418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1f1      	bne.n	8004404 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004420:	4b33      	ldr	r3, [pc, #204]	; (80044f0 <pvPortMalloc+0x174>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004426:	429a      	cmp	r2, r3
 8004428:	d04b      	beq.n	80044c2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800442a:	6a3b      	ldr	r3, [r7, #32]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2208      	movs	r2, #8
 8004430:	4413      	add	r3, r2
 8004432:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	6a3b      	ldr	r3, [r7, #32]
 800443a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800443c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	1ad2      	subs	r2, r2, r3
 8004444:	2308      	movs	r3, #8
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	429a      	cmp	r2, r3
 800444a:	d91f      	bls.n	800448c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800444c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4413      	add	r3, r2
 8004452:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	f003 0307 	and.w	r3, r3, #7
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00a      	beq.n	8004474 <pvPortMalloc+0xf8>
	__asm volatile
 800445e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004462:	f383 8811 	msr	BASEPRI, r3
 8004466:	f3bf 8f6f 	isb	sy
 800446a:	f3bf 8f4f 	dsb	sy
 800446e:	613b      	str	r3, [r7, #16]
}
 8004470:	bf00      	nop
 8004472:	e7fe      	b.n	8004472 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	685a      	ldr	r2, [r3, #4]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	1ad2      	subs	r2, r2, r3
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004486:	69b8      	ldr	r0, [r7, #24]
 8004488:	f000 f8f8 	bl	800467c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800448c:	4b1a      	ldr	r3, [pc, #104]	; (80044f8 <pvPortMalloc+0x17c>)
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	4a18      	ldr	r2, [pc, #96]	; (80044f8 <pvPortMalloc+0x17c>)
 8004498:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800449a:	4b17      	ldr	r3, [pc, #92]	; (80044f8 <pvPortMalloc+0x17c>)
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	4b18      	ldr	r3, [pc, #96]	; (8004500 <pvPortMalloc+0x184>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d203      	bcs.n	80044ae <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80044a6:	4b14      	ldr	r3, [pc, #80]	; (80044f8 <pvPortMalloc+0x17c>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a15      	ldr	r2, [pc, #84]	; (8004500 <pvPortMalloc+0x184>)
 80044ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	685a      	ldr	r2, [r3, #4]
 80044b2:	4b10      	ldr	r3, [pc, #64]	; (80044f4 <pvPortMalloc+0x178>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	431a      	orrs	r2, r3
 80044b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80044bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044be:	2200      	movs	r2, #0
 80044c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80044c2:	f7ff f8b9 	bl	8003638 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	f003 0307 	and.w	r3, r3, #7
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00a      	beq.n	80044e6 <pvPortMalloc+0x16a>
	__asm volatile
 80044d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d4:	f383 8811 	msr	BASEPRI, r3
 80044d8:	f3bf 8f6f 	isb	sy
 80044dc:	f3bf 8f4f 	dsb	sy
 80044e0:	60fb      	str	r3, [r7, #12]
}
 80044e2:	bf00      	nop
 80044e4:	e7fe      	b.n	80044e4 <pvPortMalloc+0x168>
	return pvReturn;
 80044e6:	69fb      	ldr	r3, [r7, #28]
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3728      	adds	r7, #40	; 0x28
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	20001104 	.word	0x20001104
 80044f4:	20001110 	.word	0x20001110
 80044f8:	20001108 	.word	0x20001108
 80044fc:	200010fc 	.word	0x200010fc
 8004500:	2000110c 	.word	0x2000110c

08004504 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d048      	beq.n	80045a8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004516:	2308      	movs	r3, #8
 8004518:	425b      	negs	r3, r3
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	4413      	add	r3, r2
 800451e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	4b21      	ldr	r3, [pc, #132]	; (80045b0 <vPortFree+0xac>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4013      	ands	r3, r2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10a      	bne.n	8004548 <vPortFree+0x44>
	__asm volatile
 8004532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004536:	f383 8811 	msr	BASEPRI, r3
 800453a:	f3bf 8f6f 	isb	sy
 800453e:	f3bf 8f4f 	dsb	sy
 8004542:	60fb      	str	r3, [r7, #12]
}
 8004544:	bf00      	nop
 8004546:	e7fe      	b.n	8004546 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00a      	beq.n	8004566 <vPortFree+0x62>
	__asm volatile
 8004550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004554:	f383 8811 	msr	BASEPRI, r3
 8004558:	f3bf 8f6f 	isb	sy
 800455c:	f3bf 8f4f 	dsb	sy
 8004560:	60bb      	str	r3, [r7, #8]
}
 8004562:	bf00      	nop
 8004564:	e7fe      	b.n	8004564 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	4b11      	ldr	r3, [pc, #68]	; (80045b0 <vPortFree+0xac>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4013      	ands	r3, r2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d019      	beq.n	80045a8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d115      	bne.n	80045a8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	4b0b      	ldr	r3, [pc, #44]	; (80045b0 <vPortFree+0xac>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	43db      	mvns	r3, r3
 8004586:	401a      	ands	r2, r3
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800458c:	f7ff f846 	bl	800361c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	4b07      	ldr	r3, [pc, #28]	; (80045b4 <vPortFree+0xb0>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4413      	add	r3, r2
 800459a:	4a06      	ldr	r2, [pc, #24]	; (80045b4 <vPortFree+0xb0>)
 800459c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800459e:	6938      	ldr	r0, [r7, #16]
 80045a0:	f000 f86c 	bl	800467c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80045a4:	f7ff f848 	bl	8003638 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80045a8:	bf00      	nop
 80045aa:	3718      	adds	r7, #24
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	20001110 	.word	0x20001110
 80045b4:	20001108 	.word	0x20001108

080045b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80045be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80045c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80045c4:	4b27      	ldr	r3, [pc, #156]	; (8004664 <prvHeapInit+0xac>)
 80045c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f003 0307 	and.w	r3, r3, #7
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00c      	beq.n	80045ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	3307      	adds	r3, #7
 80045d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f023 0307 	bic.w	r3, r3, #7
 80045de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	4a1f      	ldr	r2, [pc, #124]	; (8004664 <prvHeapInit+0xac>)
 80045e8:	4413      	add	r3, r2
 80045ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80045f0:	4a1d      	ldr	r2, [pc, #116]	; (8004668 <prvHeapInit+0xb0>)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80045f6:	4b1c      	ldr	r3, [pc, #112]	; (8004668 <prvHeapInit+0xb0>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	4413      	add	r3, r2
 8004602:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004604:	2208      	movs	r2, #8
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	1a9b      	subs	r3, r3, r2
 800460a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f023 0307 	bic.w	r3, r3, #7
 8004612:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	4a15      	ldr	r2, [pc, #84]	; (800466c <prvHeapInit+0xb4>)
 8004618:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800461a:	4b14      	ldr	r3, [pc, #80]	; (800466c <prvHeapInit+0xb4>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2200      	movs	r2, #0
 8004620:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004622:	4b12      	ldr	r3, [pc, #72]	; (800466c <prvHeapInit+0xb4>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2200      	movs	r2, #0
 8004628:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	1ad2      	subs	r2, r2, r3
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004638:	4b0c      	ldr	r3, [pc, #48]	; (800466c <prvHeapInit+0xb4>)
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	4a0a      	ldr	r2, [pc, #40]	; (8004670 <prvHeapInit+0xb8>)
 8004646:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	4a09      	ldr	r2, [pc, #36]	; (8004674 <prvHeapInit+0xbc>)
 800464e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004650:	4b09      	ldr	r3, [pc, #36]	; (8004678 <prvHeapInit+0xc0>)
 8004652:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004656:	601a      	str	r2, [r3, #0]
}
 8004658:	bf00      	nop
 800465a:	3714      	adds	r7, #20
 800465c:	46bd      	mov	sp, r7
 800465e:	bc80      	pop	{r7}
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	200004fc 	.word	0x200004fc
 8004668:	200010fc 	.word	0x200010fc
 800466c:	20001104 	.word	0x20001104
 8004670:	2000110c 	.word	0x2000110c
 8004674:	20001108 	.word	0x20001108
 8004678:	20001110 	.word	0x20001110

0800467c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004684:	4b27      	ldr	r3, [pc, #156]	; (8004724 <prvInsertBlockIntoFreeList+0xa8>)
 8004686:	60fb      	str	r3, [r7, #12]
 8004688:	e002      	b.n	8004690 <prvInsertBlockIntoFreeList+0x14>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	60fb      	str	r3, [r7, #12]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	429a      	cmp	r2, r3
 8004698:	d8f7      	bhi.n	800468a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	4413      	add	r3, r2
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d108      	bne.n	80046be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	685a      	ldr	r2, [r3, #4]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	441a      	add	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	68ba      	ldr	r2, [r7, #8]
 80046c8:	441a      	add	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d118      	bne.n	8004704 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	4b14      	ldr	r3, [pc, #80]	; (8004728 <prvInsertBlockIntoFreeList+0xac>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d00d      	beq.n	80046fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	441a      	add	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	601a      	str	r2, [r3, #0]
 80046f8:	e008      	b.n	800470c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80046fa:	4b0b      	ldr	r3, [pc, #44]	; (8004728 <prvInsertBlockIntoFreeList+0xac>)
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	601a      	str	r2, [r3, #0]
 8004702:	e003      	b.n	800470c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	429a      	cmp	r2, r3
 8004712:	d002      	beq.n	800471a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800471a:	bf00      	nop
 800471c:	3714      	adds	r7, #20
 800471e:	46bd      	mov	sp, r7
 8004720:	bc80      	pop	{r7}
 8004722:	4770      	bx	lr
 8004724:	200010fc 	.word	0x200010fc
 8004728:	20001104 	.word	0x20001104

0800472c <siprintf>:
 800472c:	b40e      	push	{r1, r2, r3}
 800472e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004732:	b500      	push	{lr}
 8004734:	b09c      	sub	sp, #112	; 0x70
 8004736:	ab1d      	add	r3, sp, #116	; 0x74
 8004738:	9002      	str	r0, [sp, #8]
 800473a:	9006      	str	r0, [sp, #24]
 800473c:	9107      	str	r1, [sp, #28]
 800473e:	9104      	str	r1, [sp, #16]
 8004740:	4808      	ldr	r0, [pc, #32]	; (8004764 <siprintf+0x38>)
 8004742:	4909      	ldr	r1, [pc, #36]	; (8004768 <siprintf+0x3c>)
 8004744:	f853 2b04 	ldr.w	r2, [r3], #4
 8004748:	9105      	str	r1, [sp, #20]
 800474a:	6800      	ldr	r0, [r0, #0]
 800474c:	a902      	add	r1, sp, #8
 800474e:	9301      	str	r3, [sp, #4]
 8004750:	f000 f9f2 	bl	8004b38 <_svfiprintf_r>
 8004754:	2200      	movs	r2, #0
 8004756:	9b02      	ldr	r3, [sp, #8]
 8004758:	701a      	strb	r2, [r3, #0]
 800475a:	b01c      	add	sp, #112	; 0x70
 800475c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004760:	b003      	add	sp, #12
 8004762:	4770      	bx	lr
 8004764:	2000005c 	.word	0x2000005c
 8004768:	ffff0208 	.word	0xffff0208

0800476c <memset>:
 800476c:	4603      	mov	r3, r0
 800476e:	4402      	add	r2, r0
 8004770:	4293      	cmp	r3, r2
 8004772:	d100      	bne.n	8004776 <memset+0xa>
 8004774:	4770      	bx	lr
 8004776:	f803 1b01 	strb.w	r1, [r3], #1
 800477a:	e7f9      	b.n	8004770 <memset+0x4>

0800477c <_reclaim_reent>:
 800477c:	4b29      	ldr	r3, [pc, #164]	; (8004824 <_reclaim_reent+0xa8>)
 800477e:	b570      	push	{r4, r5, r6, lr}
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4604      	mov	r4, r0
 8004784:	4283      	cmp	r3, r0
 8004786:	d04b      	beq.n	8004820 <_reclaim_reent+0xa4>
 8004788:	69c3      	ldr	r3, [r0, #28]
 800478a:	b143      	cbz	r3, 800479e <_reclaim_reent+0x22>
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d144      	bne.n	800481c <_reclaim_reent+0xa0>
 8004792:	69e3      	ldr	r3, [r4, #28]
 8004794:	6819      	ldr	r1, [r3, #0]
 8004796:	b111      	cbz	r1, 800479e <_reclaim_reent+0x22>
 8004798:	4620      	mov	r0, r4
 800479a:	f000 f87f 	bl	800489c <_free_r>
 800479e:	6961      	ldr	r1, [r4, #20]
 80047a0:	b111      	cbz	r1, 80047a8 <_reclaim_reent+0x2c>
 80047a2:	4620      	mov	r0, r4
 80047a4:	f000 f87a 	bl	800489c <_free_r>
 80047a8:	69e1      	ldr	r1, [r4, #28]
 80047aa:	b111      	cbz	r1, 80047b2 <_reclaim_reent+0x36>
 80047ac:	4620      	mov	r0, r4
 80047ae:	f000 f875 	bl	800489c <_free_r>
 80047b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80047b4:	b111      	cbz	r1, 80047bc <_reclaim_reent+0x40>
 80047b6:	4620      	mov	r0, r4
 80047b8:	f000 f870 	bl	800489c <_free_r>
 80047bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047be:	b111      	cbz	r1, 80047c6 <_reclaim_reent+0x4a>
 80047c0:	4620      	mov	r0, r4
 80047c2:	f000 f86b 	bl	800489c <_free_r>
 80047c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80047c8:	b111      	cbz	r1, 80047d0 <_reclaim_reent+0x54>
 80047ca:	4620      	mov	r0, r4
 80047cc:	f000 f866 	bl	800489c <_free_r>
 80047d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80047d2:	b111      	cbz	r1, 80047da <_reclaim_reent+0x5e>
 80047d4:	4620      	mov	r0, r4
 80047d6:	f000 f861 	bl	800489c <_free_r>
 80047da:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80047dc:	b111      	cbz	r1, 80047e4 <_reclaim_reent+0x68>
 80047de:	4620      	mov	r0, r4
 80047e0:	f000 f85c 	bl	800489c <_free_r>
 80047e4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80047e6:	b111      	cbz	r1, 80047ee <_reclaim_reent+0x72>
 80047e8:	4620      	mov	r0, r4
 80047ea:	f000 f857 	bl	800489c <_free_r>
 80047ee:	6a23      	ldr	r3, [r4, #32]
 80047f0:	b1b3      	cbz	r3, 8004820 <_reclaim_reent+0xa4>
 80047f2:	4620      	mov	r0, r4
 80047f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80047f8:	4718      	bx	r3
 80047fa:	5949      	ldr	r1, [r1, r5]
 80047fc:	b941      	cbnz	r1, 8004810 <_reclaim_reent+0x94>
 80047fe:	3504      	adds	r5, #4
 8004800:	69e3      	ldr	r3, [r4, #28]
 8004802:	2d80      	cmp	r5, #128	; 0x80
 8004804:	68d9      	ldr	r1, [r3, #12]
 8004806:	d1f8      	bne.n	80047fa <_reclaim_reent+0x7e>
 8004808:	4620      	mov	r0, r4
 800480a:	f000 f847 	bl	800489c <_free_r>
 800480e:	e7c0      	b.n	8004792 <_reclaim_reent+0x16>
 8004810:	680e      	ldr	r6, [r1, #0]
 8004812:	4620      	mov	r0, r4
 8004814:	f000 f842 	bl	800489c <_free_r>
 8004818:	4631      	mov	r1, r6
 800481a:	e7ef      	b.n	80047fc <_reclaim_reent+0x80>
 800481c:	2500      	movs	r5, #0
 800481e:	e7ef      	b.n	8004800 <_reclaim_reent+0x84>
 8004820:	bd70      	pop	{r4, r5, r6, pc}
 8004822:	bf00      	nop
 8004824:	2000005c 	.word	0x2000005c

08004828 <__errno>:
 8004828:	4b01      	ldr	r3, [pc, #4]	; (8004830 <__errno+0x8>)
 800482a:	6818      	ldr	r0, [r3, #0]
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	2000005c 	.word	0x2000005c

08004834 <__libc_init_array>:
 8004834:	b570      	push	{r4, r5, r6, lr}
 8004836:	2600      	movs	r6, #0
 8004838:	4d0c      	ldr	r5, [pc, #48]	; (800486c <__libc_init_array+0x38>)
 800483a:	4c0d      	ldr	r4, [pc, #52]	; (8004870 <__libc_init_array+0x3c>)
 800483c:	1b64      	subs	r4, r4, r5
 800483e:	10a4      	asrs	r4, r4, #2
 8004840:	42a6      	cmp	r6, r4
 8004842:	d109      	bne.n	8004858 <__libc_init_array+0x24>
 8004844:	f000 fc7a 	bl	800513c <_init>
 8004848:	2600      	movs	r6, #0
 800484a:	4d0a      	ldr	r5, [pc, #40]	; (8004874 <__libc_init_array+0x40>)
 800484c:	4c0a      	ldr	r4, [pc, #40]	; (8004878 <__libc_init_array+0x44>)
 800484e:	1b64      	subs	r4, r4, r5
 8004850:	10a4      	asrs	r4, r4, #2
 8004852:	42a6      	cmp	r6, r4
 8004854:	d105      	bne.n	8004862 <__libc_init_array+0x2e>
 8004856:	bd70      	pop	{r4, r5, r6, pc}
 8004858:	f855 3b04 	ldr.w	r3, [r5], #4
 800485c:	4798      	blx	r3
 800485e:	3601      	adds	r6, #1
 8004860:	e7ee      	b.n	8004840 <__libc_init_array+0xc>
 8004862:	f855 3b04 	ldr.w	r3, [r5], #4
 8004866:	4798      	blx	r3
 8004868:	3601      	adds	r6, #1
 800486a:	e7f2      	b.n	8004852 <__libc_init_array+0x1e>
 800486c:	08005238 	.word	0x08005238
 8004870:	08005238 	.word	0x08005238
 8004874:	08005238 	.word	0x08005238
 8004878:	0800523c 	.word	0x0800523c

0800487c <__retarget_lock_acquire_recursive>:
 800487c:	4770      	bx	lr

0800487e <__retarget_lock_release_recursive>:
 800487e:	4770      	bx	lr

08004880 <memcpy>:
 8004880:	440a      	add	r2, r1
 8004882:	4291      	cmp	r1, r2
 8004884:	f100 33ff 	add.w	r3, r0, #4294967295
 8004888:	d100      	bne.n	800488c <memcpy+0xc>
 800488a:	4770      	bx	lr
 800488c:	b510      	push	{r4, lr}
 800488e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004892:	4291      	cmp	r1, r2
 8004894:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004898:	d1f9      	bne.n	800488e <memcpy+0xe>
 800489a:	bd10      	pop	{r4, pc}

0800489c <_free_r>:
 800489c:	b538      	push	{r3, r4, r5, lr}
 800489e:	4605      	mov	r5, r0
 80048a0:	2900      	cmp	r1, #0
 80048a2:	d040      	beq.n	8004926 <_free_r+0x8a>
 80048a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048a8:	1f0c      	subs	r4, r1, #4
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	bfb8      	it	lt
 80048ae:	18e4      	addlt	r4, r4, r3
 80048b0:	f000 f8dc 	bl	8004a6c <__malloc_lock>
 80048b4:	4a1c      	ldr	r2, [pc, #112]	; (8004928 <_free_r+0x8c>)
 80048b6:	6813      	ldr	r3, [r2, #0]
 80048b8:	b933      	cbnz	r3, 80048c8 <_free_r+0x2c>
 80048ba:	6063      	str	r3, [r4, #4]
 80048bc:	6014      	str	r4, [r2, #0]
 80048be:	4628      	mov	r0, r5
 80048c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048c4:	f000 b8d8 	b.w	8004a78 <__malloc_unlock>
 80048c8:	42a3      	cmp	r3, r4
 80048ca:	d908      	bls.n	80048de <_free_r+0x42>
 80048cc:	6820      	ldr	r0, [r4, #0]
 80048ce:	1821      	adds	r1, r4, r0
 80048d0:	428b      	cmp	r3, r1
 80048d2:	bf01      	itttt	eq
 80048d4:	6819      	ldreq	r1, [r3, #0]
 80048d6:	685b      	ldreq	r3, [r3, #4]
 80048d8:	1809      	addeq	r1, r1, r0
 80048da:	6021      	streq	r1, [r4, #0]
 80048dc:	e7ed      	b.n	80048ba <_free_r+0x1e>
 80048de:	461a      	mov	r2, r3
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	b10b      	cbz	r3, 80048e8 <_free_r+0x4c>
 80048e4:	42a3      	cmp	r3, r4
 80048e6:	d9fa      	bls.n	80048de <_free_r+0x42>
 80048e8:	6811      	ldr	r1, [r2, #0]
 80048ea:	1850      	adds	r0, r2, r1
 80048ec:	42a0      	cmp	r0, r4
 80048ee:	d10b      	bne.n	8004908 <_free_r+0x6c>
 80048f0:	6820      	ldr	r0, [r4, #0]
 80048f2:	4401      	add	r1, r0
 80048f4:	1850      	adds	r0, r2, r1
 80048f6:	4283      	cmp	r3, r0
 80048f8:	6011      	str	r1, [r2, #0]
 80048fa:	d1e0      	bne.n	80048be <_free_r+0x22>
 80048fc:	6818      	ldr	r0, [r3, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	4408      	add	r0, r1
 8004902:	6010      	str	r0, [r2, #0]
 8004904:	6053      	str	r3, [r2, #4]
 8004906:	e7da      	b.n	80048be <_free_r+0x22>
 8004908:	d902      	bls.n	8004910 <_free_r+0x74>
 800490a:	230c      	movs	r3, #12
 800490c:	602b      	str	r3, [r5, #0]
 800490e:	e7d6      	b.n	80048be <_free_r+0x22>
 8004910:	6820      	ldr	r0, [r4, #0]
 8004912:	1821      	adds	r1, r4, r0
 8004914:	428b      	cmp	r3, r1
 8004916:	bf01      	itttt	eq
 8004918:	6819      	ldreq	r1, [r3, #0]
 800491a:	685b      	ldreq	r3, [r3, #4]
 800491c:	1809      	addeq	r1, r1, r0
 800491e:	6021      	streq	r1, [r4, #0]
 8004920:	6063      	str	r3, [r4, #4]
 8004922:	6054      	str	r4, [r2, #4]
 8004924:	e7cb      	b.n	80048be <_free_r+0x22>
 8004926:	bd38      	pop	{r3, r4, r5, pc}
 8004928:	20001254 	.word	0x20001254

0800492c <sbrk_aligned>:
 800492c:	b570      	push	{r4, r5, r6, lr}
 800492e:	4e0e      	ldr	r6, [pc, #56]	; (8004968 <sbrk_aligned+0x3c>)
 8004930:	460c      	mov	r4, r1
 8004932:	6831      	ldr	r1, [r6, #0]
 8004934:	4605      	mov	r5, r0
 8004936:	b911      	cbnz	r1, 800493e <sbrk_aligned+0x12>
 8004938:	f000 fbaa 	bl	8005090 <_sbrk_r>
 800493c:	6030      	str	r0, [r6, #0]
 800493e:	4621      	mov	r1, r4
 8004940:	4628      	mov	r0, r5
 8004942:	f000 fba5 	bl	8005090 <_sbrk_r>
 8004946:	1c43      	adds	r3, r0, #1
 8004948:	d00a      	beq.n	8004960 <sbrk_aligned+0x34>
 800494a:	1cc4      	adds	r4, r0, #3
 800494c:	f024 0403 	bic.w	r4, r4, #3
 8004950:	42a0      	cmp	r0, r4
 8004952:	d007      	beq.n	8004964 <sbrk_aligned+0x38>
 8004954:	1a21      	subs	r1, r4, r0
 8004956:	4628      	mov	r0, r5
 8004958:	f000 fb9a 	bl	8005090 <_sbrk_r>
 800495c:	3001      	adds	r0, #1
 800495e:	d101      	bne.n	8004964 <sbrk_aligned+0x38>
 8004960:	f04f 34ff 	mov.w	r4, #4294967295
 8004964:	4620      	mov	r0, r4
 8004966:	bd70      	pop	{r4, r5, r6, pc}
 8004968:	20001258 	.word	0x20001258

0800496c <_malloc_r>:
 800496c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004970:	1ccd      	adds	r5, r1, #3
 8004972:	f025 0503 	bic.w	r5, r5, #3
 8004976:	3508      	adds	r5, #8
 8004978:	2d0c      	cmp	r5, #12
 800497a:	bf38      	it	cc
 800497c:	250c      	movcc	r5, #12
 800497e:	2d00      	cmp	r5, #0
 8004980:	4607      	mov	r7, r0
 8004982:	db01      	blt.n	8004988 <_malloc_r+0x1c>
 8004984:	42a9      	cmp	r1, r5
 8004986:	d905      	bls.n	8004994 <_malloc_r+0x28>
 8004988:	230c      	movs	r3, #12
 800498a:	2600      	movs	r6, #0
 800498c:	603b      	str	r3, [r7, #0]
 800498e:	4630      	mov	r0, r6
 8004990:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004994:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004a68 <_malloc_r+0xfc>
 8004998:	f000 f868 	bl	8004a6c <__malloc_lock>
 800499c:	f8d8 3000 	ldr.w	r3, [r8]
 80049a0:	461c      	mov	r4, r3
 80049a2:	bb5c      	cbnz	r4, 80049fc <_malloc_r+0x90>
 80049a4:	4629      	mov	r1, r5
 80049a6:	4638      	mov	r0, r7
 80049a8:	f7ff ffc0 	bl	800492c <sbrk_aligned>
 80049ac:	1c43      	adds	r3, r0, #1
 80049ae:	4604      	mov	r4, r0
 80049b0:	d155      	bne.n	8004a5e <_malloc_r+0xf2>
 80049b2:	f8d8 4000 	ldr.w	r4, [r8]
 80049b6:	4626      	mov	r6, r4
 80049b8:	2e00      	cmp	r6, #0
 80049ba:	d145      	bne.n	8004a48 <_malloc_r+0xdc>
 80049bc:	2c00      	cmp	r4, #0
 80049be:	d048      	beq.n	8004a52 <_malloc_r+0xe6>
 80049c0:	6823      	ldr	r3, [r4, #0]
 80049c2:	4631      	mov	r1, r6
 80049c4:	4638      	mov	r0, r7
 80049c6:	eb04 0903 	add.w	r9, r4, r3
 80049ca:	f000 fb61 	bl	8005090 <_sbrk_r>
 80049ce:	4581      	cmp	r9, r0
 80049d0:	d13f      	bne.n	8004a52 <_malloc_r+0xe6>
 80049d2:	6821      	ldr	r1, [r4, #0]
 80049d4:	4638      	mov	r0, r7
 80049d6:	1a6d      	subs	r5, r5, r1
 80049d8:	4629      	mov	r1, r5
 80049da:	f7ff ffa7 	bl	800492c <sbrk_aligned>
 80049de:	3001      	adds	r0, #1
 80049e0:	d037      	beq.n	8004a52 <_malloc_r+0xe6>
 80049e2:	6823      	ldr	r3, [r4, #0]
 80049e4:	442b      	add	r3, r5
 80049e6:	6023      	str	r3, [r4, #0]
 80049e8:	f8d8 3000 	ldr.w	r3, [r8]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d038      	beq.n	8004a62 <_malloc_r+0xf6>
 80049f0:	685a      	ldr	r2, [r3, #4]
 80049f2:	42a2      	cmp	r2, r4
 80049f4:	d12b      	bne.n	8004a4e <_malloc_r+0xe2>
 80049f6:	2200      	movs	r2, #0
 80049f8:	605a      	str	r2, [r3, #4]
 80049fa:	e00f      	b.n	8004a1c <_malloc_r+0xb0>
 80049fc:	6822      	ldr	r2, [r4, #0]
 80049fe:	1b52      	subs	r2, r2, r5
 8004a00:	d41f      	bmi.n	8004a42 <_malloc_r+0xd6>
 8004a02:	2a0b      	cmp	r2, #11
 8004a04:	d917      	bls.n	8004a36 <_malloc_r+0xca>
 8004a06:	1961      	adds	r1, r4, r5
 8004a08:	42a3      	cmp	r3, r4
 8004a0a:	6025      	str	r5, [r4, #0]
 8004a0c:	bf18      	it	ne
 8004a0e:	6059      	strne	r1, [r3, #4]
 8004a10:	6863      	ldr	r3, [r4, #4]
 8004a12:	bf08      	it	eq
 8004a14:	f8c8 1000 	streq.w	r1, [r8]
 8004a18:	5162      	str	r2, [r4, r5]
 8004a1a:	604b      	str	r3, [r1, #4]
 8004a1c:	4638      	mov	r0, r7
 8004a1e:	f104 060b 	add.w	r6, r4, #11
 8004a22:	f000 f829 	bl	8004a78 <__malloc_unlock>
 8004a26:	f026 0607 	bic.w	r6, r6, #7
 8004a2a:	1d23      	adds	r3, r4, #4
 8004a2c:	1af2      	subs	r2, r6, r3
 8004a2e:	d0ae      	beq.n	800498e <_malloc_r+0x22>
 8004a30:	1b9b      	subs	r3, r3, r6
 8004a32:	50a3      	str	r3, [r4, r2]
 8004a34:	e7ab      	b.n	800498e <_malloc_r+0x22>
 8004a36:	42a3      	cmp	r3, r4
 8004a38:	6862      	ldr	r2, [r4, #4]
 8004a3a:	d1dd      	bne.n	80049f8 <_malloc_r+0x8c>
 8004a3c:	f8c8 2000 	str.w	r2, [r8]
 8004a40:	e7ec      	b.n	8004a1c <_malloc_r+0xb0>
 8004a42:	4623      	mov	r3, r4
 8004a44:	6864      	ldr	r4, [r4, #4]
 8004a46:	e7ac      	b.n	80049a2 <_malloc_r+0x36>
 8004a48:	4634      	mov	r4, r6
 8004a4a:	6876      	ldr	r6, [r6, #4]
 8004a4c:	e7b4      	b.n	80049b8 <_malloc_r+0x4c>
 8004a4e:	4613      	mov	r3, r2
 8004a50:	e7cc      	b.n	80049ec <_malloc_r+0x80>
 8004a52:	230c      	movs	r3, #12
 8004a54:	4638      	mov	r0, r7
 8004a56:	603b      	str	r3, [r7, #0]
 8004a58:	f000 f80e 	bl	8004a78 <__malloc_unlock>
 8004a5c:	e797      	b.n	800498e <_malloc_r+0x22>
 8004a5e:	6025      	str	r5, [r4, #0]
 8004a60:	e7dc      	b.n	8004a1c <_malloc_r+0xb0>
 8004a62:	605b      	str	r3, [r3, #4]
 8004a64:	deff      	udf	#255	; 0xff
 8004a66:	bf00      	nop
 8004a68:	20001254 	.word	0x20001254

08004a6c <__malloc_lock>:
 8004a6c:	4801      	ldr	r0, [pc, #4]	; (8004a74 <__malloc_lock+0x8>)
 8004a6e:	f7ff bf05 	b.w	800487c <__retarget_lock_acquire_recursive>
 8004a72:	bf00      	nop
 8004a74:	20001250 	.word	0x20001250

08004a78 <__malloc_unlock>:
 8004a78:	4801      	ldr	r0, [pc, #4]	; (8004a80 <__malloc_unlock+0x8>)
 8004a7a:	f7ff bf00 	b.w	800487e <__retarget_lock_release_recursive>
 8004a7e:	bf00      	nop
 8004a80:	20001250 	.word	0x20001250

08004a84 <__ssputs_r>:
 8004a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a88:	461f      	mov	r7, r3
 8004a8a:	688e      	ldr	r6, [r1, #8]
 8004a8c:	4682      	mov	sl, r0
 8004a8e:	42be      	cmp	r6, r7
 8004a90:	460c      	mov	r4, r1
 8004a92:	4690      	mov	r8, r2
 8004a94:	680b      	ldr	r3, [r1, #0]
 8004a96:	d82c      	bhi.n	8004af2 <__ssputs_r+0x6e>
 8004a98:	898a      	ldrh	r2, [r1, #12]
 8004a9a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a9e:	d026      	beq.n	8004aee <__ssputs_r+0x6a>
 8004aa0:	6965      	ldr	r5, [r4, #20]
 8004aa2:	6909      	ldr	r1, [r1, #16]
 8004aa4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004aa8:	eba3 0901 	sub.w	r9, r3, r1
 8004aac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ab0:	1c7b      	adds	r3, r7, #1
 8004ab2:	444b      	add	r3, r9
 8004ab4:	106d      	asrs	r5, r5, #1
 8004ab6:	429d      	cmp	r5, r3
 8004ab8:	bf38      	it	cc
 8004aba:	461d      	movcc	r5, r3
 8004abc:	0553      	lsls	r3, r2, #21
 8004abe:	d527      	bpl.n	8004b10 <__ssputs_r+0x8c>
 8004ac0:	4629      	mov	r1, r5
 8004ac2:	f7ff ff53 	bl	800496c <_malloc_r>
 8004ac6:	4606      	mov	r6, r0
 8004ac8:	b360      	cbz	r0, 8004b24 <__ssputs_r+0xa0>
 8004aca:	464a      	mov	r2, r9
 8004acc:	6921      	ldr	r1, [r4, #16]
 8004ace:	f7ff fed7 	bl	8004880 <memcpy>
 8004ad2:	89a3      	ldrh	r3, [r4, #12]
 8004ad4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004adc:	81a3      	strh	r3, [r4, #12]
 8004ade:	6126      	str	r6, [r4, #16]
 8004ae0:	444e      	add	r6, r9
 8004ae2:	6026      	str	r6, [r4, #0]
 8004ae4:	463e      	mov	r6, r7
 8004ae6:	6165      	str	r5, [r4, #20]
 8004ae8:	eba5 0509 	sub.w	r5, r5, r9
 8004aec:	60a5      	str	r5, [r4, #8]
 8004aee:	42be      	cmp	r6, r7
 8004af0:	d900      	bls.n	8004af4 <__ssputs_r+0x70>
 8004af2:	463e      	mov	r6, r7
 8004af4:	4632      	mov	r2, r6
 8004af6:	4641      	mov	r1, r8
 8004af8:	6820      	ldr	r0, [r4, #0]
 8004afa:	f000 faaf 	bl	800505c <memmove>
 8004afe:	2000      	movs	r0, #0
 8004b00:	68a3      	ldr	r3, [r4, #8]
 8004b02:	1b9b      	subs	r3, r3, r6
 8004b04:	60a3      	str	r3, [r4, #8]
 8004b06:	6823      	ldr	r3, [r4, #0]
 8004b08:	4433      	add	r3, r6
 8004b0a:	6023      	str	r3, [r4, #0]
 8004b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b10:	462a      	mov	r2, r5
 8004b12:	f000 fadb 	bl	80050cc <_realloc_r>
 8004b16:	4606      	mov	r6, r0
 8004b18:	2800      	cmp	r0, #0
 8004b1a:	d1e0      	bne.n	8004ade <__ssputs_r+0x5a>
 8004b1c:	4650      	mov	r0, sl
 8004b1e:	6921      	ldr	r1, [r4, #16]
 8004b20:	f7ff febc 	bl	800489c <_free_r>
 8004b24:	230c      	movs	r3, #12
 8004b26:	f8ca 3000 	str.w	r3, [sl]
 8004b2a:	89a3      	ldrh	r3, [r4, #12]
 8004b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b34:	81a3      	strh	r3, [r4, #12]
 8004b36:	e7e9      	b.n	8004b0c <__ssputs_r+0x88>

08004b38 <_svfiprintf_r>:
 8004b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b3c:	4698      	mov	r8, r3
 8004b3e:	898b      	ldrh	r3, [r1, #12]
 8004b40:	4607      	mov	r7, r0
 8004b42:	061b      	lsls	r3, r3, #24
 8004b44:	460d      	mov	r5, r1
 8004b46:	4614      	mov	r4, r2
 8004b48:	b09d      	sub	sp, #116	; 0x74
 8004b4a:	d50e      	bpl.n	8004b6a <_svfiprintf_r+0x32>
 8004b4c:	690b      	ldr	r3, [r1, #16]
 8004b4e:	b963      	cbnz	r3, 8004b6a <_svfiprintf_r+0x32>
 8004b50:	2140      	movs	r1, #64	; 0x40
 8004b52:	f7ff ff0b 	bl	800496c <_malloc_r>
 8004b56:	6028      	str	r0, [r5, #0]
 8004b58:	6128      	str	r0, [r5, #16]
 8004b5a:	b920      	cbnz	r0, 8004b66 <_svfiprintf_r+0x2e>
 8004b5c:	230c      	movs	r3, #12
 8004b5e:	603b      	str	r3, [r7, #0]
 8004b60:	f04f 30ff 	mov.w	r0, #4294967295
 8004b64:	e0d0      	b.n	8004d08 <_svfiprintf_r+0x1d0>
 8004b66:	2340      	movs	r3, #64	; 0x40
 8004b68:	616b      	str	r3, [r5, #20]
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	9309      	str	r3, [sp, #36]	; 0x24
 8004b6e:	2320      	movs	r3, #32
 8004b70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b74:	2330      	movs	r3, #48	; 0x30
 8004b76:	f04f 0901 	mov.w	r9, #1
 8004b7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b7e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8004d20 <_svfiprintf_r+0x1e8>
 8004b82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b86:	4623      	mov	r3, r4
 8004b88:	469a      	mov	sl, r3
 8004b8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b8e:	b10a      	cbz	r2, 8004b94 <_svfiprintf_r+0x5c>
 8004b90:	2a25      	cmp	r2, #37	; 0x25
 8004b92:	d1f9      	bne.n	8004b88 <_svfiprintf_r+0x50>
 8004b94:	ebba 0b04 	subs.w	fp, sl, r4
 8004b98:	d00b      	beq.n	8004bb2 <_svfiprintf_r+0x7a>
 8004b9a:	465b      	mov	r3, fp
 8004b9c:	4622      	mov	r2, r4
 8004b9e:	4629      	mov	r1, r5
 8004ba0:	4638      	mov	r0, r7
 8004ba2:	f7ff ff6f 	bl	8004a84 <__ssputs_r>
 8004ba6:	3001      	adds	r0, #1
 8004ba8:	f000 80a9 	beq.w	8004cfe <_svfiprintf_r+0x1c6>
 8004bac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004bae:	445a      	add	r2, fp
 8004bb0:	9209      	str	r2, [sp, #36]	; 0x24
 8004bb2:	f89a 3000 	ldrb.w	r3, [sl]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f000 80a1 	beq.w	8004cfe <_svfiprintf_r+0x1c6>
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8004bc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bc6:	f10a 0a01 	add.w	sl, sl, #1
 8004bca:	9304      	str	r3, [sp, #16]
 8004bcc:	9307      	str	r3, [sp, #28]
 8004bce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004bd2:	931a      	str	r3, [sp, #104]	; 0x68
 8004bd4:	4654      	mov	r4, sl
 8004bd6:	2205      	movs	r2, #5
 8004bd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bdc:	4850      	ldr	r0, [pc, #320]	; (8004d20 <_svfiprintf_r+0x1e8>)
 8004bde:	f000 fa67 	bl	80050b0 <memchr>
 8004be2:	9a04      	ldr	r2, [sp, #16]
 8004be4:	b9d8      	cbnz	r0, 8004c1e <_svfiprintf_r+0xe6>
 8004be6:	06d0      	lsls	r0, r2, #27
 8004be8:	bf44      	itt	mi
 8004bea:	2320      	movmi	r3, #32
 8004bec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bf0:	0711      	lsls	r1, r2, #28
 8004bf2:	bf44      	itt	mi
 8004bf4:	232b      	movmi	r3, #43	; 0x2b
 8004bf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bfa:	f89a 3000 	ldrb.w	r3, [sl]
 8004bfe:	2b2a      	cmp	r3, #42	; 0x2a
 8004c00:	d015      	beq.n	8004c2e <_svfiprintf_r+0xf6>
 8004c02:	4654      	mov	r4, sl
 8004c04:	2000      	movs	r0, #0
 8004c06:	f04f 0c0a 	mov.w	ip, #10
 8004c0a:	9a07      	ldr	r2, [sp, #28]
 8004c0c:	4621      	mov	r1, r4
 8004c0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c12:	3b30      	subs	r3, #48	; 0x30
 8004c14:	2b09      	cmp	r3, #9
 8004c16:	d94d      	bls.n	8004cb4 <_svfiprintf_r+0x17c>
 8004c18:	b1b0      	cbz	r0, 8004c48 <_svfiprintf_r+0x110>
 8004c1a:	9207      	str	r2, [sp, #28]
 8004c1c:	e014      	b.n	8004c48 <_svfiprintf_r+0x110>
 8004c1e:	eba0 0308 	sub.w	r3, r0, r8
 8004c22:	fa09 f303 	lsl.w	r3, r9, r3
 8004c26:	4313      	orrs	r3, r2
 8004c28:	46a2      	mov	sl, r4
 8004c2a:	9304      	str	r3, [sp, #16]
 8004c2c:	e7d2      	b.n	8004bd4 <_svfiprintf_r+0x9c>
 8004c2e:	9b03      	ldr	r3, [sp, #12]
 8004c30:	1d19      	adds	r1, r3, #4
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	9103      	str	r1, [sp, #12]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	bfbb      	ittet	lt
 8004c3a:	425b      	neglt	r3, r3
 8004c3c:	f042 0202 	orrlt.w	r2, r2, #2
 8004c40:	9307      	strge	r3, [sp, #28]
 8004c42:	9307      	strlt	r3, [sp, #28]
 8004c44:	bfb8      	it	lt
 8004c46:	9204      	strlt	r2, [sp, #16]
 8004c48:	7823      	ldrb	r3, [r4, #0]
 8004c4a:	2b2e      	cmp	r3, #46	; 0x2e
 8004c4c:	d10c      	bne.n	8004c68 <_svfiprintf_r+0x130>
 8004c4e:	7863      	ldrb	r3, [r4, #1]
 8004c50:	2b2a      	cmp	r3, #42	; 0x2a
 8004c52:	d134      	bne.n	8004cbe <_svfiprintf_r+0x186>
 8004c54:	9b03      	ldr	r3, [sp, #12]
 8004c56:	3402      	adds	r4, #2
 8004c58:	1d1a      	adds	r2, r3, #4
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	9203      	str	r2, [sp, #12]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	bfb8      	it	lt
 8004c62:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c66:	9305      	str	r3, [sp, #20]
 8004c68:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8004d24 <_svfiprintf_r+0x1ec>
 8004c6c:	2203      	movs	r2, #3
 8004c6e:	4650      	mov	r0, sl
 8004c70:	7821      	ldrb	r1, [r4, #0]
 8004c72:	f000 fa1d 	bl	80050b0 <memchr>
 8004c76:	b138      	cbz	r0, 8004c88 <_svfiprintf_r+0x150>
 8004c78:	2240      	movs	r2, #64	; 0x40
 8004c7a:	9b04      	ldr	r3, [sp, #16]
 8004c7c:	eba0 000a 	sub.w	r0, r0, sl
 8004c80:	4082      	lsls	r2, r0
 8004c82:	4313      	orrs	r3, r2
 8004c84:	3401      	adds	r4, #1
 8004c86:	9304      	str	r3, [sp, #16]
 8004c88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c8c:	2206      	movs	r2, #6
 8004c8e:	4826      	ldr	r0, [pc, #152]	; (8004d28 <_svfiprintf_r+0x1f0>)
 8004c90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c94:	f000 fa0c 	bl	80050b0 <memchr>
 8004c98:	2800      	cmp	r0, #0
 8004c9a:	d038      	beq.n	8004d0e <_svfiprintf_r+0x1d6>
 8004c9c:	4b23      	ldr	r3, [pc, #140]	; (8004d2c <_svfiprintf_r+0x1f4>)
 8004c9e:	bb1b      	cbnz	r3, 8004ce8 <_svfiprintf_r+0x1b0>
 8004ca0:	9b03      	ldr	r3, [sp, #12]
 8004ca2:	3307      	adds	r3, #7
 8004ca4:	f023 0307 	bic.w	r3, r3, #7
 8004ca8:	3308      	adds	r3, #8
 8004caa:	9303      	str	r3, [sp, #12]
 8004cac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cae:	4433      	add	r3, r6
 8004cb0:	9309      	str	r3, [sp, #36]	; 0x24
 8004cb2:	e768      	b.n	8004b86 <_svfiprintf_r+0x4e>
 8004cb4:	460c      	mov	r4, r1
 8004cb6:	2001      	movs	r0, #1
 8004cb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cbc:	e7a6      	b.n	8004c0c <_svfiprintf_r+0xd4>
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	f04f 0c0a 	mov.w	ip, #10
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	3401      	adds	r4, #1
 8004cc8:	9305      	str	r3, [sp, #20]
 8004cca:	4620      	mov	r0, r4
 8004ccc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cd0:	3a30      	subs	r2, #48	; 0x30
 8004cd2:	2a09      	cmp	r2, #9
 8004cd4:	d903      	bls.n	8004cde <_svfiprintf_r+0x1a6>
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d0c6      	beq.n	8004c68 <_svfiprintf_r+0x130>
 8004cda:	9105      	str	r1, [sp, #20]
 8004cdc:	e7c4      	b.n	8004c68 <_svfiprintf_r+0x130>
 8004cde:	4604      	mov	r4, r0
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ce6:	e7f0      	b.n	8004cca <_svfiprintf_r+0x192>
 8004ce8:	ab03      	add	r3, sp, #12
 8004cea:	9300      	str	r3, [sp, #0]
 8004cec:	462a      	mov	r2, r5
 8004cee:	4638      	mov	r0, r7
 8004cf0:	4b0f      	ldr	r3, [pc, #60]	; (8004d30 <_svfiprintf_r+0x1f8>)
 8004cf2:	a904      	add	r1, sp, #16
 8004cf4:	f3af 8000 	nop.w
 8004cf8:	1c42      	adds	r2, r0, #1
 8004cfa:	4606      	mov	r6, r0
 8004cfc:	d1d6      	bne.n	8004cac <_svfiprintf_r+0x174>
 8004cfe:	89ab      	ldrh	r3, [r5, #12]
 8004d00:	065b      	lsls	r3, r3, #25
 8004d02:	f53f af2d 	bmi.w	8004b60 <_svfiprintf_r+0x28>
 8004d06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d08:	b01d      	add	sp, #116	; 0x74
 8004d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d0e:	ab03      	add	r3, sp, #12
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	462a      	mov	r2, r5
 8004d14:	4638      	mov	r0, r7
 8004d16:	4b06      	ldr	r3, [pc, #24]	; (8004d30 <_svfiprintf_r+0x1f8>)
 8004d18:	a904      	add	r1, sp, #16
 8004d1a:	f000 f87d 	bl	8004e18 <_printf_i>
 8004d1e:	e7eb      	b.n	8004cf8 <_svfiprintf_r+0x1c0>
 8004d20:	08005204 	.word	0x08005204
 8004d24:	0800520a 	.word	0x0800520a
 8004d28:	0800520e 	.word	0x0800520e
 8004d2c:	00000000 	.word	0x00000000
 8004d30:	08004a85 	.word	0x08004a85

08004d34 <_printf_common>:
 8004d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d38:	4616      	mov	r6, r2
 8004d3a:	4699      	mov	r9, r3
 8004d3c:	688a      	ldr	r2, [r1, #8]
 8004d3e:	690b      	ldr	r3, [r1, #16]
 8004d40:	4607      	mov	r7, r0
 8004d42:	4293      	cmp	r3, r2
 8004d44:	bfb8      	it	lt
 8004d46:	4613      	movlt	r3, r2
 8004d48:	6033      	str	r3, [r6, #0]
 8004d4a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d4e:	460c      	mov	r4, r1
 8004d50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d54:	b10a      	cbz	r2, 8004d5a <_printf_common+0x26>
 8004d56:	3301      	adds	r3, #1
 8004d58:	6033      	str	r3, [r6, #0]
 8004d5a:	6823      	ldr	r3, [r4, #0]
 8004d5c:	0699      	lsls	r1, r3, #26
 8004d5e:	bf42      	ittt	mi
 8004d60:	6833      	ldrmi	r3, [r6, #0]
 8004d62:	3302      	addmi	r3, #2
 8004d64:	6033      	strmi	r3, [r6, #0]
 8004d66:	6825      	ldr	r5, [r4, #0]
 8004d68:	f015 0506 	ands.w	r5, r5, #6
 8004d6c:	d106      	bne.n	8004d7c <_printf_common+0x48>
 8004d6e:	f104 0a19 	add.w	sl, r4, #25
 8004d72:	68e3      	ldr	r3, [r4, #12]
 8004d74:	6832      	ldr	r2, [r6, #0]
 8004d76:	1a9b      	subs	r3, r3, r2
 8004d78:	42ab      	cmp	r3, r5
 8004d7a:	dc2b      	bgt.n	8004dd4 <_printf_common+0xa0>
 8004d7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d80:	1e13      	subs	r3, r2, #0
 8004d82:	6822      	ldr	r2, [r4, #0]
 8004d84:	bf18      	it	ne
 8004d86:	2301      	movne	r3, #1
 8004d88:	0692      	lsls	r2, r2, #26
 8004d8a:	d430      	bmi.n	8004dee <_printf_common+0xba>
 8004d8c:	4649      	mov	r1, r9
 8004d8e:	4638      	mov	r0, r7
 8004d90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d94:	47c0      	blx	r8
 8004d96:	3001      	adds	r0, #1
 8004d98:	d023      	beq.n	8004de2 <_printf_common+0xae>
 8004d9a:	6823      	ldr	r3, [r4, #0]
 8004d9c:	6922      	ldr	r2, [r4, #16]
 8004d9e:	f003 0306 	and.w	r3, r3, #6
 8004da2:	2b04      	cmp	r3, #4
 8004da4:	bf14      	ite	ne
 8004da6:	2500      	movne	r5, #0
 8004da8:	6833      	ldreq	r3, [r6, #0]
 8004daa:	f04f 0600 	mov.w	r6, #0
 8004dae:	bf08      	it	eq
 8004db0:	68e5      	ldreq	r5, [r4, #12]
 8004db2:	f104 041a 	add.w	r4, r4, #26
 8004db6:	bf08      	it	eq
 8004db8:	1aed      	subeq	r5, r5, r3
 8004dba:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004dbe:	bf08      	it	eq
 8004dc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	bfc4      	itt	gt
 8004dc8:	1a9b      	subgt	r3, r3, r2
 8004dca:	18ed      	addgt	r5, r5, r3
 8004dcc:	42b5      	cmp	r5, r6
 8004dce:	d11a      	bne.n	8004e06 <_printf_common+0xd2>
 8004dd0:	2000      	movs	r0, #0
 8004dd2:	e008      	b.n	8004de6 <_printf_common+0xb2>
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	4652      	mov	r2, sl
 8004dd8:	4649      	mov	r1, r9
 8004dda:	4638      	mov	r0, r7
 8004ddc:	47c0      	blx	r8
 8004dde:	3001      	adds	r0, #1
 8004de0:	d103      	bne.n	8004dea <_printf_common+0xb6>
 8004de2:	f04f 30ff 	mov.w	r0, #4294967295
 8004de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dea:	3501      	adds	r5, #1
 8004dec:	e7c1      	b.n	8004d72 <_printf_common+0x3e>
 8004dee:	2030      	movs	r0, #48	; 0x30
 8004df0:	18e1      	adds	r1, r4, r3
 8004df2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004df6:	1c5a      	adds	r2, r3, #1
 8004df8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004dfc:	4422      	add	r2, r4
 8004dfe:	3302      	adds	r3, #2
 8004e00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e04:	e7c2      	b.n	8004d8c <_printf_common+0x58>
 8004e06:	2301      	movs	r3, #1
 8004e08:	4622      	mov	r2, r4
 8004e0a:	4649      	mov	r1, r9
 8004e0c:	4638      	mov	r0, r7
 8004e0e:	47c0      	blx	r8
 8004e10:	3001      	adds	r0, #1
 8004e12:	d0e6      	beq.n	8004de2 <_printf_common+0xae>
 8004e14:	3601      	adds	r6, #1
 8004e16:	e7d9      	b.n	8004dcc <_printf_common+0x98>

08004e18 <_printf_i>:
 8004e18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e1c:	7e0f      	ldrb	r7, [r1, #24]
 8004e1e:	4691      	mov	r9, r2
 8004e20:	2f78      	cmp	r7, #120	; 0x78
 8004e22:	4680      	mov	r8, r0
 8004e24:	460c      	mov	r4, r1
 8004e26:	469a      	mov	sl, r3
 8004e28:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e2e:	d807      	bhi.n	8004e40 <_printf_i+0x28>
 8004e30:	2f62      	cmp	r7, #98	; 0x62
 8004e32:	d80a      	bhi.n	8004e4a <_printf_i+0x32>
 8004e34:	2f00      	cmp	r7, #0
 8004e36:	f000 80d5 	beq.w	8004fe4 <_printf_i+0x1cc>
 8004e3a:	2f58      	cmp	r7, #88	; 0x58
 8004e3c:	f000 80c1 	beq.w	8004fc2 <_printf_i+0x1aa>
 8004e40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e48:	e03a      	b.n	8004ec0 <_printf_i+0xa8>
 8004e4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e4e:	2b15      	cmp	r3, #21
 8004e50:	d8f6      	bhi.n	8004e40 <_printf_i+0x28>
 8004e52:	a101      	add	r1, pc, #4	; (adr r1, 8004e58 <_printf_i+0x40>)
 8004e54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e58:	08004eb1 	.word	0x08004eb1
 8004e5c:	08004ec5 	.word	0x08004ec5
 8004e60:	08004e41 	.word	0x08004e41
 8004e64:	08004e41 	.word	0x08004e41
 8004e68:	08004e41 	.word	0x08004e41
 8004e6c:	08004e41 	.word	0x08004e41
 8004e70:	08004ec5 	.word	0x08004ec5
 8004e74:	08004e41 	.word	0x08004e41
 8004e78:	08004e41 	.word	0x08004e41
 8004e7c:	08004e41 	.word	0x08004e41
 8004e80:	08004e41 	.word	0x08004e41
 8004e84:	08004fcb 	.word	0x08004fcb
 8004e88:	08004ef1 	.word	0x08004ef1
 8004e8c:	08004f85 	.word	0x08004f85
 8004e90:	08004e41 	.word	0x08004e41
 8004e94:	08004e41 	.word	0x08004e41
 8004e98:	08004fed 	.word	0x08004fed
 8004e9c:	08004e41 	.word	0x08004e41
 8004ea0:	08004ef1 	.word	0x08004ef1
 8004ea4:	08004e41 	.word	0x08004e41
 8004ea8:	08004e41 	.word	0x08004e41
 8004eac:	08004f8d 	.word	0x08004f8d
 8004eb0:	682b      	ldr	r3, [r5, #0]
 8004eb2:	1d1a      	adds	r2, r3, #4
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	602a      	str	r2, [r5, #0]
 8004eb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ebc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e0a0      	b.n	8005006 <_printf_i+0x1ee>
 8004ec4:	6820      	ldr	r0, [r4, #0]
 8004ec6:	682b      	ldr	r3, [r5, #0]
 8004ec8:	0607      	lsls	r7, r0, #24
 8004eca:	f103 0104 	add.w	r1, r3, #4
 8004ece:	6029      	str	r1, [r5, #0]
 8004ed0:	d501      	bpl.n	8004ed6 <_printf_i+0xbe>
 8004ed2:	681e      	ldr	r6, [r3, #0]
 8004ed4:	e003      	b.n	8004ede <_printf_i+0xc6>
 8004ed6:	0646      	lsls	r6, r0, #25
 8004ed8:	d5fb      	bpl.n	8004ed2 <_printf_i+0xba>
 8004eda:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004ede:	2e00      	cmp	r6, #0
 8004ee0:	da03      	bge.n	8004eea <_printf_i+0xd2>
 8004ee2:	232d      	movs	r3, #45	; 0x2d
 8004ee4:	4276      	negs	r6, r6
 8004ee6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004eea:	230a      	movs	r3, #10
 8004eec:	4859      	ldr	r0, [pc, #356]	; (8005054 <_printf_i+0x23c>)
 8004eee:	e012      	b.n	8004f16 <_printf_i+0xfe>
 8004ef0:	682b      	ldr	r3, [r5, #0]
 8004ef2:	6820      	ldr	r0, [r4, #0]
 8004ef4:	1d19      	adds	r1, r3, #4
 8004ef6:	6029      	str	r1, [r5, #0]
 8004ef8:	0605      	lsls	r5, r0, #24
 8004efa:	d501      	bpl.n	8004f00 <_printf_i+0xe8>
 8004efc:	681e      	ldr	r6, [r3, #0]
 8004efe:	e002      	b.n	8004f06 <_printf_i+0xee>
 8004f00:	0641      	lsls	r1, r0, #25
 8004f02:	d5fb      	bpl.n	8004efc <_printf_i+0xe4>
 8004f04:	881e      	ldrh	r6, [r3, #0]
 8004f06:	2f6f      	cmp	r7, #111	; 0x6f
 8004f08:	bf0c      	ite	eq
 8004f0a:	2308      	moveq	r3, #8
 8004f0c:	230a      	movne	r3, #10
 8004f0e:	4851      	ldr	r0, [pc, #324]	; (8005054 <_printf_i+0x23c>)
 8004f10:	2100      	movs	r1, #0
 8004f12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f16:	6865      	ldr	r5, [r4, #4]
 8004f18:	2d00      	cmp	r5, #0
 8004f1a:	bfa8      	it	ge
 8004f1c:	6821      	ldrge	r1, [r4, #0]
 8004f1e:	60a5      	str	r5, [r4, #8]
 8004f20:	bfa4      	itt	ge
 8004f22:	f021 0104 	bicge.w	r1, r1, #4
 8004f26:	6021      	strge	r1, [r4, #0]
 8004f28:	b90e      	cbnz	r6, 8004f2e <_printf_i+0x116>
 8004f2a:	2d00      	cmp	r5, #0
 8004f2c:	d04b      	beq.n	8004fc6 <_printf_i+0x1ae>
 8004f2e:	4615      	mov	r5, r2
 8004f30:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f34:	fb03 6711 	mls	r7, r3, r1, r6
 8004f38:	5dc7      	ldrb	r7, [r0, r7]
 8004f3a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f3e:	4637      	mov	r7, r6
 8004f40:	42bb      	cmp	r3, r7
 8004f42:	460e      	mov	r6, r1
 8004f44:	d9f4      	bls.n	8004f30 <_printf_i+0x118>
 8004f46:	2b08      	cmp	r3, #8
 8004f48:	d10b      	bne.n	8004f62 <_printf_i+0x14a>
 8004f4a:	6823      	ldr	r3, [r4, #0]
 8004f4c:	07de      	lsls	r6, r3, #31
 8004f4e:	d508      	bpl.n	8004f62 <_printf_i+0x14a>
 8004f50:	6923      	ldr	r3, [r4, #16]
 8004f52:	6861      	ldr	r1, [r4, #4]
 8004f54:	4299      	cmp	r1, r3
 8004f56:	bfde      	ittt	le
 8004f58:	2330      	movle	r3, #48	; 0x30
 8004f5a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f5e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f62:	1b52      	subs	r2, r2, r5
 8004f64:	6122      	str	r2, [r4, #16]
 8004f66:	464b      	mov	r3, r9
 8004f68:	4621      	mov	r1, r4
 8004f6a:	4640      	mov	r0, r8
 8004f6c:	f8cd a000 	str.w	sl, [sp]
 8004f70:	aa03      	add	r2, sp, #12
 8004f72:	f7ff fedf 	bl	8004d34 <_printf_common>
 8004f76:	3001      	adds	r0, #1
 8004f78:	d14a      	bne.n	8005010 <_printf_i+0x1f8>
 8004f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f7e:	b004      	add	sp, #16
 8004f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f84:	6823      	ldr	r3, [r4, #0]
 8004f86:	f043 0320 	orr.w	r3, r3, #32
 8004f8a:	6023      	str	r3, [r4, #0]
 8004f8c:	2778      	movs	r7, #120	; 0x78
 8004f8e:	4832      	ldr	r0, [pc, #200]	; (8005058 <_printf_i+0x240>)
 8004f90:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004f94:	6823      	ldr	r3, [r4, #0]
 8004f96:	6829      	ldr	r1, [r5, #0]
 8004f98:	061f      	lsls	r7, r3, #24
 8004f9a:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f9e:	d402      	bmi.n	8004fa6 <_printf_i+0x18e>
 8004fa0:	065f      	lsls	r7, r3, #25
 8004fa2:	bf48      	it	mi
 8004fa4:	b2b6      	uxthmi	r6, r6
 8004fa6:	07df      	lsls	r7, r3, #31
 8004fa8:	bf48      	it	mi
 8004faa:	f043 0320 	orrmi.w	r3, r3, #32
 8004fae:	6029      	str	r1, [r5, #0]
 8004fb0:	bf48      	it	mi
 8004fb2:	6023      	strmi	r3, [r4, #0]
 8004fb4:	b91e      	cbnz	r6, 8004fbe <_printf_i+0x1a6>
 8004fb6:	6823      	ldr	r3, [r4, #0]
 8004fb8:	f023 0320 	bic.w	r3, r3, #32
 8004fbc:	6023      	str	r3, [r4, #0]
 8004fbe:	2310      	movs	r3, #16
 8004fc0:	e7a6      	b.n	8004f10 <_printf_i+0xf8>
 8004fc2:	4824      	ldr	r0, [pc, #144]	; (8005054 <_printf_i+0x23c>)
 8004fc4:	e7e4      	b.n	8004f90 <_printf_i+0x178>
 8004fc6:	4615      	mov	r5, r2
 8004fc8:	e7bd      	b.n	8004f46 <_printf_i+0x12e>
 8004fca:	682b      	ldr	r3, [r5, #0]
 8004fcc:	6826      	ldr	r6, [r4, #0]
 8004fce:	1d18      	adds	r0, r3, #4
 8004fd0:	6961      	ldr	r1, [r4, #20]
 8004fd2:	6028      	str	r0, [r5, #0]
 8004fd4:	0635      	lsls	r5, r6, #24
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	d501      	bpl.n	8004fde <_printf_i+0x1c6>
 8004fda:	6019      	str	r1, [r3, #0]
 8004fdc:	e002      	b.n	8004fe4 <_printf_i+0x1cc>
 8004fde:	0670      	lsls	r0, r6, #25
 8004fe0:	d5fb      	bpl.n	8004fda <_printf_i+0x1c2>
 8004fe2:	8019      	strh	r1, [r3, #0]
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	4615      	mov	r5, r2
 8004fe8:	6123      	str	r3, [r4, #16]
 8004fea:	e7bc      	b.n	8004f66 <_printf_i+0x14e>
 8004fec:	682b      	ldr	r3, [r5, #0]
 8004fee:	2100      	movs	r1, #0
 8004ff0:	1d1a      	adds	r2, r3, #4
 8004ff2:	602a      	str	r2, [r5, #0]
 8004ff4:	681d      	ldr	r5, [r3, #0]
 8004ff6:	6862      	ldr	r2, [r4, #4]
 8004ff8:	4628      	mov	r0, r5
 8004ffa:	f000 f859 	bl	80050b0 <memchr>
 8004ffe:	b108      	cbz	r0, 8005004 <_printf_i+0x1ec>
 8005000:	1b40      	subs	r0, r0, r5
 8005002:	6060      	str	r0, [r4, #4]
 8005004:	6863      	ldr	r3, [r4, #4]
 8005006:	6123      	str	r3, [r4, #16]
 8005008:	2300      	movs	r3, #0
 800500a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800500e:	e7aa      	b.n	8004f66 <_printf_i+0x14e>
 8005010:	462a      	mov	r2, r5
 8005012:	4649      	mov	r1, r9
 8005014:	4640      	mov	r0, r8
 8005016:	6923      	ldr	r3, [r4, #16]
 8005018:	47d0      	blx	sl
 800501a:	3001      	adds	r0, #1
 800501c:	d0ad      	beq.n	8004f7a <_printf_i+0x162>
 800501e:	6823      	ldr	r3, [r4, #0]
 8005020:	079b      	lsls	r3, r3, #30
 8005022:	d413      	bmi.n	800504c <_printf_i+0x234>
 8005024:	68e0      	ldr	r0, [r4, #12]
 8005026:	9b03      	ldr	r3, [sp, #12]
 8005028:	4298      	cmp	r0, r3
 800502a:	bfb8      	it	lt
 800502c:	4618      	movlt	r0, r3
 800502e:	e7a6      	b.n	8004f7e <_printf_i+0x166>
 8005030:	2301      	movs	r3, #1
 8005032:	4632      	mov	r2, r6
 8005034:	4649      	mov	r1, r9
 8005036:	4640      	mov	r0, r8
 8005038:	47d0      	blx	sl
 800503a:	3001      	adds	r0, #1
 800503c:	d09d      	beq.n	8004f7a <_printf_i+0x162>
 800503e:	3501      	adds	r5, #1
 8005040:	68e3      	ldr	r3, [r4, #12]
 8005042:	9903      	ldr	r1, [sp, #12]
 8005044:	1a5b      	subs	r3, r3, r1
 8005046:	42ab      	cmp	r3, r5
 8005048:	dcf2      	bgt.n	8005030 <_printf_i+0x218>
 800504a:	e7eb      	b.n	8005024 <_printf_i+0x20c>
 800504c:	2500      	movs	r5, #0
 800504e:	f104 0619 	add.w	r6, r4, #25
 8005052:	e7f5      	b.n	8005040 <_printf_i+0x228>
 8005054:	08005215 	.word	0x08005215
 8005058:	08005226 	.word	0x08005226

0800505c <memmove>:
 800505c:	4288      	cmp	r0, r1
 800505e:	b510      	push	{r4, lr}
 8005060:	eb01 0402 	add.w	r4, r1, r2
 8005064:	d902      	bls.n	800506c <memmove+0x10>
 8005066:	4284      	cmp	r4, r0
 8005068:	4623      	mov	r3, r4
 800506a:	d807      	bhi.n	800507c <memmove+0x20>
 800506c:	1e43      	subs	r3, r0, #1
 800506e:	42a1      	cmp	r1, r4
 8005070:	d008      	beq.n	8005084 <memmove+0x28>
 8005072:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005076:	f803 2f01 	strb.w	r2, [r3, #1]!
 800507a:	e7f8      	b.n	800506e <memmove+0x12>
 800507c:	4601      	mov	r1, r0
 800507e:	4402      	add	r2, r0
 8005080:	428a      	cmp	r2, r1
 8005082:	d100      	bne.n	8005086 <memmove+0x2a>
 8005084:	bd10      	pop	{r4, pc}
 8005086:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800508a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800508e:	e7f7      	b.n	8005080 <memmove+0x24>

08005090 <_sbrk_r>:
 8005090:	b538      	push	{r3, r4, r5, lr}
 8005092:	2300      	movs	r3, #0
 8005094:	4d05      	ldr	r5, [pc, #20]	; (80050ac <_sbrk_r+0x1c>)
 8005096:	4604      	mov	r4, r0
 8005098:	4608      	mov	r0, r1
 800509a:	602b      	str	r3, [r5, #0]
 800509c:	f7fb fba4 	bl	80007e8 <_sbrk>
 80050a0:	1c43      	adds	r3, r0, #1
 80050a2:	d102      	bne.n	80050aa <_sbrk_r+0x1a>
 80050a4:	682b      	ldr	r3, [r5, #0]
 80050a6:	b103      	cbz	r3, 80050aa <_sbrk_r+0x1a>
 80050a8:	6023      	str	r3, [r4, #0]
 80050aa:	bd38      	pop	{r3, r4, r5, pc}
 80050ac:	2000124c 	.word	0x2000124c

080050b0 <memchr>:
 80050b0:	4603      	mov	r3, r0
 80050b2:	b510      	push	{r4, lr}
 80050b4:	b2c9      	uxtb	r1, r1
 80050b6:	4402      	add	r2, r0
 80050b8:	4293      	cmp	r3, r2
 80050ba:	4618      	mov	r0, r3
 80050bc:	d101      	bne.n	80050c2 <memchr+0x12>
 80050be:	2000      	movs	r0, #0
 80050c0:	e003      	b.n	80050ca <memchr+0x1a>
 80050c2:	7804      	ldrb	r4, [r0, #0]
 80050c4:	3301      	adds	r3, #1
 80050c6:	428c      	cmp	r4, r1
 80050c8:	d1f6      	bne.n	80050b8 <memchr+0x8>
 80050ca:	bd10      	pop	{r4, pc}

080050cc <_realloc_r>:
 80050cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050d0:	4680      	mov	r8, r0
 80050d2:	4614      	mov	r4, r2
 80050d4:	460e      	mov	r6, r1
 80050d6:	b921      	cbnz	r1, 80050e2 <_realloc_r+0x16>
 80050d8:	4611      	mov	r1, r2
 80050da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050de:	f7ff bc45 	b.w	800496c <_malloc_r>
 80050e2:	b92a      	cbnz	r2, 80050f0 <_realloc_r+0x24>
 80050e4:	f7ff fbda 	bl	800489c <_free_r>
 80050e8:	4625      	mov	r5, r4
 80050ea:	4628      	mov	r0, r5
 80050ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050f0:	f000 f81b 	bl	800512a <_malloc_usable_size_r>
 80050f4:	4284      	cmp	r4, r0
 80050f6:	4607      	mov	r7, r0
 80050f8:	d802      	bhi.n	8005100 <_realloc_r+0x34>
 80050fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80050fe:	d812      	bhi.n	8005126 <_realloc_r+0x5a>
 8005100:	4621      	mov	r1, r4
 8005102:	4640      	mov	r0, r8
 8005104:	f7ff fc32 	bl	800496c <_malloc_r>
 8005108:	4605      	mov	r5, r0
 800510a:	2800      	cmp	r0, #0
 800510c:	d0ed      	beq.n	80050ea <_realloc_r+0x1e>
 800510e:	42bc      	cmp	r4, r7
 8005110:	4622      	mov	r2, r4
 8005112:	4631      	mov	r1, r6
 8005114:	bf28      	it	cs
 8005116:	463a      	movcs	r2, r7
 8005118:	f7ff fbb2 	bl	8004880 <memcpy>
 800511c:	4631      	mov	r1, r6
 800511e:	4640      	mov	r0, r8
 8005120:	f7ff fbbc 	bl	800489c <_free_r>
 8005124:	e7e1      	b.n	80050ea <_realloc_r+0x1e>
 8005126:	4635      	mov	r5, r6
 8005128:	e7df      	b.n	80050ea <_realloc_r+0x1e>

0800512a <_malloc_usable_size_r>:
 800512a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800512e:	1f18      	subs	r0, r3, #4
 8005130:	2b00      	cmp	r3, #0
 8005132:	bfbc      	itt	lt
 8005134:	580b      	ldrlt	r3, [r1, r0]
 8005136:	18c0      	addlt	r0, r0, r3
 8005138:	4770      	bx	lr
	...

0800513c <_init>:
 800513c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800513e:	bf00      	nop
 8005140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005142:	bc08      	pop	{r3}
 8005144:	469e      	mov	lr, r3
 8005146:	4770      	bx	lr

08005148 <_fini>:
 8005148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800514a:	bf00      	nop
 800514c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800514e:	bc08      	pop	{r3}
 8005150:	469e      	mov	lr, r3
 8005152:	4770      	bx	lr
