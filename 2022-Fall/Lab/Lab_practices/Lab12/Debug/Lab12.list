
Lab12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004598  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08004788  08004788  00014788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004910  08004910  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08004910  08004910  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004910  08004910  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004910  08004910  00014910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004914  08004914  00014914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004918  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001254  20000060  08004978  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200012b4  08004978  000212b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010a98  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c55  00000000  00000000  00030b64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010c0  00000000  00000000  000337c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d02  00000000  00000000  00034880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b0a4  00000000  00000000  00035582  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000126dc  00000000  00000000  00050626  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a05f4  00000000  00000000  00062d02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004a3c  00000000  00000000  001032f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00107d34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000060 	.word	0x20000060
 800020c:	00000000 	.word	0x00000000
 8000210:	08004770 	.word	0x08004770

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000064 	.word	0x20000064
 800022c:	08004770 	.word	0x08004770

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000240:	b480      	push	{r7}
 8000242:	b085      	sub	sp, #20
 8000244:	af00      	add	r7, sp, #0
 8000246:	60f8      	str	r0, [r7, #12]
 8000248:	60b9      	str	r1, [r7, #8]
 800024a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	4a06      	ldr	r2, [pc, #24]	; (8000268 <vApplicationGetIdleTaskMemory+0x28>)
 8000250:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000252:	68bb      	ldr	r3, [r7, #8]
 8000254:	4a05      	ldr	r2, [pc, #20]	; (800026c <vApplicationGetIdleTaskMemory+0x2c>)
 8000256:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	2280      	movs	r2, #128	; 0x80
 800025c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800025e:	bf00      	nop
 8000260:	3714      	adds	r7, #20
 8000262:	46bd      	mov	sp, r7
 8000264:	bc80      	pop	{r7}
 8000266:	4770      	bx	lr
 8000268:	2000007c 	.word	0x2000007c
 800026c:	2000011c 	.word	0x2000011c

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b5b0      	push	{r4, r5, r7, lr}
 8000272:	b096      	sub	sp, #88	; 0x58
 8000274:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000276:	f000 fb95 	bl	80009a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027a:	f000 f84b 	bl	8000314 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027e:	f000 f8b9 	bl	80003f4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000282:	f000 f88d 	bl	80003a0 <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task_LED0 */
  osThreadDef(Task_LED0, Func_LED0, osPriorityNormal, 0, 128);
 8000286:	4b1d      	ldr	r3, [pc, #116]	; (80002fc <main+0x8c>)
 8000288:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800028c:	461d      	mov	r5, r3
 800028e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000290:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000292:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000296:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_LED0Handle = osThreadCreate(osThread(Task_LED0), NULL);
 800029a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800029e:	2100      	movs	r1, #0
 80002a0:	4618      	mov	r0, r3
 80002a2:	f002 fb77 	bl	8002994 <osThreadCreate>
 80002a6:	4603      	mov	r3, r0
 80002a8:	4a15      	ldr	r2, [pc, #84]	; (8000300 <main+0x90>)
 80002aa:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_LED1 */
  osThreadDef(Task_LED1, Func_LED1, osPriorityNormal, 0, 128);
 80002ac:	4b15      	ldr	r3, [pc, #84]	; (8000304 <main+0x94>)
 80002ae:	f107 0420 	add.w	r4, r7, #32
 80002b2:	461d      	mov	r5, r3
 80002b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_LED1Handle = osThreadCreate(osThread(Task_LED1), NULL);
 80002c0:	f107 0320 	add.w	r3, r7, #32
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f002 fb64 	bl	8002994 <osThreadCreate>
 80002cc:	4603      	mov	r3, r0
 80002ce:	4a0e      	ldr	r2, [pc, #56]	; (8000308 <main+0x98>)
 80002d0:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task03 */
  osThreadDef(Task03, StartTask03, osPriorityNormal, 0, 128);
 80002d2:	4b0e      	ldr	r3, [pc, #56]	; (800030c <main+0x9c>)
 80002d4:	1d3c      	adds	r4, r7, #4
 80002d6:	461d      	mov	r5, r3
 80002d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task03Handle = osThreadCreate(osThread(Task03), NULL);
 80002e4:	1d3b      	adds	r3, r7, #4
 80002e6:	2100      	movs	r1, #0
 80002e8:	4618      	mov	r0, r3
 80002ea:	f002 fb53 	bl	8002994 <osThreadCreate>
 80002ee:	4603      	mov	r3, r0
 80002f0:	4a07      	ldr	r2, [pc, #28]	; (8000310 <main+0xa0>)
 80002f2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002f4:	f002 fb47 	bl	8002986 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002f8:	e7fe      	b.n	80002f8 <main+0x88>
 80002fa:	bf00      	nop
 80002fc:	08004794 	.word	0x08004794
 8000300:	20000360 	.word	0x20000360
 8000304:	080047bc 	.word	0x080047bc
 8000308:	20000364 	.word	0x20000364
 800030c:	080047e0 	.word	0x080047e0
 8000310:	20000368 	.word	0x20000368

08000314 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b090      	sub	sp, #64	; 0x40
 8000318:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031a:	f107 0318 	add.w	r3, r7, #24
 800031e:	2228      	movs	r2, #40	; 0x28
 8000320:	2100      	movs	r1, #0
 8000322:	4618      	mov	r0, r3
 8000324:	f003 fd3c 	bl	8003da0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]
 8000332:	60da      	str	r2, [r3, #12]
 8000334:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000336:	2301      	movs	r3, #1
 8000338:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800033a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800033e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000340:	2300      	movs	r3, #0
 8000342:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000344:	2301      	movs	r3, #1
 8000346:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000348:	2302      	movs	r3, #2
 800034a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800034c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000350:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000352:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000356:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000358:	f107 0318 	add.w	r3, r7, #24
 800035c:	4618      	mov	r0, r3
 800035e:	f000 ff69 	bl	8001234 <HAL_RCC_OscConfig>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000368:	f000 f978 	bl	800065c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800036c:	230f      	movs	r3, #15
 800036e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000370:	2302      	movs	r3, #2
 8000372:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000374:	2300      	movs	r3, #0
 8000376:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000378:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800037c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800037e:	2300      	movs	r3, #0
 8000380:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	2102      	movs	r1, #2
 8000386:	4618      	mov	r0, r3
 8000388:	f001 f9d6 	bl	8001738 <HAL_RCC_ClockConfig>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000392:	f000 f963 	bl	800065c <Error_Handler>
  }
}
 8000396:	bf00      	nop
 8000398:	3740      	adds	r7, #64	; 0x40
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
	...

080003a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003a4:	4b11      	ldr	r3, [pc, #68]	; (80003ec <MX_USART1_UART_Init+0x4c>)
 80003a6:	4a12      	ldr	r2, [pc, #72]	; (80003f0 <MX_USART1_UART_Init+0x50>)
 80003a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003aa:	4b10      	ldr	r3, [pc, #64]	; (80003ec <MX_USART1_UART_Init+0x4c>)
 80003ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003b2:	4b0e      	ldr	r3, [pc, #56]	; (80003ec <MX_USART1_UART_Init+0x4c>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003b8:	4b0c      	ldr	r3, [pc, #48]	; (80003ec <MX_USART1_UART_Init+0x4c>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003be:	4b0b      	ldr	r3, [pc, #44]	; (80003ec <MX_USART1_UART_Init+0x4c>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003c4:	4b09      	ldr	r3, [pc, #36]	; (80003ec <MX_USART1_UART_Init+0x4c>)
 80003c6:	220c      	movs	r2, #12
 80003c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ca:	4b08      	ldr	r3, [pc, #32]	; (80003ec <MX_USART1_UART_Init+0x4c>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d0:	4b06      	ldr	r3, [pc, #24]	; (80003ec <MX_USART1_UART_Init+0x4c>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003d6:	4805      	ldr	r0, [pc, #20]	; (80003ec <MX_USART1_UART_Init+0x4c>)
 80003d8:	f001 fde6 	bl	8001fa8 <HAL_UART_Init>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003e2:	f000 f93b 	bl	800065c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003e6:	bf00      	nop
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	2000031c 	.word	0x2000031c
 80003f0:	40013800 	.word	0x40013800

080003f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b086      	sub	sp, #24
 80003f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fa:	f107 0308 	add.w	r3, r7, #8
 80003fe:	2200      	movs	r2, #0
 8000400:	601a      	str	r2, [r3, #0]
 8000402:	605a      	str	r2, [r3, #4]
 8000404:	609a      	str	r2, [r3, #8]
 8000406:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000408:	4b2c      	ldr	r3, [pc, #176]	; (80004bc <MX_GPIO_Init+0xc8>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	4a2b      	ldr	r2, [pc, #172]	; (80004bc <MX_GPIO_Init+0xc8>)
 800040e:	f043 0320 	orr.w	r3, r3, #32
 8000412:	6193      	str	r3, [r2, #24]
 8000414:	4b29      	ldr	r3, [pc, #164]	; (80004bc <MX_GPIO_Init+0xc8>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	f003 0320 	and.w	r3, r3, #32
 800041c:	607b      	str	r3, [r7, #4]
 800041e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000420:	4b26      	ldr	r3, [pc, #152]	; (80004bc <MX_GPIO_Init+0xc8>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	4a25      	ldr	r2, [pc, #148]	; (80004bc <MX_GPIO_Init+0xc8>)
 8000426:	f043 0304 	orr.w	r3, r3, #4
 800042a:	6193      	str	r3, [r2, #24]
 800042c:	4b23      	ldr	r3, [pc, #140]	; (80004bc <MX_GPIO_Init+0xc8>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	f003 0304 	and.w	r3, r3, #4
 8000434:	603b      	str	r3, [r7, #0]
 8000436:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8000438:	2201      	movs	r2, #1
 800043a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800043e:	4820      	ldr	r0, [pc, #128]	; (80004c0 <MX_GPIO_Init+0xcc>)
 8000440:	f000 feaf 	bl	80011a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000444:	2201      	movs	r2, #1
 8000446:	2104      	movs	r1, #4
 8000448:	481e      	ldr	r0, [pc, #120]	; (80004c4 <MX_GPIO_Init+0xd0>)
 800044a:	f000 feaa 	bl	80011a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 800044e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000452:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000454:	2301      	movs	r3, #1
 8000456:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000458:	2300      	movs	r3, #0
 800045a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800045c:	2302      	movs	r3, #2
 800045e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000460:	f107 0308 	add.w	r3, r7, #8
 8000464:	4619      	mov	r1, r3
 8000466:	4816      	ldr	r0, [pc, #88]	; (80004c0 <MX_GPIO_Init+0xcc>)
 8000468:	f000 fcf0 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY1_Pin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 800046c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000470:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000472:	4b15      	ldr	r3, [pc, #84]	; (80004c8 <MX_GPIO_Init+0xd4>)
 8000474:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000476:	2301      	movs	r3, #1
 8000478:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 800047a:	f107 0308 	add.w	r3, r7, #8
 800047e:	4619      	mov	r1, r3
 8000480:	480f      	ldr	r0, [pc, #60]	; (80004c0 <MX_GPIO_Init+0xcc>)
 8000482:	f000 fce3 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000486:	2304      	movs	r3, #4
 8000488:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800048a:	2301      	movs	r3, #1
 800048c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048e:	2300      	movs	r3, #0
 8000490:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000492:	2302      	movs	r3, #2
 8000494:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000496:	f107 0308 	add.w	r3, r7, #8
 800049a:	4619      	mov	r1, r3
 800049c:	4809      	ldr	r0, [pc, #36]	; (80004c4 <MX_GPIO_Init+0xd0>)
 800049e:	f000 fcd5 	bl	8000e4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80004a2:	2200      	movs	r2, #0
 80004a4:	2105      	movs	r1, #5
 80004a6:	2028      	movs	r0, #40	; 0x28
 80004a8:	f000 fb63 	bl	8000b72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80004ac:	2028      	movs	r0, #40	; 0x28
 80004ae:	f000 fb7c 	bl	8000baa <HAL_NVIC_EnableIRQ>

}
 80004b2:	bf00      	nop
 80004b4:	3718      	adds	r7, #24
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	40021000 	.word	0x40021000
 80004c0:	40010800 	.word	0x40010800
 80004c4:	40011400 	.word	0x40011400
 80004c8:	10110000 	.word	0x10110000

080004cc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	80fb      	strh	r3, [r7, #6]
switch (GPIO_Pin) {
 80004d6:	88fb      	ldrh	r3, [r7, #6]
 80004d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80004dc:	d112      	bne.n	8000504 <HAL_GPIO_EXTI_Callback+0x38>
case KEY1_Pin:
	if (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_RESET){
 80004de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004e2:	480a      	ldr	r0, [pc, #40]	; (800050c <HAL_GPIO_EXTI_Callback+0x40>)
 80004e4:	f000 fe46 	bl	8001174 <HAL_GPIO_ReadPin>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d10a      	bne.n	8000504 <HAL_GPIO_EXTI_Callback+0x38>
		  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80004ee:	4808      	ldr	r0, [pc, #32]	; (8000510 <HAL_GPIO_EXTI_Callback+0x44>)
 80004f0:	f7ff fe9e 	bl	8000230 <strlen>
 80004f4:	4603      	mov	r3, r0
 80004f6:	b29a      	uxth	r2, r3
 80004f8:	f04f 33ff 	mov.w	r3, #4294967295
 80004fc:	4904      	ldr	r1, [pc, #16]	; (8000510 <HAL_GPIO_EXTI_Callback+0x44>)
 80004fe:	4805      	ldr	r0, [pc, #20]	; (8000514 <HAL_GPIO_EXTI_Callback+0x48>)
 8000500:	f001 fd9f 	bl	8002042 <HAL_UART_Transmit>
		  //osDelay(500);
	}
}
}
 8000504:	bf00      	nop
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40010800 	.word	0x40010800
 8000510:	2000036c 	.word	0x2000036c
 8000514:	2000031c 	.word	0x2000031c

08000518 <Func_LED0>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Func_LED0 */
void Func_LED0(void const * argument)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8000520:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000524:	4803      	ldr	r0, [pc, #12]	; (8000534 <Func_LED0+0x1c>)
 8000526:	f000 fe54 	bl	80011d2 <HAL_GPIO_TogglePin>
osDelay(500);
 800052a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800052e:	f002 fa7d 	bl	8002a2c <osDelay>
HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8000532:	e7f5      	b.n	8000520 <Func_LED0+0x8>
 8000534:	40010800 	.word	0x40010800

08000538 <Func_LED1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Func_LED1 */
void Func_LED1(void const * argument)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Func_LED1 */
/* Infinite loop */
for(;;)
{
HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000540:	2104      	movs	r1, #4
 8000542:	4804      	ldr	r0, [pc, #16]	; (8000554 <Func_LED1+0x1c>)
 8000544:	f000 fe45 	bl	80011d2 <HAL_GPIO_TogglePin>
osDelay(500);
 8000548:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800054c:	f002 fa6e 	bl	8002a2c <osDelay>
HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000550:	e7f6      	b.n	8000540 <Func_LED1+0x8>
 8000552:	bf00      	nop
 8000554:	40011400 	.word	0x40011400

08000558 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b088      	sub	sp, #32
 800055c:	af02      	add	r7, sp, #8
 800055e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
	int i=0;
 8000560:	2300      	movs	r3, #0
 8000562:	617b      	str	r3, [r7, #20]
	int h,m,s;

  for(;;)
  {
	  h=i/3600;
 8000564:	697b      	ldr	r3, [r7, #20]
 8000566:	4a2c      	ldr	r2, [pc, #176]	; (8000618 <StartTask03+0xc0>)
 8000568:	fb82 1203 	smull	r1, r2, r2, r3
 800056c:	441a      	add	r2, r3
 800056e:	12d2      	asrs	r2, r2, #11
 8000570:	17db      	asrs	r3, r3, #31
 8000572:	1ad3      	subs	r3, r2, r3
 8000574:	613b      	str	r3, [r7, #16]
	  m=(i-h*3600)/60;
 8000576:	693b      	ldr	r3, [r7, #16]
 8000578:	4a28      	ldr	r2, [pc, #160]	; (800061c <StartTask03+0xc4>)
 800057a:	fb03 f202 	mul.w	r2, r3, r2
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	4413      	add	r3, r2
 8000582:	4a27      	ldr	r2, [pc, #156]	; (8000620 <StartTask03+0xc8>)
 8000584:	fb82 1203 	smull	r1, r2, r2, r3
 8000588:	441a      	add	r2, r3
 800058a:	1152      	asrs	r2, r2, #5
 800058c:	17db      	asrs	r3, r3, #31
 800058e:	1ad3      	subs	r3, r2, r3
 8000590:	60fb      	str	r3, [r7, #12]
	  s=i%60;
 8000592:	697a      	ldr	r2, [r7, #20]
 8000594:	4b22      	ldr	r3, [pc, #136]	; (8000620 <StartTask03+0xc8>)
 8000596:	fb83 1302 	smull	r1, r3, r3, r2
 800059a:	4413      	add	r3, r2
 800059c:	1159      	asrs	r1, r3, #5
 800059e:	17d3      	asrs	r3, r2, #31
 80005a0:	1ac9      	subs	r1, r1, r3
 80005a2:	460b      	mov	r3, r1
 80005a4:	011b      	lsls	r3, r3, #4
 80005a6:	1a5b      	subs	r3, r3, r1
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	1ad3      	subs	r3, r2, r3
 80005ac:	60bb      	str	r3, [r7, #8]
	  if (h==0&&m==0&&s==0){
 80005ae:	693b      	ldr	r3, [r7, #16]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d10a      	bne.n	80005ca <StartTask03+0x72>
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d107      	bne.n	80005ca <StartTask03+0x72>
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d104      	bne.n	80005ca <StartTask03+0x72>
		   sprintf(msg, "MiniSTM32 has been running 00h 00m 00s\r\n");
 80005c0:	4918      	ldr	r1, [pc, #96]	; (8000624 <StartTask03+0xcc>)
 80005c2:	4819      	ldr	r0, [pc, #100]	; (8000628 <StartTask03+0xd0>)
 80005c4:	f003 fbcc 	bl	8003d60 <siprintf>
	  if (h==0&&m==0&&s==0){
 80005c8:	e01d      	b.n	8000606 <StartTask03+0xae>
	  }
	  else if (h==0&&m==0){
 80005ca:	693b      	ldr	r3, [r7, #16]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d108      	bne.n	80005e2 <StartTask03+0x8a>
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d105      	bne.n	80005e2 <StartTask03+0x8a>
		  sprintf(msg, "MiniSTM32 has been running 00h 00m %ds\r\n", s);
 80005d6:	68ba      	ldr	r2, [r7, #8]
 80005d8:	4914      	ldr	r1, [pc, #80]	; (800062c <StartTask03+0xd4>)
 80005da:	4813      	ldr	r0, [pc, #76]	; (8000628 <StartTask03+0xd0>)
 80005dc:	f003 fbc0 	bl	8003d60 <siprintf>
	  else if (h==0&&m==0){
 80005e0:	e011      	b.n	8000606 <StartTask03+0xae>
	  }else if  (h==0){
 80005e2:	693b      	ldr	r3, [r7, #16]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d106      	bne.n	80005f6 <StartTask03+0x9e>
		  sprintf(msg, "MiniSTM32 has been running 00h %dm %ds\r\n", m,s);
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	68fa      	ldr	r2, [r7, #12]
 80005ec:	4910      	ldr	r1, [pc, #64]	; (8000630 <StartTask03+0xd8>)
 80005ee:	480e      	ldr	r0, [pc, #56]	; (8000628 <StartTask03+0xd0>)
 80005f0:	f003 fbb6 	bl	8003d60 <siprintf>
 80005f4:	e007      	b.n	8000606 <StartTask03+0xae>
	  }else {
		  sprintf(msg, "MiniSTM32 has been running %dh %dm %ds\r\n", h,m,s);
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	693a      	ldr	r2, [r7, #16]
 80005fe:	490d      	ldr	r1, [pc, #52]	; (8000634 <StartTask03+0xdc>)
 8000600:	4809      	ldr	r0, [pc, #36]	; (8000628 <StartTask03+0xd0>)
 8000602:	f003 fbad 	bl	8003d60 <siprintf>
	  }


    osDelay(1000);
 8000606:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800060a:	f002 fa0f 	bl	8002a2c <osDelay>
    i++;
 800060e:	697b      	ldr	r3, [r7, #20]
 8000610:	3301      	adds	r3, #1
 8000612:	617b      	str	r3, [r7, #20]
	  h=i/3600;
 8000614:	e7a6      	b.n	8000564 <StartTask03+0xc>
 8000616:	bf00      	nop
 8000618:	91a2b3c5 	.word	0x91a2b3c5
 800061c:	fffff1f0 	.word	0xfffff1f0
 8000620:	88888889 	.word	0x88888889
 8000624:	080047fc 	.word	0x080047fc
 8000628:	2000036c 	.word	0x2000036c
 800062c:	08004828 	.word	0x08004828
 8000630:	08004854 	.word	0x08004854
 8000634:	08004880 	.word	0x08004880

08000638 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a04      	ldr	r2, [pc, #16]	; (8000658 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d101      	bne.n	800064e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800064a:	f000 f9c1 	bl	80009d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40000400 	.word	0x40000400

0800065c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000660:	b672      	cpsid	i
}
 8000662:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000664:	e7fe      	b.n	8000664 <Error_Handler+0x8>
	...

08000668 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800066e:	4b18      	ldr	r3, [pc, #96]	; (80006d0 <HAL_MspInit+0x68>)
 8000670:	699b      	ldr	r3, [r3, #24]
 8000672:	4a17      	ldr	r2, [pc, #92]	; (80006d0 <HAL_MspInit+0x68>)
 8000674:	f043 0301 	orr.w	r3, r3, #1
 8000678:	6193      	str	r3, [r2, #24]
 800067a:	4b15      	ldr	r3, [pc, #84]	; (80006d0 <HAL_MspInit+0x68>)
 800067c:	699b      	ldr	r3, [r3, #24]
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000686:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <HAL_MspInit+0x68>)
 8000688:	69db      	ldr	r3, [r3, #28]
 800068a:	4a11      	ldr	r2, [pc, #68]	; (80006d0 <HAL_MspInit+0x68>)
 800068c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000690:	61d3      	str	r3, [r2, #28]
 8000692:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <HAL_MspInit+0x68>)
 8000694:	69db      	ldr	r3, [r3, #28]
 8000696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800069e:	2200      	movs	r2, #0
 80006a0:	210f      	movs	r1, #15
 80006a2:	f06f 0001 	mvn.w	r0, #1
 80006a6:	f000 fa64 	bl	8000b72 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006aa:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <HAL_MspInit+0x6c>)
 80006ac:	685b      	ldr	r3, [r3, #4]
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	4a04      	ldr	r2, [pc, #16]	; (80006d4 <HAL_MspInit+0x6c>)
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006c6:	bf00      	nop
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40021000 	.word	0x40021000
 80006d4:	40010000 	.word	0x40010000

080006d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b088      	sub	sp, #32
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e0:	f107 0310 	add.w	r3, r7, #16
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a20      	ldr	r2, [pc, #128]	; (8000774 <HAL_UART_MspInit+0x9c>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d139      	bne.n	800076c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006f8:	4b1f      	ldr	r3, [pc, #124]	; (8000778 <HAL_UART_MspInit+0xa0>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	4a1e      	ldr	r2, [pc, #120]	; (8000778 <HAL_UART_MspInit+0xa0>)
 80006fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000702:	6193      	str	r3, [r2, #24]
 8000704:	4b1c      	ldr	r3, [pc, #112]	; (8000778 <HAL_UART_MspInit+0xa0>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000710:	4b19      	ldr	r3, [pc, #100]	; (8000778 <HAL_UART_MspInit+0xa0>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	4a18      	ldr	r2, [pc, #96]	; (8000778 <HAL_UART_MspInit+0xa0>)
 8000716:	f043 0304 	orr.w	r3, r3, #4
 800071a:	6193      	str	r3, [r2, #24]
 800071c:	4b16      	ldr	r3, [pc, #88]	; (8000778 <HAL_UART_MspInit+0xa0>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	f003 0304 	and.w	r3, r3, #4
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000728:	f44f 7300 	mov.w	r3, #512	; 0x200
 800072c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072e:	2302      	movs	r3, #2
 8000730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000732:	2303      	movs	r3, #3
 8000734:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000736:	f107 0310 	add.w	r3, r7, #16
 800073a:	4619      	mov	r1, r3
 800073c:	480f      	ldr	r0, [pc, #60]	; (800077c <HAL_UART_MspInit+0xa4>)
 800073e:	f000 fb85 	bl	8000e4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000742:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000746:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000750:	f107 0310 	add.w	r3, r7, #16
 8000754:	4619      	mov	r1, r3
 8000756:	4809      	ldr	r0, [pc, #36]	; (800077c <HAL_UART_MspInit+0xa4>)
 8000758:	f000 fb78 	bl	8000e4c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800075c:	2200      	movs	r2, #0
 800075e:	2105      	movs	r1, #5
 8000760:	2025      	movs	r0, #37	; 0x25
 8000762:	f000 fa06 	bl	8000b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000766:	2025      	movs	r0, #37	; 0x25
 8000768:	f000 fa1f 	bl	8000baa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800076c:	bf00      	nop
 800076e:	3720      	adds	r7, #32
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40013800 	.word	0x40013800
 8000778:	40021000 	.word	0x40021000
 800077c:	40010800 	.word	0x40010800

08000780 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08e      	sub	sp, #56	; 0x38
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000788:	2300      	movs	r3, #0
 800078a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800078c:	2300      	movs	r3, #0
 800078e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000790:	2300      	movs	r3, #0
 8000792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000796:	4b34      	ldr	r3, [pc, #208]	; (8000868 <HAL_InitTick+0xe8>)
 8000798:	69db      	ldr	r3, [r3, #28]
 800079a:	4a33      	ldr	r2, [pc, #204]	; (8000868 <HAL_InitTick+0xe8>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	61d3      	str	r3, [r2, #28]
 80007a2:	4b31      	ldr	r3, [pc, #196]	; (8000868 <HAL_InitTick+0xe8>)
 80007a4:	69db      	ldr	r3, [r3, #28]
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007ae:	f107 0210 	add.w	r2, r7, #16
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f001 f937 	bl	8001a2c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80007be:	6a3b      	ldr	r3, [r7, #32]
 80007c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80007c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d103      	bne.n	80007d0 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80007c8:	f001 f908 	bl	80019dc <HAL_RCC_GetPCLK1Freq>
 80007cc:	6378      	str	r0, [r7, #52]	; 0x34
 80007ce:	e004      	b.n	80007da <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80007d0:	f001 f904 	bl	80019dc <HAL_RCC_GetPCLK1Freq>
 80007d4:	4603      	mov	r3, r0
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007dc:	4a23      	ldr	r2, [pc, #140]	; (800086c <HAL_InitTick+0xec>)
 80007de:	fba2 2303 	umull	r2, r3, r2, r3
 80007e2:	0c9b      	lsrs	r3, r3, #18
 80007e4:	3b01      	subs	r3, #1
 80007e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80007e8:	4b21      	ldr	r3, [pc, #132]	; (8000870 <HAL_InitTick+0xf0>)
 80007ea:	4a22      	ldr	r2, [pc, #136]	; (8000874 <HAL_InitTick+0xf4>)
 80007ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80007ee:	4b20      	ldr	r3, [pc, #128]	; (8000870 <HAL_InitTick+0xf0>)
 80007f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007f4:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80007f6:	4a1e      	ldr	r2, [pc, #120]	; (8000870 <HAL_InitTick+0xf0>)
 80007f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007fa:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80007fc:	4b1c      	ldr	r3, [pc, #112]	; (8000870 <HAL_InitTick+0xf0>)
 80007fe:	2200      	movs	r2, #0
 8000800:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000802:	4b1b      	ldr	r3, [pc, #108]	; (8000870 <HAL_InitTick+0xf0>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000808:	4b19      	ldr	r3, [pc, #100]	; (8000870 <HAL_InitTick+0xf0>)
 800080a:	2200      	movs	r2, #0
 800080c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 800080e:	4818      	ldr	r0, [pc, #96]	; (8000870 <HAL_InitTick+0xf0>)
 8000810:	f001 f95a 	bl	8001ac8 <HAL_TIM_Base_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800081a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800081e:	2b00      	cmp	r3, #0
 8000820:	d11b      	bne.n	800085a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000822:	4813      	ldr	r0, [pc, #76]	; (8000870 <HAL_InitTick+0xf0>)
 8000824:	f001 f9a8 	bl	8001b78 <HAL_TIM_Base_Start_IT>
 8000828:	4603      	mov	r3, r0
 800082a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800082e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000832:	2b00      	cmp	r3, #0
 8000834:	d111      	bne.n	800085a <HAL_InitTick+0xda>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000836:	201d      	movs	r0, #29
 8000838:	f000 f9b7 	bl	8000baa <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2b0f      	cmp	r3, #15
 8000840:	d808      	bhi.n	8000854 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000842:	2200      	movs	r2, #0
 8000844:	6879      	ldr	r1, [r7, #4]
 8000846:	201d      	movs	r0, #29
 8000848:	f000 f993 	bl	8000b72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800084c:	4a0a      	ldr	r2, [pc, #40]	; (8000878 <HAL_InitTick+0xf8>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	6013      	str	r3, [r2, #0]
 8000852:	e002      	b.n	800085a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000854:	2301      	movs	r3, #1
 8000856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800085a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800085e:	4618      	mov	r0, r3
 8000860:	3738      	adds	r7, #56	; 0x38
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40021000 	.word	0x40021000
 800086c:	431bde83 	.word	0x431bde83
 8000870:	200003d0 	.word	0x200003d0
 8000874:	40000400 	.word	0x40000400
 8000878:	20000004 	.word	0x20000004

0800087c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <NMI_Handler+0x4>

08000882 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000886:	e7fe      	b.n	8000886 <HardFault_Handler+0x4>

08000888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800088c:	e7fe      	b.n	800088c <MemManage_Handler+0x4>

0800088e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000892:	e7fe      	b.n	8000892 <BusFault_Handler+0x4>

08000894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000898:	e7fe      	b.n	8000898 <UsageFault_Handler+0x4>

0800089a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr
	...

080008a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80008ac:	4802      	ldr	r0, [pc, #8]	; (80008b8 <TIM3_IRQHandler+0x10>)
 80008ae:	f001 f9c3 	bl	8001c38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200003d0 	.word	0x200003d0

080008bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008c0:	4802      	ldr	r0, [pc, #8]	; (80008cc <USART1_IRQHandler+0x10>)
 80008c2:	f001 fc51 	bl	8002168 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	2000031c 	.word	0x2000031c

080008d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY1_Pin);
 80008d4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80008d8:	f000 fc94 	bl	8001204 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}

080008e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008e8:	4a14      	ldr	r2, [pc, #80]	; (800093c <_sbrk+0x5c>)
 80008ea:	4b15      	ldr	r3, [pc, #84]	; (8000940 <_sbrk+0x60>)
 80008ec:	1ad3      	subs	r3, r2, r3
 80008ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008f4:	4b13      	ldr	r3, [pc, #76]	; (8000944 <_sbrk+0x64>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d102      	bne.n	8000902 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008fc:	4b11      	ldr	r3, [pc, #68]	; (8000944 <_sbrk+0x64>)
 80008fe:	4a12      	ldr	r2, [pc, #72]	; (8000948 <_sbrk+0x68>)
 8000900:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000902:	4b10      	ldr	r3, [pc, #64]	; (8000944 <_sbrk+0x64>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4413      	add	r3, r2
 800090a:	693a      	ldr	r2, [r7, #16]
 800090c:	429a      	cmp	r2, r3
 800090e:	d207      	bcs.n	8000920 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000910:	f003 faa4 	bl	8003e5c <__errno>
 8000914:	4603      	mov	r3, r0
 8000916:	220c      	movs	r2, #12
 8000918:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800091a:	f04f 33ff 	mov.w	r3, #4294967295
 800091e:	e009      	b.n	8000934 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <_sbrk+0x64>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000926:	4b07      	ldr	r3, [pc, #28]	; (8000944 <_sbrk+0x64>)
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4413      	add	r3, r2
 800092e:	4a05      	ldr	r2, [pc, #20]	; (8000944 <_sbrk+0x64>)
 8000930:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000932:	68fb      	ldr	r3, [r7, #12]
}
 8000934:	4618      	mov	r0, r3
 8000936:	3718      	adds	r7, #24
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	2000c000 	.word	0x2000c000
 8000940:	00000400 	.word	0x00000400
 8000944:	20000418 	.word	0x20000418
 8000948:	200012b8 	.word	0x200012b8

0800094c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr

08000958 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000958:	480c      	ldr	r0, [pc, #48]	; (800098c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800095a:	490d      	ldr	r1, [pc, #52]	; (8000990 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800095c:	4a0d      	ldr	r2, [pc, #52]	; (8000994 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800095e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000960:	e002      	b.n	8000968 <LoopCopyDataInit>

08000962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000966:	3304      	adds	r3, #4

08000968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800096c:	d3f9      	bcc.n	8000962 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096e:	4a0a      	ldr	r2, [pc, #40]	; (8000998 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000970:	4c0a      	ldr	r4, [pc, #40]	; (800099c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000974:	e001      	b.n	800097a <LoopFillZerobss>

08000976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000978:	3204      	adds	r2, #4

0800097a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800097c:	d3fb      	bcc.n	8000976 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800097e:	f7ff ffe5 	bl	800094c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000982:	f003 fa71 	bl	8003e68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000986:	f7ff fc73 	bl	8000270 <main>
  bx lr
 800098a:	4770      	bx	lr
  ldr r0, =_sdata
 800098c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000990:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000994:	08004918 	.word	0x08004918
  ldr r2, =_sbss
 8000998:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800099c:	200012b4 	.word	0x200012b4

080009a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009a0:	e7fe      	b.n	80009a0 <ADC1_2_IRQHandler>
	...

080009a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a8:	4b08      	ldr	r3, [pc, #32]	; (80009cc <HAL_Init+0x28>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a07      	ldr	r2, [pc, #28]	; (80009cc <HAL_Init+0x28>)
 80009ae:	f043 0310 	orr.w	r3, r3, #16
 80009b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b4:	2003      	movs	r0, #3
 80009b6:	f000 f8d1 	bl	8000b5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ba:	200f      	movs	r0, #15
 80009bc:	f7ff fee0 	bl	8000780 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009c0:	f7ff fe52 	bl	8000668 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c4:	2300      	movs	r3, #0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40022000 	.word	0x40022000

080009d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d4:	4b05      	ldr	r3, [pc, #20]	; (80009ec <HAL_IncTick+0x1c>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	461a      	mov	r2, r3
 80009da:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <HAL_IncTick+0x20>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4413      	add	r3, r2
 80009e0:	4a03      	ldr	r2, [pc, #12]	; (80009f0 <HAL_IncTick+0x20>)
 80009e2:	6013      	str	r3, [r2, #0]
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr
 80009ec:	20000008 	.word	0x20000008
 80009f0:	2000041c 	.word	0x2000041c

080009f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  return uwTick;
 80009f8:	4b02      	ldr	r3, [pc, #8]	; (8000a04 <HAL_GetTick+0x10>)
 80009fa:	681b      	ldr	r3, [r3, #0]
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr
 8000a04:	2000041c 	.word	0x2000041c

08000a08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	f003 0307 	and.w	r3, r3, #7
 8000a16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <__NVIC_SetPriorityGrouping+0x44>)
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a1e:	68ba      	ldr	r2, [r7, #8]
 8000a20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a24:	4013      	ands	r3, r2
 8000a26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a3a:	4a04      	ldr	r2, [pc, #16]	; (8000a4c <__NVIC_SetPriorityGrouping+0x44>)
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	60d3      	str	r3, [r2, #12]
}
 8000a40:	bf00      	nop
 8000a42:	3714      	adds	r7, #20
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bc80      	pop	{r7}
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a54:	4b04      	ldr	r3, [pc, #16]	; (8000a68 <__NVIC_GetPriorityGrouping+0x18>)
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	0a1b      	lsrs	r3, r3, #8
 8000a5a:	f003 0307 	and.w	r3, r3, #7
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bc80      	pop	{r7}
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	db0b      	blt.n	8000a96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	f003 021f 	and.w	r2, r3, #31
 8000a84:	4906      	ldr	r1, [pc, #24]	; (8000aa0 <__NVIC_EnableIRQ+0x34>)
 8000a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8a:	095b      	lsrs	r3, r3, #5
 8000a8c:	2001      	movs	r0, #1
 8000a8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a96:	bf00      	nop
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr
 8000aa0:	e000e100 	.word	0xe000e100

08000aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	6039      	str	r1, [r7, #0]
 8000aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	db0a      	blt.n	8000ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	490c      	ldr	r1, [pc, #48]	; (8000af0 <__NVIC_SetPriority+0x4c>)
 8000abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac2:	0112      	lsls	r2, r2, #4
 8000ac4:	b2d2      	uxtb	r2, r2
 8000ac6:	440b      	add	r3, r1
 8000ac8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000acc:	e00a      	b.n	8000ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	4908      	ldr	r1, [pc, #32]	; (8000af4 <__NVIC_SetPriority+0x50>)
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	f003 030f 	and.w	r3, r3, #15
 8000ada:	3b04      	subs	r3, #4
 8000adc:	0112      	lsls	r2, r2, #4
 8000ade:	b2d2      	uxtb	r2, r2
 8000ae0:	440b      	add	r3, r1
 8000ae2:	761a      	strb	r2, [r3, #24]
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bc80      	pop	{r7}
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	e000e100 	.word	0xe000e100
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b089      	sub	sp, #36	; 0x24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	f1c3 0307 	rsb	r3, r3, #7
 8000b12:	2b04      	cmp	r3, #4
 8000b14:	bf28      	it	cs
 8000b16:	2304      	movcs	r3, #4
 8000b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3304      	adds	r3, #4
 8000b1e:	2b06      	cmp	r3, #6
 8000b20:	d902      	bls.n	8000b28 <NVIC_EncodePriority+0x30>
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	3b03      	subs	r3, #3
 8000b26:	e000      	b.n	8000b2a <NVIC_EncodePriority+0x32>
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	43da      	mvns	r2, r3
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	401a      	ands	r2, r3
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b40:	f04f 31ff 	mov.w	r1, #4294967295
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4a:	43d9      	mvns	r1, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b50:	4313      	orrs	r3, r2
         );
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3724      	adds	r7, #36	; 0x24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr

08000b5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f7ff ff4f 	bl	8000a08 <__NVIC_SetPriorityGrouping>
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b086      	sub	sp, #24
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	4603      	mov	r3, r0
 8000b7a:	60b9      	str	r1, [r7, #8]
 8000b7c:	607a      	str	r2, [r7, #4]
 8000b7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b84:	f7ff ff64 	bl	8000a50 <__NVIC_GetPriorityGrouping>
 8000b88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	68b9      	ldr	r1, [r7, #8]
 8000b8e:	6978      	ldr	r0, [r7, #20]
 8000b90:	f7ff ffb2 	bl	8000af8 <NVIC_EncodePriority>
 8000b94:	4602      	mov	r2, r0
 8000b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b9a:	4611      	mov	r1, r2
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff ff81 	bl	8000aa4 <__NVIC_SetPriority>
}
 8000ba2:	bf00      	nop
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b082      	sub	sp, #8
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff ff57 	bl	8000a6c <__NVIC_EnableIRQ>
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	b085      	sub	sp, #20
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000bd8:	2b02      	cmp	r3, #2
 8000bda:	d008      	beq.n	8000bee <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2204      	movs	r2, #4
 8000be0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2200      	movs	r2, #0
 8000be6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e020      	b.n	8000c30 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f022 020e 	bic.w	r2, r2, #14
 8000bfc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f022 0201 	bic.w	r2, r2, #1
 8000c0c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c16:	2101      	movs	r1, #1
 8000c18:	fa01 f202 	lsl.w	r2, r1, r2
 8000c1c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2201      	movs	r2, #1
 8000c22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3714      	adds	r7, #20
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bc80      	pop	{r7}
 8000c38:	4770      	bx	lr
	...

08000c3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c44:	2300      	movs	r3, #0
 8000c46:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	d005      	beq.n	8000c5e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2204      	movs	r2, #4
 8000c56:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	73fb      	strb	r3, [r7, #15]
 8000c5c:	e0d6      	b.n	8000e0c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f022 020e 	bic.w	r2, r2, #14
 8000c6c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f022 0201 	bic.w	r2, r2, #1
 8000c7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	461a      	mov	r2, r3
 8000c84:	4b64      	ldr	r3, [pc, #400]	; (8000e18 <HAL_DMA_Abort_IT+0x1dc>)
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d958      	bls.n	8000d3c <HAL_DMA_Abort_IT+0x100>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a63      	ldr	r2, [pc, #396]	; (8000e1c <HAL_DMA_Abort_IT+0x1e0>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d04f      	beq.n	8000d34 <HAL_DMA_Abort_IT+0xf8>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a61      	ldr	r2, [pc, #388]	; (8000e20 <HAL_DMA_Abort_IT+0x1e4>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d048      	beq.n	8000d30 <HAL_DMA_Abort_IT+0xf4>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a60      	ldr	r2, [pc, #384]	; (8000e24 <HAL_DMA_Abort_IT+0x1e8>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d040      	beq.n	8000d2a <HAL_DMA_Abort_IT+0xee>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a5e      	ldr	r2, [pc, #376]	; (8000e28 <HAL_DMA_Abort_IT+0x1ec>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d038      	beq.n	8000d24 <HAL_DMA_Abort_IT+0xe8>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a5d      	ldr	r2, [pc, #372]	; (8000e2c <HAL_DMA_Abort_IT+0x1f0>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d030      	beq.n	8000d1e <HAL_DMA_Abort_IT+0xe2>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a5b      	ldr	r2, [pc, #364]	; (8000e30 <HAL_DMA_Abort_IT+0x1f4>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d028      	beq.n	8000d18 <HAL_DMA_Abort_IT+0xdc>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a53      	ldr	r2, [pc, #332]	; (8000e18 <HAL_DMA_Abort_IT+0x1dc>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d020      	beq.n	8000d12 <HAL_DMA_Abort_IT+0xd6>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a57      	ldr	r2, [pc, #348]	; (8000e34 <HAL_DMA_Abort_IT+0x1f8>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d019      	beq.n	8000d0e <HAL_DMA_Abort_IT+0xd2>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a56      	ldr	r2, [pc, #344]	; (8000e38 <HAL_DMA_Abort_IT+0x1fc>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d012      	beq.n	8000d0a <HAL_DMA_Abort_IT+0xce>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a54      	ldr	r2, [pc, #336]	; (8000e3c <HAL_DMA_Abort_IT+0x200>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d00a      	beq.n	8000d04 <HAL_DMA_Abort_IT+0xc8>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a53      	ldr	r2, [pc, #332]	; (8000e40 <HAL_DMA_Abort_IT+0x204>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d102      	bne.n	8000cfe <HAL_DMA_Abort_IT+0xc2>
 8000cf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cfc:	e01b      	b.n	8000d36 <HAL_DMA_Abort_IT+0xfa>
 8000cfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d02:	e018      	b.n	8000d36 <HAL_DMA_Abort_IT+0xfa>
 8000d04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d08:	e015      	b.n	8000d36 <HAL_DMA_Abort_IT+0xfa>
 8000d0a:	2310      	movs	r3, #16
 8000d0c:	e013      	b.n	8000d36 <HAL_DMA_Abort_IT+0xfa>
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e011      	b.n	8000d36 <HAL_DMA_Abort_IT+0xfa>
 8000d12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d16:	e00e      	b.n	8000d36 <HAL_DMA_Abort_IT+0xfa>
 8000d18:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d1c:	e00b      	b.n	8000d36 <HAL_DMA_Abort_IT+0xfa>
 8000d1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d22:	e008      	b.n	8000d36 <HAL_DMA_Abort_IT+0xfa>
 8000d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d28:	e005      	b.n	8000d36 <HAL_DMA_Abort_IT+0xfa>
 8000d2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d2e:	e002      	b.n	8000d36 <HAL_DMA_Abort_IT+0xfa>
 8000d30:	2310      	movs	r3, #16
 8000d32:	e000      	b.n	8000d36 <HAL_DMA_Abort_IT+0xfa>
 8000d34:	2301      	movs	r3, #1
 8000d36:	4a43      	ldr	r2, [pc, #268]	; (8000e44 <HAL_DMA_Abort_IT+0x208>)
 8000d38:	6053      	str	r3, [r2, #4]
 8000d3a:	e057      	b.n	8000dec <HAL_DMA_Abort_IT+0x1b0>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a36      	ldr	r2, [pc, #216]	; (8000e1c <HAL_DMA_Abort_IT+0x1e0>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d04f      	beq.n	8000de6 <HAL_DMA_Abort_IT+0x1aa>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a35      	ldr	r2, [pc, #212]	; (8000e20 <HAL_DMA_Abort_IT+0x1e4>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d048      	beq.n	8000de2 <HAL_DMA_Abort_IT+0x1a6>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a33      	ldr	r2, [pc, #204]	; (8000e24 <HAL_DMA_Abort_IT+0x1e8>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d040      	beq.n	8000ddc <HAL_DMA_Abort_IT+0x1a0>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a32      	ldr	r2, [pc, #200]	; (8000e28 <HAL_DMA_Abort_IT+0x1ec>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d038      	beq.n	8000dd6 <HAL_DMA_Abort_IT+0x19a>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a30      	ldr	r2, [pc, #192]	; (8000e2c <HAL_DMA_Abort_IT+0x1f0>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d030      	beq.n	8000dd0 <HAL_DMA_Abort_IT+0x194>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a2f      	ldr	r2, [pc, #188]	; (8000e30 <HAL_DMA_Abort_IT+0x1f4>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d028      	beq.n	8000dca <HAL_DMA_Abort_IT+0x18e>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a26      	ldr	r2, [pc, #152]	; (8000e18 <HAL_DMA_Abort_IT+0x1dc>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d020      	beq.n	8000dc4 <HAL_DMA_Abort_IT+0x188>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a2b      	ldr	r2, [pc, #172]	; (8000e34 <HAL_DMA_Abort_IT+0x1f8>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d019      	beq.n	8000dc0 <HAL_DMA_Abort_IT+0x184>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a29      	ldr	r2, [pc, #164]	; (8000e38 <HAL_DMA_Abort_IT+0x1fc>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d012      	beq.n	8000dbc <HAL_DMA_Abort_IT+0x180>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a28      	ldr	r2, [pc, #160]	; (8000e3c <HAL_DMA_Abort_IT+0x200>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d00a      	beq.n	8000db6 <HAL_DMA_Abort_IT+0x17a>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a26      	ldr	r2, [pc, #152]	; (8000e40 <HAL_DMA_Abort_IT+0x204>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d102      	bne.n	8000db0 <HAL_DMA_Abort_IT+0x174>
 8000daa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dae:	e01b      	b.n	8000de8 <HAL_DMA_Abort_IT+0x1ac>
 8000db0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000db4:	e018      	b.n	8000de8 <HAL_DMA_Abort_IT+0x1ac>
 8000db6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dba:	e015      	b.n	8000de8 <HAL_DMA_Abort_IT+0x1ac>
 8000dbc:	2310      	movs	r3, #16
 8000dbe:	e013      	b.n	8000de8 <HAL_DMA_Abort_IT+0x1ac>
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	e011      	b.n	8000de8 <HAL_DMA_Abort_IT+0x1ac>
 8000dc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000dc8:	e00e      	b.n	8000de8 <HAL_DMA_Abort_IT+0x1ac>
 8000dca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000dce:	e00b      	b.n	8000de8 <HAL_DMA_Abort_IT+0x1ac>
 8000dd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dd4:	e008      	b.n	8000de8 <HAL_DMA_Abort_IT+0x1ac>
 8000dd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dda:	e005      	b.n	8000de8 <HAL_DMA_Abort_IT+0x1ac>
 8000ddc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000de0:	e002      	b.n	8000de8 <HAL_DMA_Abort_IT+0x1ac>
 8000de2:	2310      	movs	r3, #16
 8000de4:	e000      	b.n	8000de8 <HAL_DMA_Abort_IT+0x1ac>
 8000de6:	2301      	movs	r3, #1
 8000de8:	4a17      	ldr	r2, [pc, #92]	; (8000e48 <HAL_DMA_Abort_IT+0x20c>)
 8000dea:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2201      	movs	r2, #1
 8000df0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2200      	movs	r2, #0
 8000df8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d003      	beq.n	8000e0c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	4798      	blx	r3
    } 
  }
  return status;
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40020080 	.word	0x40020080
 8000e1c:	40020008 	.word	0x40020008
 8000e20:	4002001c 	.word	0x4002001c
 8000e24:	40020030 	.word	0x40020030
 8000e28:	40020044 	.word	0x40020044
 8000e2c:	40020058 	.word	0x40020058
 8000e30:	4002006c 	.word	0x4002006c
 8000e34:	40020408 	.word	0x40020408
 8000e38:	4002041c 	.word	0x4002041c
 8000e3c:	40020430 	.word	0x40020430
 8000e40:	40020444 	.word	0x40020444
 8000e44:	40020400 	.word	0x40020400
 8000e48:	40020000 	.word	0x40020000

08000e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b08b      	sub	sp, #44	; 0x2c
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e56:	2300      	movs	r3, #0
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e5e:	e179      	b.n	8001154 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e60:	2201      	movs	r2, #1
 8000e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	69fa      	ldr	r2, [r7, #28]
 8000e70:	4013      	ands	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	f040 8168 	bne.w	800114e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	4a96      	ldr	r2, [pc, #600]	; (80010dc <HAL_GPIO_Init+0x290>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d05e      	beq.n	8000f46 <HAL_GPIO_Init+0xfa>
 8000e88:	4a94      	ldr	r2, [pc, #592]	; (80010dc <HAL_GPIO_Init+0x290>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d875      	bhi.n	8000f7a <HAL_GPIO_Init+0x12e>
 8000e8e:	4a94      	ldr	r2, [pc, #592]	; (80010e0 <HAL_GPIO_Init+0x294>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d058      	beq.n	8000f46 <HAL_GPIO_Init+0xfa>
 8000e94:	4a92      	ldr	r2, [pc, #584]	; (80010e0 <HAL_GPIO_Init+0x294>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d86f      	bhi.n	8000f7a <HAL_GPIO_Init+0x12e>
 8000e9a:	4a92      	ldr	r2, [pc, #584]	; (80010e4 <HAL_GPIO_Init+0x298>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d052      	beq.n	8000f46 <HAL_GPIO_Init+0xfa>
 8000ea0:	4a90      	ldr	r2, [pc, #576]	; (80010e4 <HAL_GPIO_Init+0x298>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d869      	bhi.n	8000f7a <HAL_GPIO_Init+0x12e>
 8000ea6:	4a90      	ldr	r2, [pc, #576]	; (80010e8 <HAL_GPIO_Init+0x29c>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d04c      	beq.n	8000f46 <HAL_GPIO_Init+0xfa>
 8000eac:	4a8e      	ldr	r2, [pc, #568]	; (80010e8 <HAL_GPIO_Init+0x29c>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d863      	bhi.n	8000f7a <HAL_GPIO_Init+0x12e>
 8000eb2:	4a8e      	ldr	r2, [pc, #568]	; (80010ec <HAL_GPIO_Init+0x2a0>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d046      	beq.n	8000f46 <HAL_GPIO_Init+0xfa>
 8000eb8:	4a8c      	ldr	r2, [pc, #560]	; (80010ec <HAL_GPIO_Init+0x2a0>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d85d      	bhi.n	8000f7a <HAL_GPIO_Init+0x12e>
 8000ebe:	2b12      	cmp	r3, #18
 8000ec0:	d82a      	bhi.n	8000f18 <HAL_GPIO_Init+0xcc>
 8000ec2:	2b12      	cmp	r3, #18
 8000ec4:	d859      	bhi.n	8000f7a <HAL_GPIO_Init+0x12e>
 8000ec6:	a201      	add	r2, pc, #4	; (adr r2, 8000ecc <HAL_GPIO_Init+0x80>)
 8000ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ecc:	08000f47 	.word	0x08000f47
 8000ed0:	08000f21 	.word	0x08000f21
 8000ed4:	08000f33 	.word	0x08000f33
 8000ed8:	08000f75 	.word	0x08000f75
 8000edc:	08000f7b 	.word	0x08000f7b
 8000ee0:	08000f7b 	.word	0x08000f7b
 8000ee4:	08000f7b 	.word	0x08000f7b
 8000ee8:	08000f7b 	.word	0x08000f7b
 8000eec:	08000f7b 	.word	0x08000f7b
 8000ef0:	08000f7b 	.word	0x08000f7b
 8000ef4:	08000f7b 	.word	0x08000f7b
 8000ef8:	08000f7b 	.word	0x08000f7b
 8000efc:	08000f7b 	.word	0x08000f7b
 8000f00:	08000f7b 	.word	0x08000f7b
 8000f04:	08000f7b 	.word	0x08000f7b
 8000f08:	08000f7b 	.word	0x08000f7b
 8000f0c:	08000f7b 	.word	0x08000f7b
 8000f10:	08000f29 	.word	0x08000f29
 8000f14:	08000f3d 	.word	0x08000f3d
 8000f18:	4a75      	ldr	r2, [pc, #468]	; (80010f0 <HAL_GPIO_Init+0x2a4>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d013      	beq.n	8000f46 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f1e:	e02c      	b.n	8000f7a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	623b      	str	r3, [r7, #32]
          break;
 8000f26:	e029      	b.n	8000f7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	623b      	str	r3, [r7, #32]
          break;
 8000f30:	e024      	b.n	8000f7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	3308      	adds	r3, #8
 8000f38:	623b      	str	r3, [r7, #32]
          break;
 8000f3a:	e01f      	b.n	8000f7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	330c      	adds	r3, #12
 8000f42:	623b      	str	r3, [r7, #32]
          break;
 8000f44:	e01a      	b.n	8000f7c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d102      	bne.n	8000f54 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f4e:	2304      	movs	r3, #4
 8000f50:	623b      	str	r3, [r7, #32]
          break;
 8000f52:	e013      	b.n	8000f7c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d105      	bne.n	8000f68 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f5c:	2308      	movs	r3, #8
 8000f5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	69fa      	ldr	r2, [r7, #28]
 8000f64:	611a      	str	r2, [r3, #16]
          break;
 8000f66:	e009      	b.n	8000f7c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f68:	2308      	movs	r3, #8
 8000f6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	69fa      	ldr	r2, [r7, #28]
 8000f70:	615a      	str	r2, [r3, #20]
          break;
 8000f72:	e003      	b.n	8000f7c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f74:	2300      	movs	r3, #0
 8000f76:	623b      	str	r3, [r7, #32]
          break;
 8000f78:	e000      	b.n	8000f7c <HAL_GPIO_Init+0x130>
          break;
 8000f7a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	2bff      	cmp	r3, #255	; 0xff
 8000f80:	d801      	bhi.n	8000f86 <HAL_GPIO_Init+0x13a>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	e001      	b.n	8000f8a <HAL_GPIO_Init+0x13e>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	3304      	adds	r3, #4
 8000f8a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	2bff      	cmp	r3, #255	; 0xff
 8000f90:	d802      	bhi.n	8000f98 <HAL_GPIO_Init+0x14c>
 8000f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	e002      	b.n	8000f9e <HAL_GPIO_Init+0x152>
 8000f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9a:	3b08      	subs	r3, #8
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	210f      	movs	r1, #15
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	401a      	ands	r2, r3
 8000fb0:	6a39      	ldr	r1, [r7, #32]
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb8:	431a      	orrs	r2, r3
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	f000 80c1 	beq.w	800114e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fcc:	4b49      	ldr	r3, [pc, #292]	; (80010f4 <HAL_GPIO_Init+0x2a8>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	4a48      	ldr	r2, [pc, #288]	; (80010f4 <HAL_GPIO_Init+0x2a8>)
 8000fd2:	f043 0301 	orr.w	r3, r3, #1
 8000fd6:	6193      	str	r3, [r2, #24]
 8000fd8:	4b46      	ldr	r3, [pc, #280]	; (80010f4 <HAL_GPIO_Init+0x2a8>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	f003 0301 	and.w	r3, r3, #1
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fe4:	4a44      	ldr	r2, [pc, #272]	; (80010f8 <HAL_GPIO_Init+0x2ac>)
 8000fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe8:	089b      	lsrs	r3, r3, #2
 8000fea:	3302      	adds	r3, #2
 8000fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff4:	f003 0303 	and.w	r3, r3, #3
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	220f      	movs	r2, #15
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	4013      	ands	r3, r2
 8001006:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a3c      	ldr	r2, [pc, #240]	; (80010fc <HAL_GPIO_Init+0x2b0>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d01f      	beq.n	8001050 <HAL_GPIO_Init+0x204>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4a3b      	ldr	r2, [pc, #236]	; (8001100 <HAL_GPIO_Init+0x2b4>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d019      	beq.n	800104c <HAL_GPIO_Init+0x200>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a3a      	ldr	r2, [pc, #232]	; (8001104 <HAL_GPIO_Init+0x2b8>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d013      	beq.n	8001048 <HAL_GPIO_Init+0x1fc>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a39      	ldr	r2, [pc, #228]	; (8001108 <HAL_GPIO_Init+0x2bc>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d00d      	beq.n	8001044 <HAL_GPIO_Init+0x1f8>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a38      	ldr	r2, [pc, #224]	; (800110c <HAL_GPIO_Init+0x2c0>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d007      	beq.n	8001040 <HAL_GPIO_Init+0x1f4>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a37      	ldr	r2, [pc, #220]	; (8001110 <HAL_GPIO_Init+0x2c4>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d101      	bne.n	800103c <HAL_GPIO_Init+0x1f0>
 8001038:	2305      	movs	r3, #5
 800103a:	e00a      	b.n	8001052 <HAL_GPIO_Init+0x206>
 800103c:	2306      	movs	r3, #6
 800103e:	e008      	b.n	8001052 <HAL_GPIO_Init+0x206>
 8001040:	2304      	movs	r3, #4
 8001042:	e006      	b.n	8001052 <HAL_GPIO_Init+0x206>
 8001044:	2303      	movs	r3, #3
 8001046:	e004      	b.n	8001052 <HAL_GPIO_Init+0x206>
 8001048:	2302      	movs	r3, #2
 800104a:	e002      	b.n	8001052 <HAL_GPIO_Init+0x206>
 800104c:	2301      	movs	r3, #1
 800104e:	e000      	b.n	8001052 <HAL_GPIO_Init+0x206>
 8001050:	2300      	movs	r3, #0
 8001052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001054:	f002 0203 	and.w	r2, r2, #3
 8001058:	0092      	lsls	r2, r2, #2
 800105a:	4093      	lsls	r3, r2
 800105c:	68fa      	ldr	r2, [r7, #12]
 800105e:	4313      	orrs	r3, r2
 8001060:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001062:	4925      	ldr	r1, [pc, #148]	; (80010f8 <HAL_GPIO_Init+0x2ac>)
 8001064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001066:	089b      	lsrs	r3, r3, #2
 8001068:	3302      	adds	r3, #2
 800106a:	68fa      	ldr	r2, [r7, #12]
 800106c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d006      	beq.n	800108a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800107c:	4b25      	ldr	r3, [pc, #148]	; (8001114 <HAL_GPIO_Init+0x2c8>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	4924      	ldr	r1, [pc, #144]	; (8001114 <HAL_GPIO_Init+0x2c8>)
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	4313      	orrs	r3, r2
 8001086:	600b      	str	r3, [r1, #0]
 8001088:	e006      	b.n	8001098 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800108a:	4b22      	ldr	r3, [pc, #136]	; (8001114 <HAL_GPIO_Init+0x2c8>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	43db      	mvns	r3, r3
 8001092:	4920      	ldr	r1, [pc, #128]	; (8001114 <HAL_GPIO_Init+0x2c8>)
 8001094:	4013      	ands	r3, r2
 8001096:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d006      	beq.n	80010b2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010a4:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <HAL_GPIO_Init+0x2c8>)
 80010a6:	685a      	ldr	r2, [r3, #4]
 80010a8:	491a      	ldr	r1, [pc, #104]	; (8001114 <HAL_GPIO_Init+0x2c8>)
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	604b      	str	r3, [r1, #4]
 80010b0:	e006      	b.n	80010c0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010b2:	4b18      	ldr	r3, [pc, #96]	; (8001114 <HAL_GPIO_Init+0x2c8>)
 80010b4:	685a      	ldr	r2, [r3, #4]
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	43db      	mvns	r3, r3
 80010ba:	4916      	ldr	r1, [pc, #88]	; (8001114 <HAL_GPIO_Init+0x2c8>)
 80010bc:	4013      	ands	r3, r2
 80010be:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d025      	beq.n	8001118 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <HAL_GPIO_Init+0x2c8>)
 80010ce:	689a      	ldr	r2, [r3, #8]
 80010d0:	4910      	ldr	r1, [pc, #64]	; (8001114 <HAL_GPIO_Init+0x2c8>)
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	608b      	str	r3, [r1, #8]
 80010d8:	e025      	b.n	8001126 <HAL_GPIO_Init+0x2da>
 80010da:	bf00      	nop
 80010dc:	10320000 	.word	0x10320000
 80010e0:	10310000 	.word	0x10310000
 80010e4:	10220000 	.word	0x10220000
 80010e8:	10210000 	.word	0x10210000
 80010ec:	10120000 	.word	0x10120000
 80010f0:	10110000 	.word	0x10110000
 80010f4:	40021000 	.word	0x40021000
 80010f8:	40010000 	.word	0x40010000
 80010fc:	40010800 	.word	0x40010800
 8001100:	40010c00 	.word	0x40010c00
 8001104:	40011000 	.word	0x40011000
 8001108:	40011400 	.word	0x40011400
 800110c:	40011800 	.word	0x40011800
 8001110:	40011c00 	.word	0x40011c00
 8001114:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001118:	4b15      	ldr	r3, [pc, #84]	; (8001170 <HAL_GPIO_Init+0x324>)
 800111a:	689a      	ldr	r2, [r3, #8]
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	43db      	mvns	r3, r3
 8001120:	4913      	ldr	r1, [pc, #76]	; (8001170 <HAL_GPIO_Init+0x324>)
 8001122:	4013      	ands	r3, r2
 8001124:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d006      	beq.n	8001140 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001132:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <HAL_GPIO_Init+0x324>)
 8001134:	68da      	ldr	r2, [r3, #12]
 8001136:	490e      	ldr	r1, [pc, #56]	; (8001170 <HAL_GPIO_Init+0x324>)
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	4313      	orrs	r3, r2
 800113c:	60cb      	str	r3, [r1, #12]
 800113e:	e006      	b.n	800114e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001140:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <HAL_GPIO_Init+0x324>)
 8001142:	68da      	ldr	r2, [r3, #12]
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	43db      	mvns	r3, r3
 8001148:	4909      	ldr	r1, [pc, #36]	; (8001170 <HAL_GPIO_Init+0x324>)
 800114a:	4013      	ands	r3, r2
 800114c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800114e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001150:	3301      	adds	r3, #1
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115a:	fa22 f303 	lsr.w	r3, r2, r3
 800115e:	2b00      	cmp	r3, #0
 8001160:	f47f ae7e 	bne.w	8000e60 <HAL_GPIO_Init+0x14>
  }
}
 8001164:	bf00      	nop
 8001166:	bf00      	nop
 8001168:	372c      	adds	r7, #44	; 0x2c
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr
 8001170:	40010400 	.word	0x40010400

08001174 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	460b      	mov	r3, r1
 800117e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	887b      	ldrh	r3, [r7, #2]
 8001186:	4013      	ands	r3, r2
 8001188:	2b00      	cmp	r3, #0
 800118a:	d002      	beq.n	8001192 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800118c:	2301      	movs	r3, #1
 800118e:	73fb      	strb	r3, [r7, #15]
 8001190:	e001      	b.n	8001196 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001192:	2300      	movs	r3, #0
 8001194:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001196:	7bfb      	ldrb	r3, [r7, #15]
}
 8001198:	4618      	mov	r0, r3
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr

080011a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a2:	b480      	push	{r7}
 80011a4:	b083      	sub	sp, #12
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
 80011aa:	460b      	mov	r3, r1
 80011ac:	807b      	strh	r3, [r7, #2]
 80011ae:	4613      	mov	r3, r2
 80011b0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011b2:	787b      	ldrb	r3, [r7, #1]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d003      	beq.n	80011c0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011b8:	887a      	ldrh	r2, [r7, #2]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011be:	e003      	b.n	80011c8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011c0:	887b      	ldrh	r3, [r7, #2]
 80011c2:	041a      	lsls	r2, r3, #16
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	611a      	str	r2, [r3, #16]
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr

080011d2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011d2:	b480      	push	{r7}
 80011d4:	b085      	sub	sp, #20
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
 80011da:	460b      	mov	r3, r1
 80011dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011e4:	887a      	ldrh	r2, [r7, #2]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	4013      	ands	r3, r2
 80011ea:	041a      	lsls	r2, r3, #16
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	43d9      	mvns	r1, r3
 80011f0:	887b      	ldrh	r3, [r7, #2]
 80011f2:	400b      	ands	r3, r1
 80011f4:	431a      	orrs	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	611a      	str	r2, [r3, #16]
}
 80011fa:	bf00      	nop
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr

08001204 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800120e:	4b08      	ldr	r3, [pc, #32]	; (8001230 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001210:	695a      	ldr	r2, [r3, #20]
 8001212:	88fb      	ldrh	r3, [r7, #6]
 8001214:	4013      	ands	r3, r2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d006      	beq.n	8001228 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800121a:	4a05      	ldr	r2, [pc, #20]	; (8001230 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800121c:	88fb      	ldrh	r3, [r7, #6]
 800121e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001220:	88fb      	ldrh	r3, [r7, #6]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff f952 	bl	80004cc <HAL_GPIO_EXTI_Callback>
  }
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40010400 	.word	0x40010400

08001234 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e272      	b.n	800172c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b00      	cmp	r3, #0
 8001250:	f000 8087 	beq.w	8001362 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001254:	4b92      	ldr	r3, [pc, #584]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 030c 	and.w	r3, r3, #12
 800125c:	2b04      	cmp	r3, #4
 800125e:	d00c      	beq.n	800127a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001260:	4b8f      	ldr	r3, [pc, #572]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 030c 	and.w	r3, r3, #12
 8001268:	2b08      	cmp	r3, #8
 800126a:	d112      	bne.n	8001292 <HAL_RCC_OscConfig+0x5e>
 800126c:	4b8c      	ldr	r3, [pc, #560]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001278:	d10b      	bne.n	8001292 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800127a:	4b89      	ldr	r3, [pc, #548]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d06c      	beq.n	8001360 <HAL_RCC_OscConfig+0x12c>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d168      	bne.n	8001360 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e24c      	b.n	800172c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800129a:	d106      	bne.n	80012aa <HAL_RCC_OscConfig+0x76>
 800129c:	4b80      	ldr	r3, [pc, #512]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a7f      	ldr	r2, [pc, #508]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80012a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a6:	6013      	str	r3, [r2, #0]
 80012a8:	e02e      	b.n	8001308 <HAL_RCC_OscConfig+0xd4>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d10c      	bne.n	80012cc <HAL_RCC_OscConfig+0x98>
 80012b2:	4b7b      	ldr	r3, [pc, #492]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a7a      	ldr	r2, [pc, #488]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80012b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	4b78      	ldr	r3, [pc, #480]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a77      	ldr	r2, [pc, #476]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80012c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012c8:	6013      	str	r3, [r2, #0]
 80012ca:	e01d      	b.n	8001308 <HAL_RCC_OscConfig+0xd4>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012d4:	d10c      	bne.n	80012f0 <HAL_RCC_OscConfig+0xbc>
 80012d6:	4b72      	ldr	r3, [pc, #456]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a71      	ldr	r2, [pc, #452]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80012dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012e0:	6013      	str	r3, [r2, #0]
 80012e2:	4b6f      	ldr	r3, [pc, #444]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a6e      	ldr	r2, [pc, #440]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80012e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ec:	6013      	str	r3, [r2, #0]
 80012ee:	e00b      	b.n	8001308 <HAL_RCC_OscConfig+0xd4>
 80012f0:	4b6b      	ldr	r3, [pc, #428]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a6a      	ldr	r2, [pc, #424]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80012f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012fa:	6013      	str	r3, [r2, #0]
 80012fc:	4b68      	ldr	r3, [pc, #416]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a67      	ldr	r2, [pc, #412]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 8001302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001306:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d013      	beq.n	8001338 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001310:	f7ff fb70 	bl	80009f4 <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001318:	f7ff fb6c 	bl	80009f4 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b64      	cmp	r3, #100	; 0x64
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e200      	b.n	800172c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800132a:	4b5d      	ldr	r3, [pc, #372]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d0f0      	beq.n	8001318 <HAL_RCC_OscConfig+0xe4>
 8001336:	e014      	b.n	8001362 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001338:	f7ff fb5c 	bl	80009f4 <HAL_GetTick>
 800133c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001340:	f7ff fb58 	bl	80009f4 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b64      	cmp	r3, #100	; 0x64
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e1ec      	b.n	800172c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001352:	4b53      	ldr	r3, [pc, #332]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1f0      	bne.n	8001340 <HAL_RCC_OscConfig+0x10c>
 800135e:	e000      	b.n	8001362 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001360:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d063      	beq.n	8001436 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800136e:	4b4c      	ldr	r3, [pc, #304]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f003 030c 	and.w	r3, r3, #12
 8001376:	2b00      	cmp	r3, #0
 8001378:	d00b      	beq.n	8001392 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800137a:	4b49      	ldr	r3, [pc, #292]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f003 030c 	and.w	r3, r3, #12
 8001382:	2b08      	cmp	r3, #8
 8001384:	d11c      	bne.n	80013c0 <HAL_RCC_OscConfig+0x18c>
 8001386:	4b46      	ldr	r3, [pc, #280]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d116      	bne.n	80013c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001392:	4b43      	ldr	r3, [pc, #268]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d005      	beq.n	80013aa <HAL_RCC_OscConfig+0x176>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d001      	beq.n	80013aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e1c0      	b.n	800172c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013aa:	4b3d      	ldr	r3, [pc, #244]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	00db      	lsls	r3, r3, #3
 80013b8:	4939      	ldr	r1, [pc, #228]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80013ba:	4313      	orrs	r3, r2
 80013bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013be:	e03a      	b.n	8001436 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	691b      	ldr	r3, [r3, #16]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d020      	beq.n	800140a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013c8:	4b36      	ldr	r3, [pc, #216]	; (80014a4 <HAL_RCC_OscConfig+0x270>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ce:	f7ff fb11 	bl	80009f4 <HAL_GetTick>
 80013d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d4:	e008      	b.n	80013e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013d6:	f7ff fb0d 	bl	80009f4 <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d901      	bls.n	80013e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e1a1      	b.n	800172c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e8:	4b2d      	ldr	r3, [pc, #180]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d0f0      	beq.n	80013d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f4:	4b2a      	ldr	r3, [pc, #168]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	695b      	ldr	r3, [r3, #20]
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	4927      	ldr	r1, [pc, #156]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 8001404:	4313      	orrs	r3, r2
 8001406:	600b      	str	r3, [r1, #0]
 8001408:	e015      	b.n	8001436 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800140a:	4b26      	ldr	r3, [pc, #152]	; (80014a4 <HAL_RCC_OscConfig+0x270>)
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001410:	f7ff faf0 	bl	80009f4 <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001418:	f7ff faec 	bl	80009f4 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b02      	cmp	r3, #2
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e180      	b.n	800172c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800142a:	4b1d      	ldr	r3, [pc, #116]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1f0      	bne.n	8001418 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0308 	and.w	r3, r3, #8
 800143e:	2b00      	cmp	r3, #0
 8001440:	d03a      	beq.n	80014b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d019      	beq.n	800147e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800144a:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <HAL_RCC_OscConfig+0x274>)
 800144c:	2201      	movs	r2, #1
 800144e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001450:	f7ff fad0 	bl	80009f4 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001458:	f7ff facc 	bl	80009f4 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e160      	b.n	800172c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800146a:	4b0d      	ldr	r3, [pc, #52]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 800146c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0f0      	beq.n	8001458 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001476:	2001      	movs	r0, #1
 8001478:	f000 fb08 	bl	8001a8c <RCC_Delay>
 800147c:	e01c      	b.n	80014b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800147e:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <HAL_RCC_OscConfig+0x274>)
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001484:	f7ff fab6 	bl	80009f4 <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800148a:	e00f      	b.n	80014ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800148c:	f7ff fab2 	bl	80009f4 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d908      	bls.n	80014ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e146      	b.n	800172c <HAL_RCC_OscConfig+0x4f8>
 800149e:	bf00      	nop
 80014a0:	40021000 	.word	0x40021000
 80014a4:	42420000 	.word	0x42420000
 80014a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ac:	4b92      	ldr	r3, [pc, #584]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 80014ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1e9      	bne.n	800148c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0304 	and.w	r3, r3, #4
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f000 80a6 	beq.w	8001612 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014c6:	2300      	movs	r3, #0
 80014c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ca:	4b8b      	ldr	r3, [pc, #556]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d10d      	bne.n	80014f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014d6:	4b88      	ldr	r3, [pc, #544]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	4a87      	ldr	r2, [pc, #540]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 80014dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e0:	61d3      	str	r3, [r2, #28]
 80014e2:	4b85      	ldr	r3, [pc, #532]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 80014e4:	69db      	ldr	r3, [r3, #28]
 80014e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ea:	60bb      	str	r3, [r7, #8]
 80014ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014ee:	2301      	movs	r3, #1
 80014f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f2:	4b82      	ldr	r3, [pc, #520]	; (80016fc <HAL_RCC_OscConfig+0x4c8>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d118      	bne.n	8001530 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014fe:	4b7f      	ldr	r3, [pc, #508]	; (80016fc <HAL_RCC_OscConfig+0x4c8>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a7e      	ldr	r2, [pc, #504]	; (80016fc <HAL_RCC_OscConfig+0x4c8>)
 8001504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001508:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800150a:	f7ff fa73 	bl	80009f4 <HAL_GetTick>
 800150e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001510:	e008      	b.n	8001524 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001512:	f7ff fa6f 	bl	80009f4 <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b64      	cmp	r3, #100	; 0x64
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e103      	b.n	800172c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001524:	4b75      	ldr	r3, [pc, #468]	; (80016fc <HAL_RCC_OscConfig+0x4c8>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800152c:	2b00      	cmp	r3, #0
 800152e:	d0f0      	beq.n	8001512 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d106      	bne.n	8001546 <HAL_RCC_OscConfig+0x312>
 8001538:	4b6f      	ldr	r3, [pc, #444]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 800153a:	6a1b      	ldr	r3, [r3, #32]
 800153c:	4a6e      	ldr	r2, [pc, #440]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 800153e:	f043 0301 	orr.w	r3, r3, #1
 8001542:	6213      	str	r3, [r2, #32]
 8001544:	e02d      	b.n	80015a2 <HAL_RCC_OscConfig+0x36e>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d10c      	bne.n	8001568 <HAL_RCC_OscConfig+0x334>
 800154e:	4b6a      	ldr	r3, [pc, #424]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 8001550:	6a1b      	ldr	r3, [r3, #32]
 8001552:	4a69      	ldr	r2, [pc, #420]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 8001554:	f023 0301 	bic.w	r3, r3, #1
 8001558:	6213      	str	r3, [r2, #32]
 800155a:	4b67      	ldr	r3, [pc, #412]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 800155c:	6a1b      	ldr	r3, [r3, #32]
 800155e:	4a66      	ldr	r2, [pc, #408]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 8001560:	f023 0304 	bic.w	r3, r3, #4
 8001564:	6213      	str	r3, [r2, #32]
 8001566:	e01c      	b.n	80015a2 <HAL_RCC_OscConfig+0x36e>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	2b05      	cmp	r3, #5
 800156e:	d10c      	bne.n	800158a <HAL_RCC_OscConfig+0x356>
 8001570:	4b61      	ldr	r3, [pc, #388]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	4a60      	ldr	r2, [pc, #384]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 8001576:	f043 0304 	orr.w	r3, r3, #4
 800157a:	6213      	str	r3, [r2, #32]
 800157c:	4b5e      	ldr	r3, [pc, #376]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 800157e:	6a1b      	ldr	r3, [r3, #32]
 8001580:	4a5d      	ldr	r2, [pc, #372]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 8001582:	f043 0301 	orr.w	r3, r3, #1
 8001586:	6213      	str	r3, [r2, #32]
 8001588:	e00b      	b.n	80015a2 <HAL_RCC_OscConfig+0x36e>
 800158a:	4b5b      	ldr	r3, [pc, #364]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 800158c:	6a1b      	ldr	r3, [r3, #32]
 800158e:	4a5a      	ldr	r2, [pc, #360]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 8001590:	f023 0301 	bic.w	r3, r3, #1
 8001594:	6213      	str	r3, [r2, #32]
 8001596:	4b58      	ldr	r3, [pc, #352]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 8001598:	6a1b      	ldr	r3, [r3, #32]
 800159a:	4a57      	ldr	r2, [pc, #348]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 800159c:	f023 0304 	bic.w	r3, r3, #4
 80015a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d015      	beq.n	80015d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015aa:	f7ff fa23 	bl	80009f4 <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015b0:	e00a      	b.n	80015c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015b2:	f7ff fa1f 	bl	80009f4 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e0b1      	b.n	800172c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015c8:	4b4b      	ldr	r3, [pc, #300]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 80015ca:	6a1b      	ldr	r3, [r3, #32]
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d0ee      	beq.n	80015b2 <HAL_RCC_OscConfig+0x37e>
 80015d4:	e014      	b.n	8001600 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d6:	f7ff fa0d 	bl	80009f4 <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015dc:	e00a      	b.n	80015f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015de:	f7ff fa09 	bl	80009f4 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e09b      	b.n	800172c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015f4:	4b40      	ldr	r3, [pc, #256]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 80015f6:	6a1b      	ldr	r3, [r3, #32]
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1ee      	bne.n	80015de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001600:	7dfb      	ldrb	r3, [r7, #23]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d105      	bne.n	8001612 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001606:	4b3c      	ldr	r3, [pc, #240]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	4a3b      	ldr	r2, [pc, #236]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 800160c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001610:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	2b00      	cmp	r3, #0
 8001618:	f000 8087 	beq.w	800172a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800161c:	4b36      	ldr	r3, [pc, #216]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f003 030c 	and.w	r3, r3, #12
 8001624:	2b08      	cmp	r3, #8
 8001626:	d061      	beq.n	80016ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	69db      	ldr	r3, [r3, #28]
 800162c:	2b02      	cmp	r3, #2
 800162e:	d146      	bne.n	80016be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001630:	4b33      	ldr	r3, [pc, #204]	; (8001700 <HAL_RCC_OscConfig+0x4cc>)
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001636:	f7ff f9dd 	bl	80009f4 <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800163e:	f7ff f9d9 	bl	80009f4 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e06d      	b.n	800172c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001650:	4b29      	ldr	r3, [pc, #164]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d1f0      	bne.n	800163e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a1b      	ldr	r3, [r3, #32]
 8001660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001664:	d108      	bne.n	8001678 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001666:	4b24      	ldr	r3, [pc, #144]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	4921      	ldr	r1, [pc, #132]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 8001674:	4313      	orrs	r3, r2
 8001676:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001678:	4b1f      	ldr	r3, [pc, #124]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a19      	ldr	r1, [r3, #32]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001688:	430b      	orrs	r3, r1
 800168a:	491b      	ldr	r1, [pc, #108]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 800168c:	4313      	orrs	r3, r2
 800168e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001690:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <HAL_RCC_OscConfig+0x4cc>)
 8001692:	2201      	movs	r2, #1
 8001694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001696:	f7ff f9ad 	bl	80009f4 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800169e:	f7ff f9a9 	bl	80009f4 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e03d      	b.n	800172c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016b0:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0f0      	beq.n	800169e <HAL_RCC_OscConfig+0x46a>
 80016bc:	e035      	b.n	800172a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016be:	4b10      	ldr	r3, [pc, #64]	; (8001700 <HAL_RCC_OscConfig+0x4cc>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c4:	f7ff f996 	bl	80009f4 <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016cc:	f7ff f992 	bl	80009f4 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e026      	b.n	800172c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1f0      	bne.n	80016cc <HAL_RCC_OscConfig+0x498>
 80016ea:	e01e      	b.n	800172a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	69db      	ldr	r3, [r3, #28]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d107      	bne.n	8001704 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e019      	b.n	800172c <HAL_RCC_OscConfig+0x4f8>
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40007000 	.word	0x40007000
 8001700:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001704:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <HAL_RCC_OscConfig+0x500>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	429a      	cmp	r2, r3
 8001716:	d106      	bne.n	8001726 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001722:	429a      	cmp	r2, r3
 8001724:	d001      	beq.n	800172a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e000      	b.n	800172c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800172a:	2300      	movs	r3, #0
}
 800172c:	4618      	mov	r0, r3
 800172e:	3718      	adds	r7, #24
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40021000 	.word	0x40021000

08001738 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d101      	bne.n	800174c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e0d0      	b.n	80018ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800174c:	4b6a      	ldr	r3, [pc, #424]	; (80018f8 <HAL_RCC_ClockConfig+0x1c0>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0307 	and.w	r3, r3, #7
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	429a      	cmp	r2, r3
 8001758:	d910      	bls.n	800177c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175a:	4b67      	ldr	r3, [pc, #412]	; (80018f8 <HAL_RCC_ClockConfig+0x1c0>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f023 0207 	bic.w	r2, r3, #7
 8001762:	4965      	ldr	r1, [pc, #404]	; (80018f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	4313      	orrs	r3, r2
 8001768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800176a:	4b63      	ldr	r3, [pc, #396]	; (80018f8 <HAL_RCC_ClockConfig+0x1c0>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	429a      	cmp	r2, r3
 8001776:	d001      	beq.n	800177c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e0b8      	b.n	80018ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d020      	beq.n	80017ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001794:	4b59      	ldr	r3, [pc, #356]	; (80018fc <HAL_RCC_ClockConfig+0x1c4>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	4a58      	ldr	r2, [pc, #352]	; (80018fc <HAL_RCC_ClockConfig+0x1c4>)
 800179a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800179e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0308 	and.w	r3, r3, #8
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d005      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017ac:	4b53      	ldr	r3, [pc, #332]	; (80018fc <HAL_RCC_ClockConfig+0x1c4>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	4a52      	ldr	r2, [pc, #328]	; (80018fc <HAL_RCC_ClockConfig+0x1c4>)
 80017b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80017b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017b8:	4b50      	ldr	r3, [pc, #320]	; (80018fc <HAL_RCC_ClockConfig+0x1c4>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	494d      	ldr	r1, [pc, #308]	; (80018fc <HAL_RCC_ClockConfig+0x1c4>)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d040      	beq.n	8001858 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d107      	bne.n	80017ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017de:	4b47      	ldr	r3, [pc, #284]	; (80018fc <HAL_RCC_ClockConfig+0x1c4>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d115      	bne.n	8001816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e07f      	b.n	80018ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d107      	bne.n	8001806 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017f6:	4b41      	ldr	r3, [pc, #260]	; (80018fc <HAL_RCC_ClockConfig+0x1c4>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d109      	bne.n	8001816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e073      	b.n	80018ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001806:	4b3d      	ldr	r3, [pc, #244]	; (80018fc <HAL_RCC_ClockConfig+0x1c4>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e06b      	b.n	80018ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001816:	4b39      	ldr	r3, [pc, #228]	; (80018fc <HAL_RCC_ClockConfig+0x1c4>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f023 0203 	bic.w	r2, r3, #3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	4936      	ldr	r1, [pc, #216]	; (80018fc <HAL_RCC_ClockConfig+0x1c4>)
 8001824:	4313      	orrs	r3, r2
 8001826:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001828:	f7ff f8e4 	bl	80009f4 <HAL_GetTick>
 800182c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800182e:	e00a      	b.n	8001846 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001830:	f7ff f8e0 	bl	80009f4 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	f241 3288 	movw	r2, #5000	; 0x1388
 800183e:	4293      	cmp	r3, r2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e053      	b.n	80018ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001846:	4b2d      	ldr	r3, [pc, #180]	; (80018fc <HAL_RCC_ClockConfig+0x1c4>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f003 020c 	and.w	r2, r3, #12
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	429a      	cmp	r2, r3
 8001856:	d1eb      	bne.n	8001830 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001858:	4b27      	ldr	r3, [pc, #156]	; (80018f8 <HAL_RCC_ClockConfig+0x1c0>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0307 	and.w	r3, r3, #7
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	429a      	cmp	r2, r3
 8001864:	d210      	bcs.n	8001888 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001866:	4b24      	ldr	r3, [pc, #144]	; (80018f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f023 0207 	bic.w	r2, r3, #7
 800186e:	4922      	ldr	r1, [pc, #136]	; (80018f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	4313      	orrs	r3, r2
 8001874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001876:	4b20      	ldr	r3, [pc, #128]	; (80018f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	d001      	beq.n	8001888 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e032      	b.n	80018ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	2b00      	cmp	r3, #0
 8001892:	d008      	beq.n	80018a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001894:	4b19      	ldr	r3, [pc, #100]	; (80018fc <HAL_RCC_ClockConfig+0x1c4>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	4916      	ldr	r1, [pc, #88]	; (80018fc <HAL_RCC_ClockConfig+0x1c4>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0308 	and.w	r3, r3, #8
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d009      	beq.n	80018c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018b2:	4b12      	ldr	r3, [pc, #72]	; (80018fc <HAL_RCC_ClockConfig+0x1c4>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	490e      	ldr	r1, [pc, #56]	; (80018fc <HAL_RCC_ClockConfig+0x1c4>)
 80018c2:	4313      	orrs	r3, r2
 80018c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018c6:	f000 f821 	bl	800190c <HAL_RCC_GetSysClockFreq>
 80018ca:	4602      	mov	r2, r0
 80018cc:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <HAL_RCC_ClockConfig+0x1c4>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	091b      	lsrs	r3, r3, #4
 80018d2:	f003 030f 	and.w	r3, r3, #15
 80018d6:	490a      	ldr	r1, [pc, #40]	; (8001900 <HAL_RCC_ClockConfig+0x1c8>)
 80018d8:	5ccb      	ldrb	r3, [r1, r3]
 80018da:	fa22 f303 	lsr.w	r3, r2, r3
 80018de:	4a09      	ldr	r2, [pc, #36]	; (8001904 <HAL_RCC_ClockConfig+0x1cc>)
 80018e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018e2:	4b09      	ldr	r3, [pc, #36]	; (8001908 <HAL_RCC_ClockConfig+0x1d0>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe ff4a 	bl	8000780 <HAL_InitTick>

  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40022000 	.word	0x40022000
 80018fc:	40021000 	.word	0x40021000
 8001900:	080048c4 	.word	0x080048c4
 8001904:	20000000 	.word	0x20000000
 8001908:	20000004 	.word	0x20000004

0800190c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800190c:	b490      	push	{r4, r7}
 800190e:	b08a      	sub	sp, #40	; 0x28
 8001910:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001912:	4b29      	ldr	r3, [pc, #164]	; (80019b8 <HAL_RCC_GetSysClockFreq+0xac>)
 8001914:	1d3c      	adds	r4, r7, #4
 8001916:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001918:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800191c:	f240 2301 	movw	r3, #513	; 0x201
 8001920:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001922:	2300      	movs	r3, #0
 8001924:	61fb      	str	r3, [r7, #28]
 8001926:	2300      	movs	r3, #0
 8001928:	61bb      	str	r3, [r7, #24]
 800192a:	2300      	movs	r3, #0
 800192c:	627b      	str	r3, [r7, #36]	; 0x24
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001932:	2300      	movs	r3, #0
 8001934:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001936:	4b21      	ldr	r3, [pc, #132]	; (80019bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	f003 030c 	and.w	r3, r3, #12
 8001942:	2b04      	cmp	r3, #4
 8001944:	d002      	beq.n	800194c <HAL_RCC_GetSysClockFreq+0x40>
 8001946:	2b08      	cmp	r3, #8
 8001948:	d003      	beq.n	8001952 <HAL_RCC_GetSysClockFreq+0x46>
 800194a:	e02b      	b.n	80019a4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800194c:	4b1c      	ldr	r3, [pc, #112]	; (80019c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800194e:	623b      	str	r3, [r7, #32]
      break;
 8001950:	e02b      	b.n	80019aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	0c9b      	lsrs	r3, r3, #18
 8001956:	f003 030f 	and.w	r3, r3, #15
 800195a:	3328      	adds	r3, #40	; 0x28
 800195c:	443b      	add	r3, r7
 800195e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001962:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d012      	beq.n	8001994 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800196e:	4b13      	ldr	r3, [pc, #76]	; (80019bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	0c5b      	lsrs	r3, r3, #17
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	3328      	adds	r3, #40	; 0x28
 800197a:	443b      	add	r3, r7
 800197c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001980:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	4a0e      	ldr	r2, [pc, #56]	; (80019c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001986:	fb03 f202 	mul.w	r2, r3, r2
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
 8001992:	e004      	b.n	800199e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	4a0b      	ldr	r2, [pc, #44]	; (80019c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001998:	fb02 f303 	mul.w	r3, r2, r3
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	623b      	str	r3, [r7, #32]
      break;
 80019a2:	e002      	b.n	80019aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80019a6:	623b      	str	r3, [r7, #32]
      break;
 80019a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019aa:	6a3b      	ldr	r3, [r7, #32]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3728      	adds	r7, #40	; 0x28
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc90      	pop	{r4, r7}
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	080048ac 	.word	0x080048ac
 80019bc:	40021000 	.word	0x40021000
 80019c0:	007a1200 	.word	0x007a1200
 80019c4:	003d0900 	.word	0x003d0900

080019c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019cc:	4b02      	ldr	r3, [pc, #8]	; (80019d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80019ce:	681b      	ldr	r3, [r3, #0]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr
 80019d8:	20000000 	.word	0x20000000

080019dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019e0:	f7ff fff2 	bl	80019c8 <HAL_RCC_GetHCLKFreq>
 80019e4:	4602      	mov	r2, r0
 80019e6:	4b05      	ldr	r3, [pc, #20]	; (80019fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	0a1b      	lsrs	r3, r3, #8
 80019ec:	f003 0307 	and.w	r3, r3, #7
 80019f0:	4903      	ldr	r1, [pc, #12]	; (8001a00 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019f2:	5ccb      	ldrb	r3, [r1, r3]
 80019f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40021000 	.word	0x40021000
 8001a00:	080048d4 	.word	0x080048d4

08001a04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a08:	f7ff ffde 	bl	80019c8 <HAL_RCC_GetHCLKFreq>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	0adb      	lsrs	r3, r3, #11
 8001a14:	f003 0307 	and.w	r3, r3, #7
 8001a18:	4903      	ldr	r1, [pc, #12]	; (8001a28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a1a:	5ccb      	ldrb	r3, [r1, r3]
 8001a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40021000 	.word	0x40021000
 8001a28:	080048d4 	.word	0x080048d4

08001a2c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	220f      	movs	r2, #15
 8001a3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a3c:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <HAL_RCC_GetClockConfig+0x58>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 0203 	and.w	r2, r3, #3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a48:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <HAL_RCC_GetClockConfig+0x58>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a54:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <HAL_RCC_GetClockConfig+0x58>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001a60:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <HAL_RCC_GetClockConfig+0x58>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	08db      	lsrs	r3, r3, #3
 8001a66:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a6e:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <HAL_RCC_GetClockConfig+0x5c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0207 	and.w	r2, r3, #7
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr
 8001a84:	40021000 	.word	0x40021000
 8001a88:	40022000 	.word	0x40022000

08001a8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a94:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <RCC_Delay+0x34>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a0a      	ldr	r2, [pc, #40]	; (8001ac4 <RCC_Delay+0x38>)
 8001a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9e:	0a5b      	lsrs	r3, r3, #9
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	fb02 f303 	mul.w	r3, r2, r3
 8001aa6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001aa8:	bf00      	nop
  }
  while (Delay --);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	1e5a      	subs	r2, r3, #1
 8001aae:	60fa      	str	r2, [r7, #12]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1f9      	bne.n	8001aa8 <RCC_Delay+0x1c>
}
 8001ab4:	bf00      	nop
 8001ab6:	bf00      	nop
 8001ab8:	3714      	adds	r7, #20
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr
 8001ac0:	20000000 	.word	0x20000000
 8001ac4:	10624dd3 	.word	0x10624dd3

08001ac8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e041      	b.n	8001b5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d106      	bne.n	8001af4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 f839 	bl	8001b66 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2202      	movs	r2, #2
 8001af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3304      	adds	r3, #4
 8001b04:	4619      	mov	r1, r3
 8001b06:	4610      	mov	r0, r2
 8001b08:	f000 f9c2 	bl	8001e90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr

08001b78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d001      	beq.n	8001b90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e044      	b.n	8001c1a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2202      	movs	r2, #2
 8001b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68da      	ldr	r2, [r3, #12]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f042 0201 	orr.w	r2, r2, #1
 8001ba6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a1d      	ldr	r2, [pc, #116]	; (8001c24 <HAL_TIM_Base_Start_IT+0xac>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d018      	beq.n	8001be4 <HAL_TIM_Base_Start_IT+0x6c>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a1c      	ldr	r2, [pc, #112]	; (8001c28 <HAL_TIM_Base_Start_IT+0xb0>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d013      	beq.n	8001be4 <HAL_TIM_Base_Start_IT+0x6c>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bc4:	d00e      	beq.n	8001be4 <HAL_TIM_Base_Start_IT+0x6c>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a18      	ldr	r2, [pc, #96]	; (8001c2c <HAL_TIM_Base_Start_IT+0xb4>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d009      	beq.n	8001be4 <HAL_TIM_Base_Start_IT+0x6c>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a16      	ldr	r2, [pc, #88]	; (8001c30 <HAL_TIM_Base_Start_IT+0xb8>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d004      	beq.n	8001be4 <HAL_TIM_Base_Start_IT+0x6c>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a15      	ldr	r2, [pc, #84]	; (8001c34 <HAL_TIM_Base_Start_IT+0xbc>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d111      	bne.n	8001c08 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2b06      	cmp	r3, #6
 8001bf4:	d010      	beq.n	8001c18 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f042 0201 	orr.w	r2, r2, #1
 8001c04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c06:	e007      	b.n	8001c18 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f042 0201 	orr.w	r2, r2, #1
 8001c16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr
 8001c24:	40012c00 	.word	0x40012c00
 8001c28:	40013400 	.word	0x40013400
 8001c2c:	40000400 	.word	0x40000400
 8001c30:	40000800 	.word	0x40000800
 8001c34:	40000c00 	.word	0x40000c00

08001c38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d122      	bne.n	8001c94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d11b      	bne.n	8001c94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f06f 0202 	mvn.w	r2, #2
 8001c64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f8ed 	bl	8001e5a <HAL_TIM_IC_CaptureCallback>
 8001c80:	e005      	b.n	8001c8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f8e0 	bl	8001e48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 f8ef 	bl	8001e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	d122      	bne.n	8001ce8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	2b04      	cmp	r3, #4
 8001cae:	d11b      	bne.n	8001ce8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f06f 0204 	mvn.w	r2, #4
 8001cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f8c3 	bl	8001e5a <HAL_TIM_IC_CaptureCallback>
 8001cd4:	e005      	b.n	8001ce2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 f8b6 	bl	8001e48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 f8c5 	bl	8001e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	f003 0308 	and.w	r3, r3, #8
 8001cf2:	2b08      	cmp	r3, #8
 8001cf4:	d122      	bne.n	8001d3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	f003 0308 	and.w	r3, r3, #8
 8001d00:	2b08      	cmp	r3, #8
 8001d02:	d11b      	bne.n	8001d3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f06f 0208 	mvn.w	r2, #8
 8001d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2204      	movs	r2, #4
 8001d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f899 	bl	8001e5a <HAL_TIM_IC_CaptureCallback>
 8001d28:	e005      	b.n	8001d36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 f88c 	bl	8001e48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 f89b 	bl	8001e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	f003 0310 	and.w	r3, r3, #16
 8001d46:	2b10      	cmp	r3, #16
 8001d48:	d122      	bne.n	8001d90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	f003 0310 	and.w	r3, r3, #16
 8001d54:	2b10      	cmp	r3, #16
 8001d56:	d11b      	bne.n	8001d90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f06f 0210 	mvn.w	r2, #16
 8001d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2208      	movs	r2, #8
 8001d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f86f 	bl	8001e5a <HAL_TIM_IC_CaptureCallback>
 8001d7c:	e005      	b.n	8001d8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 f862 	bl	8001e48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 f871 	bl	8001e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d10e      	bne.n	8001dbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d107      	bne.n	8001dbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f06f 0201 	mvn.w	r2, #1
 8001db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7fe fc3e 	bl	8000638 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc6:	2b80      	cmp	r3, #128	; 0x80
 8001dc8:	d10e      	bne.n	8001de8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd4:	2b80      	cmp	r3, #128	; 0x80
 8001dd6:	d107      	bne.n	8001de8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 f8d7 	bl	8001f96 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001df2:	2b40      	cmp	r3, #64	; 0x40
 8001df4:	d10e      	bne.n	8001e14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e00:	2b40      	cmp	r3, #64	; 0x40
 8001e02:	d107      	bne.n	8001e14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f835 	bl	8001e7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	f003 0320 	and.w	r3, r3, #32
 8001e1e:	2b20      	cmp	r3, #32
 8001e20:	d10e      	bne.n	8001e40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	f003 0320 	and.w	r3, r3, #32
 8001e2c:	2b20      	cmp	r3, #32
 8001e2e:	d107      	bne.n	8001e40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f06f 0220 	mvn.w	r2, #32
 8001e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f8a2 	bl	8001f84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e40:	bf00      	nop
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bc80      	pop	{r7}
 8001e58:	4770      	bx	lr

08001e5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr

08001e6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr

08001e7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr

08001e90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a33      	ldr	r2, [pc, #204]	; (8001f70 <TIM_Base_SetConfig+0xe0>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d013      	beq.n	8001ed0 <TIM_Base_SetConfig+0x40>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a32      	ldr	r2, [pc, #200]	; (8001f74 <TIM_Base_SetConfig+0xe4>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d00f      	beq.n	8001ed0 <TIM_Base_SetConfig+0x40>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eb6:	d00b      	beq.n	8001ed0 <TIM_Base_SetConfig+0x40>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a2f      	ldr	r2, [pc, #188]	; (8001f78 <TIM_Base_SetConfig+0xe8>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d007      	beq.n	8001ed0 <TIM_Base_SetConfig+0x40>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a2e      	ldr	r2, [pc, #184]	; (8001f7c <TIM_Base_SetConfig+0xec>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d003      	beq.n	8001ed0 <TIM_Base_SetConfig+0x40>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a2d      	ldr	r2, [pc, #180]	; (8001f80 <TIM_Base_SetConfig+0xf0>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d108      	bne.n	8001ee2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ed6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a22      	ldr	r2, [pc, #136]	; (8001f70 <TIM_Base_SetConfig+0xe0>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d013      	beq.n	8001f12 <TIM_Base_SetConfig+0x82>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a21      	ldr	r2, [pc, #132]	; (8001f74 <TIM_Base_SetConfig+0xe4>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d00f      	beq.n	8001f12 <TIM_Base_SetConfig+0x82>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ef8:	d00b      	beq.n	8001f12 <TIM_Base_SetConfig+0x82>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a1e      	ldr	r2, [pc, #120]	; (8001f78 <TIM_Base_SetConfig+0xe8>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d007      	beq.n	8001f12 <TIM_Base_SetConfig+0x82>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a1d      	ldr	r2, [pc, #116]	; (8001f7c <TIM_Base_SetConfig+0xec>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d003      	beq.n	8001f12 <TIM_Base_SetConfig+0x82>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a1c      	ldr	r2, [pc, #112]	; (8001f80 <TIM_Base_SetConfig+0xf0>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d108      	bne.n	8001f24 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a09      	ldr	r2, [pc, #36]	; (8001f70 <TIM_Base_SetConfig+0xe0>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d003      	beq.n	8001f58 <TIM_Base_SetConfig+0xc8>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a08      	ldr	r2, [pc, #32]	; (8001f74 <TIM_Base_SetConfig+0xe4>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d103      	bne.n	8001f60 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	691a      	ldr	r2, [r3, #16]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	615a      	str	r2, [r3, #20]
}
 8001f66:	bf00      	nop
 8001f68:	3714      	adds	r7, #20
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr
 8001f70:	40012c00 	.word	0x40012c00
 8001f74:	40013400 	.word	0x40013400
 8001f78:	40000400 	.word	0x40000400
 8001f7c:	40000800 	.word	0x40000800
 8001f80:	40000c00 	.word	0x40000c00

08001f84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bc80      	pop	{r7}
 8001f94:	4770      	bx	lr

08001f96 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e03f      	b.n	800203a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d106      	bne.n	8001fd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7fe fb82 	bl	80006d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2224      	movs	r2, #36	; 0x24
 8001fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68da      	ldr	r2, [r3, #12]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 fc25 	bl	800283c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	691a      	ldr	r2, [r3, #16]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002000:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	695a      	ldr	r2, [r3, #20]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002010:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68da      	ldr	r2, [r3, #12]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002020:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2220      	movs	r2, #32
 800202c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2220      	movs	r2, #32
 8002034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b08a      	sub	sp, #40	; 0x28
 8002046:	af02      	add	r7, sp, #8
 8002048:	60f8      	str	r0, [r7, #12]
 800204a:	60b9      	str	r1, [r7, #8]
 800204c:	603b      	str	r3, [r7, #0]
 800204e:	4613      	mov	r3, r2
 8002050:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002052:	2300      	movs	r3, #0
 8002054:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b20      	cmp	r3, #32
 8002060:	d17c      	bne.n	800215c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d002      	beq.n	800206e <HAL_UART_Transmit+0x2c>
 8002068:	88fb      	ldrh	r3, [r7, #6]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e075      	b.n	800215e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002078:	2b01      	cmp	r3, #1
 800207a:	d101      	bne.n	8002080 <HAL_UART_Transmit+0x3e>
 800207c:	2302      	movs	r3, #2
 800207e:	e06e      	b.n	800215e <HAL_UART_Transmit+0x11c>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2221      	movs	r2, #33	; 0x21
 8002092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002096:	f7fe fcad 	bl	80009f4 <HAL_GetTick>
 800209a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	88fa      	ldrh	r2, [r7, #6]
 80020a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	88fa      	ldrh	r2, [r7, #6]
 80020a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020b0:	d108      	bne.n	80020c4 <HAL_UART_Transmit+0x82>
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d104      	bne.n	80020c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	61bb      	str	r3, [r7, #24]
 80020c2:	e003      	b.n	80020cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80020d4:	e02a      	b.n	800212c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	2200      	movs	r2, #0
 80020de:	2180      	movs	r1, #128	; 0x80
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f000 fa11 	bl	8002508 <UART_WaitOnFlagUntilTimeout>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e036      	b.n	800215e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10b      	bne.n	800210e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	881b      	ldrh	r3, [r3, #0]
 80020fa:	461a      	mov	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002104:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	3302      	adds	r3, #2
 800210a:	61bb      	str	r3, [r7, #24]
 800210c:	e007      	b.n	800211e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	781a      	ldrb	r2, [r3, #0]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	3301      	adds	r3, #1
 800211c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002122:	b29b      	uxth	r3, r3
 8002124:	3b01      	subs	r3, #1
 8002126:	b29a      	uxth	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002130:	b29b      	uxth	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1cf      	bne.n	80020d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	2200      	movs	r2, #0
 800213e:	2140      	movs	r1, #64	; 0x40
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f000 f9e1 	bl	8002508 <UART_WaitOnFlagUntilTimeout>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e006      	b.n	800215e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2220      	movs	r2, #32
 8002154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002158:	2300      	movs	r3, #0
 800215a:	e000      	b.n	800215e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800215c:	2302      	movs	r3, #2
  }
}
 800215e:	4618      	mov	r0, r3
 8002160:	3720      	adds	r7, #32
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08a      	sub	sp, #40	; 0x28
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002188:	2300      	movs	r3, #0
 800218a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d10d      	bne.n	80021ba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	f003 0320 	and.w	r3, r3, #32
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d008      	beq.n	80021ba <HAL_UART_IRQHandler+0x52>
 80021a8:	6a3b      	ldr	r3, [r7, #32]
 80021aa:	f003 0320 	and.w	r3, r3, #32
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 fa99 	bl	80026ea <UART_Receive_IT>
      return;
 80021b8:	e17b      	b.n	80024b2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 80b1 	beq.w	8002324 <HAL_UART_IRQHandler+0x1bc>
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d105      	bne.n	80021d8 <HAL_UART_IRQHandler+0x70>
 80021cc:	6a3b      	ldr	r3, [r7, #32]
 80021ce:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 80a6 	beq.w	8002324 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00a      	beq.n	80021f8 <HAL_UART_IRQHandler+0x90>
 80021e2:	6a3b      	ldr	r3, [r7, #32]
 80021e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d005      	beq.n	80021f8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	f043 0201 	orr.w	r2, r3, #1
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fa:	f003 0304 	and.w	r3, r3, #4
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00a      	beq.n	8002218 <HAL_UART_IRQHandler+0xb0>
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b00      	cmp	r3, #0
 800220a:	d005      	beq.n	8002218 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002210:	f043 0202 	orr.w	r2, r3, #2
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00a      	beq.n	8002238 <HAL_UART_IRQHandler+0xd0>
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b00      	cmp	r3, #0
 800222a:	d005      	beq.n	8002238 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	f043 0204 	orr.w	r2, r3, #4
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223a:	f003 0308 	and.w	r3, r3, #8
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00f      	beq.n	8002262 <HAL_UART_IRQHandler+0xfa>
 8002242:	6a3b      	ldr	r3, [r7, #32]
 8002244:	f003 0320 	and.w	r3, r3, #32
 8002248:	2b00      	cmp	r3, #0
 800224a:	d104      	bne.n	8002256 <HAL_UART_IRQHandler+0xee>
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b00      	cmp	r3, #0
 8002254:	d005      	beq.n	8002262 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	f043 0208 	orr.w	r2, r3, #8
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 811e 	beq.w	80024a8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	f003 0320 	and.w	r3, r3, #32
 8002272:	2b00      	cmp	r3, #0
 8002274:	d007      	beq.n	8002286 <HAL_UART_IRQHandler+0x11e>
 8002276:	6a3b      	ldr	r3, [r7, #32]
 8002278:	f003 0320 	and.w	r3, r3, #32
 800227c:	2b00      	cmp	r3, #0
 800227e:	d002      	beq.n	8002286 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 fa32 	bl	80026ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002290:	2b00      	cmp	r3, #0
 8002292:	bf14      	ite	ne
 8002294:	2301      	movne	r3, #1
 8002296:	2300      	moveq	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a0:	f003 0308 	and.w	r3, r3, #8
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d102      	bne.n	80022ae <HAL_UART_IRQHandler+0x146>
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d031      	beq.n	8002312 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 f974 	bl	800259c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d023      	beq.n	800230a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	695a      	ldr	r2, [r3, #20]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022d0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d013      	beq.n	8002302 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022de:	4a76      	ldr	r2, [pc, #472]	; (80024b8 <HAL_UART_IRQHandler+0x350>)
 80022e0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe fca8 	bl	8000c3c <HAL_DMA_Abort_IT>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d016      	beq.n	8002320 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022fc:	4610      	mov	r0, r2
 80022fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002300:	e00e      	b.n	8002320 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f8ec 	bl	80024e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002308:	e00a      	b.n	8002320 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f8e8 	bl	80024e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002310:	e006      	b.n	8002320 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f8e4 	bl	80024e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800231e:	e0c3      	b.n	80024a8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002320:	bf00      	nop
    return;
 8002322:	e0c1      	b.n	80024a8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002328:	2b01      	cmp	r3, #1
 800232a:	f040 80a1 	bne.w	8002470 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	f003 0310 	and.w	r3, r3, #16
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 809b 	beq.w	8002470 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800233a:	6a3b      	ldr	r3, [r7, #32]
 800233c:	f003 0310 	and.w	r3, r3, #16
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 8095 	beq.w	8002470 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002346:	2300      	movs	r3, #0
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002366:	2b00      	cmp	r3, #0
 8002368:	d04e      	beq.n	8002408 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002374:	8a3b      	ldrh	r3, [r7, #16]
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 8098 	beq.w	80024ac <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002380:	8a3a      	ldrh	r2, [r7, #16]
 8002382:	429a      	cmp	r2, r3
 8002384:	f080 8092 	bcs.w	80024ac <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	8a3a      	ldrh	r2, [r7, #16]
 800238c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	2b20      	cmp	r3, #32
 8002396:	d02b      	beq.n	80023f0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68da      	ldr	r2, [r3, #12]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023a6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	695a      	ldr	r2, [r3, #20]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 0201 	bic.w	r2, r2, #1
 80023b6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	695a      	ldr	r2, [r3, #20]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023c6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2220      	movs	r2, #32
 80023cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 0210 	bic.w	r2, r2, #16
 80023e4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7fe fbeb 	bl	8000bc6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	4619      	mov	r1, r3
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f000 f876 	bl	80024f2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002406:	e051      	b.n	80024ac <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002410:	b29b      	uxth	r3, r3
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800241a:	b29b      	uxth	r3, r3
 800241c:	2b00      	cmp	r3, #0
 800241e:	d047      	beq.n	80024b0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002420:	8a7b      	ldrh	r3, [r7, #18]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d044      	beq.n	80024b0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68da      	ldr	r2, [r3, #12]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002434:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	695a      	ldr	r2, [r3, #20]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 0201 	bic.w	r2, r2, #1
 8002444:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2220      	movs	r2, #32
 800244a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68da      	ldr	r2, [r3, #12]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f022 0210 	bic.w	r2, r2, #16
 8002462:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002464:	8a7b      	ldrh	r3, [r7, #18]
 8002466:	4619      	mov	r1, r3
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 f842 	bl	80024f2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800246e:	e01f      	b.n	80024b0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002476:	2b00      	cmp	r3, #0
 8002478:	d008      	beq.n	800248c <HAL_UART_IRQHandler+0x324>
 800247a:	6a3b      	ldr	r3, [r7, #32]
 800247c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002480:	2b00      	cmp	r3, #0
 8002482:	d003      	beq.n	800248c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 f8c9 	bl	800261c <UART_Transmit_IT>
    return;
 800248a:	e012      	b.n	80024b2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00d      	beq.n	80024b2 <HAL_UART_IRQHandler+0x34a>
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800249c:	2b00      	cmp	r3, #0
 800249e:	d008      	beq.n	80024b2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 f90a 	bl	80026ba <UART_EndTransmit_IT>
    return;
 80024a6:	e004      	b.n	80024b2 <HAL_UART_IRQHandler+0x34a>
    return;
 80024a8:	bf00      	nop
 80024aa:	e002      	b.n	80024b2 <HAL_UART_IRQHandler+0x34a>
      return;
 80024ac:	bf00      	nop
 80024ae:	e000      	b.n	80024b2 <HAL_UART_IRQHandler+0x34a>
      return;
 80024b0:	bf00      	nop
  }
}
 80024b2:	3728      	adds	r7, #40	; 0x28
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	080025f5 	.word	0x080025f5

080024bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr

080024ce <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr

080024e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bc80      	pop	{r7}
 80024f0:	4770      	bx	lr

080024f2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
 80024fa:	460b      	mov	r3, r1
 80024fc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80024fe:	bf00      	nop
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	bc80      	pop	{r7}
 8002506:	4770      	bx	lr

08002508 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	603b      	str	r3, [r7, #0]
 8002514:	4613      	mov	r3, r2
 8002516:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002518:	e02c      	b.n	8002574 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002520:	d028      	beq.n	8002574 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d007      	beq.n	8002538 <UART_WaitOnFlagUntilTimeout+0x30>
 8002528:	f7fe fa64 	bl	80009f4 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	429a      	cmp	r2, r3
 8002536:	d21d      	bcs.n	8002574 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68da      	ldr	r2, [r3, #12]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002546:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	695a      	ldr	r2, [r3, #20]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 0201 	bic.w	r2, r2, #1
 8002556:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2220      	movs	r2, #32
 800255c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2220      	movs	r2, #32
 8002564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e00f      	b.n	8002594 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	4013      	ands	r3, r2
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	429a      	cmp	r2, r3
 8002582:	bf0c      	ite	eq
 8002584:	2301      	moveq	r3, #1
 8002586:	2300      	movne	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	461a      	mov	r2, r3
 800258c:	79fb      	ldrb	r3, [r7, #7]
 800258e:	429a      	cmp	r2, r3
 8002590:	d0c3      	beq.n	800251a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68da      	ldr	r2, [r3, #12]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80025b2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	695a      	ldr	r2, [r3, #20]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 0201 	bic.w	r2, r2, #1
 80025c2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d107      	bne.n	80025dc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68da      	ldr	r2, [r3, #12]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0210 	bic.w	r2, r2, #16
 80025da:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2220      	movs	r2, #32
 80025e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr

080025f4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002600:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f7ff ff66 	bl	80024e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002614:	bf00      	nop
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b21      	cmp	r3, #33	; 0x21
 800262e:	d13e      	bne.n	80026ae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002638:	d114      	bne.n	8002664 <UART_Transmit_IT+0x48>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d110      	bne.n	8002664 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	881b      	ldrh	r3, [r3, #0]
 800264c:	461a      	mov	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002656:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	1c9a      	adds	r2, r3, #2
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	621a      	str	r2, [r3, #32]
 8002662:	e008      	b.n	8002676 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	1c59      	adds	r1, r3, #1
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	6211      	str	r1, [r2, #32]
 800266e:	781a      	ldrb	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800267a:	b29b      	uxth	r3, r3
 800267c:	3b01      	subs	r3, #1
 800267e:	b29b      	uxth	r3, r3
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	4619      	mov	r1, r3
 8002684:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002686:	2b00      	cmp	r3, #0
 8002688:	d10f      	bne.n	80026aa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68da      	ldr	r2, [r3, #12]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002698:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68da      	ldr	r2, [r3, #12]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026a8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80026aa:	2300      	movs	r3, #0
 80026ac:	e000      	b.n	80026b0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80026ae:	2302      	movs	r3, #2
  }
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bc80      	pop	{r7}
 80026b8:	4770      	bx	lr

080026ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b082      	sub	sp, #8
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68da      	ldr	r2, [r3, #12]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2220      	movs	r2, #32
 80026d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7ff feee 	bl	80024bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b086      	sub	sp, #24
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b22      	cmp	r3, #34	; 0x22
 80026fc:	f040 8099 	bne.w	8002832 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002708:	d117      	bne.n	800273a <UART_Receive_IT+0x50>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d113      	bne.n	800273a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	b29b      	uxth	r3, r3
 8002724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002728:	b29a      	uxth	r2, r3
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002732:	1c9a      	adds	r2, r3, #2
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	629a      	str	r2, [r3, #40]	; 0x28
 8002738:	e026      	b.n	8002788 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002740:	2300      	movs	r3, #0
 8002742:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800274c:	d007      	beq.n	800275e <UART_Receive_IT+0x74>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10a      	bne.n	800276c <UART_Receive_IT+0x82>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d106      	bne.n	800276c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	b2da      	uxtb	r2, r3
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	701a      	strb	r2, [r3, #0]
 800276a:	e008      	b.n	800277e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	b2db      	uxtb	r3, r3
 8002774:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002778:	b2da      	uxtb	r2, r3
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002782:	1c5a      	adds	r2, r3, #1
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800278c:	b29b      	uxth	r3, r3
 800278e:	3b01      	subs	r3, #1
 8002790:	b29b      	uxth	r3, r3
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	4619      	mov	r1, r3
 8002796:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002798:	2b00      	cmp	r3, #0
 800279a:	d148      	bne.n	800282e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 0220 	bic.w	r2, r2, #32
 80027aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68da      	ldr	r2, [r3, #12]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	695a      	ldr	r2, [r3, #20]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 0201 	bic.w	r2, r2, #1
 80027ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2220      	movs	r2, #32
 80027d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d123      	bne.n	8002824 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68da      	ldr	r2, [r3, #12]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0210 	bic.w	r2, r2, #16
 80027f0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0310 	and.w	r3, r3, #16
 80027fc:	2b10      	cmp	r3, #16
 80027fe:	d10a      	bne.n	8002816 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002800:	2300      	movs	r3, #0
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	60fb      	str	r3, [r7, #12]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800281a:	4619      	mov	r1, r3
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f7ff fe68 	bl	80024f2 <HAL_UARTEx_RxEventCallback>
 8002822:	e002      	b.n	800282a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f7ff fe52 	bl	80024ce <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800282a:	2300      	movs	r3, #0
 800282c:	e002      	b.n	8002834 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800282e:	2300      	movs	r3, #0
 8002830:	e000      	b.n	8002834 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002832:	2302      	movs	r3, #2
  }
}
 8002834:	4618      	mov	r0, r3
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68da      	ldr	r2, [r3, #12]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	431a      	orrs	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	4313      	orrs	r3, r2
 800286a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002876:	f023 030c 	bic.w	r3, r3, #12
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	6812      	ldr	r2, [r2, #0]
 800287e:	68b9      	ldr	r1, [r7, #8]
 8002880:	430b      	orrs	r3, r1
 8002882:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	699a      	ldr	r2, [r3, #24]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a2c      	ldr	r2, [pc, #176]	; (8002950 <UART_SetConfig+0x114>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d103      	bne.n	80028ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80028a4:	f7ff f8ae 	bl	8001a04 <HAL_RCC_GetPCLK2Freq>
 80028a8:	60f8      	str	r0, [r7, #12]
 80028aa:	e002      	b.n	80028b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80028ac:	f7ff f896 	bl	80019dc <HAL_RCC_GetPCLK1Freq>
 80028b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	4613      	mov	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	009a      	lsls	r2, r3, #2
 80028bc:	441a      	add	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c8:	4a22      	ldr	r2, [pc, #136]	; (8002954 <UART_SetConfig+0x118>)
 80028ca:	fba2 2303 	umull	r2, r3, r2, r3
 80028ce:	095b      	lsrs	r3, r3, #5
 80028d0:	0119      	lsls	r1, r3, #4
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	009a      	lsls	r2, r3, #2
 80028dc:	441a      	add	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80028e8:	4b1a      	ldr	r3, [pc, #104]	; (8002954 <UART_SetConfig+0x118>)
 80028ea:	fba3 0302 	umull	r0, r3, r3, r2
 80028ee:	095b      	lsrs	r3, r3, #5
 80028f0:	2064      	movs	r0, #100	; 0x64
 80028f2:	fb00 f303 	mul.w	r3, r0, r3
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	011b      	lsls	r3, r3, #4
 80028fa:	3332      	adds	r3, #50	; 0x32
 80028fc:	4a15      	ldr	r2, [pc, #84]	; (8002954 <UART_SetConfig+0x118>)
 80028fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002902:	095b      	lsrs	r3, r3, #5
 8002904:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002908:	4419      	add	r1, r3
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	4613      	mov	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	009a      	lsls	r2, r3, #2
 8002914:	441a      	add	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002920:	4b0c      	ldr	r3, [pc, #48]	; (8002954 <UART_SetConfig+0x118>)
 8002922:	fba3 0302 	umull	r0, r3, r3, r2
 8002926:	095b      	lsrs	r3, r3, #5
 8002928:	2064      	movs	r0, #100	; 0x64
 800292a:	fb00 f303 	mul.w	r3, r0, r3
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	011b      	lsls	r3, r3, #4
 8002932:	3332      	adds	r3, #50	; 0x32
 8002934:	4a07      	ldr	r2, [pc, #28]	; (8002954 <UART_SetConfig+0x118>)
 8002936:	fba2 2303 	umull	r2, r3, r2, r3
 800293a:	095b      	lsrs	r3, r3, #5
 800293c:	f003 020f 	and.w	r2, r3, #15
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	440a      	add	r2, r1
 8002946:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002948:	bf00      	nop
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40013800 	.word	0x40013800
 8002954:	51eb851f 	.word	0x51eb851f

08002958 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002962:	2300      	movs	r3, #0
 8002964:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002966:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800296a:	2b84      	cmp	r3, #132	; 0x84
 800296c:	d005      	beq.n	800297a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800296e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	4413      	add	r3, r2
 8002976:	3303      	adds	r3, #3
 8002978:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800297a:	68fb      	ldr	r3, [r7, #12]
}
 800297c:	4618      	mov	r0, r3
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr

08002986 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800298a:	f000 fae7 	bl	8002f5c <vTaskStartScheduler>
  
  return osOK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	bd80      	pop	{r7, pc}

08002994 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002996:	b089      	sub	sp, #36	; 0x24
 8002998:	af04      	add	r7, sp, #16
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d020      	beq.n	80029e8 <osThreadCreate+0x54>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d01c      	beq.n	80029e8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685c      	ldr	r4, [r3, #4]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	691e      	ldr	r6, [r3, #16]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff ffc9 	bl	8002958 <makeFreeRtosPriority>
 80029c6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029d0:	9202      	str	r2, [sp, #8]
 80029d2:	9301      	str	r3, [sp, #4]
 80029d4:	9100      	str	r1, [sp, #0]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	4632      	mov	r2, r6
 80029da:	4629      	mov	r1, r5
 80029dc:	4620      	mov	r0, r4
 80029de:	f000 f8e8 	bl	8002bb2 <xTaskCreateStatic>
 80029e2:	4603      	mov	r3, r0
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	e01c      	b.n	8002a22 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685c      	ldr	r4, [r3, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029f4:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff ffab 	bl	8002958 <makeFreeRtosPriority>
 8002a02:	4602      	mov	r2, r0
 8002a04:	f107 030c 	add.w	r3, r7, #12
 8002a08:	9301      	str	r3, [sp, #4]
 8002a0a:	9200      	str	r2, [sp, #0]
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	4632      	mov	r2, r6
 8002a10:	4629      	mov	r1, r5
 8002a12:	4620      	mov	r0, r4
 8002a14:	f000 f929 	bl	8002c6a <xTaskCreate>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d001      	beq.n	8002a22 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	e000      	b.n	8002a24 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002a22:	68fb      	ldr	r3, [r7, #12]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3714      	adds	r7, #20
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a2c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <osDelay+0x16>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	e000      	b.n	8002a44 <osDelay+0x18>
 8002a42:	2301      	movs	r3, #1
 8002a44:	4618      	mov	r0, r3
 8002a46:	f000 fa55 	bl	8002ef4 <vTaskDelay>
  
  return osOK;
 8002a4a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f103 0208 	add.w	r2, r3, #8
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f04f 32ff 	mov.w	r2, #4294967295
 8002a6c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f103 0208 	add.w	r2, r3, #8
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f103 0208 	add.w	r2, r3, #8
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr

08002a92 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr

08002aaa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b085      	sub	sp, #20
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
 8002ab2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	1c5a      	adds	r2, r3, #1
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	601a      	str	r2, [r3, #0]
}
 8002ae6:	bf00      	nop
 8002ae8:	3714      	adds	r7, #20
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr

08002af0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b06:	d103      	bne.n	8002b10 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	60fb      	str	r3, [r7, #12]
 8002b0e:	e00c      	b.n	8002b2a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3308      	adds	r3, #8
 8002b14:	60fb      	str	r3, [r7, #12]
 8002b16:	e002      	b.n	8002b1e <vListInsert+0x2e>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68ba      	ldr	r2, [r7, #8]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d2f6      	bcs.n	8002b18 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	685a      	ldr	r2, [r3, #4]
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	1c5a      	adds	r2, r3, #1
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	601a      	str	r2, [r3, #0]
}
 8002b56:	bf00      	nop
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bc80      	pop	{r7}
 8002b5e:	4770      	bx	lr

08002b60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6892      	ldr	r2, [r2, #8]
 8002b76:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	6852      	ldr	r2, [r2, #4]
 8002b80:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d103      	bne.n	8002b94 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689a      	ldr	r2, [r3, #8]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	1e5a      	subs	r2, r3, #1
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3714      	adds	r7, #20
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	4770      	bx	lr

08002bb2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b08e      	sub	sp, #56	; 0x38
 8002bb6:	af04      	add	r7, sp, #16
 8002bb8:	60f8      	str	r0, [r7, #12]
 8002bba:	60b9      	str	r1, [r7, #8]
 8002bbc:	607a      	str	r2, [r7, #4]
 8002bbe:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10a      	bne.n	8002bdc <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bca:	f383 8811 	msr	BASEPRI, r3
 8002bce:	f3bf 8f6f 	isb	sy
 8002bd2:	f3bf 8f4f 	dsb	sy
 8002bd6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002bd8:	bf00      	nop
 8002bda:	e7fe      	b.n	8002bda <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10a      	bne.n	8002bf8 <xTaskCreateStatic+0x46>
	__asm volatile
 8002be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be6:	f383 8811 	msr	BASEPRI, r3
 8002bea:	f3bf 8f6f 	isb	sy
 8002bee:	f3bf 8f4f 	dsb	sy
 8002bf2:	61fb      	str	r3, [r7, #28]
}
 8002bf4:	bf00      	nop
 8002bf6:	e7fe      	b.n	8002bf6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002bf8:	23a0      	movs	r3, #160	; 0xa0
 8002bfa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	2ba0      	cmp	r3, #160	; 0xa0
 8002c00:	d00a      	beq.n	8002c18 <xTaskCreateStatic+0x66>
	__asm volatile
 8002c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c06:	f383 8811 	msr	BASEPRI, r3
 8002c0a:	f3bf 8f6f 	isb	sy
 8002c0e:	f3bf 8f4f 	dsb	sy
 8002c12:	61bb      	str	r3, [r7, #24]
}
 8002c14:	bf00      	nop
 8002c16:	e7fe      	b.n	8002c16 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d01e      	beq.n	8002c5c <xTaskCreateStatic+0xaa>
 8002c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d01b      	beq.n	8002c5c <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c26:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c2c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	2202      	movs	r2, #2
 8002c32:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002c36:	2300      	movs	r3, #0
 8002c38:	9303      	str	r3, [sp, #12]
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	9302      	str	r3, [sp, #8]
 8002c3e:	f107 0314 	add.w	r3, r7, #20
 8002c42:	9301      	str	r3, [sp, #4]
 8002c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	68b9      	ldr	r1, [r7, #8]
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f000 f850 	bl	8002cf4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c56:	f000 f8e3 	bl	8002e20 <prvAddNewTaskToReadyList>
 8002c5a:	e001      	b.n	8002c60 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002c60:	697b      	ldr	r3, [r7, #20]
	}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3728      	adds	r7, #40	; 0x28
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b08c      	sub	sp, #48	; 0x30
 8002c6e:	af04      	add	r7, sp, #16
 8002c70:	60f8      	str	r0, [r7, #12]
 8002c72:	60b9      	str	r1, [r7, #8]
 8002c74:	603b      	str	r3, [r7, #0]
 8002c76:	4613      	mov	r3, r2
 8002c78:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c7a:	88fb      	ldrh	r3, [r7, #6]
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f000 fe96 	bl	80039b0 <pvPortMalloc>
 8002c84:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00e      	beq.n	8002caa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002c8c:	20a0      	movs	r0, #160	; 0xa0
 8002c8e:	f000 fe8f 	bl	80039b0 <pvPortMalloc>
 8002c92:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d003      	beq.n	8002ca2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	631a      	str	r2, [r3, #48]	; 0x30
 8002ca0:	e005      	b.n	8002cae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002ca2:	6978      	ldr	r0, [r7, #20]
 8002ca4:	f000 ff48 	bl	8003b38 <vPortFree>
 8002ca8:	e001      	b.n	8002cae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002caa:	2300      	movs	r3, #0
 8002cac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d017      	beq.n	8002ce4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002cbc:	88fa      	ldrh	r2, [r7, #6]
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	9303      	str	r3, [sp, #12]
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	9302      	str	r3, [sp, #8]
 8002cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc8:	9301      	str	r3, [sp, #4]
 8002cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	68b9      	ldr	r1, [r7, #8]
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 f80e 	bl	8002cf4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002cd8:	69f8      	ldr	r0, [r7, #28]
 8002cda:	f000 f8a1 	bl	8002e20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	61bb      	str	r3, [r7, #24]
 8002ce2:	e002      	b.n	8002cea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ce8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002cea:	69bb      	ldr	r3, [r7, #24]
	}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3720      	adds	r7, #32
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b088      	sub	sp, #32
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
 8002d00:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	f023 0307 	bic.w	r3, r3, #7
 8002d1a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	f003 0307 	and.w	r3, r3, #7
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00a      	beq.n	8002d3c <prvInitialiseNewTask+0x48>
	__asm volatile
 8002d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d2a:	f383 8811 	msr	BASEPRI, r3
 8002d2e:	f3bf 8f6f 	isb	sy
 8002d32:	f3bf 8f4f 	dsb	sy
 8002d36:	617b      	str	r3, [r7, #20]
}
 8002d38:	bf00      	nop
 8002d3a:	e7fe      	b.n	8002d3a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	61fb      	str	r3, [r7, #28]
 8002d40:	e012      	b.n	8002d68 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	4413      	add	r3, r2
 8002d48:	7819      	ldrb	r1, [r3, #0]
 8002d4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	4413      	add	r3, r2
 8002d50:	3334      	adds	r3, #52	; 0x34
 8002d52:	460a      	mov	r2, r1
 8002d54:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d006      	beq.n	8002d70 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	3301      	adds	r3, #1
 8002d66:	61fb      	str	r3, [r7, #28]
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	2b0f      	cmp	r3, #15
 8002d6c:	d9e9      	bls.n	8002d42 <prvInitialiseNewTask+0x4e>
 8002d6e:	e000      	b.n	8002d72 <prvInitialiseNewTask+0x7e>
		{
			break;
 8002d70:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7c:	2b06      	cmp	r3, #6
 8002d7e:	d901      	bls.n	8002d84 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d80:	2306      	movs	r3, #6
 8002d82:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d88:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d8e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d92:	2200      	movs	r2, #0
 8002d94:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d98:	3304      	adds	r3, #4
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff fe79 	bl	8002a92 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da2:	3318      	adds	r3, #24
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff fe74 	bl	8002a92 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db2:	f1c3 0207 	rsb	r2, r3, #7
 8002db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dbe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd2:	334c      	adds	r3, #76	; 0x4c
 8002dd4:	224c      	movs	r2, #76	; 0x4c
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f000 ffe1 	bl	8003da0 <memset>
 8002dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de0:	4a0c      	ldr	r2, [pc, #48]	; (8002e14 <prvInitialiseNewTask+0x120>)
 8002de2:	651a      	str	r2, [r3, #80]	; 0x50
 8002de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de6:	4a0c      	ldr	r2, [pc, #48]	; (8002e18 <prvInitialiseNewTask+0x124>)
 8002de8:	655a      	str	r2, [r3, #84]	; 0x54
 8002dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dec:	4a0b      	ldr	r2, [pc, #44]	; (8002e1c <prvInitialiseNewTask+0x128>)
 8002dee:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	68f9      	ldr	r1, [r7, #12]
 8002df4:	69b8      	ldr	r0, [r7, #24]
 8002df6:	f000 fc29 	bl	800364c <pxPortInitialiseStack>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfe:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d002      	beq.n	8002e0c <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e0a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e0c:	bf00      	nop
 8002e0e:	3720      	adds	r7, #32
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	2000116c 	.word	0x2000116c
 8002e18:	200011d4 	.word	0x200011d4
 8002e1c:	2000123c 	.word	0x2000123c

08002e20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002e28:	f000 fd00 	bl	800382c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002e2c:	4b2a      	ldr	r3, [pc, #168]	; (8002ed8 <prvAddNewTaskToReadyList+0xb8>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	3301      	adds	r3, #1
 8002e32:	4a29      	ldr	r2, [pc, #164]	; (8002ed8 <prvAddNewTaskToReadyList+0xb8>)
 8002e34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002e36:	4b29      	ldr	r3, [pc, #164]	; (8002edc <prvAddNewTaskToReadyList+0xbc>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d109      	bne.n	8002e52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002e3e:	4a27      	ldr	r2, [pc, #156]	; (8002edc <prvAddNewTaskToReadyList+0xbc>)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e44:	4b24      	ldr	r3, [pc, #144]	; (8002ed8 <prvAddNewTaskToReadyList+0xb8>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d110      	bne.n	8002e6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002e4c:	f000 fad2 	bl	80033f4 <prvInitialiseTaskLists>
 8002e50:	e00d      	b.n	8002e6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002e52:	4b23      	ldr	r3, [pc, #140]	; (8002ee0 <prvAddNewTaskToReadyList+0xc0>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d109      	bne.n	8002e6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e5a:	4b20      	ldr	r3, [pc, #128]	; (8002edc <prvAddNewTaskToReadyList+0xbc>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d802      	bhi.n	8002e6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002e68:	4a1c      	ldr	r2, [pc, #112]	; (8002edc <prvAddNewTaskToReadyList+0xbc>)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002e6e:	4b1d      	ldr	r3, [pc, #116]	; (8002ee4 <prvAddNewTaskToReadyList+0xc4>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	3301      	adds	r3, #1
 8002e74:	4a1b      	ldr	r2, [pc, #108]	; (8002ee4 <prvAddNewTaskToReadyList+0xc4>)
 8002e76:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	409a      	lsls	r2, r3
 8002e80:	4b19      	ldr	r3, [pc, #100]	; (8002ee8 <prvAddNewTaskToReadyList+0xc8>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	4a18      	ldr	r2, [pc, #96]	; (8002ee8 <prvAddNewTaskToReadyList+0xc8>)
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e8e:	4613      	mov	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4a15      	ldr	r2, [pc, #84]	; (8002eec <prvAddNewTaskToReadyList+0xcc>)
 8002e98:	441a      	add	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4610      	mov	r0, r2
 8002ea2:	f7ff fe02 	bl	8002aaa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002ea6:	f000 fcf1 	bl	800388c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002eaa:	4b0d      	ldr	r3, [pc, #52]	; (8002ee0 <prvAddNewTaskToReadyList+0xc0>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00e      	beq.n	8002ed0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002eb2:	4b0a      	ldr	r3, [pc, #40]	; (8002edc <prvAddNewTaskToReadyList+0xbc>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d207      	bcs.n	8002ed0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002ec0:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <prvAddNewTaskToReadyList+0xd0>)
 8002ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	f3bf 8f4f 	dsb	sy
 8002ecc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ed0:	bf00      	nop
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	20000520 	.word	0x20000520
 8002edc:	20000420 	.word	0x20000420
 8002ee0:	2000052c 	.word	0x2000052c
 8002ee4:	2000053c 	.word	0x2000053c
 8002ee8:	20000528 	.word	0x20000528
 8002eec:	20000424 	.word	0x20000424
 8002ef0:	e000ed04 	.word	0xe000ed04

08002ef4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002efc:	2300      	movs	r3, #0
 8002efe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d017      	beq.n	8002f36 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002f06:	4b13      	ldr	r3, [pc, #76]	; (8002f54 <vTaskDelay+0x60>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00a      	beq.n	8002f24 <vTaskDelay+0x30>
	__asm volatile
 8002f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f12:	f383 8811 	msr	BASEPRI, r3
 8002f16:	f3bf 8f6f 	isb	sy
 8002f1a:	f3bf 8f4f 	dsb	sy
 8002f1e:	60bb      	str	r3, [r7, #8]
}
 8002f20:	bf00      	nop
 8002f22:	e7fe      	b.n	8002f22 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002f24:	f000 f884 	bl	8003030 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002f28:	2100      	movs	r1, #0
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 fb28 	bl	8003580 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002f30:	f000 f88c 	bl	800304c <xTaskResumeAll>
 8002f34:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d107      	bne.n	8002f4c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002f3c:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <vTaskDelay+0x64>)
 8002f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	f3bf 8f4f 	dsb	sy
 8002f48:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002f4c:	bf00      	nop
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	20000548 	.word	0x20000548
 8002f58:	e000ed04 	.word	0xe000ed04

08002f5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b08a      	sub	sp, #40	; 0x28
 8002f60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002f62:	2300      	movs	r3, #0
 8002f64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002f66:	2300      	movs	r3, #0
 8002f68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002f6a:	463a      	mov	r2, r7
 8002f6c:	1d39      	adds	r1, r7, #4
 8002f6e:	f107 0308 	add.w	r3, r7, #8
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7fd f964 	bl	8000240 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002f78:	6839      	ldr	r1, [r7, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	9202      	str	r2, [sp, #8]
 8002f80:	9301      	str	r3, [sp, #4]
 8002f82:	2300      	movs	r3, #0
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	2300      	movs	r3, #0
 8002f88:	460a      	mov	r2, r1
 8002f8a:	4921      	ldr	r1, [pc, #132]	; (8003010 <vTaskStartScheduler+0xb4>)
 8002f8c:	4821      	ldr	r0, [pc, #132]	; (8003014 <vTaskStartScheduler+0xb8>)
 8002f8e:	f7ff fe10 	bl	8002bb2 <xTaskCreateStatic>
 8002f92:	4603      	mov	r3, r0
 8002f94:	4a20      	ldr	r2, [pc, #128]	; (8003018 <vTaskStartScheduler+0xbc>)
 8002f96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002f98:	4b1f      	ldr	r3, [pc, #124]	; (8003018 <vTaskStartScheduler+0xbc>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d002      	beq.n	8002fa6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	617b      	str	r3, [r7, #20]
 8002fa4:	e001      	b.n	8002faa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d11b      	bne.n	8002fe8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8002fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb4:	f383 8811 	msr	BASEPRI, r3
 8002fb8:	f3bf 8f6f 	isb	sy
 8002fbc:	f3bf 8f4f 	dsb	sy
 8002fc0:	613b      	str	r3, [r7, #16]
}
 8002fc2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002fc4:	4b15      	ldr	r3, [pc, #84]	; (800301c <vTaskStartScheduler+0xc0>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	334c      	adds	r3, #76	; 0x4c
 8002fca:	4a15      	ldr	r2, [pc, #84]	; (8003020 <vTaskStartScheduler+0xc4>)
 8002fcc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002fce:	4b15      	ldr	r3, [pc, #84]	; (8003024 <vTaskStartScheduler+0xc8>)
 8002fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002fd6:	4b14      	ldr	r3, [pc, #80]	; (8003028 <vTaskStartScheduler+0xcc>)
 8002fd8:	2201      	movs	r2, #1
 8002fda:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002fdc:	4b13      	ldr	r3, [pc, #76]	; (800302c <vTaskStartScheduler+0xd0>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002fe2:	f000 fbb1 	bl	8003748 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002fe6:	e00e      	b.n	8003006 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fee:	d10a      	bne.n	8003006 <vTaskStartScheduler+0xaa>
	__asm volatile
 8002ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff4:	f383 8811 	msr	BASEPRI, r3
 8002ff8:	f3bf 8f6f 	isb	sy
 8002ffc:	f3bf 8f4f 	dsb	sy
 8003000:	60fb      	str	r3, [r7, #12]
}
 8003002:	bf00      	nop
 8003004:	e7fe      	b.n	8003004 <vTaskStartScheduler+0xa8>
}
 8003006:	bf00      	nop
 8003008:	3718      	adds	r7, #24
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	080048bc 	.word	0x080048bc
 8003014:	080033c5 	.word	0x080033c5
 8003018:	20000544 	.word	0x20000544
 800301c:	20000420 	.word	0x20000420
 8003020:	2000005c 	.word	0x2000005c
 8003024:	20000540 	.word	0x20000540
 8003028:	2000052c 	.word	0x2000052c
 800302c:	20000524 	.word	0x20000524

08003030 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003034:	4b04      	ldr	r3, [pc, #16]	; (8003048 <vTaskSuspendAll+0x18>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	3301      	adds	r3, #1
 800303a:	4a03      	ldr	r2, [pc, #12]	; (8003048 <vTaskSuspendAll+0x18>)
 800303c:	6013      	str	r3, [r2, #0]
}
 800303e:	bf00      	nop
 8003040:	46bd      	mov	sp, r7
 8003042:	bc80      	pop	{r7}
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	20000548 	.word	0x20000548

0800304c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003052:	2300      	movs	r3, #0
 8003054:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003056:	2300      	movs	r3, #0
 8003058:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800305a:	4b41      	ldr	r3, [pc, #260]	; (8003160 <xTaskResumeAll+0x114>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10a      	bne.n	8003078 <xTaskResumeAll+0x2c>
	__asm volatile
 8003062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003066:	f383 8811 	msr	BASEPRI, r3
 800306a:	f3bf 8f6f 	isb	sy
 800306e:	f3bf 8f4f 	dsb	sy
 8003072:	603b      	str	r3, [r7, #0]
}
 8003074:	bf00      	nop
 8003076:	e7fe      	b.n	8003076 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003078:	f000 fbd8 	bl	800382c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800307c:	4b38      	ldr	r3, [pc, #224]	; (8003160 <xTaskResumeAll+0x114>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	3b01      	subs	r3, #1
 8003082:	4a37      	ldr	r2, [pc, #220]	; (8003160 <xTaskResumeAll+0x114>)
 8003084:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003086:	4b36      	ldr	r3, [pc, #216]	; (8003160 <xTaskResumeAll+0x114>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d161      	bne.n	8003152 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800308e:	4b35      	ldr	r3, [pc, #212]	; (8003164 <xTaskResumeAll+0x118>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d05d      	beq.n	8003152 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003096:	e02e      	b.n	80030f6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003098:	4b33      	ldr	r3, [pc, #204]	; (8003168 <xTaskResumeAll+0x11c>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	3318      	adds	r3, #24
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff fd5b 	bl	8002b60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	3304      	adds	r3, #4
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff fd56 	bl	8002b60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b8:	2201      	movs	r2, #1
 80030ba:	409a      	lsls	r2, r3
 80030bc:	4b2b      	ldr	r3, [pc, #172]	; (800316c <xTaskResumeAll+0x120>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	4a2a      	ldr	r2, [pc, #168]	; (800316c <xTaskResumeAll+0x120>)
 80030c4:	6013      	str	r3, [r2, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ca:	4613      	mov	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4a27      	ldr	r2, [pc, #156]	; (8003170 <xTaskResumeAll+0x124>)
 80030d4:	441a      	add	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	3304      	adds	r3, #4
 80030da:	4619      	mov	r1, r3
 80030dc:	4610      	mov	r0, r2
 80030de:	f7ff fce4 	bl	8002aaa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e6:	4b23      	ldr	r3, [pc, #140]	; (8003174 <xTaskResumeAll+0x128>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d302      	bcc.n	80030f6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80030f0:	4b21      	ldr	r3, [pc, #132]	; (8003178 <xTaskResumeAll+0x12c>)
 80030f2:	2201      	movs	r2, #1
 80030f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030f6:	4b1c      	ldr	r3, [pc, #112]	; (8003168 <xTaskResumeAll+0x11c>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1cc      	bne.n	8003098 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003104:	f000 fa18 	bl	8003538 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003108:	4b1c      	ldr	r3, [pc, #112]	; (800317c <xTaskResumeAll+0x130>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d010      	beq.n	8003136 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003114:	f000 f836 	bl	8003184 <xTaskIncrementTick>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d002      	beq.n	8003124 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800311e:	4b16      	ldr	r3, [pc, #88]	; (8003178 <xTaskResumeAll+0x12c>)
 8003120:	2201      	movs	r2, #1
 8003122:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	3b01      	subs	r3, #1
 8003128:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d1f1      	bne.n	8003114 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003130:	4b12      	ldr	r3, [pc, #72]	; (800317c <xTaskResumeAll+0x130>)
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003136:	4b10      	ldr	r3, [pc, #64]	; (8003178 <xTaskResumeAll+0x12c>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d009      	beq.n	8003152 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800313e:	2301      	movs	r3, #1
 8003140:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003142:	4b0f      	ldr	r3, [pc, #60]	; (8003180 <xTaskResumeAll+0x134>)
 8003144:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	f3bf 8f4f 	dsb	sy
 800314e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003152:	f000 fb9b 	bl	800388c <vPortExitCritical>

	return xAlreadyYielded;
 8003156:	68bb      	ldr	r3, [r7, #8]
}
 8003158:	4618      	mov	r0, r3
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	20000548 	.word	0x20000548
 8003164:	20000520 	.word	0x20000520
 8003168:	200004e0 	.word	0x200004e0
 800316c:	20000528 	.word	0x20000528
 8003170:	20000424 	.word	0x20000424
 8003174:	20000420 	.word	0x20000420
 8003178:	20000534 	.word	0x20000534
 800317c:	20000530 	.word	0x20000530
 8003180:	e000ed04 	.word	0xe000ed04

08003184 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800318a:	2300      	movs	r3, #0
 800318c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800318e:	4b51      	ldr	r3, [pc, #324]	; (80032d4 <xTaskIncrementTick+0x150>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	f040 808d 	bne.w	80032b2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003198:	4b4f      	ldr	r3, [pc, #316]	; (80032d8 <xTaskIncrementTick+0x154>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	3301      	adds	r3, #1
 800319e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80031a0:	4a4d      	ldr	r2, [pc, #308]	; (80032d8 <xTaskIncrementTick+0x154>)
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d120      	bne.n	80031ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80031ac:	4b4b      	ldr	r3, [pc, #300]	; (80032dc <xTaskIncrementTick+0x158>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00a      	beq.n	80031cc <xTaskIncrementTick+0x48>
	__asm volatile
 80031b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ba:	f383 8811 	msr	BASEPRI, r3
 80031be:	f3bf 8f6f 	isb	sy
 80031c2:	f3bf 8f4f 	dsb	sy
 80031c6:	603b      	str	r3, [r7, #0]
}
 80031c8:	bf00      	nop
 80031ca:	e7fe      	b.n	80031ca <xTaskIncrementTick+0x46>
 80031cc:	4b43      	ldr	r3, [pc, #268]	; (80032dc <xTaskIncrementTick+0x158>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	60fb      	str	r3, [r7, #12]
 80031d2:	4b43      	ldr	r3, [pc, #268]	; (80032e0 <xTaskIncrementTick+0x15c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a41      	ldr	r2, [pc, #260]	; (80032dc <xTaskIncrementTick+0x158>)
 80031d8:	6013      	str	r3, [r2, #0]
 80031da:	4a41      	ldr	r2, [pc, #260]	; (80032e0 <xTaskIncrementTick+0x15c>)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6013      	str	r3, [r2, #0]
 80031e0:	4b40      	ldr	r3, [pc, #256]	; (80032e4 <xTaskIncrementTick+0x160>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	3301      	adds	r3, #1
 80031e6:	4a3f      	ldr	r2, [pc, #252]	; (80032e4 <xTaskIncrementTick+0x160>)
 80031e8:	6013      	str	r3, [r2, #0]
 80031ea:	f000 f9a5 	bl	8003538 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80031ee:	4b3e      	ldr	r3, [pc, #248]	; (80032e8 <xTaskIncrementTick+0x164>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d34d      	bcc.n	8003294 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031f8:	4b38      	ldr	r3, [pc, #224]	; (80032dc <xTaskIncrementTick+0x158>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <xTaskIncrementTick+0x82>
 8003202:	2301      	movs	r3, #1
 8003204:	e000      	b.n	8003208 <xTaskIncrementTick+0x84>
 8003206:	2300      	movs	r3, #0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d004      	beq.n	8003216 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800320c:	4b36      	ldr	r3, [pc, #216]	; (80032e8 <xTaskIncrementTick+0x164>)
 800320e:	f04f 32ff 	mov.w	r2, #4294967295
 8003212:	601a      	str	r2, [r3, #0]
					break;
 8003214:	e03e      	b.n	8003294 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003216:	4b31      	ldr	r3, [pc, #196]	; (80032dc <xTaskIncrementTick+0x158>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	429a      	cmp	r2, r3
 800322c:	d203      	bcs.n	8003236 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800322e:	4a2e      	ldr	r2, [pc, #184]	; (80032e8 <xTaskIncrementTick+0x164>)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6013      	str	r3, [r2, #0]
						break;
 8003234:	e02e      	b.n	8003294 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	3304      	adds	r3, #4
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff fc90 	bl	8002b60 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003244:	2b00      	cmp	r3, #0
 8003246:	d004      	beq.n	8003252 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	3318      	adds	r3, #24
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff fc87 	bl	8002b60 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003256:	2201      	movs	r2, #1
 8003258:	409a      	lsls	r2, r3
 800325a:	4b24      	ldr	r3, [pc, #144]	; (80032ec <xTaskIncrementTick+0x168>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4313      	orrs	r3, r2
 8003260:	4a22      	ldr	r2, [pc, #136]	; (80032ec <xTaskIncrementTick+0x168>)
 8003262:	6013      	str	r3, [r2, #0]
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003268:	4613      	mov	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4a1f      	ldr	r2, [pc, #124]	; (80032f0 <xTaskIncrementTick+0x16c>)
 8003272:	441a      	add	r2, r3
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	3304      	adds	r3, #4
 8003278:	4619      	mov	r1, r3
 800327a:	4610      	mov	r0, r2
 800327c:	f7ff fc15 	bl	8002aaa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003284:	4b1b      	ldr	r3, [pc, #108]	; (80032f4 <xTaskIncrementTick+0x170>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328a:	429a      	cmp	r2, r3
 800328c:	d3b4      	bcc.n	80031f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800328e:	2301      	movs	r3, #1
 8003290:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003292:	e7b1      	b.n	80031f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003294:	4b17      	ldr	r3, [pc, #92]	; (80032f4 <xTaskIncrementTick+0x170>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800329a:	4915      	ldr	r1, [pc, #84]	; (80032f0 <xTaskIncrementTick+0x16c>)
 800329c:	4613      	mov	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4413      	add	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d907      	bls.n	80032bc <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80032ac:	2301      	movs	r3, #1
 80032ae:	617b      	str	r3, [r7, #20]
 80032b0:	e004      	b.n	80032bc <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80032b2:	4b11      	ldr	r3, [pc, #68]	; (80032f8 <xTaskIncrementTick+0x174>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	3301      	adds	r3, #1
 80032b8:	4a0f      	ldr	r2, [pc, #60]	; (80032f8 <xTaskIncrementTick+0x174>)
 80032ba:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80032bc:	4b0f      	ldr	r3, [pc, #60]	; (80032fc <xTaskIncrementTick+0x178>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d001      	beq.n	80032c8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80032c4:	2301      	movs	r3, #1
 80032c6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80032c8:	697b      	ldr	r3, [r7, #20]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3718      	adds	r7, #24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	20000548 	.word	0x20000548
 80032d8:	20000524 	.word	0x20000524
 80032dc:	200004d8 	.word	0x200004d8
 80032e0:	200004dc 	.word	0x200004dc
 80032e4:	20000538 	.word	0x20000538
 80032e8:	20000540 	.word	0x20000540
 80032ec:	20000528 	.word	0x20000528
 80032f0:	20000424 	.word	0x20000424
 80032f4:	20000420 	.word	0x20000420
 80032f8:	20000530 	.word	0x20000530
 80032fc:	20000534 	.word	0x20000534

08003300 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003300:	b480      	push	{r7}
 8003302:	b087      	sub	sp, #28
 8003304:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003306:	4b29      	ldr	r3, [pc, #164]	; (80033ac <vTaskSwitchContext+0xac>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800330e:	4b28      	ldr	r3, [pc, #160]	; (80033b0 <vTaskSwitchContext+0xb0>)
 8003310:	2201      	movs	r2, #1
 8003312:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003314:	e044      	b.n	80033a0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8003316:	4b26      	ldr	r3, [pc, #152]	; (80033b0 <vTaskSwitchContext+0xb0>)
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800331c:	4b25      	ldr	r3, [pc, #148]	; (80033b4 <vTaskSwitchContext+0xb4>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	fab3 f383 	clz	r3, r3
 8003328:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800332a:	7afb      	ldrb	r3, [r7, #11]
 800332c:	f1c3 031f 	rsb	r3, r3, #31
 8003330:	617b      	str	r3, [r7, #20]
 8003332:	4921      	ldr	r1, [pc, #132]	; (80033b8 <vTaskSwitchContext+0xb8>)
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	4613      	mov	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4413      	add	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	440b      	add	r3, r1
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10a      	bne.n	800335c <vTaskSwitchContext+0x5c>
	__asm volatile
 8003346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334a:	f383 8811 	msr	BASEPRI, r3
 800334e:	f3bf 8f6f 	isb	sy
 8003352:	f3bf 8f4f 	dsb	sy
 8003356:	607b      	str	r3, [r7, #4]
}
 8003358:	bf00      	nop
 800335a:	e7fe      	b.n	800335a <vTaskSwitchContext+0x5a>
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	4613      	mov	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4413      	add	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4a14      	ldr	r2, [pc, #80]	; (80033b8 <vTaskSwitchContext+0xb8>)
 8003368:	4413      	add	r3, r2
 800336a:	613b      	str	r3, [r7, #16]
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	605a      	str	r2, [r3, #4]
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	3308      	adds	r3, #8
 800337e:	429a      	cmp	r2, r3
 8003380:	d104      	bne.n	800338c <vTaskSwitchContext+0x8c>
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	605a      	str	r2, [r3, #4]
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	4a0a      	ldr	r2, [pc, #40]	; (80033bc <vTaskSwitchContext+0xbc>)
 8003394:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003396:	4b09      	ldr	r3, [pc, #36]	; (80033bc <vTaskSwitchContext+0xbc>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	334c      	adds	r3, #76	; 0x4c
 800339c:	4a08      	ldr	r2, [pc, #32]	; (80033c0 <vTaskSwitchContext+0xc0>)
 800339e:	6013      	str	r3, [r2, #0]
}
 80033a0:	bf00      	nop
 80033a2:	371c      	adds	r7, #28
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bc80      	pop	{r7}
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	20000548 	.word	0x20000548
 80033b0:	20000534 	.word	0x20000534
 80033b4:	20000528 	.word	0x20000528
 80033b8:	20000424 	.word	0x20000424
 80033bc:	20000420 	.word	0x20000420
 80033c0:	2000005c 	.word	0x2000005c

080033c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80033cc:	f000 f852 	bl	8003474 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80033d0:	4b06      	ldr	r3, [pc, #24]	; (80033ec <prvIdleTask+0x28>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d9f9      	bls.n	80033cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80033d8:	4b05      	ldr	r3, [pc, #20]	; (80033f0 <prvIdleTask+0x2c>)
 80033da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	f3bf 8f4f 	dsb	sy
 80033e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80033e8:	e7f0      	b.n	80033cc <prvIdleTask+0x8>
 80033ea:	bf00      	nop
 80033ec:	20000424 	.word	0x20000424
 80033f0:	e000ed04 	.word	0xe000ed04

080033f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033fa:	2300      	movs	r3, #0
 80033fc:	607b      	str	r3, [r7, #4]
 80033fe:	e00c      	b.n	800341a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	4613      	mov	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4413      	add	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4a12      	ldr	r2, [pc, #72]	; (8003454 <prvInitialiseTaskLists+0x60>)
 800340c:	4413      	add	r3, r2
 800340e:	4618      	mov	r0, r3
 8003410:	f7ff fb20 	bl	8002a54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3301      	adds	r3, #1
 8003418:	607b      	str	r3, [r7, #4]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2b06      	cmp	r3, #6
 800341e:	d9ef      	bls.n	8003400 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003420:	480d      	ldr	r0, [pc, #52]	; (8003458 <prvInitialiseTaskLists+0x64>)
 8003422:	f7ff fb17 	bl	8002a54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003426:	480d      	ldr	r0, [pc, #52]	; (800345c <prvInitialiseTaskLists+0x68>)
 8003428:	f7ff fb14 	bl	8002a54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800342c:	480c      	ldr	r0, [pc, #48]	; (8003460 <prvInitialiseTaskLists+0x6c>)
 800342e:	f7ff fb11 	bl	8002a54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003432:	480c      	ldr	r0, [pc, #48]	; (8003464 <prvInitialiseTaskLists+0x70>)
 8003434:	f7ff fb0e 	bl	8002a54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003438:	480b      	ldr	r0, [pc, #44]	; (8003468 <prvInitialiseTaskLists+0x74>)
 800343a:	f7ff fb0b 	bl	8002a54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800343e:	4b0b      	ldr	r3, [pc, #44]	; (800346c <prvInitialiseTaskLists+0x78>)
 8003440:	4a05      	ldr	r2, [pc, #20]	; (8003458 <prvInitialiseTaskLists+0x64>)
 8003442:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003444:	4b0a      	ldr	r3, [pc, #40]	; (8003470 <prvInitialiseTaskLists+0x7c>)
 8003446:	4a05      	ldr	r2, [pc, #20]	; (800345c <prvInitialiseTaskLists+0x68>)
 8003448:	601a      	str	r2, [r3, #0]
}
 800344a:	bf00      	nop
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	20000424 	.word	0x20000424
 8003458:	200004b0 	.word	0x200004b0
 800345c:	200004c4 	.word	0x200004c4
 8003460:	200004e0 	.word	0x200004e0
 8003464:	200004f4 	.word	0x200004f4
 8003468:	2000050c 	.word	0x2000050c
 800346c:	200004d8 	.word	0x200004d8
 8003470:	200004dc 	.word	0x200004dc

08003474 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800347a:	e019      	b.n	80034b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800347c:	f000 f9d6 	bl	800382c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003480:	4b10      	ldr	r3, [pc, #64]	; (80034c4 <prvCheckTasksWaitingTermination+0x50>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3304      	adds	r3, #4
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff fb67 	bl	8002b60 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003492:	4b0d      	ldr	r3, [pc, #52]	; (80034c8 <prvCheckTasksWaitingTermination+0x54>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	3b01      	subs	r3, #1
 8003498:	4a0b      	ldr	r2, [pc, #44]	; (80034c8 <prvCheckTasksWaitingTermination+0x54>)
 800349a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800349c:	4b0b      	ldr	r3, [pc, #44]	; (80034cc <prvCheckTasksWaitingTermination+0x58>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	3b01      	subs	r3, #1
 80034a2:	4a0a      	ldr	r2, [pc, #40]	; (80034cc <prvCheckTasksWaitingTermination+0x58>)
 80034a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80034a6:	f000 f9f1 	bl	800388c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f810 	bl	80034d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80034b0:	4b06      	ldr	r3, [pc, #24]	; (80034cc <prvCheckTasksWaitingTermination+0x58>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1e1      	bne.n	800347c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80034b8:	bf00      	nop
 80034ba:	bf00      	nop
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	200004f4 	.word	0x200004f4
 80034c8:	20000520 	.word	0x20000520
 80034cc:	20000508 	.word	0x20000508

080034d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	334c      	adds	r3, #76	; 0x4c
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 fc67 	bl	8003db0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d108      	bne.n	80034fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f0:	4618      	mov	r0, r3
 80034f2:	f000 fb21 	bl	8003b38 <vPortFree>
				vPortFree( pxTCB );
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 fb1e 	bl	8003b38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80034fc:	e018      	b.n	8003530 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003504:	2b01      	cmp	r3, #1
 8003506:	d103      	bne.n	8003510 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 fb15 	bl	8003b38 <vPortFree>
	}
 800350e:	e00f      	b.n	8003530 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003516:	2b02      	cmp	r3, #2
 8003518:	d00a      	beq.n	8003530 <prvDeleteTCB+0x60>
	__asm volatile
 800351a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351e:	f383 8811 	msr	BASEPRI, r3
 8003522:	f3bf 8f6f 	isb	sy
 8003526:	f3bf 8f4f 	dsb	sy
 800352a:	60fb      	str	r3, [r7, #12]
}
 800352c:	bf00      	nop
 800352e:	e7fe      	b.n	800352e <prvDeleteTCB+0x5e>
	}
 8003530:	bf00      	nop
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800353e:	4b0e      	ldr	r3, [pc, #56]	; (8003578 <prvResetNextTaskUnblockTime+0x40>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <prvResetNextTaskUnblockTime+0x14>
 8003548:	2301      	movs	r3, #1
 800354a:	e000      	b.n	800354e <prvResetNextTaskUnblockTime+0x16>
 800354c:	2300      	movs	r3, #0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d004      	beq.n	800355c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003552:	4b0a      	ldr	r3, [pc, #40]	; (800357c <prvResetNextTaskUnblockTime+0x44>)
 8003554:	f04f 32ff 	mov.w	r2, #4294967295
 8003558:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800355a:	e008      	b.n	800356e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800355c:	4b06      	ldr	r3, [pc, #24]	; (8003578 <prvResetNextTaskUnblockTime+0x40>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	4a04      	ldr	r2, [pc, #16]	; (800357c <prvResetNextTaskUnblockTime+0x44>)
 800356c:	6013      	str	r3, [r2, #0]
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr
 8003578:	200004d8 	.word	0x200004d8
 800357c:	20000540 	.word	0x20000540

08003580 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800358a:	4b29      	ldr	r3, [pc, #164]	; (8003630 <prvAddCurrentTaskToDelayedList+0xb0>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003590:	4b28      	ldr	r3, [pc, #160]	; (8003634 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	3304      	adds	r3, #4
 8003596:	4618      	mov	r0, r3
 8003598:	f7ff fae2 	bl	8002b60 <uxListRemove>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10b      	bne.n	80035ba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80035a2:	4b24      	ldr	r3, [pc, #144]	; (8003634 <prvAddCurrentTaskToDelayedList+0xb4>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a8:	2201      	movs	r2, #1
 80035aa:	fa02 f303 	lsl.w	r3, r2, r3
 80035ae:	43da      	mvns	r2, r3
 80035b0:	4b21      	ldr	r3, [pc, #132]	; (8003638 <prvAddCurrentTaskToDelayedList+0xb8>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4013      	ands	r3, r2
 80035b6:	4a20      	ldr	r2, [pc, #128]	; (8003638 <prvAddCurrentTaskToDelayedList+0xb8>)
 80035b8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c0:	d10a      	bne.n	80035d8 <prvAddCurrentTaskToDelayedList+0x58>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d007      	beq.n	80035d8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035c8:	4b1a      	ldr	r3, [pc, #104]	; (8003634 <prvAddCurrentTaskToDelayedList+0xb4>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	3304      	adds	r3, #4
 80035ce:	4619      	mov	r1, r3
 80035d0:	481a      	ldr	r0, [pc, #104]	; (800363c <prvAddCurrentTaskToDelayedList+0xbc>)
 80035d2:	f7ff fa6a 	bl	8002aaa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80035d6:	e026      	b.n	8003626 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4413      	add	r3, r2
 80035de:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80035e0:	4b14      	ldr	r3, [pc, #80]	; (8003634 <prvAddCurrentTaskToDelayedList+0xb4>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80035e8:	68ba      	ldr	r2, [r7, #8]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d209      	bcs.n	8003604 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035f0:	4b13      	ldr	r3, [pc, #76]	; (8003640 <prvAddCurrentTaskToDelayedList+0xc0>)
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	4b0f      	ldr	r3, [pc, #60]	; (8003634 <prvAddCurrentTaskToDelayedList+0xb4>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	3304      	adds	r3, #4
 80035fa:	4619      	mov	r1, r3
 80035fc:	4610      	mov	r0, r2
 80035fe:	f7ff fa77 	bl	8002af0 <vListInsert>
}
 8003602:	e010      	b.n	8003626 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003604:	4b0f      	ldr	r3, [pc, #60]	; (8003644 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	4b0a      	ldr	r3, [pc, #40]	; (8003634 <prvAddCurrentTaskToDelayedList+0xb4>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	3304      	adds	r3, #4
 800360e:	4619      	mov	r1, r3
 8003610:	4610      	mov	r0, r2
 8003612:	f7ff fa6d 	bl	8002af0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003616:	4b0c      	ldr	r3, [pc, #48]	; (8003648 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	429a      	cmp	r2, r3
 800361e:	d202      	bcs.n	8003626 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003620:	4a09      	ldr	r2, [pc, #36]	; (8003648 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	6013      	str	r3, [r2, #0]
}
 8003626:	bf00      	nop
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	20000524 	.word	0x20000524
 8003634:	20000420 	.word	0x20000420
 8003638:	20000528 	.word	0x20000528
 800363c:	2000050c 	.word	0x2000050c
 8003640:	200004dc 	.word	0x200004dc
 8003644:	200004d8 	.word	0x200004d8
 8003648:	20000540 	.word	0x20000540

0800364c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	3b04      	subs	r3, #4
 800365c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003664:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	3b04      	subs	r3, #4
 800366a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	f023 0201 	bic.w	r2, r3, #1
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	3b04      	subs	r3, #4
 800367a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800367c:	4a08      	ldr	r2, [pc, #32]	; (80036a0 <pxPortInitialiseStack+0x54>)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	3b14      	subs	r3, #20
 8003686:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	3b20      	subs	r3, #32
 8003692:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003694:	68fb      	ldr	r3, [r7, #12]
}
 8003696:	4618      	mov	r0, r3
 8003698:	3714      	adds	r7, #20
 800369a:	46bd      	mov	sp, r7
 800369c:	bc80      	pop	{r7}
 800369e:	4770      	bx	lr
 80036a0:	080036a5 	.word	0x080036a5

080036a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80036aa:	2300      	movs	r3, #0
 80036ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80036ae:	4b12      	ldr	r3, [pc, #72]	; (80036f8 <prvTaskExitError+0x54>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b6:	d00a      	beq.n	80036ce <prvTaskExitError+0x2a>
	__asm volatile
 80036b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036bc:	f383 8811 	msr	BASEPRI, r3
 80036c0:	f3bf 8f6f 	isb	sy
 80036c4:	f3bf 8f4f 	dsb	sy
 80036c8:	60fb      	str	r3, [r7, #12]
}
 80036ca:	bf00      	nop
 80036cc:	e7fe      	b.n	80036cc <prvTaskExitError+0x28>
	__asm volatile
 80036ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d2:	f383 8811 	msr	BASEPRI, r3
 80036d6:	f3bf 8f6f 	isb	sy
 80036da:	f3bf 8f4f 	dsb	sy
 80036de:	60bb      	str	r3, [r7, #8]
}
 80036e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80036e2:	bf00      	nop
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d0fc      	beq.n	80036e4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80036ea:	bf00      	nop
 80036ec:	bf00      	nop
 80036ee:	3714      	adds	r7, #20
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bc80      	pop	{r7}
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	2000000c 	.word	0x2000000c
 80036fc:	00000000 	.word	0x00000000

08003700 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003700:	4b07      	ldr	r3, [pc, #28]	; (8003720 <pxCurrentTCBConst2>)
 8003702:	6819      	ldr	r1, [r3, #0]
 8003704:	6808      	ldr	r0, [r1, #0]
 8003706:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800370a:	f380 8809 	msr	PSP, r0
 800370e:	f3bf 8f6f 	isb	sy
 8003712:	f04f 0000 	mov.w	r0, #0
 8003716:	f380 8811 	msr	BASEPRI, r0
 800371a:	f04e 0e0d 	orr.w	lr, lr, #13
 800371e:	4770      	bx	lr

08003720 <pxCurrentTCBConst2>:
 8003720:	20000420 	.word	0x20000420
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003724:	bf00      	nop
 8003726:	bf00      	nop

08003728 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003728:	4806      	ldr	r0, [pc, #24]	; (8003744 <prvPortStartFirstTask+0x1c>)
 800372a:	6800      	ldr	r0, [r0, #0]
 800372c:	6800      	ldr	r0, [r0, #0]
 800372e:	f380 8808 	msr	MSP, r0
 8003732:	b662      	cpsie	i
 8003734:	b661      	cpsie	f
 8003736:	f3bf 8f4f 	dsb	sy
 800373a:	f3bf 8f6f 	isb	sy
 800373e:	df00      	svc	0
 8003740:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003742:	bf00      	nop
 8003744:	e000ed08 	.word	0xe000ed08

08003748 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800374e:	4b32      	ldr	r3, [pc, #200]	; (8003818 <xPortStartScheduler+0xd0>)
 8003750:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	b2db      	uxtb	r3, r3
 8003758:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	22ff      	movs	r2, #255	; 0xff
 800375e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	b2db      	uxtb	r3, r3
 8003766:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003768:	78fb      	ldrb	r3, [r7, #3]
 800376a:	b2db      	uxtb	r3, r3
 800376c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003770:	b2da      	uxtb	r2, r3
 8003772:	4b2a      	ldr	r3, [pc, #168]	; (800381c <xPortStartScheduler+0xd4>)
 8003774:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003776:	4b2a      	ldr	r3, [pc, #168]	; (8003820 <xPortStartScheduler+0xd8>)
 8003778:	2207      	movs	r2, #7
 800377a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800377c:	e009      	b.n	8003792 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800377e:	4b28      	ldr	r3, [pc, #160]	; (8003820 <xPortStartScheduler+0xd8>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	3b01      	subs	r3, #1
 8003784:	4a26      	ldr	r2, [pc, #152]	; (8003820 <xPortStartScheduler+0xd8>)
 8003786:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003788:	78fb      	ldrb	r3, [r7, #3]
 800378a:	b2db      	uxtb	r3, r3
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	b2db      	uxtb	r3, r3
 8003790:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003792:	78fb      	ldrb	r3, [r7, #3]
 8003794:	b2db      	uxtb	r3, r3
 8003796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800379a:	2b80      	cmp	r3, #128	; 0x80
 800379c:	d0ef      	beq.n	800377e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800379e:	4b20      	ldr	r3, [pc, #128]	; (8003820 <xPortStartScheduler+0xd8>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f1c3 0307 	rsb	r3, r3, #7
 80037a6:	2b04      	cmp	r3, #4
 80037a8:	d00a      	beq.n	80037c0 <xPortStartScheduler+0x78>
	__asm volatile
 80037aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ae:	f383 8811 	msr	BASEPRI, r3
 80037b2:	f3bf 8f6f 	isb	sy
 80037b6:	f3bf 8f4f 	dsb	sy
 80037ba:	60bb      	str	r3, [r7, #8]
}
 80037bc:	bf00      	nop
 80037be:	e7fe      	b.n	80037be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80037c0:	4b17      	ldr	r3, [pc, #92]	; (8003820 <xPortStartScheduler+0xd8>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	021b      	lsls	r3, r3, #8
 80037c6:	4a16      	ldr	r2, [pc, #88]	; (8003820 <xPortStartScheduler+0xd8>)
 80037c8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80037ca:	4b15      	ldr	r3, [pc, #84]	; (8003820 <xPortStartScheduler+0xd8>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037d2:	4a13      	ldr	r2, [pc, #76]	; (8003820 <xPortStartScheduler+0xd8>)
 80037d4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	b2da      	uxtb	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80037de:	4b11      	ldr	r3, [pc, #68]	; (8003824 <xPortStartScheduler+0xdc>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a10      	ldr	r2, [pc, #64]	; (8003824 <xPortStartScheduler+0xdc>)
 80037e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80037ea:	4b0e      	ldr	r3, [pc, #56]	; (8003824 <xPortStartScheduler+0xdc>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a0d      	ldr	r2, [pc, #52]	; (8003824 <xPortStartScheduler+0xdc>)
 80037f0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80037f4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80037f6:	f000 f8b9 	bl	800396c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80037fa:	4b0b      	ldr	r3, [pc, #44]	; (8003828 <xPortStartScheduler+0xe0>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003800:	f7ff ff92 	bl	8003728 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003804:	f7ff fd7c 	bl	8003300 <vTaskSwitchContext>
	prvTaskExitError();
 8003808:	f7ff ff4c 	bl	80036a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	e000e400 	.word	0xe000e400
 800381c:	2000054c 	.word	0x2000054c
 8003820:	20000550 	.word	0x20000550
 8003824:	e000ed20 	.word	0xe000ed20
 8003828:	2000000c 	.word	0x2000000c

0800382c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
	__asm volatile
 8003832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003836:	f383 8811 	msr	BASEPRI, r3
 800383a:	f3bf 8f6f 	isb	sy
 800383e:	f3bf 8f4f 	dsb	sy
 8003842:	607b      	str	r3, [r7, #4]
}
 8003844:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003846:	4b0f      	ldr	r3, [pc, #60]	; (8003884 <vPortEnterCritical+0x58>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	3301      	adds	r3, #1
 800384c:	4a0d      	ldr	r2, [pc, #52]	; (8003884 <vPortEnterCritical+0x58>)
 800384e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003850:	4b0c      	ldr	r3, [pc, #48]	; (8003884 <vPortEnterCritical+0x58>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d10f      	bne.n	8003878 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003858:	4b0b      	ldr	r3, [pc, #44]	; (8003888 <vPortEnterCritical+0x5c>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00a      	beq.n	8003878 <vPortEnterCritical+0x4c>
	__asm volatile
 8003862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003866:	f383 8811 	msr	BASEPRI, r3
 800386a:	f3bf 8f6f 	isb	sy
 800386e:	f3bf 8f4f 	dsb	sy
 8003872:	603b      	str	r3, [r7, #0]
}
 8003874:	bf00      	nop
 8003876:	e7fe      	b.n	8003876 <vPortEnterCritical+0x4a>
	}
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	bc80      	pop	{r7}
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	2000000c 	.word	0x2000000c
 8003888:	e000ed04 	.word	0xe000ed04

0800388c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003892:	4b11      	ldr	r3, [pc, #68]	; (80038d8 <vPortExitCritical+0x4c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10a      	bne.n	80038b0 <vPortExitCritical+0x24>
	__asm volatile
 800389a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800389e:	f383 8811 	msr	BASEPRI, r3
 80038a2:	f3bf 8f6f 	isb	sy
 80038a6:	f3bf 8f4f 	dsb	sy
 80038aa:	607b      	str	r3, [r7, #4]
}
 80038ac:	bf00      	nop
 80038ae:	e7fe      	b.n	80038ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80038b0:	4b09      	ldr	r3, [pc, #36]	; (80038d8 <vPortExitCritical+0x4c>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	3b01      	subs	r3, #1
 80038b6:	4a08      	ldr	r2, [pc, #32]	; (80038d8 <vPortExitCritical+0x4c>)
 80038b8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80038ba:	4b07      	ldr	r3, [pc, #28]	; (80038d8 <vPortExitCritical+0x4c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d105      	bne.n	80038ce <vPortExitCritical+0x42>
 80038c2:	2300      	movs	r3, #0
 80038c4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80038cc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80038ce:	bf00      	nop
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bc80      	pop	{r7}
 80038d6:	4770      	bx	lr
 80038d8:	2000000c 	.word	0x2000000c
 80038dc:	00000000 	.word	0x00000000

080038e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80038e0:	f3ef 8009 	mrs	r0, PSP
 80038e4:	f3bf 8f6f 	isb	sy
 80038e8:	4b0d      	ldr	r3, [pc, #52]	; (8003920 <pxCurrentTCBConst>)
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80038f0:	6010      	str	r0, [r2, #0]
 80038f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80038f6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80038fa:	f380 8811 	msr	BASEPRI, r0
 80038fe:	f7ff fcff 	bl	8003300 <vTaskSwitchContext>
 8003902:	f04f 0000 	mov.w	r0, #0
 8003906:	f380 8811 	msr	BASEPRI, r0
 800390a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800390e:	6819      	ldr	r1, [r3, #0]
 8003910:	6808      	ldr	r0, [r1, #0]
 8003912:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003916:	f380 8809 	msr	PSP, r0
 800391a:	f3bf 8f6f 	isb	sy
 800391e:	4770      	bx	lr

08003920 <pxCurrentTCBConst>:
 8003920:	20000420 	.word	0x20000420
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003924:	bf00      	nop
 8003926:	bf00      	nop

08003928 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
	__asm volatile
 800392e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003932:	f383 8811 	msr	BASEPRI, r3
 8003936:	f3bf 8f6f 	isb	sy
 800393a:	f3bf 8f4f 	dsb	sy
 800393e:	607b      	str	r3, [r7, #4]
}
 8003940:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003942:	f7ff fc1f 	bl	8003184 <xTaskIncrementTick>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800394c:	4b06      	ldr	r3, [pc, #24]	; (8003968 <SysTick_Handler+0x40>)
 800394e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	2300      	movs	r3, #0
 8003956:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	f383 8811 	msr	BASEPRI, r3
}
 800395e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003960:	bf00      	nop
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	e000ed04 	.word	0xe000ed04

0800396c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003970:	4b0a      	ldr	r3, [pc, #40]	; (800399c <vPortSetupTimerInterrupt+0x30>)
 8003972:	2200      	movs	r2, #0
 8003974:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003976:	4b0a      	ldr	r3, [pc, #40]	; (80039a0 <vPortSetupTimerInterrupt+0x34>)
 8003978:	2200      	movs	r2, #0
 800397a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800397c:	4b09      	ldr	r3, [pc, #36]	; (80039a4 <vPortSetupTimerInterrupt+0x38>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a09      	ldr	r2, [pc, #36]	; (80039a8 <vPortSetupTimerInterrupt+0x3c>)
 8003982:	fba2 2303 	umull	r2, r3, r2, r3
 8003986:	099b      	lsrs	r3, r3, #6
 8003988:	4a08      	ldr	r2, [pc, #32]	; (80039ac <vPortSetupTimerInterrupt+0x40>)
 800398a:	3b01      	subs	r3, #1
 800398c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800398e:	4b03      	ldr	r3, [pc, #12]	; (800399c <vPortSetupTimerInterrupt+0x30>)
 8003990:	2207      	movs	r2, #7
 8003992:	601a      	str	r2, [r3, #0]
}
 8003994:	bf00      	nop
 8003996:	46bd      	mov	sp, r7
 8003998:	bc80      	pop	{r7}
 800399a:	4770      	bx	lr
 800399c:	e000e010 	.word	0xe000e010
 80039a0:	e000e018 	.word	0xe000e018
 80039a4:	20000000 	.word	0x20000000
 80039a8:	10624dd3 	.word	0x10624dd3
 80039ac:	e000e014 	.word	0xe000e014

080039b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b08a      	sub	sp, #40	; 0x28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80039b8:	2300      	movs	r3, #0
 80039ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80039bc:	f7ff fb38 	bl	8003030 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80039c0:	4b58      	ldr	r3, [pc, #352]	; (8003b24 <pvPortMalloc+0x174>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80039c8:	f000 f910 	bl	8003bec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80039cc:	4b56      	ldr	r3, [pc, #344]	; (8003b28 <pvPortMalloc+0x178>)
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4013      	ands	r3, r2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f040 808e 	bne.w	8003af6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d01d      	beq.n	8003a1c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80039e0:	2208      	movs	r2, #8
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4413      	add	r3, r2
 80039e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f003 0307 	and.w	r3, r3, #7
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d014      	beq.n	8003a1c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f023 0307 	bic.w	r3, r3, #7
 80039f8:	3308      	adds	r3, #8
 80039fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f003 0307 	and.w	r3, r3, #7
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00a      	beq.n	8003a1c <pvPortMalloc+0x6c>
	__asm volatile
 8003a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0a:	f383 8811 	msr	BASEPRI, r3
 8003a0e:	f3bf 8f6f 	isb	sy
 8003a12:	f3bf 8f4f 	dsb	sy
 8003a16:	617b      	str	r3, [r7, #20]
}
 8003a18:	bf00      	nop
 8003a1a:	e7fe      	b.n	8003a1a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d069      	beq.n	8003af6 <pvPortMalloc+0x146>
 8003a22:	4b42      	ldr	r3, [pc, #264]	; (8003b2c <pvPortMalloc+0x17c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d864      	bhi.n	8003af6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003a2c:	4b40      	ldr	r3, [pc, #256]	; (8003b30 <pvPortMalloc+0x180>)
 8003a2e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003a30:	4b3f      	ldr	r3, [pc, #252]	; (8003b30 <pvPortMalloc+0x180>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003a36:	e004      	b.n	8003a42 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d903      	bls.n	8003a54 <pvPortMalloc+0xa4>
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1f1      	bne.n	8003a38 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003a54:	4b33      	ldr	r3, [pc, #204]	; (8003b24 <pvPortMalloc+0x174>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d04b      	beq.n	8003af6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003a5e:	6a3b      	ldr	r3, [r7, #32]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2208      	movs	r2, #8
 8003a64:	4413      	add	r3, r2
 8003a66:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	6a3b      	ldr	r3, [r7, #32]
 8003a6e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	1ad2      	subs	r2, r2, r3
 8003a78:	2308      	movs	r3, #8
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d91f      	bls.n	8003ac0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4413      	add	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	f003 0307 	and.w	r3, r3, #7
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00a      	beq.n	8003aa8 <pvPortMalloc+0xf8>
	__asm volatile
 8003a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a96:	f383 8811 	msr	BASEPRI, r3
 8003a9a:	f3bf 8f6f 	isb	sy
 8003a9e:	f3bf 8f4f 	dsb	sy
 8003aa2:	613b      	str	r3, [r7, #16]
}
 8003aa4:	bf00      	nop
 8003aa6:	e7fe      	b.n	8003aa6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	1ad2      	subs	r2, r2, r3
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003aba:	69b8      	ldr	r0, [r7, #24]
 8003abc:	f000 f8f8 	bl	8003cb0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003ac0:	4b1a      	ldr	r3, [pc, #104]	; (8003b2c <pvPortMalloc+0x17c>)
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	4a18      	ldr	r2, [pc, #96]	; (8003b2c <pvPortMalloc+0x17c>)
 8003acc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003ace:	4b17      	ldr	r3, [pc, #92]	; (8003b2c <pvPortMalloc+0x17c>)
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	4b18      	ldr	r3, [pc, #96]	; (8003b34 <pvPortMalloc+0x184>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d203      	bcs.n	8003ae2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003ada:	4b14      	ldr	r3, [pc, #80]	; (8003b2c <pvPortMalloc+0x17c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a15      	ldr	r2, [pc, #84]	; (8003b34 <pvPortMalloc+0x184>)
 8003ae0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	685a      	ldr	r2, [r3, #4]
 8003ae6:	4b10      	ldr	r3, [pc, #64]	; (8003b28 <pvPortMalloc+0x178>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	431a      	orrs	r2, r3
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	2200      	movs	r2, #0
 8003af4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003af6:	f7ff faa9 	bl	800304c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	f003 0307 	and.w	r3, r3, #7
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00a      	beq.n	8003b1a <pvPortMalloc+0x16a>
	__asm volatile
 8003b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b08:	f383 8811 	msr	BASEPRI, r3
 8003b0c:	f3bf 8f6f 	isb	sy
 8003b10:	f3bf 8f4f 	dsb	sy
 8003b14:	60fb      	str	r3, [r7, #12]
}
 8003b16:	bf00      	nop
 8003b18:	e7fe      	b.n	8003b18 <pvPortMalloc+0x168>
	return pvReturn;
 8003b1a:	69fb      	ldr	r3, [r7, #28]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3728      	adds	r7, #40	; 0x28
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	2000115c 	.word	0x2000115c
 8003b28:	20001168 	.word	0x20001168
 8003b2c:	20001160 	.word	0x20001160
 8003b30:	20001154 	.word	0x20001154
 8003b34:	20001164 	.word	0x20001164

08003b38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d048      	beq.n	8003bdc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003b4a:	2308      	movs	r3, #8
 8003b4c:	425b      	negs	r3, r3
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	4413      	add	r3, r2
 8003b52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	4b21      	ldr	r3, [pc, #132]	; (8003be4 <vPortFree+0xac>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4013      	ands	r3, r2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10a      	bne.n	8003b7c <vPortFree+0x44>
	__asm volatile
 8003b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6a:	f383 8811 	msr	BASEPRI, r3
 8003b6e:	f3bf 8f6f 	isb	sy
 8003b72:	f3bf 8f4f 	dsb	sy
 8003b76:	60fb      	str	r3, [r7, #12]
}
 8003b78:	bf00      	nop
 8003b7a:	e7fe      	b.n	8003b7a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00a      	beq.n	8003b9a <vPortFree+0x62>
	__asm volatile
 8003b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b88:	f383 8811 	msr	BASEPRI, r3
 8003b8c:	f3bf 8f6f 	isb	sy
 8003b90:	f3bf 8f4f 	dsb	sy
 8003b94:	60bb      	str	r3, [r7, #8]
}
 8003b96:	bf00      	nop
 8003b98:	e7fe      	b.n	8003b98 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	4b11      	ldr	r3, [pc, #68]	; (8003be4 <vPortFree+0xac>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d019      	beq.n	8003bdc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d115      	bne.n	8003bdc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	4b0b      	ldr	r3, [pc, #44]	; (8003be4 <vPortFree+0xac>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	43db      	mvns	r3, r3
 8003bba:	401a      	ands	r2, r3
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003bc0:	f7ff fa36 	bl	8003030 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	4b07      	ldr	r3, [pc, #28]	; (8003be8 <vPortFree+0xb0>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4413      	add	r3, r2
 8003bce:	4a06      	ldr	r2, [pc, #24]	; (8003be8 <vPortFree+0xb0>)
 8003bd0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003bd2:	6938      	ldr	r0, [r7, #16]
 8003bd4:	f000 f86c 	bl	8003cb0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003bd8:	f7ff fa38 	bl	800304c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003bdc:	bf00      	nop
 8003bde:	3718      	adds	r7, #24
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	20001168 	.word	0x20001168
 8003be8:	20001160 	.word	0x20001160

08003bec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003bf2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003bf6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003bf8:	4b27      	ldr	r3, [pc, #156]	; (8003c98 <prvHeapInit+0xac>)
 8003bfa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f003 0307 	and.w	r3, r3, #7
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00c      	beq.n	8003c20 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	3307      	adds	r3, #7
 8003c0a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f023 0307 	bic.w	r3, r3, #7
 8003c12:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	4a1f      	ldr	r2, [pc, #124]	; (8003c98 <prvHeapInit+0xac>)
 8003c1c:	4413      	add	r3, r2
 8003c1e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003c24:	4a1d      	ldr	r2, [pc, #116]	; (8003c9c <prvHeapInit+0xb0>)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003c2a:	4b1c      	ldr	r3, [pc, #112]	; (8003c9c <prvHeapInit+0xb0>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	4413      	add	r3, r2
 8003c36:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003c38:	2208      	movs	r2, #8
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	1a9b      	subs	r3, r3, r2
 8003c3e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f023 0307 	bic.w	r3, r3, #7
 8003c46:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	4a15      	ldr	r2, [pc, #84]	; (8003ca0 <prvHeapInit+0xb4>)
 8003c4c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003c4e:	4b14      	ldr	r3, [pc, #80]	; (8003ca0 <prvHeapInit+0xb4>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2200      	movs	r2, #0
 8003c54:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003c56:	4b12      	ldr	r3, [pc, #72]	; (8003ca0 <prvHeapInit+0xb4>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	1ad2      	subs	r2, r2, r3
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003c6c:	4b0c      	ldr	r3, [pc, #48]	; (8003ca0 <prvHeapInit+0xb4>)
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	4a0a      	ldr	r2, [pc, #40]	; (8003ca4 <prvHeapInit+0xb8>)
 8003c7a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	4a09      	ldr	r2, [pc, #36]	; (8003ca8 <prvHeapInit+0xbc>)
 8003c82:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003c84:	4b09      	ldr	r3, [pc, #36]	; (8003cac <prvHeapInit+0xc0>)
 8003c86:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003c8a:	601a      	str	r2, [r3, #0]
}
 8003c8c:	bf00      	nop
 8003c8e:	3714      	adds	r7, #20
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bc80      	pop	{r7}
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	20000554 	.word	0x20000554
 8003c9c:	20001154 	.word	0x20001154
 8003ca0:	2000115c 	.word	0x2000115c
 8003ca4:	20001164 	.word	0x20001164
 8003ca8:	20001160 	.word	0x20001160
 8003cac:	20001168 	.word	0x20001168

08003cb0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003cb8:	4b27      	ldr	r3, [pc, #156]	; (8003d58 <prvInsertBlockIntoFreeList+0xa8>)
 8003cba:	60fb      	str	r3, [r7, #12]
 8003cbc:	e002      	b.n	8003cc4 <prvInsertBlockIntoFreeList+0x14>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	60fb      	str	r3, [r7, #12]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d8f7      	bhi.n	8003cbe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	4413      	add	r3, r2
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d108      	bne.n	8003cf2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	441a      	add	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	441a      	add	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d118      	bne.n	8003d38 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	4b14      	ldr	r3, [pc, #80]	; (8003d5c <prvInsertBlockIntoFreeList+0xac>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d00d      	beq.n	8003d2e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	441a      	add	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	601a      	str	r2, [r3, #0]
 8003d2c:	e008      	b.n	8003d40 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003d2e:	4b0b      	ldr	r3, [pc, #44]	; (8003d5c <prvInsertBlockIntoFreeList+0xac>)
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	e003      	b.n	8003d40 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d002      	beq.n	8003d4e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d4e:	bf00      	nop
 8003d50:	3714      	adds	r7, #20
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bc80      	pop	{r7}
 8003d56:	4770      	bx	lr
 8003d58:	20001154 	.word	0x20001154
 8003d5c:	2000115c 	.word	0x2000115c

08003d60 <siprintf>:
 8003d60:	b40e      	push	{r1, r2, r3}
 8003d62:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d66:	b500      	push	{lr}
 8003d68:	b09c      	sub	sp, #112	; 0x70
 8003d6a:	ab1d      	add	r3, sp, #116	; 0x74
 8003d6c:	9002      	str	r0, [sp, #8]
 8003d6e:	9006      	str	r0, [sp, #24]
 8003d70:	9107      	str	r1, [sp, #28]
 8003d72:	9104      	str	r1, [sp, #16]
 8003d74:	4808      	ldr	r0, [pc, #32]	; (8003d98 <siprintf+0x38>)
 8003d76:	4909      	ldr	r1, [pc, #36]	; (8003d9c <siprintf+0x3c>)
 8003d78:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d7c:	9105      	str	r1, [sp, #20]
 8003d7e:	6800      	ldr	r0, [r0, #0]
 8003d80:	a902      	add	r1, sp, #8
 8003d82:	9301      	str	r3, [sp, #4]
 8003d84:	f000 f9f2 	bl	800416c <_svfiprintf_r>
 8003d88:	2200      	movs	r2, #0
 8003d8a:	9b02      	ldr	r3, [sp, #8]
 8003d8c:	701a      	strb	r2, [r3, #0]
 8003d8e:	b01c      	add	sp, #112	; 0x70
 8003d90:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d94:	b003      	add	sp, #12
 8003d96:	4770      	bx	lr
 8003d98:	2000005c 	.word	0x2000005c
 8003d9c:	ffff0208 	.word	0xffff0208

08003da0 <memset>:
 8003da0:	4603      	mov	r3, r0
 8003da2:	4402      	add	r2, r0
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d100      	bne.n	8003daa <memset+0xa>
 8003da8:	4770      	bx	lr
 8003daa:	f803 1b01 	strb.w	r1, [r3], #1
 8003dae:	e7f9      	b.n	8003da4 <memset+0x4>

08003db0 <_reclaim_reent>:
 8003db0:	4b29      	ldr	r3, [pc, #164]	; (8003e58 <_reclaim_reent+0xa8>)
 8003db2:	b570      	push	{r4, r5, r6, lr}
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4604      	mov	r4, r0
 8003db8:	4283      	cmp	r3, r0
 8003dba:	d04b      	beq.n	8003e54 <_reclaim_reent+0xa4>
 8003dbc:	69c3      	ldr	r3, [r0, #28]
 8003dbe:	b143      	cbz	r3, 8003dd2 <_reclaim_reent+0x22>
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d144      	bne.n	8003e50 <_reclaim_reent+0xa0>
 8003dc6:	69e3      	ldr	r3, [r4, #28]
 8003dc8:	6819      	ldr	r1, [r3, #0]
 8003dca:	b111      	cbz	r1, 8003dd2 <_reclaim_reent+0x22>
 8003dcc:	4620      	mov	r0, r4
 8003dce:	f000 f87f 	bl	8003ed0 <_free_r>
 8003dd2:	6961      	ldr	r1, [r4, #20]
 8003dd4:	b111      	cbz	r1, 8003ddc <_reclaim_reent+0x2c>
 8003dd6:	4620      	mov	r0, r4
 8003dd8:	f000 f87a 	bl	8003ed0 <_free_r>
 8003ddc:	69e1      	ldr	r1, [r4, #28]
 8003dde:	b111      	cbz	r1, 8003de6 <_reclaim_reent+0x36>
 8003de0:	4620      	mov	r0, r4
 8003de2:	f000 f875 	bl	8003ed0 <_free_r>
 8003de6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003de8:	b111      	cbz	r1, 8003df0 <_reclaim_reent+0x40>
 8003dea:	4620      	mov	r0, r4
 8003dec:	f000 f870 	bl	8003ed0 <_free_r>
 8003df0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003df2:	b111      	cbz	r1, 8003dfa <_reclaim_reent+0x4a>
 8003df4:	4620      	mov	r0, r4
 8003df6:	f000 f86b 	bl	8003ed0 <_free_r>
 8003dfa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003dfc:	b111      	cbz	r1, 8003e04 <_reclaim_reent+0x54>
 8003dfe:	4620      	mov	r0, r4
 8003e00:	f000 f866 	bl	8003ed0 <_free_r>
 8003e04:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003e06:	b111      	cbz	r1, 8003e0e <_reclaim_reent+0x5e>
 8003e08:	4620      	mov	r0, r4
 8003e0a:	f000 f861 	bl	8003ed0 <_free_r>
 8003e0e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003e10:	b111      	cbz	r1, 8003e18 <_reclaim_reent+0x68>
 8003e12:	4620      	mov	r0, r4
 8003e14:	f000 f85c 	bl	8003ed0 <_free_r>
 8003e18:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003e1a:	b111      	cbz	r1, 8003e22 <_reclaim_reent+0x72>
 8003e1c:	4620      	mov	r0, r4
 8003e1e:	f000 f857 	bl	8003ed0 <_free_r>
 8003e22:	6a23      	ldr	r3, [r4, #32]
 8003e24:	b1b3      	cbz	r3, 8003e54 <_reclaim_reent+0xa4>
 8003e26:	4620      	mov	r0, r4
 8003e28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003e2c:	4718      	bx	r3
 8003e2e:	5949      	ldr	r1, [r1, r5]
 8003e30:	b941      	cbnz	r1, 8003e44 <_reclaim_reent+0x94>
 8003e32:	3504      	adds	r5, #4
 8003e34:	69e3      	ldr	r3, [r4, #28]
 8003e36:	2d80      	cmp	r5, #128	; 0x80
 8003e38:	68d9      	ldr	r1, [r3, #12]
 8003e3a:	d1f8      	bne.n	8003e2e <_reclaim_reent+0x7e>
 8003e3c:	4620      	mov	r0, r4
 8003e3e:	f000 f847 	bl	8003ed0 <_free_r>
 8003e42:	e7c0      	b.n	8003dc6 <_reclaim_reent+0x16>
 8003e44:	680e      	ldr	r6, [r1, #0]
 8003e46:	4620      	mov	r0, r4
 8003e48:	f000 f842 	bl	8003ed0 <_free_r>
 8003e4c:	4631      	mov	r1, r6
 8003e4e:	e7ef      	b.n	8003e30 <_reclaim_reent+0x80>
 8003e50:	2500      	movs	r5, #0
 8003e52:	e7ef      	b.n	8003e34 <_reclaim_reent+0x84>
 8003e54:	bd70      	pop	{r4, r5, r6, pc}
 8003e56:	bf00      	nop
 8003e58:	2000005c 	.word	0x2000005c

08003e5c <__errno>:
 8003e5c:	4b01      	ldr	r3, [pc, #4]	; (8003e64 <__errno+0x8>)
 8003e5e:	6818      	ldr	r0, [r3, #0]
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	2000005c 	.word	0x2000005c

08003e68 <__libc_init_array>:
 8003e68:	b570      	push	{r4, r5, r6, lr}
 8003e6a:	2600      	movs	r6, #0
 8003e6c:	4d0c      	ldr	r5, [pc, #48]	; (8003ea0 <__libc_init_array+0x38>)
 8003e6e:	4c0d      	ldr	r4, [pc, #52]	; (8003ea4 <__libc_init_array+0x3c>)
 8003e70:	1b64      	subs	r4, r4, r5
 8003e72:	10a4      	asrs	r4, r4, #2
 8003e74:	42a6      	cmp	r6, r4
 8003e76:	d109      	bne.n	8003e8c <__libc_init_array+0x24>
 8003e78:	f000 fc7a 	bl	8004770 <_init>
 8003e7c:	2600      	movs	r6, #0
 8003e7e:	4d0a      	ldr	r5, [pc, #40]	; (8003ea8 <__libc_init_array+0x40>)
 8003e80:	4c0a      	ldr	r4, [pc, #40]	; (8003eac <__libc_init_array+0x44>)
 8003e82:	1b64      	subs	r4, r4, r5
 8003e84:	10a4      	asrs	r4, r4, #2
 8003e86:	42a6      	cmp	r6, r4
 8003e88:	d105      	bne.n	8003e96 <__libc_init_array+0x2e>
 8003e8a:	bd70      	pop	{r4, r5, r6, pc}
 8003e8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e90:	4798      	blx	r3
 8003e92:	3601      	adds	r6, #1
 8003e94:	e7ee      	b.n	8003e74 <__libc_init_array+0xc>
 8003e96:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e9a:	4798      	blx	r3
 8003e9c:	3601      	adds	r6, #1
 8003e9e:	e7f2      	b.n	8003e86 <__libc_init_array+0x1e>
 8003ea0:	08004910 	.word	0x08004910
 8003ea4:	08004910 	.word	0x08004910
 8003ea8:	08004910 	.word	0x08004910
 8003eac:	08004914 	.word	0x08004914

08003eb0 <__retarget_lock_acquire_recursive>:
 8003eb0:	4770      	bx	lr

08003eb2 <__retarget_lock_release_recursive>:
 8003eb2:	4770      	bx	lr

08003eb4 <memcpy>:
 8003eb4:	440a      	add	r2, r1
 8003eb6:	4291      	cmp	r1, r2
 8003eb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ebc:	d100      	bne.n	8003ec0 <memcpy+0xc>
 8003ebe:	4770      	bx	lr
 8003ec0:	b510      	push	{r4, lr}
 8003ec2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ec6:	4291      	cmp	r1, r2
 8003ec8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ecc:	d1f9      	bne.n	8003ec2 <memcpy+0xe>
 8003ece:	bd10      	pop	{r4, pc}

08003ed0 <_free_r>:
 8003ed0:	b538      	push	{r3, r4, r5, lr}
 8003ed2:	4605      	mov	r5, r0
 8003ed4:	2900      	cmp	r1, #0
 8003ed6:	d040      	beq.n	8003f5a <_free_r+0x8a>
 8003ed8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003edc:	1f0c      	subs	r4, r1, #4
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	bfb8      	it	lt
 8003ee2:	18e4      	addlt	r4, r4, r3
 8003ee4:	f000 f8dc 	bl	80040a0 <__malloc_lock>
 8003ee8:	4a1c      	ldr	r2, [pc, #112]	; (8003f5c <_free_r+0x8c>)
 8003eea:	6813      	ldr	r3, [r2, #0]
 8003eec:	b933      	cbnz	r3, 8003efc <_free_r+0x2c>
 8003eee:	6063      	str	r3, [r4, #4]
 8003ef0:	6014      	str	r4, [r2, #0]
 8003ef2:	4628      	mov	r0, r5
 8003ef4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ef8:	f000 b8d8 	b.w	80040ac <__malloc_unlock>
 8003efc:	42a3      	cmp	r3, r4
 8003efe:	d908      	bls.n	8003f12 <_free_r+0x42>
 8003f00:	6820      	ldr	r0, [r4, #0]
 8003f02:	1821      	adds	r1, r4, r0
 8003f04:	428b      	cmp	r3, r1
 8003f06:	bf01      	itttt	eq
 8003f08:	6819      	ldreq	r1, [r3, #0]
 8003f0a:	685b      	ldreq	r3, [r3, #4]
 8003f0c:	1809      	addeq	r1, r1, r0
 8003f0e:	6021      	streq	r1, [r4, #0]
 8003f10:	e7ed      	b.n	8003eee <_free_r+0x1e>
 8003f12:	461a      	mov	r2, r3
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	b10b      	cbz	r3, 8003f1c <_free_r+0x4c>
 8003f18:	42a3      	cmp	r3, r4
 8003f1a:	d9fa      	bls.n	8003f12 <_free_r+0x42>
 8003f1c:	6811      	ldr	r1, [r2, #0]
 8003f1e:	1850      	adds	r0, r2, r1
 8003f20:	42a0      	cmp	r0, r4
 8003f22:	d10b      	bne.n	8003f3c <_free_r+0x6c>
 8003f24:	6820      	ldr	r0, [r4, #0]
 8003f26:	4401      	add	r1, r0
 8003f28:	1850      	adds	r0, r2, r1
 8003f2a:	4283      	cmp	r3, r0
 8003f2c:	6011      	str	r1, [r2, #0]
 8003f2e:	d1e0      	bne.n	8003ef2 <_free_r+0x22>
 8003f30:	6818      	ldr	r0, [r3, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	4408      	add	r0, r1
 8003f36:	6010      	str	r0, [r2, #0]
 8003f38:	6053      	str	r3, [r2, #4]
 8003f3a:	e7da      	b.n	8003ef2 <_free_r+0x22>
 8003f3c:	d902      	bls.n	8003f44 <_free_r+0x74>
 8003f3e:	230c      	movs	r3, #12
 8003f40:	602b      	str	r3, [r5, #0]
 8003f42:	e7d6      	b.n	8003ef2 <_free_r+0x22>
 8003f44:	6820      	ldr	r0, [r4, #0]
 8003f46:	1821      	adds	r1, r4, r0
 8003f48:	428b      	cmp	r3, r1
 8003f4a:	bf01      	itttt	eq
 8003f4c:	6819      	ldreq	r1, [r3, #0]
 8003f4e:	685b      	ldreq	r3, [r3, #4]
 8003f50:	1809      	addeq	r1, r1, r0
 8003f52:	6021      	streq	r1, [r4, #0]
 8003f54:	6063      	str	r3, [r4, #4]
 8003f56:	6054      	str	r4, [r2, #4]
 8003f58:	e7cb      	b.n	8003ef2 <_free_r+0x22>
 8003f5a:	bd38      	pop	{r3, r4, r5, pc}
 8003f5c:	200012ac 	.word	0x200012ac

08003f60 <sbrk_aligned>:
 8003f60:	b570      	push	{r4, r5, r6, lr}
 8003f62:	4e0e      	ldr	r6, [pc, #56]	; (8003f9c <sbrk_aligned+0x3c>)
 8003f64:	460c      	mov	r4, r1
 8003f66:	6831      	ldr	r1, [r6, #0]
 8003f68:	4605      	mov	r5, r0
 8003f6a:	b911      	cbnz	r1, 8003f72 <sbrk_aligned+0x12>
 8003f6c:	f000 fbaa 	bl	80046c4 <_sbrk_r>
 8003f70:	6030      	str	r0, [r6, #0]
 8003f72:	4621      	mov	r1, r4
 8003f74:	4628      	mov	r0, r5
 8003f76:	f000 fba5 	bl	80046c4 <_sbrk_r>
 8003f7a:	1c43      	adds	r3, r0, #1
 8003f7c:	d00a      	beq.n	8003f94 <sbrk_aligned+0x34>
 8003f7e:	1cc4      	adds	r4, r0, #3
 8003f80:	f024 0403 	bic.w	r4, r4, #3
 8003f84:	42a0      	cmp	r0, r4
 8003f86:	d007      	beq.n	8003f98 <sbrk_aligned+0x38>
 8003f88:	1a21      	subs	r1, r4, r0
 8003f8a:	4628      	mov	r0, r5
 8003f8c:	f000 fb9a 	bl	80046c4 <_sbrk_r>
 8003f90:	3001      	adds	r0, #1
 8003f92:	d101      	bne.n	8003f98 <sbrk_aligned+0x38>
 8003f94:	f04f 34ff 	mov.w	r4, #4294967295
 8003f98:	4620      	mov	r0, r4
 8003f9a:	bd70      	pop	{r4, r5, r6, pc}
 8003f9c:	200012b0 	.word	0x200012b0

08003fa0 <_malloc_r>:
 8003fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fa4:	1ccd      	adds	r5, r1, #3
 8003fa6:	f025 0503 	bic.w	r5, r5, #3
 8003faa:	3508      	adds	r5, #8
 8003fac:	2d0c      	cmp	r5, #12
 8003fae:	bf38      	it	cc
 8003fb0:	250c      	movcc	r5, #12
 8003fb2:	2d00      	cmp	r5, #0
 8003fb4:	4607      	mov	r7, r0
 8003fb6:	db01      	blt.n	8003fbc <_malloc_r+0x1c>
 8003fb8:	42a9      	cmp	r1, r5
 8003fba:	d905      	bls.n	8003fc8 <_malloc_r+0x28>
 8003fbc:	230c      	movs	r3, #12
 8003fbe:	2600      	movs	r6, #0
 8003fc0:	603b      	str	r3, [r7, #0]
 8003fc2:	4630      	mov	r0, r6
 8003fc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fc8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800409c <_malloc_r+0xfc>
 8003fcc:	f000 f868 	bl	80040a0 <__malloc_lock>
 8003fd0:	f8d8 3000 	ldr.w	r3, [r8]
 8003fd4:	461c      	mov	r4, r3
 8003fd6:	bb5c      	cbnz	r4, 8004030 <_malloc_r+0x90>
 8003fd8:	4629      	mov	r1, r5
 8003fda:	4638      	mov	r0, r7
 8003fdc:	f7ff ffc0 	bl	8003f60 <sbrk_aligned>
 8003fe0:	1c43      	adds	r3, r0, #1
 8003fe2:	4604      	mov	r4, r0
 8003fe4:	d155      	bne.n	8004092 <_malloc_r+0xf2>
 8003fe6:	f8d8 4000 	ldr.w	r4, [r8]
 8003fea:	4626      	mov	r6, r4
 8003fec:	2e00      	cmp	r6, #0
 8003fee:	d145      	bne.n	800407c <_malloc_r+0xdc>
 8003ff0:	2c00      	cmp	r4, #0
 8003ff2:	d048      	beq.n	8004086 <_malloc_r+0xe6>
 8003ff4:	6823      	ldr	r3, [r4, #0]
 8003ff6:	4631      	mov	r1, r6
 8003ff8:	4638      	mov	r0, r7
 8003ffa:	eb04 0903 	add.w	r9, r4, r3
 8003ffe:	f000 fb61 	bl	80046c4 <_sbrk_r>
 8004002:	4581      	cmp	r9, r0
 8004004:	d13f      	bne.n	8004086 <_malloc_r+0xe6>
 8004006:	6821      	ldr	r1, [r4, #0]
 8004008:	4638      	mov	r0, r7
 800400a:	1a6d      	subs	r5, r5, r1
 800400c:	4629      	mov	r1, r5
 800400e:	f7ff ffa7 	bl	8003f60 <sbrk_aligned>
 8004012:	3001      	adds	r0, #1
 8004014:	d037      	beq.n	8004086 <_malloc_r+0xe6>
 8004016:	6823      	ldr	r3, [r4, #0]
 8004018:	442b      	add	r3, r5
 800401a:	6023      	str	r3, [r4, #0]
 800401c:	f8d8 3000 	ldr.w	r3, [r8]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d038      	beq.n	8004096 <_malloc_r+0xf6>
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	42a2      	cmp	r2, r4
 8004028:	d12b      	bne.n	8004082 <_malloc_r+0xe2>
 800402a:	2200      	movs	r2, #0
 800402c:	605a      	str	r2, [r3, #4]
 800402e:	e00f      	b.n	8004050 <_malloc_r+0xb0>
 8004030:	6822      	ldr	r2, [r4, #0]
 8004032:	1b52      	subs	r2, r2, r5
 8004034:	d41f      	bmi.n	8004076 <_malloc_r+0xd6>
 8004036:	2a0b      	cmp	r2, #11
 8004038:	d917      	bls.n	800406a <_malloc_r+0xca>
 800403a:	1961      	adds	r1, r4, r5
 800403c:	42a3      	cmp	r3, r4
 800403e:	6025      	str	r5, [r4, #0]
 8004040:	bf18      	it	ne
 8004042:	6059      	strne	r1, [r3, #4]
 8004044:	6863      	ldr	r3, [r4, #4]
 8004046:	bf08      	it	eq
 8004048:	f8c8 1000 	streq.w	r1, [r8]
 800404c:	5162      	str	r2, [r4, r5]
 800404e:	604b      	str	r3, [r1, #4]
 8004050:	4638      	mov	r0, r7
 8004052:	f104 060b 	add.w	r6, r4, #11
 8004056:	f000 f829 	bl	80040ac <__malloc_unlock>
 800405a:	f026 0607 	bic.w	r6, r6, #7
 800405e:	1d23      	adds	r3, r4, #4
 8004060:	1af2      	subs	r2, r6, r3
 8004062:	d0ae      	beq.n	8003fc2 <_malloc_r+0x22>
 8004064:	1b9b      	subs	r3, r3, r6
 8004066:	50a3      	str	r3, [r4, r2]
 8004068:	e7ab      	b.n	8003fc2 <_malloc_r+0x22>
 800406a:	42a3      	cmp	r3, r4
 800406c:	6862      	ldr	r2, [r4, #4]
 800406e:	d1dd      	bne.n	800402c <_malloc_r+0x8c>
 8004070:	f8c8 2000 	str.w	r2, [r8]
 8004074:	e7ec      	b.n	8004050 <_malloc_r+0xb0>
 8004076:	4623      	mov	r3, r4
 8004078:	6864      	ldr	r4, [r4, #4]
 800407a:	e7ac      	b.n	8003fd6 <_malloc_r+0x36>
 800407c:	4634      	mov	r4, r6
 800407e:	6876      	ldr	r6, [r6, #4]
 8004080:	e7b4      	b.n	8003fec <_malloc_r+0x4c>
 8004082:	4613      	mov	r3, r2
 8004084:	e7cc      	b.n	8004020 <_malloc_r+0x80>
 8004086:	230c      	movs	r3, #12
 8004088:	4638      	mov	r0, r7
 800408a:	603b      	str	r3, [r7, #0]
 800408c:	f000 f80e 	bl	80040ac <__malloc_unlock>
 8004090:	e797      	b.n	8003fc2 <_malloc_r+0x22>
 8004092:	6025      	str	r5, [r4, #0]
 8004094:	e7dc      	b.n	8004050 <_malloc_r+0xb0>
 8004096:	605b      	str	r3, [r3, #4]
 8004098:	deff      	udf	#255	; 0xff
 800409a:	bf00      	nop
 800409c:	200012ac 	.word	0x200012ac

080040a0 <__malloc_lock>:
 80040a0:	4801      	ldr	r0, [pc, #4]	; (80040a8 <__malloc_lock+0x8>)
 80040a2:	f7ff bf05 	b.w	8003eb0 <__retarget_lock_acquire_recursive>
 80040a6:	bf00      	nop
 80040a8:	200012a8 	.word	0x200012a8

080040ac <__malloc_unlock>:
 80040ac:	4801      	ldr	r0, [pc, #4]	; (80040b4 <__malloc_unlock+0x8>)
 80040ae:	f7ff bf00 	b.w	8003eb2 <__retarget_lock_release_recursive>
 80040b2:	bf00      	nop
 80040b4:	200012a8 	.word	0x200012a8

080040b8 <__ssputs_r>:
 80040b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040bc:	461f      	mov	r7, r3
 80040be:	688e      	ldr	r6, [r1, #8]
 80040c0:	4682      	mov	sl, r0
 80040c2:	42be      	cmp	r6, r7
 80040c4:	460c      	mov	r4, r1
 80040c6:	4690      	mov	r8, r2
 80040c8:	680b      	ldr	r3, [r1, #0]
 80040ca:	d82c      	bhi.n	8004126 <__ssputs_r+0x6e>
 80040cc:	898a      	ldrh	r2, [r1, #12]
 80040ce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80040d2:	d026      	beq.n	8004122 <__ssputs_r+0x6a>
 80040d4:	6965      	ldr	r5, [r4, #20]
 80040d6:	6909      	ldr	r1, [r1, #16]
 80040d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80040dc:	eba3 0901 	sub.w	r9, r3, r1
 80040e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80040e4:	1c7b      	adds	r3, r7, #1
 80040e6:	444b      	add	r3, r9
 80040e8:	106d      	asrs	r5, r5, #1
 80040ea:	429d      	cmp	r5, r3
 80040ec:	bf38      	it	cc
 80040ee:	461d      	movcc	r5, r3
 80040f0:	0553      	lsls	r3, r2, #21
 80040f2:	d527      	bpl.n	8004144 <__ssputs_r+0x8c>
 80040f4:	4629      	mov	r1, r5
 80040f6:	f7ff ff53 	bl	8003fa0 <_malloc_r>
 80040fa:	4606      	mov	r6, r0
 80040fc:	b360      	cbz	r0, 8004158 <__ssputs_r+0xa0>
 80040fe:	464a      	mov	r2, r9
 8004100:	6921      	ldr	r1, [r4, #16]
 8004102:	f7ff fed7 	bl	8003eb4 <memcpy>
 8004106:	89a3      	ldrh	r3, [r4, #12]
 8004108:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800410c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004110:	81a3      	strh	r3, [r4, #12]
 8004112:	6126      	str	r6, [r4, #16]
 8004114:	444e      	add	r6, r9
 8004116:	6026      	str	r6, [r4, #0]
 8004118:	463e      	mov	r6, r7
 800411a:	6165      	str	r5, [r4, #20]
 800411c:	eba5 0509 	sub.w	r5, r5, r9
 8004120:	60a5      	str	r5, [r4, #8]
 8004122:	42be      	cmp	r6, r7
 8004124:	d900      	bls.n	8004128 <__ssputs_r+0x70>
 8004126:	463e      	mov	r6, r7
 8004128:	4632      	mov	r2, r6
 800412a:	4641      	mov	r1, r8
 800412c:	6820      	ldr	r0, [r4, #0]
 800412e:	f000 faaf 	bl	8004690 <memmove>
 8004132:	2000      	movs	r0, #0
 8004134:	68a3      	ldr	r3, [r4, #8]
 8004136:	1b9b      	subs	r3, r3, r6
 8004138:	60a3      	str	r3, [r4, #8]
 800413a:	6823      	ldr	r3, [r4, #0]
 800413c:	4433      	add	r3, r6
 800413e:	6023      	str	r3, [r4, #0]
 8004140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004144:	462a      	mov	r2, r5
 8004146:	f000 fadb 	bl	8004700 <_realloc_r>
 800414a:	4606      	mov	r6, r0
 800414c:	2800      	cmp	r0, #0
 800414e:	d1e0      	bne.n	8004112 <__ssputs_r+0x5a>
 8004150:	4650      	mov	r0, sl
 8004152:	6921      	ldr	r1, [r4, #16]
 8004154:	f7ff febc 	bl	8003ed0 <_free_r>
 8004158:	230c      	movs	r3, #12
 800415a:	f8ca 3000 	str.w	r3, [sl]
 800415e:	89a3      	ldrh	r3, [r4, #12]
 8004160:	f04f 30ff 	mov.w	r0, #4294967295
 8004164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004168:	81a3      	strh	r3, [r4, #12]
 800416a:	e7e9      	b.n	8004140 <__ssputs_r+0x88>

0800416c <_svfiprintf_r>:
 800416c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004170:	4698      	mov	r8, r3
 8004172:	898b      	ldrh	r3, [r1, #12]
 8004174:	4607      	mov	r7, r0
 8004176:	061b      	lsls	r3, r3, #24
 8004178:	460d      	mov	r5, r1
 800417a:	4614      	mov	r4, r2
 800417c:	b09d      	sub	sp, #116	; 0x74
 800417e:	d50e      	bpl.n	800419e <_svfiprintf_r+0x32>
 8004180:	690b      	ldr	r3, [r1, #16]
 8004182:	b963      	cbnz	r3, 800419e <_svfiprintf_r+0x32>
 8004184:	2140      	movs	r1, #64	; 0x40
 8004186:	f7ff ff0b 	bl	8003fa0 <_malloc_r>
 800418a:	6028      	str	r0, [r5, #0]
 800418c:	6128      	str	r0, [r5, #16]
 800418e:	b920      	cbnz	r0, 800419a <_svfiprintf_r+0x2e>
 8004190:	230c      	movs	r3, #12
 8004192:	603b      	str	r3, [r7, #0]
 8004194:	f04f 30ff 	mov.w	r0, #4294967295
 8004198:	e0d0      	b.n	800433c <_svfiprintf_r+0x1d0>
 800419a:	2340      	movs	r3, #64	; 0x40
 800419c:	616b      	str	r3, [r5, #20]
 800419e:	2300      	movs	r3, #0
 80041a0:	9309      	str	r3, [sp, #36]	; 0x24
 80041a2:	2320      	movs	r3, #32
 80041a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041a8:	2330      	movs	r3, #48	; 0x30
 80041aa:	f04f 0901 	mov.w	r9, #1
 80041ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80041b2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8004354 <_svfiprintf_r+0x1e8>
 80041b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041ba:	4623      	mov	r3, r4
 80041bc:	469a      	mov	sl, r3
 80041be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041c2:	b10a      	cbz	r2, 80041c8 <_svfiprintf_r+0x5c>
 80041c4:	2a25      	cmp	r2, #37	; 0x25
 80041c6:	d1f9      	bne.n	80041bc <_svfiprintf_r+0x50>
 80041c8:	ebba 0b04 	subs.w	fp, sl, r4
 80041cc:	d00b      	beq.n	80041e6 <_svfiprintf_r+0x7a>
 80041ce:	465b      	mov	r3, fp
 80041d0:	4622      	mov	r2, r4
 80041d2:	4629      	mov	r1, r5
 80041d4:	4638      	mov	r0, r7
 80041d6:	f7ff ff6f 	bl	80040b8 <__ssputs_r>
 80041da:	3001      	adds	r0, #1
 80041dc:	f000 80a9 	beq.w	8004332 <_svfiprintf_r+0x1c6>
 80041e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041e2:	445a      	add	r2, fp
 80041e4:	9209      	str	r2, [sp, #36]	; 0x24
 80041e6:	f89a 3000 	ldrb.w	r3, [sl]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f000 80a1 	beq.w	8004332 <_svfiprintf_r+0x1c6>
 80041f0:	2300      	movs	r3, #0
 80041f2:	f04f 32ff 	mov.w	r2, #4294967295
 80041f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041fa:	f10a 0a01 	add.w	sl, sl, #1
 80041fe:	9304      	str	r3, [sp, #16]
 8004200:	9307      	str	r3, [sp, #28]
 8004202:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004206:	931a      	str	r3, [sp, #104]	; 0x68
 8004208:	4654      	mov	r4, sl
 800420a:	2205      	movs	r2, #5
 800420c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004210:	4850      	ldr	r0, [pc, #320]	; (8004354 <_svfiprintf_r+0x1e8>)
 8004212:	f000 fa67 	bl	80046e4 <memchr>
 8004216:	9a04      	ldr	r2, [sp, #16]
 8004218:	b9d8      	cbnz	r0, 8004252 <_svfiprintf_r+0xe6>
 800421a:	06d0      	lsls	r0, r2, #27
 800421c:	bf44      	itt	mi
 800421e:	2320      	movmi	r3, #32
 8004220:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004224:	0711      	lsls	r1, r2, #28
 8004226:	bf44      	itt	mi
 8004228:	232b      	movmi	r3, #43	; 0x2b
 800422a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800422e:	f89a 3000 	ldrb.w	r3, [sl]
 8004232:	2b2a      	cmp	r3, #42	; 0x2a
 8004234:	d015      	beq.n	8004262 <_svfiprintf_r+0xf6>
 8004236:	4654      	mov	r4, sl
 8004238:	2000      	movs	r0, #0
 800423a:	f04f 0c0a 	mov.w	ip, #10
 800423e:	9a07      	ldr	r2, [sp, #28]
 8004240:	4621      	mov	r1, r4
 8004242:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004246:	3b30      	subs	r3, #48	; 0x30
 8004248:	2b09      	cmp	r3, #9
 800424a:	d94d      	bls.n	80042e8 <_svfiprintf_r+0x17c>
 800424c:	b1b0      	cbz	r0, 800427c <_svfiprintf_r+0x110>
 800424e:	9207      	str	r2, [sp, #28]
 8004250:	e014      	b.n	800427c <_svfiprintf_r+0x110>
 8004252:	eba0 0308 	sub.w	r3, r0, r8
 8004256:	fa09 f303 	lsl.w	r3, r9, r3
 800425a:	4313      	orrs	r3, r2
 800425c:	46a2      	mov	sl, r4
 800425e:	9304      	str	r3, [sp, #16]
 8004260:	e7d2      	b.n	8004208 <_svfiprintf_r+0x9c>
 8004262:	9b03      	ldr	r3, [sp, #12]
 8004264:	1d19      	adds	r1, r3, #4
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	9103      	str	r1, [sp, #12]
 800426a:	2b00      	cmp	r3, #0
 800426c:	bfbb      	ittet	lt
 800426e:	425b      	neglt	r3, r3
 8004270:	f042 0202 	orrlt.w	r2, r2, #2
 8004274:	9307      	strge	r3, [sp, #28]
 8004276:	9307      	strlt	r3, [sp, #28]
 8004278:	bfb8      	it	lt
 800427a:	9204      	strlt	r2, [sp, #16]
 800427c:	7823      	ldrb	r3, [r4, #0]
 800427e:	2b2e      	cmp	r3, #46	; 0x2e
 8004280:	d10c      	bne.n	800429c <_svfiprintf_r+0x130>
 8004282:	7863      	ldrb	r3, [r4, #1]
 8004284:	2b2a      	cmp	r3, #42	; 0x2a
 8004286:	d134      	bne.n	80042f2 <_svfiprintf_r+0x186>
 8004288:	9b03      	ldr	r3, [sp, #12]
 800428a:	3402      	adds	r4, #2
 800428c:	1d1a      	adds	r2, r3, #4
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	9203      	str	r2, [sp, #12]
 8004292:	2b00      	cmp	r3, #0
 8004294:	bfb8      	it	lt
 8004296:	f04f 33ff 	movlt.w	r3, #4294967295
 800429a:	9305      	str	r3, [sp, #20]
 800429c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8004358 <_svfiprintf_r+0x1ec>
 80042a0:	2203      	movs	r2, #3
 80042a2:	4650      	mov	r0, sl
 80042a4:	7821      	ldrb	r1, [r4, #0]
 80042a6:	f000 fa1d 	bl	80046e4 <memchr>
 80042aa:	b138      	cbz	r0, 80042bc <_svfiprintf_r+0x150>
 80042ac:	2240      	movs	r2, #64	; 0x40
 80042ae:	9b04      	ldr	r3, [sp, #16]
 80042b0:	eba0 000a 	sub.w	r0, r0, sl
 80042b4:	4082      	lsls	r2, r0
 80042b6:	4313      	orrs	r3, r2
 80042b8:	3401      	adds	r4, #1
 80042ba:	9304      	str	r3, [sp, #16]
 80042bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042c0:	2206      	movs	r2, #6
 80042c2:	4826      	ldr	r0, [pc, #152]	; (800435c <_svfiprintf_r+0x1f0>)
 80042c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042c8:	f000 fa0c 	bl	80046e4 <memchr>
 80042cc:	2800      	cmp	r0, #0
 80042ce:	d038      	beq.n	8004342 <_svfiprintf_r+0x1d6>
 80042d0:	4b23      	ldr	r3, [pc, #140]	; (8004360 <_svfiprintf_r+0x1f4>)
 80042d2:	bb1b      	cbnz	r3, 800431c <_svfiprintf_r+0x1b0>
 80042d4:	9b03      	ldr	r3, [sp, #12]
 80042d6:	3307      	adds	r3, #7
 80042d8:	f023 0307 	bic.w	r3, r3, #7
 80042dc:	3308      	adds	r3, #8
 80042de:	9303      	str	r3, [sp, #12]
 80042e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042e2:	4433      	add	r3, r6
 80042e4:	9309      	str	r3, [sp, #36]	; 0x24
 80042e6:	e768      	b.n	80041ba <_svfiprintf_r+0x4e>
 80042e8:	460c      	mov	r4, r1
 80042ea:	2001      	movs	r0, #1
 80042ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80042f0:	e7a6      	b.n	8004240 <_svfiprintf_r+0xd4>
 80042f2:	2300      	movs	r3, #0
 80042f4:	f04f 0c0a 	mov.w	ip, #10
 80042f8:	4619      	mov	r1, r3
 80042fa:	3401      	adds	r4, #1
 80042fc:	9305      	str	r3, [sp, #20]
 80042fe:	4620      	mov	r0, r4
 8004300:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004304:	3a30      	subs	r2, #48	; 0x30
 8004306:	2a09      	cmp	r2, #9
 8004308:	d903      	bls.n	8004312 <_svfiprintf_r+0x1a6>
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0c6      	beq.n	800429c <_svfiprintf_r+0x130>
 800430e:	9105      	str	r1, [sp, #20]
 8004310:	e7c4      	b.n	800429c <_svfiprintf_r+0x130>
 8004312:	4604      	mov	r4, r0
 8004314:	2301      	movs	r3, #1
 8004316:	fb0c 2101 	mla	r1, ip, r1, r2
 800431a:	e7f0      	b.n	80042fe <_svfiprintf_r+0x192>
 800431c:	ab03      	add	r3, sp, #12
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	462a      	mov	r2, r5
 8004322:	4638      	mov	r0, r7
 8004324:	4b0f      	ldr	r3, [pc, #60]	; (8004364 <_svfiprintf_r+0x1f8>)
 8004326:	a904      	add	r1, sp, #16
 8004328:	f3af 8000 	nop.w
 800432c:	1c42      	adds	r2, r0, #1
 800432e:	4606      	mov	r6, r0
 8004330:	d1d6      	bne.n	80042e0 <_svfiprintf_r+0x174>
 8004332:	89ab      	ldrh	r3, [r5, #12]
 8004334:	065b      	lsls	r3, r3, #25
 8004336:	f53f af2d 	bmi.w	8004194 <_svfiprintf_r+0x28>
 800433a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800433c:	b01d      	add	sp, #116	; 0x74
 800433e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004342:	ab03      	add	r3, sp, #12
 8004344:	9300      	str	r3, [sp, #0]
 8004346:	462a      	mov	r2, r5
 8004348:	4638      	mov	r0, r7
 800434a:	4b06      	ldr	r3, [pc, #24]	; (8004364 <_svfiprintf_r+0x1f8>)
 800434c:	a904      	add	r1, sp, #16
 800434e:	f000 f87d 	bl	800444c <_printf_i>
 8004352:	e7eb      	b.n	800432c <_svfiprintf_r+0x1c0>
 8004354:	080048dc 	.word	0x080048dc
 8004358:	080048e2 	.word	0x080048e2
 800435c:	080048e6 	.word	0x080048e6
 8004360:	00000000 	.word	0x00000000
 8004364:	080040b9 	.word	0x080040b9

08004368 <_printf_common>:
 8004368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800436c:	4616      	mov	r6, r2
 800436e:	4699      	mov	r9, r3
 8004370:	688a      	ldr	r2, [r1, #8]
 8004372:	690b      	ldr	r3, [r1, #16]
 8004374:	4607      	mov	r7, r0
 8004376:	4293      	cmp	r3, r2
 8004378:	bfb8      	it	lt
 800437a:	4613      	movlt	r3, r2
 800437c:	6033      	str	r3, [r6, #0]
 800437e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004382:	460c      	mov	r4, r1
 8004384:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004388:	b10a      	cbz	r2, 800438e <_printf_common+0x26>
 800438a:	3301      	adds	r3, #1
 800438c:	6033      	str	r3, [r6, #0]
 800438e:	6823      	ldr	r3, [r4, #0]
 8004390:	0699      	lsls	r1, r3, #26
 8004392:	bf42      	ittt	mi
 8004394:	6833      	ldrmi	r3, [r6, #0]
 8004396:	3302      	addmi	r3, #2
 8004398:	6033      	strmi	r3, [r6, #0]
 800439a:	6825      	ldr	r5, [r4, #0]
 800439c:	f015 0506 	ands.w	r5, r5, #6
 80043a0:	d106      	bne.n	80043b0 <_printf_common+0x48>
 80043a2:	f104 0a19 	add.w	sl, r4, #25
 80043a6:	68e3      	ldr	r3, [r4, #12]
 80043a8:	6832      	ldr	r2, [r6, #0]
 80043aa:	1a9b      	subs	r3, r3, r2
 80043ac:	42ab      	cmp	r3, r5
 80043ae:	dc2b      	bgt.n	8004408 <_printf_common+0xa0>
 80043b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80043b4:	1e13      	subs	r3, r2, #0
 80043b6:	6822      	ldr	r2, [r4, #0]
 80043b8:	bf18      	it	ne
 80043ba:	2301      	movne	r3, #1
 80043bc:	0692      	lsls	r2, r2, #26
 80043be:	d430      	bmi.n	8004422 <_printf_common+0xba>
 80043c0:	4649      	mov	r1, r9
 80043c2:	4638      	mov	r0, r7
 80043c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043c8:	47c0      	blx	r8
 80043ca:	3001      	adds	r0, #1
 80043cc:	d023      	beq.n	8004416 <_printf_common+0xae>
 80043ce:	6823      	ldr	r3, [r4, #0]
 80043d0:	6922      	ldr	r2, [r4, #16]
 80043d2:	f003 0306 	and.w	r3, r3, #6
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	bf14      	ite	ne
 80043da:	2500      	movne	r5, #0
 80043dc:	6833      	ldreq	r3, [r6, #0]
 80043de:	f04f 0600 	mov.w	r6, #0
 80043e2:	bf08      	it	eq
 80043e4:	68e5      	ldreq	r5, [r4, #12]
 80043e6:	f104 041a 	add.w	r4, r4, #26
 80043ea:	bf08      	it	eq
 80043ec:	1aed      	subeq	r5, r5, r3
 80043ee:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80043f2:	bf08      	it	eq
 80043f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043f8:	4293      	cmp	r3, r2
 80043fa:	bfc4      	itt	gt
 80043fc:	1a9b      	subgt	r3, r3, r2
 80043fe:	18ed      	addgt	r5, r5, r3
 8004400:	42b5      	cmp	r5, r6
 8004402:	d11a      	bne.n	800443a <_printf_common+0xd2>
 8004404:	2000      	movs	r0, #0
 8004406:	e008      	b.n	800441a <_printf_common+0xb2>
 8004408:	2301      	movs	r3, #1
 800440a:	4652      	mov	r2, sl
 800440c:	4649      	mov	r1, r9
 800440e:	4638      	mov	r0, r7
 8004410:	47c0      	blx	r8
 8004412:	3001      	adds	r0, #1
 8004414:	d103      	bne.n	800441e <_printf_common+0xb6>
 8004416:	f04f 30ff 	mov.w	r0, #4294967295
 800441a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800441e:	3501      	adds	r5, #1
 8004420:	e7c1      	b.n	80043a6 <_printf_common+0x3e>
 8004422:	2030      	movs	r0, #48	; 0x30
 8004424:	18e1      	adds	r1, r4, r3
 8004426:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800442a:	1c5a      	adds	r2, r3, #1
 800442c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004430:	4422      	add	r2, r4
 8004432:	3302      	adds	r3, #2
 8004434:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004438:	e7c2      	b.n	80043c0 <_printf_common+0x58>
 800443a:	2301      	movs	r3, #1
 800443c:	4622      	mov	r2, r4
 800443e:	4649      	mov	r1, r9
 8004440:	4638      	mov	r0, r7
 8004442:	47c0      	blx	r8
 8004444:	3001      	adds	r0, #1
 8004446:	d0e6      	beq.n	8004416 <_printf_common+0xae>
 8004448:	3601      	adds	r6, #1
 800444a:	e7d9      	b.n	8004400 <_printf_common+0x98>

0800444c <_printf_i>:
 800444c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004450:	7e0f      	ldrb	r7, [r1, #24]
 8004452:	4691      	mov	r9, r2
 8004454:	2f78      	cmp	r7, #120	; 0x78
 8004456:	4680      	mov	r8, r0
 8004458:	460c      	mov	r4, r1
 800445a:	469a      	mov	sl, r3
 800445c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800445e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004462:	d807      	bhi.n	8004474 <_printf_i+0x28>
 8004464:	2f62      	cmp	r7, #98	; 0x62
 8004466:	d80a      	bhi.n	800447e <_printf_i+0x32>
 8004468:	2f00      	cmp	r7, #0
 800446a:	f000 80d5 	beq.w	8004618 <_printf_i+0x1cc>
 800446e:	2f58      	cmp	r7, #88	; 0x58
 8004470:	f000 80c1 	beq.w	80045f6 <_printf_i+0x1aa>
 8004474:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004478:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800447c:	e03a      	b.n	80044f4 <_printf_i+0xa8>
 800447e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004482:	2b15      	cmp	r3, #21
 8004484:	d8f6      	bhi.n	8004474 <_printf_i+0x28>
 8004486:	a101      	add	r1, pc, #4	; (adr r1, 800448c <_printf_i+0x40>)
 8004488:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800448c:	080044e5 	.word	0x080044e5
 8004490:	080044f9 	.word	0x080044f9
 8004494:	08004475 	.word	0x08004475
 8004498:	08004475 	.word	0x08004475
 800449c:	08004475 	.word	0x08004475
 80044a0:	08004475 	.word	0x08004475
 80044a4:	080044f9 	.word	0x080044f9
 80044a8:	08004475 	.word	0x08004475
 80044ac:	08004475 	.word	0x08004475
 80044b0:	08004475 	.word	0x08004475
 80044b4:	08004475 	.word	0x08004475
 80044b8:	080045ff 	.word	0x080045ff
 80044bc:	08004525 	.word	0x08004525
 80044c0:	080045b9 	.word	0x080045b9
 80044c4:	08004475 	.word	0x08004475
 80044c8:	08004475 	.word	0x08004475
 80044cc:	08004621 	.word	0x08004621
 80044d0:	08004475 	.word	0x08004475
 80044d4:	08004525 	.word	0x08004525
 80044d8:	08004475 	.word	0x08004475
 80044dc:	08004475 	.word	0x08004475
 80044e0:	080045c1 	.word	0x080045c1
 80044e4:	682b      	ldr	r3, [r5, #0]
 80044e6:	1d1a      	adds	r2, r3, #4
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	602a      	str	r2, [r5, #0]
 80044ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044f4:	2301      	movs	r3, #1
 80044f6:	e0a0      	b.n	800463a <_printf_i+0x1ee>
 80044f8:	6820      	ldr	r0, [r4, #0]
 80044fa:	682b      	ldr	r3, [r5, #0]
 80044fc:	0607      	lsls	r7, r0, #24
 80044fe:	f103 0104 	add.w	r1, r3, #4
 8004502:	6029      	str	r1, [r5, #0]
 8004504:	d501      	bpl.n	800450a <_printf_i+0xbe>
 8004506:	681e      	ldr	r6, [r3, #0]
 8004508:	e003      	b.n	8004512 <_printf_i+0xc6>
 800450a:	0646      	lsls	r6, r0, #25
 800450c:	d5fb      	bpl.n	8004506 <_printf_i+0xba>
 800450e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004512:	2e00      	cmp	r6, #0
 8004514:	da03      	bge.n	800451e <_printf_i+0xd2>
 8004516:	232d      	movs	r3, #45	; 0x2d
 8004518:	4276      	negs	r6, r6
 800451a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800451e:	230a      	movs	r3, #10
 8004520:	4859      	ldr	r0, [pc, #356]	; (8004688 <_printf_i+0x23c>)
 8004522:	e012      	b.n	800454a <_printf_i+0xfe>
 8004524:	682b      	ldr	r3, [r5, #0]
 8004526:	6820      	ldr	r0, [r4, #0]
 8004528:	1d19      	adds	r1, r3, #4
 800452a:	6029      	str	r1, [r5, #0]
 800452c:	0605      	lsls	r5, r0, #24
 800452e:	d501      	bpl.n	8004534 <_printf_i+0xe8>
 8004530:	681e      	ldr	r6, [r3, #0]
 8004532:	e002      	b.n	800453a <_printf_i+0xee>
 8004534:	0641      	lsls	r1, r0, #25
 8004536:	d5fb      	bpl.n	8004530 <_printf_i+0xe4>
 8004538:	881e      	ldrh	r6, [r3, #0]
 800453a:	2f6f      	cmp	r7, #111	; 0x6f
 800453c:	bf0c      	ite	eq
 800453e:	2308      	moveq	r3, #8
 8004540:	230a      	movne	r3, #10
 8004542:	4851      	ldr	r0, [pc, #324]	; (8004688 <_printf_i+0x23c>)
 8004544:	2100      	movs	r1, #0
 8004546:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800454a:	6865      	ldr	r5, [r4, #4]
 800454c:	2d00      	cmp	r5, #0
 800454e:	bfa8      	it	ge
 8004550:	6821      	ldrge	r1, [r4, #0]
 8004552:	60a5      	str	r5, [r4, #8]
 8004554:	bfa4      	itt	ge
 8004556:	f021 0104 	bicge.w	r1, r1, #4
 800455a:	6021      	strge	r1, [r4, #0]
 800455c:	b90e      	cbnz	r6, 8004562 <_printf_i+0x116>
 800455e:	2d00      	cmp	r5, #0
 8004560:	d04b      	beq.n	80045fa <_printf_i+0x1ae>
 8004562:	4615      	mov	r5, r2
 8004564:	fbb6 f1f3 	udiv	r1, r6, r3
 8004568:	fb03 6711 	mls	r7, r3, r1, r6
 800456c:	5dc7      	ldrb	r7, [r0, r7]
 800456e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004572:	4637      	mov	r7, r6
 8004574:	42bb      	cmp	r3, r7
 8004576:	460e      	mov	r6, r1
 8004578:	d9f4      	bls.n	8004564 <_printf_i+0x118>
 800457a:	2b08      	cmp	r3, #8
 800457c:	d10b      	bne.n	8004596 <_printf_i+0x14a>
 800457e:	6823      	ldr	r3, [r4, #0]
 8004580:	07de      	lsls	r6, r3, #31
 8004582:	d508      	bpl.n	8004596 <_printf_i+0x14a>
 8004584:	6923      	ldr	r3, [r4, #16]
 8004586:	6861      	ldr	r1, [r4, #4]
 8004588:	4299      	cmp	r1, r3
 800458a:	bfde      	ittt	le
 800458c:	2330      	movle	r3, #48	; 0x30
 800458e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004592:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004596:	1b52      	subs	r2, r2, r5
 8004598:	6122      	str	r2, [r4, #16]
 800459a:	464b      	mov	r3, r9
 800459c:	4621      	mov	r1, r4
 800459e:	4640      	mov	r0, r8
 80045a0:	f8cd a000 	str.w	sl, [sp]
 80045a4:	aa03      	add	r2, sp, #12
 80045a6:	f7ff fedf 	bl	8004368 <_printf_common>
 80045aa:	3001      	adds	r0, #1
 80045ac:	d14a      	bne.n	8004644 <_printf_i+0x1f8>
 80045ae:	f04f 30ff 	mov.w	r0, #4294967295
 80045b2:	b004      	add	sp, #16
 80045b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045b8:	6823      	ldr	r3, [r4, #0]
 80045ba:	f043 0320 	orr.w	r3, r3, #32
 80045be:	6023      	str	r3, [r4, #0]
 80045c0:	2778      	movs	r7, #120	; 0x78
 80045c2:	4832      	ldr	r0, [pc, #200]	; (800468c <_printf_i+0x240>)
 80045c4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80045c8:	6823      	ldr	r3, [r4, #0]
 80045ca:	6829      	ldr	r1, [r5, #0]
 80045cc:	061f      	lsls	r7, r3, #24
 80045ce:	f851 6b04 	ldr.w	r6, [r1], #4
 80045d2:	d402      	bmi.n	80045da <_printf_i+0x18e>
 80045d4:	065f      	lsls	r7, r3, #25
 80045d6:	bf48      	it	mi
 80045d8:	b2b6      	uxthmi	r6, r6
 80045da:	07df      	lsls	r7, r3, #31
 80045dc:	bf48      	it	mi
 80045de:	f043 0320 	orrmi.w	r3, r3, #32
 80045e2:	6029      	str	r1, [r5, #0]
 80045e4:	bf48      	it	mi
 80045e6:	6023      	strmi	r3, [r4, #0]
 80045e8:	b91e      	cbnz	r6, 80045f2 <_printf_i+0x1a6>
 80045ea:	6823      	ldr	r3, [r4, #0]
 80045ec:	f023 0320 	bic.w	r3, r3, #32
 80045f0:	6023      	str	r3, [r4, #0]
 80045f2:	2310      	movs	r3, #16
 80045f4:	e7a6      	b.n	8004544 <_printf_i+0xf8>
 80045f6:	4824      	ldr	r0, [pc, #144]	; (8004688 <_printf_i+0x23c>)
 80045f8:	e7e4      	b.n	80045c4 <_printf_i+0x178>
 80045fa:	4615      	mov	r5, r2
 80045fc:	e7bd      	b.n	800457a <_printf_i+0x12e>
 80045fe:	682b      	ldr	r3, [r5, #0]
 8004600:	6826      	ldr	r6, [r4, #0]
 8004602:	1d18      	adds	r0, r3, #4
 8004604:	6961      	ldr	r1, [r4, #20]
 8004606:	6028      	str	r0, [r5, #0]
 8004608:	0635      	lsls	r5, r6, #24
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	d501      	bpl.n	8004612 <_printf_i+0x1c6>
 800460e:	6019      	str	r1, [r3, #0]
 8004610:	e002      	b.n	8004618 <_printf_i+0x1cc>
 8004612:	0670      	lsls	r0, r6, #25
 8004614:	d5fb      	bpl.n	800460e <_printf_i+0x1c2>
 8004616:	8019      	strh	r1, [r3, #0]
 8004618:	2300      	movs	r3, #0
 800461a:	4615      	mov	r5, r2
 800461c:	6123      	str	r3, [r4, #16]
 800461e:	e7bc      	b.n	800459a <_printf_i+0x14e>
 8004620:	682b      	ldr	r3, [r5, #0]
 8004622:	2100      	movs	r1, #0
 8004624:	1d1a      	adds	r2, r3, #4
 8004626:	602a      	str	r2, [r5, #0]
 8004628:	681d      	ldr	r5, [r3, #0]
 800462a:	6862      	ldr	r2, [r4, #4]
 800462c:	4628      	mov	r0, r5
 800462e:	f000 f859 	bl	80046e4 <memchr>
 8004632:	b108      	cbz	r0, 8004638 <_printf_i+0x1ec>
 8004634:	1b40      	subs	r0, r0, r5
 8004636:	6060      	str	r0, [r4, #4]
 8004638:	6863      	ldr	r3, [r4, #4]
 800463a:	6123      	str	r3, [r4, #16]
 800463c:	2300      	movs	r3, #0
 800463e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004642:	e7aa      	b.n	800459a <_printf_i+0x14e>
 8004644:	462a      	mov	r2, r5
 8004646:	4649      	mov	r1, r9
 8004648:	4640      	mov	r0, r8
 800464a:	6923      	ldr	r3, [r4, #16]
 800464c:	47d0      	blx	sl
 800464e:	3001      	adds	r0, #1
 8004650:	d0ad      	beq.n	80045ae <_printf_i+0x162>
 8004652:	6823      	ldr	r3, [r4, #0]
 8004654:	079b      	lsls	r3, r3, #30
 8004656:	d413      	bmi.n	8004680 <_printf_i+0x234>
 8004658:	68e0      	ldr	r0, [r4, #12]
 800465a:	9b03      	ldr	r3, [sp, #12]
 800465c:	4298      	cmp	r0, r3
 800465e:	bfb8      	it	lt
 8004660:	4618      	movlt	r0, r3
 8004662:	e7a6      	b.n	80045b2 <_printf_i+0x166>
 8004664:	2301      	movs	r3, #1
 8004666:	4632      	mov	r2, r6
 8004668:	4649      	mov	r1, r9
 800466a:	4640      	mov	r0, r8
 800466c:	47d0      	blx	sl
 800466e:	3001      	adds	r0, #1
 8004670:	d09d      	beq.n	80045ae <_printf_i+0x162>
 8004672:	3501      	adds	r5, #1
 8004674:	68e3      	ldr	r3, [r4, #12]
 8004676:	9903      	ldr	r1, [sp, #12]
 8004678:	1a5b      	subs	r3, r3, r1
 800467a:	42ab      	cmp	r3, r5
 800467c:	dcf2      	bgt.n	8004664 <_printf_i+0x218>
 800467e:	e7eb      	b.n	8004658 <_printf_i+0x20c>
 8004680:	2500      	movs	r5, #0
 8004682:	f104 0619 	add.w	r6, r4, #25
 8004686:	e7f5      	b.n	8004674 <_printf_i+0x228>
 8004688:	080048ed 	.word	0x080048ed
 800468c:	080048fe 	.word	0x080048fe

08004690 <memmove>:
 8004690:	4288      	cmp	r0, r1
 8004692:	b510      	push	{r4, lr}
 8004694:	eb01 0402 	add.w	r4, r1, r2
 8004698:	d902      	bls.n	80046a0 <memmove+0x10>
 800469a:	4284      	cmp	r4, r0
 800469c:	4623      	mov	r3, r4
 800469e:	d807      	bhi.n	80046b0 <memmove+0x20>
 80046a0:	1e43      	subs	r3, r0, #1
 80046a2:	42a1      	cmp	r1, r4
 80046a4:	d008      	beq.n	80046b8 <memmove+0x28>
 80046a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80046ae:	e7f8      	b.n	80046a2 <memmove+0x12>
 80046b0:	4601      	mov	r1, r0
 80046b2:	4402      	add	r2, r0
 80046b4:	428a      	cmp	r2, r1
 80046b6:	d100      	bne.n	80046ba <memmove+0x2a>
 80046b8:	bd10      	pop	{r4, pc}
 80046ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80046be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80046c2:	e7f7      	b.n	80046b4 <memmove+0x24>

080046c4 <_sbrk_r>:
 80046c4:	b538      	push	{r3, r4, r5, lr}
 80046c6:	2300      	movs	r3, #0
 80046c8:	4d05      	ldr	r5, [pc, #20]	; (80046e0 <_sbrk_r+0x1c>)
 80046ca:	4604      	mov	r4, r0
 80046cc:	4608      	mov	r0, r1
 80046ce:	602b      	str	r3, [r5, #0]
 80046d0:	f7fc f906 	bl	80008e0 <_sbrk>
 80046d4:	1c43      	adds	r3, r0, #1
 80046d6:	d102      	bne.n	80046de <_sbrk_r+0x1a>
 80046d8:	682b      	ldr	r3, [r5, #0]
 80046da:	b103      	cbz	r3, 80046de <_sbrk_r+0x1a>
 80046dc:	6023      	str	r3, [r4, #0]
 80046de:	bd38      	pop	{r3, r4, r5, pc}
 80046e0:	200012a4 	.word	0x200012a4

080046e4 <memchr>:
 80046e4:	4603      	mov	r3, r0
 80046e6:	b510      	push	{r4, lr}
 80046e8:	b2c9      	uxtb	r1, r1
 80046ea:	4402      	add	r2, r0
 80046ec:	4293      	cmp	r3, r2
 80046ee:	4618      	mov	r0, r3
 80046f0:	d101      	bne.n	80046f6 <memchr+0x12>
 80046f2:	2000      	movs	r0, #0
 80046f4:	e003      	b.n	80046fe <memchr+0x1a>
 80046f6:	7804      	ldrb	r4, [r0, #0]
 80046f8:	3301      	adds	r3, #1
 80046fa:	428c      	cmp	r4, r1
 80046fc:	d1f6      	bne.n	80046ec <memchr+0x8>
 80046fe:	bd10      	pop	{r4, pc}

08004700 <_realloc_r>:
 8004700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004704:	4680      	mov	r8, r0
 8004706:	4614      	mov	r4, r2
 8004708:	460e      	mov	r6, r1
 800470a:	b921      	cbnz	r1, 8004716 <_realloc_r+0x16>
 800470c:	4611      	mov	r1, r2
 800470e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004712:	f7ff bc45 	b.w	8003fa0 <_malloc_r>
 8004716:	b92a      	cbnz	r2, 8004724 <_realloc_r+0x24>
 8004718:	f7ff fbda 	bl	8003ed0 <_free_r>
 800471c:	4625      	mov	r5, r4
 800471e:	4628      	mov	r0, r5
 8004720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004724:	f000 f81b 	bl	800475e <_malloc_usable_size_r>
 8004728:	4284      	cmp	r4, r0
 800472a:	4607      	mov	r7, r0
 800472c:	d802      	bhi.n	8004734 <_realloc_r+0x34>
 800472e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004732:	d812      	bhi.n	800475a <_realloc_r+0x5a>
 8004734:	4621      	mov	r1, r4
 8004736:	4640      	mov	r0, r8
 8004738:	f7ff fc32 	bl	8003fa0 <_malloc_r>
 800473c:	4605      	mov	r5, r0
 800473e:	2800      	cmp	r0, #0
 8004740:	d0ed      	beq.n	800471e <_realloc_r+0x1e>
 8004742:	42bc      	cmp	r4, r7
 8004744:	4622      	mov	r2, r4
 8004746:	4631      	mov	r1, r6
 8004748:	bf28      	it	cs
 800474a:	463a      	movcs	r2, r7
 800474c:	f7ff fbb2 	bl	8003eb4 <memcpy>
 8004750:	4631      	mov	r1, r6
 8004752:	4640      	mov	r0, r8
 8004754:	f7ff fbbc 	bl	8003ed0 <_free_r>
 8004758:	e7e1      	b.n	800471e <_realloc_r+0x1e>
 800475a:	4635      	mov	r5, r6
 800475c:	e7df      	b.n	800471e <_realloc_r+0x1e>

0800475e <_malloc_usable_size_r>:
 800475e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004762:	1f18      	subs	r0, r3, #4
 8004764:	2b00      	cmp	r3, #0
 8004766:	bfbc      	itt	lt
 8004768:	580b      	ldrlt	r3, [r1, r0]
 800476a:	18c0      	addlt	r0, r0, r3
 800476c:	4770      	bx	lr
	...

08004770 <_init>:
 8004770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004772:	bf00      	nop
 8004774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004776:	bc08      	pop	{r3}
 8004778:	469e      	mov	lr, r3
 800477a:	4770      	bx	lr

0800477c <_fini>:
 800477c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800477e:	bf00      	nop
 8004780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004782:	bc08      	pop	{r3}
 8004784:	469e      	mov	lr, r3
 8004786:	4770      	bx	lr
