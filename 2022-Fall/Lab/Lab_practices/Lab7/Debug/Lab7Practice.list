
Lab7Practice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029d0  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08002bb4  08002bb4  00012bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c28  08002c28  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c28  08002c28  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c28  08002c28  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c28  08002c28  00012c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c2c  08002c2c  00012c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002c30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  2000005c  08002c8c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08002c8c  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009815  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a83  00000000  00000000  000298dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b98  00000000  00000000  0002b360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000910  00000000  00000000  0002bef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018fac  00000000  00000000  0002c808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c3d2  00000000  00000000  000457b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00096b8c  00000000  00000000  00051b86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003550  00000000  00000000  000e8714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000ebc64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000005c 	.word	0x2000005c
 8000200:	00000000 	.word	0x00000000
 8000204:	08002b9c 	.word	0x08002b9c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000060 	.word	0x20000060
 8000220:	08002b9c 	.word	0x08002b9c

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b09a      	sub	sp, #104	; 0x68
 8000238:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023a:	f000 fa83 	bl	8000744 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023e:	f000 f837 	bl	80002b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000242:	f000 f90f 	bl	8000464 <MX_GPIO_Init>
  MX_IWDG_Init();
 8000246:	f000 f87b 	bl	8000340 <MX_IWDG_Init>
  MX_TIM3_Init();
 800024a:	f000 f893 	bl	8000374 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800024e:	f000 f8df 	bl	8000410 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start_IT(&htim3);
 8000252:	4813      	ldr	r0, [pc, #76]	; (80002a0 <main+0x6c>)
 8000254:	f001 fa5a 	bl	800170c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int i = 0;
 8000258:	2300      	movs	r3, #0
 800025a:	667b      	str	r3, [r7, #100]	; 0x64
  unsigned char msg[100];
  HAL_UART_Transmit(&huart1, "Restart\r\n", 9, HAL_MAX_DELAY);
 800025c:	f04f 33ff 	mov.w	r3, #4294967295
 8000260:	2209      	movs	r2, #9
 8000262:	4910      	ldr	r1, [pc, #64]	; (80002a4 <main+0x70>)
 8000264:	4810      	ldr	r0, [pc, #64]	; (80002a8 <main+0x74>)
 8000266:	f001 fe7c 	bl	8001f62 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  i++;
 800026a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800026c:	3301      	adds	r3, #1
 800026e:	667b      	str	r3, [r7, #100]	; 0x64
  sprintf(msg, "i = %d\r\n", i);
 8000270:	463b      	mov	r3, r7
 8000272:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000274:	490d      	ldr	r1, [pc, #52]	; (80002ac <main+0x78>)
 8000276:	4618      	mov	r0, r3
 8000278:	f001 ffde 	bl	8002238 <siprintf>
   HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800027c:	463b      	mov	r3, r7
 800027e:	4618      	mov	r0, r3
 8000280:	f7ff ffd0 	bl	8000224 <strlen>
 8000284:	4603      	mov	r3, r0
 8000286:	b29a      	uxth	r2, r3
 8000288:	4639      	mov	r1, r7
 800028a:	f04f 33ff 	mov.w	r3, #4294967295
 800028e:	4806      	ldr	r0, [pc, #24]	; (80002a8 <main+0x74>)
 8000290:	f001 fe67 	bl	8001f62 <HAL_UART_Transmit>
  HAL_Delay(1000);
 8000294:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000298:	f000 fab6 	bl	8000808 <HAL_Delay>
  {
 800029c:	e7e5      	b.n	800026a <main+0x36>
 800029e:	bf00      	nop
 80002a0:	20000084 	.word	0x20000084
 80002a4:	08002bb4 	.word	0x08002bb4
 80002a8:	200000cc 	.word	0x200000cc
 80002ac:	08002bc0 	.word	0x08002bc0

080002b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b090      	sub	sp, #64	; 0x40
 80002b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b6:	f107 0318 	add.w	r3, r7, #24
 80002ba:	2228      	movs	r2, #40	; 0x28
 80002bc:	2100      	movs	r1, #0
 80002be:	4618      	mov	r0, r3
 80002c0:	f001 ffda 	bl	8002278 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	605a      	str	r2, [r3, #4]
 80002cc:	609a      	str	r2, [r3, #8]
 80002ce:	60da      	str	r2, [r3, #12]
 80002d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80002d2:	2309      	movs	r3, #9
 80002d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002dc:	2300      	movs	r3, #0
 80002de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e0:	2301      	movs	r3, #1
 80002e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80002e4:	2301      	movs	r3, #1
 80002e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e8:	2302      	movs	r3, #2
 80002ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002f2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f8:	f107 0318 	add.w	r3, r7, #24
 80002fc:	4618      	mov	r0, r3
 80002fe:	f000 fd9b 	bl	8000e38 <HAL_RCC_OscConfig>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000308:	f000 f8dc 	bl	80004c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030c:	230f      	movs	r3, #15
 800030e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000310:	2302      	movs	r3, #2
 8000312:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000314:	2300      	movs	r3, #0
 8000316:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000318:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800031c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800031e:	2300      	movs	r3, #0
 8000320:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	2102      	movs	r1, #2
 8000326:	4618      	mov	r0, r3
 8000328:	f001 f808 	bl	800133c <HAL_RCC_ClockConfig>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000332:	f000 f8c7 	bl	80004c4 <Error_Handler>
  }
}
 8000336:	bf00      	nop
 8000338:	3740      	adds	r7, #64	; 0x40
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
	...

08000340 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000344:	4b09      	ldr	r3, [pc, #36]	; (800036c <MX_IWDG_Init+0x2c>)
 8000346:	4a0a      	ldr	r2, [pc, #40]	; (8000370 <MX_IWDG_Init+0x30>)
 8000348:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 800034a:	4b08      	ldr	r3, [pc, #32]	; (800036c <MX_IWDG_Init+0x2c>)
 800034c:	2204      	movs	r2, #4
 800034e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8000350:	4b06      	ldr	r3, [pc, #24]	; (800036c <MX_IWDG_Init+0x2c>)
 8000352:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000356:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000358:	4804      	ldr	r0, [pc, #16]	; (800036c <MX_IWDG_Init+0x2c>)
 800035a:	f000 fd1b 	bl	8000d94 <HAL_IWDG_Init>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8000364:	f000 f8ae 	bl	80004c4 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000368:	bf00      	nop
 800036a:	bd80      	pop	{r7, pc}
 800036c:	20000078 	.word	0x20000078
 8000370:	40003000 	.word	0x40003000

08000374 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b086      	sub	sp, #24
 8000378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800037a:	f107 0308 	add.w	r3, r7, #8
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	605a      	str	r2, [r3, #4]
 8000384:	609a      	str	r2, [r3, #8]
 8000386:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000388:	463b      	mov	r3, r7
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000390:	4b1d      	ldr	r3, [pc, #116]	; (8000408 <MX_TIM3_Init+0x94>)
 8000392:	4a1e      	ldr	r2, [pc, #120]	; (800040c <MX_TIM3_Init+0x98>)
 8000394:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 8000396:	4b1c      	ldr	r3, [pc, #112]	; (8000408 <MX_TIM3_Init+0x94>)
 8000398:	f240 22cf 	movw	r2, #719	; 0x2cf
 800039c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800039e:	4b1a      	ldr	r3, [pc, #104]	; (8000408 <MX_TIM3_Init+0x94>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80003a4:	4b18      	ldr	r3, [pc, #96]	; (8000408 <MX_TIM3_Init+0x94>)
 80003a6:	f242 720f 	movw	r2, #9999	; 0x270f
 80003aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ac:	4b16      	ldr	r3, [pc, #88]	; (8000408 <MX_TIM3_Init+0x94>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003b2:	4b15      	ldr	r3, [pc, #84]	; (8000408 <MX_TIM3_Init+0x94>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80003b8:	4813      	ldr	r0, [pc, #76]	; (8000408 <MX_TIM3_Init+0x94>)
 80003ba:	f001 f957 	bl	800166c <HAL_TIM_Base_Init>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80003c4:	f000 f87e 	bl	80004c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80003ce:	f107 0308 	add.w	r3, r7, #8
 80003d2:	4619      	mov	r1, r3
 80003d4:	480c      	ldr	r0, [pc, #48]	; (8000408 <MX_TIM3_Init+0x94>)
 80003d6:	f001 fb01 	bl	80019dc <HAL_TIM_ConfigClockSource>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80003e0:	f000 f870 	bl	80004c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003e4:	2300      	movs	r3, #0
 80003e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003e8:	2300      	movs	r3, #0
 80003ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80003ec:	463b      	mov	r3, r7
 80003ee:	4619      	mov	r1, r3
 80003f0:	4805      	ldr	r0, [pc, #20]	; (8000408 <MX_TIM3_Init+0x94>)
 80003f2:	f001 fceb 	bl	8001dcc <HAL_TIMEx_MasterConfigSynchronization>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80003fc:	f000 f862 	bl	80004c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000400:	bf00      	nop
 8000402:	3718      	adds	r7, #24
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	20000084 	.word	0x20000084
 800040c:	40000400 	.word	0x40000400

08000410 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000414:	4b11      	ldr	r3, [pc, #68]	; (800045c <MX_USART1_UART_Init+0x4c>)
 8000416:	4a12      	ldr	r2, [pc, #72]	; (8000460 <MX_USART1_UART_Init+0x50>)
 8000418:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800041a:	4b10      	ldr	r3, [pc, #64]	; (800045c <MX_USART1_UART_Init+0x4c>)
 800041c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000420:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000422:	4b0e      	ldr	r3, [pc, #56]	; (800045c <MX_USART1_UART_Init+0x4c>)
 8000424:	2200      	movs	r2, #0
 8000426:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000428:	4b0c      	ldr	r3, [pc, #48]	; (800045c <MX_USART1_UART_Init+0x4c>)
 800042a:	2200      	movs	r2, #0
 800042c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800042e:	4b0b      	ldr	r3, [pc, #44]	; (800045c <MX_USART1_UART_Init+0x4c>)
 8000430:	2200      	movs	r2, #0
 8000432:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000434:	4b09      	ldr	r3, [pc, #36]	; (800045c <MX_USART1_UART_Init+0x4c>)
 8000436:	220c      	movs	r2, #12
 8000438:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800043a:	4b08      	ldr	r3, [pc, #32]	; (800045c <MX_USART1_UART_Init+0x4c>)
 800043c:	2200      	movs	r2, #0
 800043e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000440:	4b06      	ldr	r3, [pc, #24]	; (800045c <MX_USART1_UART_Init+0x4c>)
 8000442:	2200      	movs	r2, #0
 8000444:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000446:	4805      	ldr	r0, [pc, #20]	; (800045c <MX_USART1_UART_Init+0x4c>)
 8000448:	f001 fd3e 	bl	8001ec8 <HAL_UART_Init>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000452:	f000 f837 	bl	80004c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000456:	bf00      	nop
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	200000cc 	.word	0x200000cc
 8000460:	40013800 	.word	0x40013800

08000464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800046a:	4b0e      	ldr	r3, [pc, #56]	; (80004a4 <MX_GPIO_Init+0x40>)
 800046c:	699b      	ldr	r3, [r3, #24]
 800046e:	4a0d      	ldr	r2, [pc, #52]	; (80004a4 <MX_GPIO_Init+0x40>)
 8000470:	f043 0320 	orr.w	r3, r3, #32
 8000474:	6193      	str	r3, [r2, #24]
 8000476:	4b0b      	ldr	r3, [pc, #44]	; (80004a4 <MX_GPIO_Init+0x40>)
 8000478:	699b      	ldr	r3, [r3, #24]
 800047a:	f003 0320 	and.w	r3, r3, #32
 800047e:	607b      	str	r3, [r7, #4]
 8000480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000482:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <MX_GPIO_Init+0x40>)
 8000484:	699b      	ldr	r3, [r3, #24]
 8000486:	4a07      	ldr	r2, [pc, #28]	; (80004a4 <MX_GPIO_Init+0x40>)
 8000488:	f043 0304 	orr.w	r3, r3, #4
 800048c:	6193      	str	r3, [r2, #24]
 800048e:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <MX_GPIO_Init+0x40>)
 8000490:	699b      	ldr	r3, [r3, #24]
 8000492:	f003 0304 	and.w	r3, r3, #4
 8000496:	603b      	str	r3, [r7, #0]
 8000498:	683b      	ldr	r3, [r7, #0]

}
 800049a:	bf00      	nop
 800049c:	370c      	adds	r7, #12
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc80      	pop	{r7}
 80004a2:	4770      	bx	lr
 80004a4:	40021000 	.word	0x40021000

080004a8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
	HAL_IWDG_Refresh(&hiwdg);
 80004b0:	4803      	ldr	r0, [pc, #12]	; (80004c0 <HAL_TIM_PeriodElapsedCallback+0x18>)
 80004b2:	f000 fcb1 	bl	8000e18 <HAL_IWDG_Refresh>

}
 80004b6:	bf00      	nop
 80004b8:	3708      	adds	r7, #8
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	20000078 	.word	0x20000078

080004c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004c8:	b672      	cpsid	i
}
 80004ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004cc:	e7fe      	b.n	80004cc <Error_Handler+0x8>
	...

080004d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004d6:	4b16      	ldr	r3, [pc, #88]	; (8000530 <HAL_MspInit+0x60>)
 80004d8:	699b      	ldr	r3, [r3, #24]
 80004da:	4a15      	ldr	r2, [pc, #84]	; (8000530 <HAL_MspInit+0x60>)
 80004dc:	f043 0301 	orr.w	r3, r3, #1
 80004e0:	6193      	str	r3, [r2, #24]
 80004e2:	4b13      	ldr	r3, [pc, #76]	; (8000530 <HAL_MspInit+0x60>)
 80004e4:	699b      	ldr	r3, [r3, #24]
 80004e6:	f003 0301 	and.w	r3, r3, #1
 80004ea:	60bb      	str	r3, [r7, #8]
 80004ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ee:	4b10      	ldr	r3, [pc, #64]	; (8000530 <HAL_MspInit+0x60>)
 80004f0:	69db      	ldr	r3, [r3, #28]
 80004f2:	4a0f      	ldr	r2, [pc, #60]	; (8000530 <HAL_MspInit+0x60>)
 80004f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004f8:	61d3      	str	r3, [r2, #28]
 80004fa:	4b0d      	ldr	r3, [pc, #52]	; (8000530 <HAL_MspInit+0x60>)
 80004fc:	69db      	ldr	r3, [r3, #28]
 80004fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000506:	2005      	movs	r0, #5
 8000508:	f000 fa6e 	bl	80009e8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800050c:	4b09      	ldr	r3, [pc, #36]	; (8000534 <HAL_MspInit+0x64>)
 800050e:	685b      	ldr	r3, [r3, #4]
 8000510:	60fb      	str	r3, [r7, #12]
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000518:	60fb      	str	r3, [r7, #12]
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000520:	60fb      	str	r3, [r7, #12]
 8000522:	4a04      	ldr	r2, [pc, #16]	; (8000534 <HAL_MspInit+0x64>)
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000528:	bf00      	nop
 800052a:	3710      	adds	r7, #16
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	40021000 	.word	0x40021000
 8000534:	40010000 	.word	0x40010000

08000538 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a0d      	ldr	r2, [pc, #52]	; (800057c <HAL_TIM_Base_MspInit+0x44>)
 8000546:	4293      	cmp	r3, r2
 8000548:	d113      	bne.n	8000572 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800054a:	4b0d      	ldr	r3, [pc, #52]	; (8000580 <HAL_TIM_Base_MspInit+0x48>)
 800054c:	69db      	ldr	r3, [r3, #28]
 800054e:	4a0c      	ldr	r2, [pc, #48]	; (8000580 <HAL_TIM_Base_MspInit+0x48>)
 8000550:	f043 0302 	orr.w	r3, r3, #2
 8000554:	61d3      	str	r3, [r2, #28]
 8000556:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <HAL_TIM_Base_MspInit+0x48>)
 8000558:	69db      	ldr	r3, [r3, #28]
 800055a:	f003 0302 	and.w	r3, r3, #2
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8000562:	2200      	movs	r2, #0
 8000564:	2101      	movs	r1, #1
 8000566:	201d      	movs	r0, #29
 8000568:	f000 fa49 	bl	80009fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800056c:	201d      	movs	r0, #29
 800056e:	f000 fa62 	bl	8000a36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000572:	bf00      	nop
 8000574:	3710      	adds	r7, #16
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	40000400 	.word	0x40000400
 8000580:	40021000 	.word	0x40021000

08000584 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058c:	f107 0310 	add.w	r3, r7, #16
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4a1c      	ldr	r2, [pc, #112]	; (8000610 <HAL_UART_MspInit+0x8c>)
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d131      	bne.n	8000608 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005a4:	4b1b      	ldr	r3, [pc, #108]	; (8000614 <HAL_UART_MspInit+0x90>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	4a1a      	ldr	r2, [pc, #104]	; (8000614 <HAL_UART_MspInit+0x90>)
 80005aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ae:	6193      	str	r3, [r2, #24]
 80005b0:	4b18      	ldr	r3, [pc, #96]	; (8000614 <HAL_UART_MspInit+0x90>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005b8:	60fb      	str	r3, [r7, #12]
 80005ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005bc:	4b15      	ldr	r3, [pc, #84]	; (8000614 <HAL_UART_MspInit+0x90>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	4a14      	ldr	r2, [pc, #80]	; (8000614 <HAL_UART_MspInit+0x90>)
 80005c2:	f043 0304 	orr.w	r3, r3, #4
 80005c6:	6193      	str	r3, [r2, #24]
 80005c8:	4b12      	ldr	r3, [pc, #72]	; (8000614 <HAL_UART_MspInit+0x90>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	f003 0304 	and.w	r3, r3, #4
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005da:	2302      	movs	r3, #2
 80005dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005de:	2303      	movs	r3, #3
 80005e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e2:	f107 0310 	add.w	r3, r7, #16
 80005e6:	4619      	mov	r1, r3
 80005e8:	480b      	ldr	r0, [pc, #44]	; (8000618 <HAL_UART_MspInit+0x94>)
 80005ea:	f000 fa3f 	bl	8000a6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fc:	f107 0310 	add.w	r3, r7, #16
 8000600:	4619      	mov	r1, r3
 8000602:	4805      	ldr	r0, [pc, #20]	; (8000618 <HAL_UART_MspInit+0x94>)
 8000604:	f000 fa32 	bl	8000a6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000608:	bf00      	nop
 800060a:	3720      	adds	r7, #32
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40013800 	.word	0x40013800
 8000614:	40021000 	.word	0x40021000
 8000618:	40010800 	.word	0x40010800

0800061c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000620:	e7fe      	b.n	8000620 <NMI_Handler+0x4>

08000622 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000622:	b480      	push	{r7}
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000626:	e7fe      	b.n	8000626 <HardFault_Handler+0x4>

08000628 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800062c:	e7fe      	b.n	800062c <MemManage_Handler+0x4>

0800062e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800062e:	b480      	push	{r7}
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000632:	e7fe      	b.n	8000632 <BusFault_Handler+0x4>

08000634 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000638:	e7fe      	b.n	8000638 <UsageFault_Handler+0x4>

0800063a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800063a:	b480      	push	{r7}
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800063e:	bf00      	nop
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr

08000646 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000646:	b480      	push	{r7}
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800064a:	bf00      	nop
 800064c:	46bd      	mov	sp, r7
 800064e:	bc80      	pop	{r7}
 8000650:	4770      	bx	lr

08000652 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000652:	b480      	push	{r7}
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000656:	bf00      	nop
 8000658:	46bd      	mov	sp, r7
 800065a:	bc80      	pop	{r7}
 800065c:	4770      	bx	lr

0800065e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800065e:	b580      	push	{r7, lr}
 8000660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000662:	f000 f8b5 	bl	80007d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
	...

0800066c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000670:	4802      	ldr	r0, [pc, #8]	; (800067c <TIM3_IRQHandler+0x10>)
 8000672:	f001 f8ab 	bl	80017cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000084 	.word	0x20000084

08000680 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000688:	4a14      	ldr	r2, [pc, #80]	; (80006dc <_sbrk+0x5c>)
 800068a:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <_sbrk+0x60>)
 800068c:	1ad3      	subs	r3, r2, r3
 800068e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000694:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <_sbrk+0x64>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d102      	bne.n	80006a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <_sbrk+0x64>)
 800069e:	4a12      	ldr	r2, [pc, #72]	; (80006e8 <_sbrk+0x68>)
 80006a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <_sbrk+0x64>)
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4413      	add	r3, r2
 80006aa:	693a      	ldr	r2, [r7, #16]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	d207      	bcs.n	80006c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006b0:	f001 fdea 	bl	8002288 <__errno>
 80006b4:	4603      	mov	r3, r0
 80006b6:	220c      	movs	r2, #12
 80006b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006ba:	f04f 33ff 	mov.w	r3, #4294967295
 80006be:	e009      	b.n	80006d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006c0:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <_sbrk+0x64>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006c6:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <_sbrk+0x64>)
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4413      	add	r3, r2
 80006ce:	4a05      	ldr	r2, [pc, #20]	; (80006e4 <_sbrk+0x64>)
 80006d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006d2:	68fb      	ldr	r3, [r7, #12]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3718      	adds	r7, #24
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	2000c000 	.word	0x2000c000
 80006e0:	00000400 	.word	0x00000400
 80006e4:	20000110 	.word	0x20000110
 80006e8:	20000260 	.word	0x20000260

080006ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr

080006f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006f8:	480c      	ldr	r0, [pc, #48]	; (800072c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006fa:	490d      	ldr	r1, [pc, #52]	; (8000730 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006fc:	4a0d      	ldr	r2, [pc, #52]	; (8000734 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000700:	e002      	b.n	8000708 <LoopCopyDataInit>

08000702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000706:	3304      	adds	r3, #4

08000708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800070a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800070c:	d3f9      	bcc.n	8000702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800070e:	4a0a      	ldr	r2, [pc, #40]	; (8000738 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000710:	4c0a      	ldr	r4, [pc, #40]	; (800073c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000714:	e001      	b.n	800071a <LoopFillZerobss>

08000716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000718:	3204      	adds	r2, #4

0800071a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800071a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800071c:	d3fb      	bcc.n	8000716 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800071e:	f7ff ffe5 	bl	80006ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000722:	f001 fdb7 	bl	8002294 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000726:	f7ff fd85 	bl	8000234 <main>
  bx lr
 800072a:	4770      	bx	lr
  ldr r0, =_sdata
 800072c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000730:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000734:	08002c30 	.word	0x08002c30
  ldr r2, =_sbss
 8000738:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800073c:	20000260 	.word	0x20000260

08000740 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000740:	e7fe      	b.n	8000740 <ADC1_2_IRQHandler>
	...

08000744 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000748:	4b08      	ldr	r3, [pc, #32]	; (800076c <HAL_Init+0x28>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a07      	ldr	r2, [pc, #28]	; (800076c <HAL_Init+0x28>)
 800074e:	f043 0310 	orr.w	r3, r3, #16
 8000752:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000754:	2003      	movs	r0, #3
 8000756:	f000 f947 	bl	80009e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800075a:	2000      	movs	r0, #0
 800075c:	f000 f808 	bl	8000770 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000760:	f7ff feb6 	bl	80004d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000764:	2300      	movs	r3, #0
}
 8000766:	4618      	mov	r0, r3
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40022000 	.word	0x40022000

08000770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <HAL_InitTick+0x54>)
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <HAL_InitTick+0x58>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	4619      	mov	r1, r3
 8000782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000786:	fbb3 f3f1 	udiv	r3, r3, r1
 800078a:	fbb2 f3f3 	udiv	r3, r2, r3
 800078e:	4618      	mov	r0, r3
 8000790:	f000 f95f 	bl	8000a52 <HAL_SYSTICK_Config>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800079a:	2301      	movs	r3, #1
 800079c:	e00e      	b.n	80007bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2b0f      	cmp	r3, #15
 80007a2:	d80a      	bhi.n	80007ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007a4:	2200      	movs	r2, #0
 80007a6:	6879      	ldr	r1, [r7, #4]
 80007a8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ac:	f000 f927 	bl	80009fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007b0:	4a06      	ldr	r2, [pc, #24]	; (80007cc <HAL_InitTick+0x5c>)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007b6:	2300      	movs	r3, #0
 80007b8:	e000      	b.n	80007bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007ba:	2301      	movs	r3, #1
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000000 	.word	0x20000000
 80007c8:	20000008 	.word	0x20000008
 80007cc:	20000004 	.word	0x20000004

080007d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <HAL_IncTick+0x1c>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	461a      	mov	r2, r3
 80007da:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <HAL_IncTick+0x20>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4413      	add	r3, r2
 80007e0:	4a03      	ldr	r2, [pc, #12]	; (80007f0 <HAL_IncTick+0x20>)
 80007e2:	6013      	str	r3, [r2, #0]
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr
 80007ec:	20000008 	.word	0x20000008
 80007f0:	20000114 	.word	0x20000114

080007f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  return uwTick;
 80007f8:	4b02      	ldr	r3, [pc, #8]	; (8000804 <HAL_GetTick+0x10>)
 80007fa:	681b      	ldr	r3, [r3, #0]
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr
 8000804:	20000114 	.word	0x20000114

08000808 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000810:	f7ff fff0 	bl	80007f4 <HAL_GetTick>
 8000814:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000820:	d005      	beq.n	800082e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000822:	4b0a      	ldr	r3, [pc, #40]	; (800084c <HAL_Delay+0x44>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	461a      	mov	r2, r3
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	4413      	add	r3, r2
 800082c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800082e:	bf00      	nop
 8000830:	f7ff ffe0 	bl	80007f4 <HAL_GetTick>
 8000834:	4602      	mov	r2, r0
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	1ad3      	subs	r3, r2, r3
 800083a:	68fa      	ldr	r2, [r7, #12]
 800083c:	429a      	cmp	r2, r3
 800083e:	d8f7      	bhi.n	8000830 <HAL_Delay+0x28>
  {
  }
}
 8000840:	bf00      	nop
 8000842:	bf00      	nop
 8000844:	3710      	adds	r7, #16
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000008 	.word	0x20000008

08000850 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	f003 0307 	and.w	r3, r3, #7
 800085e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <__NVIC_SetPriorityGrouping+0x44>)
 8000862:	68db      	ldr	r3, [r3, #12]
 8000864:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000866:	68ba      	ldr	r2, [r7, #8]
 8000868:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800086c:	4013      	ands	r3, r2
 800086e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000878:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800087c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000880:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000882:	4a04      	ldr	r2, [pc, #16]	; (8000894 <__NVIC_SetPriorityGrouping+0x44>)
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	60d3      	str	r3, [r2, #12]
}
 8000888:	bf00      	nop
 800088a:	3714      	adds	r7, #20
 800088c:	46bd      	mov	sp, r7
 800088e:	bc80      	pop	{r7}
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	e000ed00 	.word	0xe000ed00

08000898 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800089c:	4b04      	ldr	r3, [pc, #16]	; (80008b0 <__NVIC_GetPriorityGrouping+0x18>)
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	0a1b      	lsrs	r3, r3, #8
 80008a2:	f003 0307 	and.w	r3, r3, #7
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bc80      	pop	{r7}
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	db0b      	blt.n	80008de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	f003 021f 	and.w	r2, r3, #31
 80008cc:	4906      	ldr	r1, [pc, #24]	; (80008e8 <__NVIC_EnableIRQ+0x34>)
 80008ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d2:	095b      	lsrs	r3, r3, #5
 80008d4:	2001      	movs	r0, #1
 80008d6:	fa00 f202 	lsl.w	r2, r0, r2
 80008da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr
 80008e8:	e000e100 	.word	0xe000e100

080008ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	6039      	str	r1, [r7, #0]
 80008f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	db0a      	blt.n	8000916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	b2da      	uxtb	r2, r3
 8000904:	490c      	ldr	r1, [pc, #48]	; (8000938 <__NVIC_SetPriority+0x4c>)
 8000906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090a:	0112      	lsls	r2, r2, #4
 800090c:	b2d2      	uxtb	r2, r2
 800090e:	440b      	add	r3, r1
 8000910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000914:	e00a      	b.n	800092c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	b2da      	uxtb	r2, r3
 800091a:	4908      	ldr	r1, [pc, #32]	; (800093c <__NVIC_SetPriority+0x50>)
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	f003 030f 	and.w	r3, r3, #15
 8000922:	3b04      	subs	r3, #4
 8000924:	0112      	lsls	r2, r2, #4
 8000926:	b2d2      	uxtb	r2, r2
 8000928:	440b      	add	r3, r1
 800092a:	761a      	strb	r2, [r3, #24]
}
 800092c:	bf00      	nop
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	e000e100 	.word	0xe000e100
 800093c:	e000ed00 	.word	0xe000ed00

08000940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000940:	b480      	push	{r7}
 8000942:	b089      	sub	sp, #36	; 0x24
 8000944:	af00      	add	r7, sp, #0
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	60b9      	str	r1, [r7, #8]
 800094a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	f003 0307 	and.w	r3, r3, #7
 8000952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000954:	69fb      	ldr	r3, [r7, #28]
 8000956:	f1c3 0307 	rsb	r3, r3, #7
 800095a:	2b04      	cmp	r3, #4
 800095c:	bf28      	it	cs
 800095e:	2304      	movcs	r3, #4
 8000960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	3304      	adds	r3, #4
 8000966:	2b06      	cmp	r3, #6
 8000968:	d902      	bls.n	8000970 <NVIC_EncodePriority+0x30>
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	3b03      	subs	r3, #3
 800096e:	e000      	b.n	8000972 <NVIC_EncodePriority+0x32>
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000974:	f04f 32ff 	mov.w	r2, #4294967295
 8000978:	69bb      	ldr	r3, [r7, #24]
 800097a:	fa02 f303 	lsl.w	r3, r2, r3
 800097e:	43da      	mvns	r2, r3
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	401a      	ands	r2, r3
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000988:	f04f 31ff 	mov.w	r1, #4294967295
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	fa01 f303 	lsl.w	r3, r1, r3
 8000992:	43d9      	mvns	r1, r3
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000998:	4313      	orrs	r3, r2
         );
}
 800099a:	4618      	mov	r0, r3
 800099c:	3724      	adds	r7, #36	; 0x24
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr

080009a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	3b01      	subs	r3, #1
 80009b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009b4:	d301      	bcc.n	80009ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009b6:	2301      	movs	r3, #1
 80009b8:	e00f      	b.n	80009da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ba:	4a0a      	ldr	r2, [pc, #40]	; (80009e4 <SysTick_Config+0x40>)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	3b01      	subs	r3, #1
 80009c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009c2:	210f      	movs	r1, #15
 80009c4:	f04f 30ff 	mov.w	r0, #4294967295
 80009c8:	f7ff ff90 	bl	80008ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009cc:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <SysTick_Config+0x40>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009d2:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <SysTick_Config+0x40>)
 80009d4:	2207      	movs	r2, #7
 80009d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009d8:	2300      	movs	r3, #0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	e000e010 	.word	0xe000e010

080009e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f7ff ff2d 	bl	8000850 <__NVIC_SetPriorityGrouping>
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b086      	sub	sp, #24
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	4603      	mov	r3, r0
 8000a06:	60b9      	str	r1, [r7, #8]
 8000a08:	607a      	str	r2, [r7, #4]
 8000a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a10:	f7ff ff42 	bl	8000898 <__NVIC_GetPriorityGrouping>
 8000a14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	68b9      	ldr	r1, [r7, #8]
 8000a1a:	6978      	ldr	r0, [r7, #20]
 8000a1c:	f7ff ff90 	bl	8000940 <NVIC_EncodePriority>
 8000a20:	4602      	mov	r2, r0
 8000a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a26:	4611      	mov	r1, r2
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff ff5f 	bl	80008ec <__NVIC_SetPriority>
}
 8000a2e:	bf00      	nop
 8000a30:	3718      	adds	r7, #24
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b082      	sub	sp, #8
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff ff35 	bl	80008b4 <__NVIC_EnableIRQ>
}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b082      	sub	sp, #8
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f7ff ffa2 	bl	80009a4 <SysTick_Config>
 8000a60:	4603      	mov	r3, r0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
	...

08000a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b08b      	sub	sp, #44	; 0x2c
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a7e:	e179      	b.n	8000d74 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a80:	2201      	movs	r2, #1
 8000a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a84:	fa02 f303 	lsl.w	r3, r2, r3
 8000a88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	69fa      	ldr	r2, [r7, #28]
 8000a90:	4013      	ands	r3, r2
 8000a92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a94:	69ba      	ldr	r2, [r7, #24]
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	f040 8168 	bne.w	8000d6e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	4a96      	ldr	r2, [pc, #600]	; (8000cfc <HAL_GPIO_Init+0x290>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d05e      	beq.n	8000b66 <HAL_GPIO_Init+0xfa>
 8000aa8:	4a94      	ldr	r2, [pc, #592]	; (8000cfc <HAL_GPIO_Init+0x290>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d875      	bhi.n	8000b9a <HAL_GPIO_Init+0x12e>
 8000aae:	4a94      	ldr	r2, [pc, #592]	; (8000d00 <HAL_GPIO_Init+0x294>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d058      	beq.n	8000b66 <HAL_GPIO_Init+0xfa>
 8000ab4:	4a92      	ldr	r2, [pc, #584]	; (8000d00 <HAL_GPIO_Init+0x294>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d86f      	bhi.n	8000b9a <HAL_GPIO_Init+0x12e>
 8000aba:	4a92      	ldr	r2, [pc, #584]	; (8000d04 <HAL_GPIO_Init+0x298>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d052      	beq.n	8000b66 <HAL_GPIO_Init+0xfa>
 8000ac0:	4a90      	ldr	r2, [pc, #576]	; (8000d04 <HAL_GPIO_Init+0x298>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d869      	bhi.n	8000b9a <HAL_GPIO_Init+0x12e>
 8000ac6:	4a90      	ldr	r2, [pc, #576]	; (8000d08 <HAL_GPIO_Init+0x29c>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d04c      	beq.n	8000b66 <HAL_GPIO_Init+0xfa>
 8000acc:	4a8e      	ldr	r2, [pc, #568]	; (8000d08 <HAL_GPIO_Init+0x29c>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d863      	bhi.n	8000b9a <HAL_GPIO_Init+0x12e>
 8000ad2:	4a8e      	ldr	r2, [pc, #568]	; (8000d0c <HAL_GPIO_Init+0x2a0>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d046      	beq.n	8000b66 <HAL_GPIO_Init+0xfa>
 8000ad8:	4a8c      	ldr	r2, [pc, #560]	; (8000d0c <HAL_GPIO_Init+0x2a0>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d85d      	bhi.n	8000b9a <HAL_GPIO_Init+0x12e>
 8000ade:	2b12      	cmp	r3, #18
 8000ae0:	d82a      	bhi.n	8000b38 <HAL_GPIO_Init+0xcc>
 8000ae2:	2b12      	cmp	r3, #18
 8000ae4:	d859      	bhi.n	8000b9a <HAL_GPIO_Init+0x12e>
 8000ae6:	a201      	add	r2, pc, #4	; (adr r2, 8000aec <HAL_GPIO_Init+0x80>)
 8000ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aec:	08000b67 	.word	0x08000b67
 8000af0:	08000b41 	.word	0x08000b41
 8000af4:	08000b53 	.word	0x08000b53
 8000af8:	08000b95 	.word	0x08000b95
 8000afc:	08000b9b 	.word	0x08000b9b
 8000b00:	08000b9b 	.word	0x08000b9b
 8000b04:	08000b9b 	.word	0x08000b9b
 8000b08:	08000b9b 	.word	0x08000b9b
 8000b0c:	08000b9b 	.word	0x08000b9b
 8000b10:	08000b9b 	.word	0x08000b9b
 8000b14:	08000b9b 	.word	0x08000b9b
 8000b18:	08000b9b 	.word	0x08000b9b
 8000b1c:	08000b9b 	.word	0x08000b9b
 8000b20:	08000b9b 	.word	0x08000b9b
 8000b24:	08000b9b 	.word	0x08000b9b
 8000b28:	08000b9b 	.word	0x08000b9b
 8000b2c:	08000b9b 	.word	0x08000b9b
 8000b30:	08000b49 	.word	0x08000b49
 8000b34:	08000b5d 	.word	0x08000b5d
 8000b38:	4a75      	ldr	r2, [pc, #468]	; (8000d10 <HAL_GPIO_Init+0x2a4>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d013      	beq.n	8000b66 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b3e:	e02c      	b.n	8000b9a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	623b      	str	r3, [r7, #32]
          break;
 8000b46:	e029      	b.n	8000b9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	3304      	adds	r3, #4
 8000b4e:	623b      	str	r3, [r7, #32]
          break;
 8000b50:	e024      	b.n	8000b9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	68db      	ldr	r3, [r3, #12]
 8000b56:	3308      	adds	r3, #8
 8000b58:	623b      	str	r3, [r7, #32]
          break;
 8000b5a:	e01f      	b.n	8000b9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	330c      	adds	r3, #12
 8000b62:	623b      	str	r3, [r7, #32]
          break;
 8000b64:	e01a      	b.n	8000b9c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d102      	bne.n	8000b74 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b6e:	2304      	movs	r3, #4
 8000b70:	623b      	str	r3, [r7, #32]
          break;
 8000b72:	e013      	b.n	8000b9c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	689b      	ldr	r3, [r3, #8]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d105      	bne.n	8000b88 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b7c:	2308      	movs	r3, #8
 8000b7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	69fa      	ldr	r2, [r7, #28]
 8000b84:	611a      	str	r2, [r3, #16]
          break;
 8000b86:	e009      	b.n	8000b9c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b88:	2308      	movs	r3, #8
 8000b8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	69fa      	ldr	r2, [r7, #28]
 8000b90:	615a      	str	r2, [r3, #20]
          break;
 8000b92:	e003      	b.n	8000b9c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b94:	2300      	movs	r3, #0
 8000b96:	623b      	str	r3, [r7, #32]
          break;
 8000b98:	e000      	b.n	8000b9c <HAL_GPIO_Init+0x130>
          break;
 8000b9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b9c:	69bb      	ldr	r3, [r7, #24]
 8000b9e:	2bff      	cmp	r3, #255	; 0xff
 8000ba0:	d801      	bhi.n	8000ba6 <HAL_GPIO_Init+0x13a>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	e001      	b.n	8000baa <HAL_GPIO_Init+0x13e>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	3304      	adds	r3, #4
 8000baa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	2bff      	cmp	r3, #255	; 0xff
 8000bb0:	d802      	bhi.n	8000bb8 <HAL_GPIO_Init+0x14c>
 8000bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	e002      	b.n	8000bbe <HAL_GPIO_Init+0x152>
 8000bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bba:	3b08      	subs	r3, #8
 8000bbc:	009b      	lsls	r3, r3, #2
 8000bbe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	210f      	movs	r1, #15
 8000bc6:	693b      	ldr	r3, [r7, #16]
 8000bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	401a      	ands	r2, r3
 8000bd0:	6a39      	ldr	r1, [r7, #32]
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd8:	431a      	orrs	r2, r3
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f000 80c1 	beq.w	8000d6e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bec:	4b49      	ldr	r3, [pc, #292]	; (8000d14 <HAL_GPIO_Init+0x2a8>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	4a48      	ldr	r2, [pc, #288]	; (8000d14 <HAL_GPIO_Init+0x2a8>)
 8000bf2:	f043 0301 	orr.w	r3, r3, #1
 8000bf6:	6193      	str	r3, [r2, #24]
 8000bf8:	4b46      	ldr	r3, [pc, #280]	; (8000d14 <HAL_GPIO_Init+0x2a8>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	f003 0301 	and.w	r3, r3, #1
 8000c00:	60bb      	str	r3, [r7, #8]
 8000c02:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c04:	4a44      	ldr	r2, [pc, #272]	; (8000d18 <HAL_GPIO_Init+0x2ac>)
 8000c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c08:	089b      	lsrs	r3, r3, #2
 8000c0a:	3302      	adds	r3, #2
 8000c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c10:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c14:	f003 0303 	and.w	r3, r3, #3
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	220f      	movs	r2, #15
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	43db      	mvns	r3, r3
 8000c22:	68fa      	ldr	r2, [r7, #12]
 8000c24:	4013      	ands	r3, r2
 8000c26:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a3c      	ldr	r2, [pc, #240]	; (8000d1c <HAL_GPIO_Init+0x2b0>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d01f      	beq.n	8000c70 <HAL_GPIO_Init+0x204>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4a3b      	ldr	r2, [pc, #236]	; (8000d20 <HAL_GPIO_Init+0x2b4>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d019      	beq.n	8000c6c <HAL_GPIO_Init+0x200>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4a3a      	ldr	r2, [pc, #232]	; (8000d24 <HAL_GPIO_Init+0x2b8>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d013      	beq.n	8000c68 <HAL_GPIO_Init+0x1fc>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4a39      	ldr	r2, [pc, #228]	; (8000d28 <HAL_GPIO_Init+0x2bc>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d00d      	beq.n	8000c64 <HAL_GPIO_Init+0x1f8>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4a38      	ldr	r2, [pc, #224]	; (8000d2c <HAL_GPIO_Init+0x2c0>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d007      	beq.n	8000c60 <HAL_GPIO_Init+0x1f4>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4a37      	ldr	r2, [pc, #220]	; (8000d30 <HAL_GPIO_Init+0x2c4>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d101      	bne.n	8000c5c <HAL_GPIO_Init+0x1f0>
 8000c58:	2305      	movs	r3, #5
 8000c5a:	e00a      	b.n	8000c72 <HAL_GPIO_Init+0x206>
 8000c5c:	2306      	movs	r3, #6
 8000c5e:	e008      	b.n	8000c72 <HAL_GPIO_Init+0x206>
 8000c60:	2304      	movs	r3, #4
 8000c62:	e006      	b.n	8000c72 <HAL_GPIO_Init+0x206>
 8000c64:	2303      	movs	r3, #3
 8000c66:	e004      	b.n	8000c72 <HAL_GPIO_Init+0x206>
 8000c68:	2302      	movs	r3, #2
 8000c6a:	e002      	b.n	8000c72 <HAL_GPIO_Init+0x206>
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	e000      	b.n	8000c72 <HAL_GPIO_Init+0x206>
 8000c70:	2300      	movs	r3, #0
 8000c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c74:	f002 0203 	and.w	r2, r2, #3
 8000c78:	0092      	lsls	r2, r2, #2
 8000c7a:	4093      	lsls	r3, r2
 8000c7c:	68fa      	ldr	r2, [r7, #12]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c82:	4925      	ldr	r1, [pc, #148]	; (8000d18 <HAL_GPIO_Init+0x2ac>)
 8000c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c86:	089b      	lsrs	r3, r3, #2
 8000c88:	3302      	adds	r3, #2
 8000c8a:	68fa      	ldr	r2, [r7, #12]
 8000c8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d006      	beq.n	8000caa <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c9c:	4b25      	ldr	r3, [pc, #148]	; (8000d34 <HAL_GPIO_Init+0x2c8>)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	4924      	ldr	r1, [pc, #144]	; (8000d34 <HAL_GPIO_Init+0x2c8>)
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	600b      	str	r3, [r1, #0]
 8000ca8:	e006      	b.n	8000cb8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000caa:	4b22      	ldr	r3, [pc, #136]	; (8000d34 <HAL_GPIO_Init+0x2c8>)
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	69bb      	ldr	r3, [r7, #24]
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	4920      	ldr	r1, [pc, #128]	; (8000d34 <HAL_GPIO_Init+0x2c8>)
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d006      	beq.n	8000cd2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <HAL_GPIO_Init+0x2c8>)
 8000cc6:	685a      	ldr	r2, [r3, #4]
 8000cc8:	491a      	ldr	r1, [pc, #104]	; (8000d34 <HAL_GPIO_Init+0x2c8>)
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	604b      	str	r3, [r1, #4]
 8000cd0:	e006      	b.n	8000ce0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cd2:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <HAL_GPIO_Init+0x2c8>)
 8000cd4:	685a      	ldr	r2, [r3, #4]
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	4916      	ldr	r1, [pc, #88]	; (8000d34 <HAL_GPIO_Init+0x2c8>)
 8000cdc:	4013      	ands	r3, r2
 8000cde:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d025      	beq.n	8000d38 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cec:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <HAL_GPIO_Init+0x2c8>)
 8000cee:	689a      	ldr	r2, [r3, #8]
 8000cf0:	4910      	ldr	r1, [pc, #64]	; (8000d34 <HAL_GPIO_Init+0x2c8>)
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	608b      	str	r3, [r1, #8]
 8000cf8:	e025      	b.n	8000d46 <HAL_GPIO_Init+0x2da>
 8000cfa:	bf00      	nop
 8000cfc:	10320000 	.word	0x10320000
 8000d00:	10310000 	.word	0x10310000
 8000d04:	10220000 	.word	0x10220000
 8000d08:	10210000 	.word	0x10210000
 8000d0c:	10120000 	.word	0x10120000
 8000d10:	10110000 	.word	0x10110000
 8000d14:	40021000 	.word	0x40021000
 8000d18:	40010000 	.word	0x40010000
 8000d1c:	40010800 	.word	0x40010800
 8000d20:	40010c00 	.word	0x40010c00
 8000d24:	40011000 	.word	0x40011000
 8000d28:	40011400 	.word	0x40011400
 8000d2c:	40011800 	.word	0x40011800
 8000d30:	40011c00 	.word	0x40011c00
 8000d34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d38:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <HAL_GPIO_Init+0x324>)
 8000d3a:	689a      	ldr	r2, [r3, #8]
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	4913      	ldr	r1, [pc, #76]	; (8000d90 <HAL_GPIO_Init+0x324>)
 8000d42:	4013      	ands	r3, r2
 8000d44:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d006      	beq.n	8000d60 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d52:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <HAL_GPIO_Init+0x324>)
 8000d54:	68da      	ldr	r2, [r3, #12]
 8000d56:	490e      	ldr	r1, [pc, #56]	; (8000d90 <HAL_GPIO_Init+0x324>)
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	60cb      	str	r3, [r1, #12]
 8000d5e:	e006      	b.n	8000d6e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d60:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <HAL_GPIO_Init+0x324>)
 8000d62:	68da      	ldr	r2, [r3, #12]
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	43db      	mvns	r3, r3
 8000d68:	4909      	ldr	r1, [pc, #36]	; (8000d90 <HAL_GPIO_Init+0x324>)
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d70:	3301      	adds	r3, #1
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f47f ae7e 	bne.w	8000a80 <HAL_GPIO_Init+0x14>
  }
}
 8000d84:	bf00      	nop
 8000d86:	bf00      	nop
 8000d88:	372c      	adds	r7, #44	; 0x2c
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr
 8000d90:	40010400 	.word	0x40010400

08000d94 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d101      	bne.n	8000da6 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e034      	b.n	8000e10 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8000dae:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f245 5255 	movw	r2, #21845	; 0x5555
 8000db8:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	6852      	ldr	r2, [r2, #4]
 8000dc2:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	6892      	ldr	r2, [r2, #8]
 8000dcc:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8000dce:	f7ff fd11 	bl	80007f4 <HAL_GetTick>
 8000dd2:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8000dd4:	e00f      	b.n	8000df6 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8000dd6:	f7ff fd0d 	bl	80007f4 <HAL_GetTick>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	2b27      	cmp	r3, #39	; 0x27
 8000de2:	d908      	bls.n	8000df6 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	f003 0303 	and.w	r3, r3, #3
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8000df2:	2303      	movs	r3, #3
 8000df4:	e00c      	b.n	8000e10 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	f003 0303 	and.w	r3, r3, #3
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d1e8      	bne.n	8000dd6 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000e0c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8000e0e:	2300      	movs	r3, #0
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000e28:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8000e2a:	2300      	movs	r3, #0
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bc80      	pop	{r7}
 8000e34:	4770      	bx	lr
	...

08000e38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d101      	bne.n	8000e4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e272      	b.n	8001330 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	f000 8087 	beq.w	8000f66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e58:	4b92      	ldr	r3, [pc, #584]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f003 030c 	and.w	r3, r3, #12
 8000e60:	2b04      	cmp	r3, #4
 8000e62:	d00c      	beq.n	8000e7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e64:	4b8f      	ldr	r3, [pc, #572]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f003 030c 	and.w	r3, r3, #12
 8000e6c:	2b08      	cmp	r3, #8
 8000e6e:	d112      	bne.n	8000e96 <HAL_RCC_OscConfig+0x5e>
 8000e70:	4b8c      	ldr	r3, [pc, #560]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e7c:	d10b      	bne.n	8000e96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e7e:	4b89      	ldr	r3, [pc, #548]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d06c      	beq.n	8000f64 <HAL_RCC_OscConfig+0x12c>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d168      	bne.n	8000f64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e24c      	b.n	8001330 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e9e:	d106      	bne.n	8000eae <HAL_RCC_OscConfig+0x76>
 8000ea0:	4b80      	ldr	r3, [pc, #512]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a7f      	ldr	r2, [pc, #508]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000ea6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eaa:	6013      	str	r3, [r2, #0]
 8000eac:	e02e      	b.n	8000f0c <HAL_RCC_OscConfig+0xd4>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d10c      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x98>
 8000eb6:	4b7b      	ldr	r3, [pc, #492]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a7a      	ldr	r2, [pc, #488]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000ebc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ec0:	6013      	str	r3, [r2, #0]
 8000ec2:	4b78      	ldr	r3, [pc, #480]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a77      	ldr	r2, [pc, #476]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000ec8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ecc:	6013      	str	r3, [r2, #0]
 8000ece:	e01d      	b.n	8000f0c <HAL_RCC_OscConfig+0xd4>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ed8:	d10c      	bne.n	8000ef4 <HAL_RCC_OscConfig+0xbc>
 8000eda:	4b72      	ldr	r3, [pc, #456]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a71      	ldr	r2, [pc, #452]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ee4:	6013      	str	r3, [r2, #0]
 8000ee6:	4b6f      	ldr	r3, [pc, #444]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a6e      	ldr	r2, [pc, #440]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ef0:	6013      	str	r3, [r2, #0]
 8000ef2:	e00b      	b.n	8000f0c <HAL_RCC_OscConfig+0xd4>
 8000ef4:	4b6b      	ldr	r3, [pc, #428]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a6a      	ldr	r2, [pc, #424]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000efa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000efe:	6013      	str	r3, [r2, #0]
 8000f00:	4b68      	ldr	r3, [pc, #416]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a67      	ldr	r2, [pc, #412]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000f06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d013      	beq.n	8000f3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f14:	f7ff fc6e 	bl	80007f4 <HAL_GetTick>
 8000f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f1a:	e008      	b.n	8000f2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f1c:	f7ff fc6a 	bl	80007f4 <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	2b64      	cmp	r3, #100	; 0x64
 8000f28:	d901      	bls.n	8000f2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e200      	b.n	8001330 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f2e:	4b5d      	ldr	r3, [pc, #372]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d0f0      	beq.n	8000f1c <HAL_RCC_OscConfig+0xe4>
 8000f3a:	e014      	b.n	8000f66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f3c:	f7ff fc5a 	bl	80007f4 <HAL_GetTick>
 8000f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f42:	e008      	b.n	8000f56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f44:	f7ff fc56 	bl	80007f4 <HAL_GetTick>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	2b64      	cmp	r3, #100	; 0x64
 8000f50:	d901      	bls.n	8000f56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f52:	2303      	movs	r3, #3
 8000f54:	e1ec      	b.n	8001330 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f56:	4b53      	ldr	r3, [pc, #332]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d1f0      	bne.n	8000f44 <HAL_RCC_OscConfig+0x10c>
 8000f62:	e000      	b.n	8000f66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d063      	beq.n	800103a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f72:	4b4c      	ldr	r3, [pc, #304]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f003 030c 	and.w	r3, r3, #12
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d00b      	beq.n	8000f96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f7e:	4b49      	ldr	r3, [pc, #292]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f003 030c 	and.w	r3, r3, #12
 8000f86:	2b08      	cmp	r3, #8
 8000f88:	d11c      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x18c>
 8000f8a:	4b46      	ldr	r3, [pc, #280]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d116      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f96:	4b43      	ldr	r3, [pc, #268]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d005      	beq.n	8000fae <HAL_RCC_OscConfig+0x176>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	691b      	ldr	r3, [r3, #16]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d001      	beq.n	8000fae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e1c0      	b.n	8001330 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fae:	4b3d      	ldr	r3, [pc, #244]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	00db      	lsls	r3, r3, #3
 8000fbc:	4939      	ldr	r1, [pc, #228]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fc2:	e03a      	b.n	800103a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	691b      	ldr	r3, [r3, #16]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d020      	beq.n	800100e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fcc:	4b36      	ldr	r3, [pc, #216]	; (80010a8 <HAL_RCC_OscConfig+0x270>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd2:	f7ff fc0f 	bl	80007f4 <HAL_GetTick>
 8000fd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fd8:	e008      	b.n	8000fec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fda:	f7ff fc0b 	bl	80007f4 <HAL_GetTick>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d901      	bls.n	8000fec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e1a1      	b.n	8001330 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fec:	4b2d      	ldr	r3, [pc, #180]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 0302 	and.w	r3, r3, #2
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d0f0      	beq.n	8000fda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ff8:	4b2a      	ldr	r3, [pc, #168]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	695b      	ldr	r3, [r3, #20]
 8001004:	00db      	lsls	r3, r3, #3
 8001006:	4927      	ldr	r1, [pc, #156]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8001008:	4313      	orrs	r3, r2
 800100a:	600b      	str	r3, [r1, #0]
 800100c:	e015      	b.n	800103a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800100e:	4b26      	ldr	r3, [pc, #152]	; (80010a8 <HAL_RCC_OscConfig+0x270>)
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001014:	f7ff fbee 	bl	80007f4 <HAL_GetTick>
 8001018:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800101a:	e008      	b.n	800102e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800101c:	f7ff fbea 	bl	80007f4 <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	2b02      	cmp	r3, #2
 8001028:	d901      	bls.n	800102e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800102a:	2303      	movs	r3, #3
 800102c:	e180      	b.n	8001330 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800102e:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	2b00      	cmp	r3, #0
 8001038:	d1f0      	bne.n	800101c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 0308 	and.w	r3, r3, #8
 8001042:	2b00      	cmp	r3, #0
 8001044:	d03a      	beq.n	80010bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	699b      	ldr	r3, [r3, #24]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d019      	beq.n	8001082 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800104e:	4b17      	ldr	r3, [pc, #92]	; (80010ac <HAL_RCC_OscConfig+0x274>)
 8001050:	2201      	movs	r2, #1
 8001052:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001054:	f7ff fbce 	bl	80007f4 <HAL_GetTick>
 8001058:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800105a:	e008      	b.n	800106e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800105c:	f7ff fbca 	bl	80007f4 <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	2b02      	cmp	r3, #2
 8001068:	d901      	bls.n	800106e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e160      	b.n	8001330 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800106e:	4b0d      	ldr	r3, [pc, #52]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8001070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	2b00      	cmp	r3, #0
 8001078:	d0f0      	beq.n	800105c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f000 fad8 	bl	8001630 <RCC_Delay>
 8001080:	e01c      	b.n	80010bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001082:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <HAL_RCC_OscConfig+0x274>)
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001088:	f7ff fbb4 	bl	80007f4 <HAL_GetTick>
 800108c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800108e:	e00f      	b.n	80010b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001090:	f7ff fbb0 	bl	80007f4 <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	2b02      	cmp	r3, #2
 800109c:	d908      	bls.n	80010b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800109e:	2303      	movs	r3, #3
 80010a0:	e146      	b.n	8001330 <HAL_RCC_OscConfig+0x4f8>
 80010a2:	bf00      	nop
 80010a4:	40021000 	.word	0x40021000
 80010a8:	42420000 	.word	0x42420000
 80010ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010b0:	4b92      	ldr	r3, [pc, #584]	; (80012fc <HAL_RCC_OscConfig+0x4c4>)
 80010b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b4:	f003 0302 	and.w	r3, r3, #2
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d1e9      	bne.n	8001090 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 0304 	and.w	r3, r3, #4
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	f000 80a6 	beq.w	8001216 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010ca:	2300      	movs	r3, #0
 80010cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010ce:	4b8b      	ldr	r3, [pc, #556]	; (80012fc <HAL_RCC_OscConfig+0x4c4>)
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d10d      	bne.n	80010f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010da:	4b88      	ldr	r3, [pc, #544]	; (80012fc <HAL_RCC_OscConfig+0x4c4>)
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	4a87      	ldr	r2, [pc, #540]	; (80012fc <HAL_RCC_OscConfig+0x4c4>)
 80010e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e4:	61d3      	str	r3, [r2, #28]
 80010e6:	4b85      	ldr	r3, [pc, #532]	; (80012fc <HAL_RCC_OscConfig+0x4c4>)
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010f2:	2301      	movs	r3, #1
 80010f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010f6:	4b82      	ldr	r3, [pc, #520]	; (8001300 <HAL_RCC_OscConfig+0x4c8>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d118      	bne.n	8001134 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001102:	4b7f      	ldr	r3, [pc, #508]	; (8001300 <HAL_RCC_OscConfig+0x4c8>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a7e      	ldr	r2, [pc, #504]	; (8001300 <HAL_RCC_OscConfig+0x4c8>)
 8001108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800110c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800110e:	f7ff fb71 	bl	80007f4 <HAL_GetTick>
 8001112:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001114:	e008      	b.n	8001128 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001116:	f7ff fb6d 	bl	80007f4 <HAL_GetTick>
 800111a:	4602      	mov	r2, r0
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	2b64      	cmp	r3, #100	; 0x64
 8001122:	d901      	bls.n	8001128 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001124:	2303      	movs	r3, #3
 8001126:	e103      	b.n	8001330 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001128:	4b75      	ldr	r3, [pc, #468]	; (8001300 <HAL_RCC_OscConfig+0x4c8>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001130:	2b00      	cmp	r3, #0
 8001132:	d0f0      	beq.n	8001116 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d106      	bne.n	800114a <HAL_RCC_OscConfig+0x312>
 800113c:	4b6f      	ldr	r3, [pc, #444]	; (80012fc <HAL_RCC_OscConfig+0x4c4>)
 800113e:	6a1b      	ldr	r3, [r3, #32]
 8001140:	4a6e      	ldr	r2, [pc, #440]	; (80012fc <HAL_RCC_OscConfig+0x4c4>)
 8001142:	f043 0301 	orr.w	r3, r3, #1
 8001146:	6213      	str	r3, [r2, #32]
 8001148:	e02d      	b.n	80011a6 <HAL_RCC_OscConfig+0x36e>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d10c      	bne.n	800116c <HAL_RCC_OscConfig+0x334>
 8001152:	4b6a      	ldr	r3, [pc, #424]	; (80012fc <HAL_RCC_OscConfig+0x4c4>)
 8001154:	6a1b      	ldr	r3, [r3, #32]
 8001156:	4a69      	ldr	r2, [pc, #420]	; (80012fc <HAL_RCC_OscConfig+0x4c4>)
 8001158:	f023 0301 	bic.w	r3, r3, #1
 800115c:	6213      	str	r3, [r2, #32]
 800115e:	4b67      	ldr	r3, [pc, #412]	; (80012fc <HAL_RCC_OscConfig+0x4c4>)
 8001160:	6a1b      	ldr	r3, [r3, #32]
 8001162:	4a66      	ldr	r2, [pc, #408]	; (80012fc <HAL_RCC_OscConfig+0x4c4>)
 8001164:	f023 0304 	bic.w	r3, r3, #4
 8001168:	6213      	str	r3, [r2, #32]
 800116a:	e01c      	b.n	80011a6 <HAL_RCC_OscConfig+0x36e>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	2b05      	cmp	r3, #5
 8001172:	d10c      	bne.n	800118e <HAL_RCC_OscConfig+0x356>
 8001174:	4b61      	ldr	r3, [pc, #388]	; (80012fc <HAL_RCC_OscConfig+0x4c4>)
 8001176:	6a1b      	ldr	r3, [r3, #32]
 8001178:	4a60      	ldr	r2, [pc, #384]	; (80012fc <HAL_RCC_OscConfig+0x4c4>)
 800117a:	f043 0304 	orr.w	r3, r3, #4
 800117e:	6213      	str	r3, [r2, #32]
 8001180:	4b5e      	ldr	r3, [pc, #376]	; (80012fc <HAL_RCC_OscConfig+0x4c4>)
 8001182:	6a1b      	ldr	r3, [r3, #32]
 8001184:	4a5d      	ldr	r2, [pc, #372]	; (80012fc <HAL_RCC_OscConfig+0x4c4>)
 8001186:	f043 0301 	orr.w	r3, r3, #1
 800118a:	6213      	str	r3, [r2, #32]
 800118c:	e00b      	b.n	80011a6 <HAL_RCC_OscConfig+0x36e>
 800118e:	4b5b      	ldr	r3, [pc, #364]	; (80012fc <HAL_RCC_OscConfig+0x4c4>)
 8001190:	6a1b      	ldr	r3, [r3, #32]
 8001192:	4a5a      	ldr	r2, [pc, #360]	; (80012fc <HAL_RCC_OscConfig+0x4c4>)
 8001194:	f023 0301 	bic.w	r3, r3, #1
 8001198:	6213      	str	r3, [r2, #32]
 800119a:	4b58      	ldr	r3, [pc, #352]	; (80012fc <HAL_RCC_OscConfig+0x4c4>)
 800119c:	6a1b      	ldr	r3, [r3, #32]
 800119e:	4a57      	ldr	r2, [pc, #348]	; (80012fc <HAL_RCC_OscConfig+0x4c4>)
 80011a0:	f023 0304 	bic.w	r3, r3, #4
 80011a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d015      	beq.n	80011da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ae:	f7ff fb21 	bl	80007f4 <HAL_GetTick>
 80011b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011b4:	e00a      	b.n	80011cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011b6:	f7ff fb1d 	bl	80007f4 <HAL_GetTick>
 80011ba:	4602      	mov	r2, r0
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d901      	bls.n	80011cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80011c8:	2303      	movs	r3, #3
 80011ca:	e0b1      	b.n	8001330 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011cc:	4b4b      	ldr	r3, [pc, #300]	; (80012fc <HAL_RCC_OscConfig+0x4c4>)
 80011ce:	6a1b      	ldr	r3, [r3, #32]
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0ee      	beq.n	80011b6 <HAL_RCC_OscConfig+0x37e>
 80011d8:	e014      	b.n	8001204 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011da:	f7ff fb0b 	bl	80007f4 <HAL_GetTick>
 80011de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011e0:	e00a      	b.n	80011f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011e2:	f7ff fb07 	bl	80007f4 <HAL_GetTick>
 80011e6:	4602      	mov	r2, r0
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d901      	bls.n	80011f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e09b      	b.n	8001330 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011f8:	4b40      	ldr	r3, [pc, #256]	; (80012fc <HAL_RCC_OscConfig+0x4c4>)
 80011fa:	6a1b      	ldr	r3, [r3, #32]
 80011fc:	f003 0302 	and.w	r3, r3, #2
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1ee      	bne.n	80011e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001204:	7dfb      	ldrb	r3, [r7, #23]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d105      	bne.n	8001216 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800120a:	4b3c      	ldr	r3, [pc, #240]	; (80012fc <HAL_RCC_OscConfig+0x4c4>)
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	4a3b      	ldr	r2, [pc, #236]	; (80012fc <HAL_RCC_OscConfig+0x4c4>)
 8001210:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001214:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	69db      	ldr	r3, [r3, #28]
 800121a:	2b00      	cmp	r3, #0
 800121c:	f000 8087 	beq.w	800132e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001220:	4b36      	ldr	r3, [pc, #216]	; (80012fc <HAL_RCC_OscConfig+0x4c4>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 030c 	and.w	r3, r3, #12
 8001228:	2b08      	cmp	r3, #8
 800122a:	d061      	beq.n	80012f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	69db      	ldr	r3, [r3, #28]
 8001230:	2b02      	cmp	r3, #2
 8001232:	d146      	bne.n	80012c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001234:	4b33      	ldr	r3, [pc, #204]	; (8001304 <HAL_RCC_OscConfig+0x4cc>)
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123a:	f7ff fadb 	bl	80007f4 <HAL_GetTick>
 800123e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001240:	e008      	b.n	8001254 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001242:	f7ff fad7 	bl	80007f4 <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	2b02      	cmp	r3, #2
 800124e:	d901      	bls.n	8001254 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e06d      	b.n	8001330 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001254:	4b29      	ldr	r3, [pc, #164]	; (80012fc <HAL_RCC_OscConfig+0x4c4>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1f0      	bne.n	8001242 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a1b      	ldr	r3, [r3, #32]
 8001264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001268:	d108      	bne.n	800127c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800126a:	4b24      	ldr	r3, [pc, #144]	; (80012fc <HAL_RCC_OscConfig+0x4c4>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	4921      	ldr	r1, [pc, #132]	; (80012fc <HAL_RCC_OscConfig+0x4c4>)
 8001278:	4313      	orrs	r3, r2
 800127a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800127c:	4b1f      	ldr	r3, [pc, #124]	; (80012fc <HAL_RCC_OscConfig+0x4c4>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a19      	ldr	r1, [r3, #32]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128c:	430b      	orrs	r3, r1
 800128e:	491b      	ldr	r1, [pc, #108]	; (80012fc <HAL_RCC_OscConfig+0x4c4>)
 8001290:	4313      	orrs	r3, r2
 8001292:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001294:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <HAL_RCC_OscConfig+0x4cc>)
 8001296:	2201      	movs	r2, #1
 8001298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129a:	f7ff faab 	bl	80007f4 <HAL_GetTick>
 800129e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012a0:	e008      	b.n	80012b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012a2:	f7ff faa7 	bl	80007f4 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e03d      	b.n	8001330 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012b4:	4b11      	ldr	r3, [pc, #68]	; (80012fc <HAL_RCC_OscConfig+0x4c4>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d0f0      	beq.n	80012a2 <HAL_RCC_OscConfig+0x46a>
 80012c0:	e035      	b.n	800132e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012c2:	4b10      	ldr	r3, [pc, #64]	; (8001304 <HAL_RCC_OscConfig+0x4cc>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c8:	f7ff fa94 	bl	80007f4 <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012d0:	f7ff fa90 	bl	80007f4 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e026      	b.n	8001330 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <HAL_RCC_OscConfig+0x4c4>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1f0      	bne.n	80012d0 <HAL_RCC_OscConfig+0x498>
 80012ee:	e01e      	b.n	800132e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	69db      	ldr	r3, [r3, #28]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d107      	bne.n	8001308 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e019      	b.n	8001330 <HAL_RCC_OscConfig+0x4f8>
 80012fc:	40021000 	.word	0x40021000
 8001300:	40007000 	.word	0x40007000
 8001304:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001308:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <HAL_RCC_OscConfig+0x500>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a1b      	ldr	r3, [r3, #32]
 8001318:	429a      	cmp	r2, r3
 800131a:	d106      	bne.n	800132a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001326:	429a      	cmp	r2, r3
 8001328:	d001      	beq.n	800132e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e000      	b.n	8001330 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800132e:	2300      	movs	r3, #0
}
 8001330:	4618      	mov	r0, r3
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40021000 	.word	0x40021000

0800133c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d101      	bne.n	8001350 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e0d0      	b.n	80014f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001350:	4b6a      	ldr	r3, [pc, #424]	; (80014fc <HAL_RCC_ClockConfig+0x1c0>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0307 	and.w	r3, r3, #7
 8001358:	683a      	ldr	r2, [r7, #0]
 800135a:	429a      	cmp	r2, r3
 800135c:	d910      	bls.n	8001380 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800135e:	4b67      	ldr	r3, [pc, #412]	; (80014fc <HAL_RCC_ClockConfig+0x1c0>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f023 0207 	bic.w	r2, r3, #7
 8001366:	4965      	ldr	r1, [pc, #404]	; (80014fc <HAL_RCC_ClockConfig+0x1c0>)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	4313      	orrs	r3, r2
 800136c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800136e:	4b63      	ldr	r3, [pc, #396]	; (80014fc <HAL_RCC_ClockConfig+0x1c0>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	683a      	ldr	r2, [r7, #0]
 8001378:	429a      	cmp	r2, r3
 800137a:	d001      	beq.n	8001380 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e0b8      	b.n	80014f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d020      	beq.n	80013ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0304 	and.w	r3, r3, #4
 8001394:	2b00      	cmp	r3, #0
 8001396:	d005      	beq.n	80013a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001398:	4b59      	ldr	r3, [pc, #356]	; (8001500 <HAL_RCC_ClockConfig+0x1c4>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	4a58      	ldr	r2, [pc, #352]	; (8001500 <HAL_RCC_ClockConfig+0x1c4>)
 800139e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0308 	and.w	r3, r3, #8
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d005      	beq.n	80013bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013b0:	4b53      	ldr	r3, [pc, #332]	; (8001500 <HAL_RCC_ClockConfig+0x1c4>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	4a52      	ldr	r2, [pc, #328]	; (8001500 <HAL_RCC_ClockConfig+0x1c4>)
 80013b6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80013ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013bc:	4b50      	ldr	r3, [pc, #320]	; (8001500 <HAL_RCC_ClockConfig+0x1c4>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	494d      	ldr	r1, [pc, #308]	; (8001500 <HAL_RCC_ClockConfig+0x1c4>)
 80013ca:	4313      	orrs	r3, r2
 80013cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d040      	beq.n	800145c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d107      	bne.n	80013f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e2:	4b47      	ldr	r3, [pc, #284]	; (8001500 <HAL_RCC_ClockConfig+0x1c4>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d115      	bne.n	800141a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e07f      	b.n	80014f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d107      	bne.n	800140a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013fa:	4b41      	ldr	r3, [pc, #260]	; (8001500 <HAL_RCC_ClockConfig+0x1c4>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d109      	bne.n	800141a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e073      	b.n	80014f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800140a:	4b3d      	ldr	r3, [pc, #244]	; (8001500 <HAL_RCC_ClockConfig+0x1c4>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d101      	bne.n	800141a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e06b      	b.n	80014f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800141a:	4b39      	ldr	r3, [pc, #228]	; (8001500 <HAL_RCC_ClockConfig+0x1c4>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f023 0203 	bic.w	r2, r3, #3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	4936      	ldr	r1, [pc, #216]	; (8001500 <HAL_RCC_ClockConfig+0x1c4>)
 8001428:	4313      	orrs	r3, r2
 800142a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800142c:	f7ff f9e2 	bl	80007f4 <HAL_GetTick>
 8001430:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001432:	e00a      	b.n	800144a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001434:	f7ff f9de 	bl	80007f4 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001442:	4293      	cmp	r3, r2
 8001444:	d901      	bls.n	800144a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e053      	b.n	80014f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800144a:	4b2d      	ldr	r3, [pc, #180]	; (8001500 <HAL_RCC_ClockConfig+0x1c4>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f003 020c 	and.w	r2, r3, #12
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	429a      	cmp	r2, r3
 800145a:	d1eb      	bne.n	8001434 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800145c:	4b27      	ldr	r3, [pc, #156]	; (80014fc <HAL_RCC_ClockConfig+0x1c0>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0307 	and.w	r3, r3, #7
 8001464:	683a      	ldr	r2, [r7, #0]
 8001466:	429a      	cmp	r2, r3
 8001468:	d210      	bcs.n	800148c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800146a:	4b24      	ldr	r3, [pc, #144]	; (80014fc <HAL_RCC_ClockConfig+0x1c0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f023 0207 	bic.w	r2, r3, #7
 8001472:	4922      	ldr	r1, [pc, #136]	; (80014fc <HAL_RCC_ClockConfig+0x1c0>)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	4313      	orrs	r3, r2
 8001478:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800147a:	4b20      	ldr	r3, [pc, #128]	; (80014fc <HAL_RCC_ClockConfig+0x1c0>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	683a      	ldr	r2, [r7, #0]
 8001484:	429a      	cmp	r2, r3
 8001486:	d001      	beq.n	800148c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e032      	b.n	80014f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0304 	and.w	r3, r3, #4
 8001494:	2b00      	cmp	r3, #0
 8001496:	d008      	beq.n	80014aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001498:	4b19      	ldr	r3, [pc, #100]	; (8001500 <HAL_RCC_ClockConfig+0x1c4>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	4916      	ldr	r1, [pc, #88]	; (8001500 <HAL_RCC_ClockConfig+0x1c4>)
 80014a6:	4313      	orrs	r3, r2
 80014a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0308 	and.w	r3, r3, #8
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d009      	beq.n	80014ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014b6:	4b12      	ldr	r3, [pc, #72]	; (8001500 <HAL_RCC_ClockConfig+0x1c4>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	490e      	ldr	r1, [pc, #56]	; (8001500 <HAL_RCC_ClockConfig+0x1c4>)
 80014c6:	4313      	orrs	r3, r2
 80014c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014ca:	f000 f821 	bl	8001510 <HAL_RCC_GetSysClockFreq>
 80014ce:	4602      	mov	r2, r0
 80014d0:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <HAL_RCC_ClockConfig+0x1c4>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	091b      	lsrs	r3, r3, #4
 80014d6:	f003 030f 	and.w	r3, r3, #15
 80014da:	490a      	ldr	r1, [pc, #40]	; (8001504 <HAL_RCC_ClockConfig+0x1c8>)
 80014dc:	5ccb      	ldrb	r3, [r1, r3]
 80014de:	fa22 f303 	lsr.w	r3, r2, r3
 80014e2:	4a09      	ldr	r2, [pc, #36]	; (8001508 <HAL_RCC_ClockConfig+0x1cc>)
 80014e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80014e6:	4b09      	ldr	r3, [pc, #36]	; (800150c <HAL_RCC_ClockConfig+0x1d0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff f940 	bl	8000770 <HAL_InitTick>

  return HAL_OK;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40022000 	.word	0x40022000
 8001500:	40021000 	.word	0x40021000
 8001504:	08002bdc 	.word	0x08002bdc
 8001508:	20000000 	.word	0x20000000
 800150c:	20000004 	.word	0x20000004

08001510 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001510:	b490      	push	{r4, r7}
 8001512:	b08a      	sub	sp, #40	; 0x28
 8001514:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001516:	4b29      	ldr	r3, [pc, #164]	; (80015bc <HAL_RCC_GetSysClockFreq+0xac>)
 8001518:	1d3c      	adds	r4, r7, #4
 800151a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800151c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001520:	f240 2301 	movw	r3, #513	; 0x201
 8001524:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001526:	2300      	movs	r3, #0
 8001528:	61fb      	str	r3, [r7, #28]
 800152a:	2300      	movs	r3, #0
 800152c:	61bb      	str	r3, [r7, #24]
 800152e:	2300      	movs	r3, #0
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001536:	2300      	movs	r3, #0
 8001538:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800153a:	4b21      	ldr	r3, [pc, #132]	; (80015c0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	f003 030c 	and.w	r3, r3, #12
 8001546:	2b04      	cmp	r3, #4
 8001548:	d002      	beq.n	8001550 <HAL_RCC_GetSysClockFreq+0x40>
 800154a:	2b08      	cmp	r3, #8
 800154c:	d003      	beq.n	8001556 <HAL_RCC_GetSysClockFreq+0x46>
 800154e:	e02b      	b.n	80015a8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001550:	4b1c      	ldr	r3, [pc, #112]	; (80015c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001552:	623b      	str	r3, [r7, #32]
      break;
 8001554:	e02b      	b.n	80015ae <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	0c9b      	lsrs	r3, r3, #18
 800155a:	f003 030f 	and.w	r3, r3, #15
 800155e:	3328      	adds	r3, #40	; 0x28
 8001560:	443b      	add	r3, r7
 8001562:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001566:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d012      	beq.n	8001598 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001572:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	0c5b      	lsrs	r3, r3, #17
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	3328      	adds	r3, #40	; 0x28
 800157e:	443b      	add	r3, r7
 8001580:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001584:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	4a0e      	ldr	r2, [pc, #56]	; (80015c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800158a:	fb03 f202 	mul.w	r2, r3, r2
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	fbb2 f3f3 	udiv	r3, r2, r3
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
 8001596:	e004      	b.n	80015a2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	4a0b      	ldr	r2, [pc, #44]	; (80015c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800159c:	fb02 f303 	mul.w	r3, r2, r3
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80015a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a4:	623b      	str	r3, [r7, #32]
      break;
 80015a6:	e002      	b.n	80015ae <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015aa:	623b      	str	r3, [r7, #32]
      break;
 80015ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015ae:	6a3b      	ldr	r3, [r7, #32]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3728      	adds	r7, #40	; 0x28
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bc90      	pop	{r4, r7}
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	08002bcc 	.word	0x08002bcc
 80015c0:	40021000 	.word	0x40021000
 80015c4:	007a1200 	.word	0x007a1200
 80015c8:	003d0900 	.word	0x003d0900

080015cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015d0:	4b02      	ldr	r3, [pc, #8]	; (80015dc <HAL_RCC_GetHCLKFreq+0x10>)
 80015d2:	681b      	ldr	r3, [r3, #0]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr
 80015dc:	20000000 	.word	0x20000000

080015e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015e4:	f7ff fff2 	bl	80015cc <HAL_RCC_GetHCLKFreq>
 80015e8:	4602      	mov	r2, r0
 80015ea:	4b05      	ldr	r3, [pc, #20]	; (8001600 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	0a1b      	lsrs	r3, r3, #8
 80015f0:	f003 0307 	and.w	r3, r3, #7
 80015f4:	4903      	ldr	r1, [pc, #12]	; (8001604 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015f6:	5ccb      	ldrb	r3, [r1, r3]
 80015f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40021000 	.word	0x40021000
 8001604:	08002bec 	.word	0x08002bec

08001608 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800160c:	f7ff ffde 	bl	80015cc <HAL_RCC_GetHCLKFreq>
 8001610:	4602      	mov	r2, r0
 8001612:	4b05      	ldr	r3, [pc, #20]	; (8001628 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	0adb      	lsrs	r3, r3, #11
 8001618:	f003 0307 	and.w	r3, r3, #7
 800161c:	4903      	ldr	r1, [pc, #12]	; (800162c <HAL_RCC_GetPCLK2Freq+0x24>)
 800161e:	5ccb      	ldrb	r3, [r1, r3]
 8001620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001624:	4618      	mov	r0, r3
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40021000 	.word	0x40021000
 800162c:	08002bec 	.word	0x08002bec

08001630 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001638:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <RCC_Delay+0x34>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a0a      	ldr	r2, [pc, #40]	; (8001668 <RCC_Delay+0x38>)
 800163e:	fba2 2303 	umull	r2, r3, r2, r3
 8001642:	0a5b      	lsrs	r3, r3, #9
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	fb02 f303 	mul.w	r3, r2, r3
 800164a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800164c:	bf00      	nop
  }
  while (Delay --);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	1e5a      	subs	r2, r3, #1
 8001652:	60fa      	str	r2, [r7, #12]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1f9      	bne.n	800164c <RCC_Delay+0x1c>
}
 8001658:	bf00      	nop
 800165a:	bf00      	nop
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr
 8001664:	20000000 	.word	0x20000000
 8001668:	10624dd3 	.word	0x10624dd3

0800166c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e041      	b.n	8001702 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d106      	bne.n	8001698 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7fe ff50 	bl	8000538 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2202      	movs	r2, #2
 800169c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3304      	adds	r3, #4
 80016a8:	4619      	mov	r1, r3
 80016aa:	4610      	mov	r0, r2
 80016ac:	f000 fa7e 	bl	8001bac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2201      	movs	r2, #1
 80016bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2201      	movs	r2, #1
 80016dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800171a:	b2db      	uxtb	r3, r3
 800171c:	2b01      	cmp	r3, #1
 800171e:	d001      	beq.n	8001724 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e044      	b.n	80017ae <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2202      	movs	r2, #2
 8001728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	68da      	ldr	r2, [r3, #12]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f042 0201 	orr.w	r2, r2, #1
 800173a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a1d      	ldr	r2, [pc, #116]	; (80017b8 <HAL_TIM_Base_Start_IT+0xac>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d018      	beq.n	8001778 <HAL_TIM_Base_Start_IT+0x6c>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a1c      	ldr	r2, [pc, #112]	; (80017bc <HAL_TIM_Base_Start_IT+0xb0>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d013      	beq.n	8001778 <HAL_TIM_Base_Start_IT+0x6c>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001758:	d00e      	beq.n	8001778 <HAL_TIM_Base_Start_IT+0x6c>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a18      	ldr	r2, [pc, #96]	; (80017c0 <HAL_TIM_Base_Start_IT+0xb4>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d009      	beq.n	8001778 <HAL_TIM_Base_Start_IT+0x6c>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a16      	ldr	r2, [pc, #88]	; (80017c4 <HAL_TIM_Base_Start_IT+0xb8>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d004      	beq.n	8001778 <HAL_TIM_Base_Start_IT+0x6c>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a15      	ldr	r2, [pc, #84]	; (80017c8 <HAL_TIM_Base_Start_IT+0xbc>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d111      	bne.n	800179c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2b06      	cmp	r3, #6
 8001788:	d010      	beq.n	80017ac <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f042 0201 	orr.w	r2, r2, #1
 8001798:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800179a:	e007      	b.n	80017ac <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f042 0201 	orr.w	r2, r2, #1
 80017aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3714      	adds	r7, #20
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr
 80017b8:	40012c00 	.word	0x40012c00
 80017bc:	40013400 	.word	0x40013400
 80017c0:	40000400 	.word	0x40000400
 80017c4:	40000800 	.word	0x40000800
 80017c8:	40000c00 	.word	0x40000c00

080017cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	691b      	ldr	r3, [r3, #16]
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d122      	bne.n	8001828 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d11b      	bne.n	8001828 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f06f 0202 	mvn.w	r2, #2
 80017f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2201      	movs	r2, #1
 80017fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	f003 0303 	and.w	r3, r3, #3
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 f9b1 	bl	8001b76 <HAL_TIM_IC_CaptureCallback>
 8001814:	e005      	b.n	8001822 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 f9a4 	bl	8001b64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f000 f9b3 	bl	8001b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	f003 0304 	and.w	r3, r3, #4
 8001832:	2b04      	cmp	r3, #4
 8001834:	d122      	bne.n	800187c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	2b04      	cmp	r3, #4
 8001842:	d11b      	bne.n	800187c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f06f 0204 	mvn.w	r2, #4
 800184c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2202      	movs	r2, #2
 8001852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f000 f987 	bl	8001b76 <HAL_TIM_IC_CaptureCallback>
 8001868:	e005      	b.n	8001876 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 f97a 	bl	8001b64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f000 f989 	bl	8001b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	f003 0308 	and.w	r3, r3, #8
 8001886:	2b08      	cmp	r3, #8
 8001888:	d122      	bne.n	80018d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	f003 0308 	and.w	r3, r3, #8
 8001894:	2b08      	cmp	r3, #8
 8001896:	d11b      	bne.n	80018d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f06f 0208 	mvn.w	r2, #8
 80018a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2204      	movs	r2, #4
 80018a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	f003 0303 	and.w	r3, r3, #3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 f95d 	bl	8001b76 <HAL_TIM_IC_CaptureCallback>
 80018bc:	e005      	b.n	80018ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f000 f950 	bl	8001b64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f000 f95f 	bl	8001b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	f003 0310 	and.w	r3, r3, #16
 80018da:	2b10      	cmp	r3, #16
 80018dc:	d122      	bne.n	8001924 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	f003 0310 	and.w	r3, r3, #16
 80018e8:	2b10      	cmp	r3, #16
 80018ea:	d11b      	bne.n	8001924 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f06f 0210 	mvn.w	r2, #16
 80018f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2208      	movs	r2, #8
 80018fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f000 f933 	bl	8001b76 <HAL_TIM_IC_CaptureCallback>
 8001910:	e005      	b.n	800191e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 f926 	bl	8001b64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f000 f935 	bl	8001b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b01      	cmp	r3, #1
 8001930:	d10e      	bne.n	8001950 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	2b01      	cmp	r3, #1
 800193e:	d107      	bne.n	8001950 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f06f 0201 	mvn.w	r2, #1
 8001948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7fe fdac 	bl	80004a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800195a:	2b80      	cmp	r3, #128	; 0x80
 800195c:	d10e      	bne.n	800197c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001968:	2b80      	cmp	r3, #128	; 0x80
 800196a:	d107      	bne.n	800197c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 fa9d 	bl	8001eb6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001986:	2b40      	cmp	r3, #64	; 0x40
 8001988:	d10e      	bne.n	80019a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001994:	2b40      	cmp	r3, #64	; 0x40
 8001996:	d107      	bne.n	80019a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80019a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 f8f9 	bl	8001b9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	f003 0320 	and.w	r3, r3, #32
 80019b2:	2b20      	cmp	r3, #32
 80019b4:	d10e      	bne.n	80019d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	f003 0320 	and.w	r3, r3, #32
 80019c0:	2b20      	cmp	r3, #32
 80019c2:	d107      	bne.n	80019d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f06f 0220 	mvn.w	r2, #32
 80019cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f000 fa68 	bl	8001ea4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80019d4:	bf00      	nop
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d101      	bne.n	80019f4 <HAL_TIM_ConfigClockSource+0x18>
 80019f0:	2302      	movs	r3, #2
 80019f2:	e0b3      	b.n	8001b5c <HAL_TIM_ConfigClockSource+0x180>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2202      	movs	r2, #2
 8001a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001a12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a1a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a2c:	d03e      	beq.n	8001aac <HAL_TIM_ConfigClockSource+0xd0>
 8001a2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a32:	f200 8087 	bhi.w	8001b44 <HAL_TIM_ConfigClockSource+0x168>
 8001a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a3a:	f000 8085 	beq.w	8001b48 <HAL_TIM_ConfigClockSource+0x16c>
 8001a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a42:	d87f      	bhi.n	8001b44 <HAL_TIM_ConfigClockSource+0x168>
 8001a44:	2b70      	cmp	r3, #112	; 0x70
 8001a46:	d01a      	beq.n	8001a7e <HAL_TIM_ConfigClockSource+0xa2>
 8001a48:	2b70      	cmp	r3, #112	; 0x70
 8001a4a:	d87b      	bhi.n	8001b44 <HAL_TIM_ConfigClockSource+0x168>
 8001a4c:	2b60      	cmp	r3, #96	; 0x60
 8001a4e:	d050      	beq.n	8001af2 <HAL_TIM_ConfigClockSource+0x116>
 8001a50:	2b60      	cmp	r3, #96	; 0x60
 8001a52:	d877      	bhi.n	8001b44 <HAL_TIM_ConfigClockSource+0x168>
 8001a54:	2b50      	cmp	r3, #80	; 0x50
 8001a56:	d03c      	beq.n	8001ad2 <HAL_TIM_ConfigClockSource+0xf6>
 8001a58:	2b50      	cmp	r3, #80	; 0x50
 8001a5a:	d873      	bhi.n	8001b44 <HAL_TIM_ConfigClockSource+0x168>
 8001a5c:	2b40      	cmp	r3, #64	; 0x40
 8001a5e:	d058      	beq.n	8001b12 <HAL_TIM_ConfigClockSource+0x136>
 8001a60:	2b40      	cmp	r3, #64	; 0x40
 8001a62:	d86f      	bhi.n	8001b44 <HAL_TIM_ConfigClockSource+0x168>
 8001a64:	2b30      	cmp	r3, #48	; 0x30
 8001a66:	d064      	beq.n	8001b32 <HAL_TIM_ConfigClockSource+0x156>
 8001a68:	2b30      	cmp	r3, #48	; 0x30
 8001a6a:	d86b      	bhi.n	8001b44 <HAL_TIM_ConfigClockSource+0x168>
 8001a6c:	2b20      	cmp	r3, #32
 8001a6e:	d060      	beq.n	8001b32 <HAL_TIM_ConfigClockSource+0x156>
 8001a70:	2b20      	cmp	r3, #32
 8001a72:	d867      	bhi.n	8001b44 <HAL_TIM_ConfigClockSource+0x168>
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d05c      	beq.n	8001b32 <HAL_TIM_ConfigClockSource+0x156>
 8001a78:	2b10      	cmp	r3, #16
 8001a7a:	d05a      	beq.n	8001b32 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001a7c:	e062      	b.n	8001b44 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6818      	ldr	r0, [r3, #0]
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	6899      	ldr	r1, [r3, #8]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685a      	ldr	r2, [r3, #4]
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	f000 f97e 	bl	8001d8e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001aa0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	609a      	str	r2, [r3, #8]
      break;
 8001aaa:	e04e      	b.n	8001b4a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6818      	ldr	r0, [r3, #0]
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	6899      	ldr	r1, [r3, #8]
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	f000 f967 	bl	8001d8e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	689a      	ldr	r2, [r3, #8]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ace:	609a      	str	r2, [r3, #8]
      break;
 8001ad0:	e03b      	b.n	8001b4a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6818      	ldr	r0, [r3, #0]
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	6859      	ldr	r1, [r3, #4]
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	f000 f8de 	bl	8001ca0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2150      	movs	r1, #80	; 0x50
 8001aea:	4618      	mov	r0, r3
 8001aec:	f000 f935 	bl	8001d5a <TIM_ITRx_SetConfig>
      break;
 8001af0:	e02b      	b.n	8001b4a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6818      	ldr	r0, [r3, #0]
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	6859      	ldr	r1, [r3, #4]
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	461a      	mov	r2, r3
 8001b00:	f000 f8fc 	bl	8001cfc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2160      	movs	r1, #96	; 0x60
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f000 f925 	bl	8001d5a <TIM_ITRx_SetConfig>
      break;
 8001b10:	e01b      	b.n	8001b4a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6818      	ldr	r0, [r3, #0]
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	6859      	ldr	r1, [r3, #4]
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	f000 f8be 	bl	8001ca0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2140      	movs	r1, #64	; 0x40
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 f915 	bl	8001d5a <TIM_ITRx_SetConfig>
      break;
 8001b30:	e00b      	b.n	8001b4a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	f000 f90c 	bl	8001d5a <TIM_ITRx_SetConfig>
        break;
 8001b42:	e002      	b.n	8001b4a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001b44:	bf00      	nop
 8001b46:	e000      	b.n	8001b4a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001b48:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bc80      	pop	{r7}
 8001b74:	4770      	bx	lr

08001b76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr

08001b88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr

08001b9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr

08001bac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a33      	ldr	r2, [pc, #204]	; (8001c8c <TIM_Base_SetConfig+0xe0>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d013      	beq.n	8001bec <TIM_Base_SetConfig+0x40>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a32      	ldr	r2, [pc, #200]	; (8001c90 <TIM_Base_SetConfig+0xe4>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d00f      	beq.n	8001bec <TIM_Base_SetConfig+0x40>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bd2:	d00b      	beq.n	8001bec <TIM_Base_SetConfig+0x40>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a2f      	ldr	r2, [pc, #188]	; (8001c94 <TIM_Base_SetConfig+0xe8>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d007      	beq.n	8001bec <TIM_Base_SetConfig+0x40>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a2e      	ldr	r2, [pc, #184]	; (8001c98 <TIM_Base_SetConfig+0xec>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d003      	beq.n	8001bec <TIM_Base_SetConfig+0x40>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a2d      	ldr	r2, [pc, #180]	; (8001c9c <TIM_Base_SetConfig+0xf0>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d108      	bne.n	8001bfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a22      	ldr	r2, [pc, #136]	; (8001c8c <TIM_Base_SetConfig+0xe0>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d013      	beq.n	8001c2e <TIM_Base_SetConfig+0x82>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a21      	ldr	r2, [pc, #132]	; (8001c90 <TIM_Base_SetConfig+0xe4>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d00f      	beq.n	8001c2e <TIM_Base_SetConfig+0x82>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c14:	d00b      	beq.n	8001c2e <TIM_Base_SetConfig+0x82>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a1e      	ldr	r2, [pc, #120]	; (8001c94 <TIM_Base_SetConfig+0xe8>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d007      	beq.n	8001c2e <TIM_Base_SetConfig+0x82>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a1d      	ldr	r2, [pc, #116]	; (8001c98 <TIM_Base_SetConfig+0xec>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d003      	beq.n	8001c2e <TIM_Base_SetConfig+0x82>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a1c      	ldr	r2, [pc, #112]	; (8001c9c <TIM_Base_SetConfig+0xf0>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d108      	bne.n	8001c40 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a09      	ldr	r2, [pc, #36]	; (8001c8c <TIM_Base_SetConfig+0xe0>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d003      	beq.n	8001c74 <TIM_Base_SetConfig+0xc8>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4a08      	ldr	r2, [pc, #32]	; (8001c90 <TIM_Base_SetConfig+0xe4>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d103      	bne.n	8001c7c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	691a      	ldr	r2, [r3, #16]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	615a      	str	r2, [r3, #20]
}
 8001c82:	bf00      	nop
 8001c84:	3714      	adds	r7, #20
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr
 8001c8c:	40012c00 	.word	0x40012c00
 8001c90:	40013400 	.word	0x40013400
 8001c94:	40000400 	.word	0x40000400
 8001c98:	40000800 	.word	0x40000800
 8001c9c:	40000c00 	.word	0x40000c00

08001ca0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b087      	sub	sp, #28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
 8001cb6:	f023 0201 	bic.w	r2, r3, #1
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	011b      	lsls	r3, r3, #4
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	f023 030a 	bic.w	r3, r3, #10
 8001cdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	621a      	str	r2, [r3, #32]
}
 8001cf2:	bf00      	nop
 8001cf4:	371c      	adds	r7, #28
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr

08001cfc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b087      	sub	sp, #28
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	f023 0210 	bic.w	r2, r3, #16
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
 8001d1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001d26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	031b      	lsls	r3, r3, #12
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001d38:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	011b      	lsls	r3, r3, #4
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	621a      	str	r2, [r3, #32]
}
 8001d50:	bf00      	nop
 8001d52:	371c      	adds	r7, #28
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc80      	pop	{r7}
 8001d58:	4770      	bx	lr

08001d5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b085      	sub	sp, #20
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
 8001d62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	f043 0307 	orr.w	r3, r3, #7
 8001d7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	609a      	str	r2, [r3, #8]
}
 8001d84:	bf00      	nop
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr

08001d8e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b087      	sub	sp, #28
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	60f8      	str	r0, [r7, #12]
 8001d96:	60b9      	str	r1, [r7, #8]
 8001d98:	607a      	str	r2, [r7, #4]
 8001d9a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001da8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	021a      	lsls	r2, r3, #8
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	431a      	orrs	r2, r3
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	609a      	str	r2, [r3, #8]
}
 8001dc2:	bf00      	nop
 8001dc4:	371c      	adds	r7, #28
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bc80      	pop	{r7}
 8001dca:	4770      	bx	lr

08001dcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d101      	bne.n	8001de4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001de0:	2302      	movs	r3, #2
 8001de2:	e050      	b.n	8001e86 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2202      	movs	r2, #2
 8001df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a1b      	ldr	r2, [pc, #108]	; (8001e90 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d018      	beq.n	8001e5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a19      	ldr	r2, [pc, #100]	; (8001e94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d013      	beq.n	8001e5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e3a:	d00e      	beq.n	8001e5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a15      	ldr	r2, [pc, #84]	; (8001e98 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d009      	beq.n	8001e5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a14      	ldr	r2, [pc, #80]	; (8001e9c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d004      	beq.n	8001e5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a12      	ldr	r2, [pc, #72]	; (8001ea0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d10c      	bne.n	8001e74 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	68ba      	ldr	r2, [r7, #8]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68ba      	ldr	r2, [r7, #8]
 8001e72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr
 8001e90:	40012c00 	.word	0x40012c00
 8001e94:	40013400 	.word	0x40013400
 8001e98:	40000400 	.word	0x40000400
 8001e9c:	40000800 	.word	0x40000800
 8001ea0:	40000c00 	.word	0x40000c00

08001ea4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bc80      	pop	{r7}
 8001eb4:	4770      	bx	lr

08001eb6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e03f      	b.n	8001f5a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d106      	bne.n	8001ef4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7fe fb48 	bl	8000584 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2224      	movs	r2, #36	; 0x24
 8001ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68da      	ldr	r2, [r3, #12]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 f905 	bl	800211c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	691a      	ldr	r2, [r3, #16]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	695a      	ldr	r2, [r3, #20]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68da      	ldr	r2, [r3, #12]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2220      	movs	r2, #32
 8001f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2220      	movs	r2, #32
 8001f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b08a      	sub	sp, #40	; 0x28
 8001f66:	af02      	add	r7, sp, #8
 8001f68:	60f8      	str	r0, [r7, #12]
 8001f6a:	60b9      	str	r1, [r7, #8]
 8001f6c:	603b      	str	r3, [r7, #0]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b20      	cmp	r3, #32
 8001f80:	d17c      	bne.n	800207c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d002      	beq.n	8001f8e <HAL_UART_Transmit+0x2c>
 8001f88:	88fb      	ldrh	r3, [r7, #6]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e075      	b.n	800207e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d101      	bne.n	8001fa0 <HAL_UART_Transmit+0x3e>
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	e06e      	b.n	800207e <HAL_UART_Transmit+0x11c>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2200      	movs	r2, #0
 8001fac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2221      	movs	r2, #33	; 0x21
 8001fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001fb6:	f7fe fc1d 	bl	80007f4 <HAL_GetTick>
 8001fba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	88fa      	ldrh	r2, [r7, #6]
 8001fc0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	88fa      	ldrh	r2, [r7, #6]
 8001fc6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fd0:	d108      	bne.n	8001fe4 <HAL_UART_Transmit+0x82>
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d104      	bne.n	8001fe4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	61bb      	str	r3, [r7, #24]
 8001fe2:	e003      	b.n	8001fec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001ff4:	e02a      	b.n	800204c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	2180      	movs	r1, #128	; 0x80
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f000 f840 	bl	8002086 <UART_WaitOnFlagUntilTimeout>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e036      	b.n	800207e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10b      	bne.n	800202e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	881b      	ldrh	r3, [r3, #0]
 800201a:	461a      	mov	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002024:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	3302      	adds	r3, #2
 800202a:	61bb      	str	r3, [r7, #24]
 800202c:	e007      	b.n	800203e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	781a      	ldrb	r2, [r3, #0]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	3301      	adds	r3, #1
 800203c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002042:	b29b      	uxth	r3, r3
 8002044:	3b01      	subs	r3, #1
 8002046:	b29a      	uxth	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002050:	b29b      	uxth	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1cf      	bne.n	8001ff6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	2200      	movs	r2, #0
 800205e:	2140      	movs	r1, #64	; 0x40
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	f000 f810 	bl	8002086 <UART_WaitOnFlagUntilTimeout>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e006      	b.n	800207e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2220      	movs	r2, #32
 8002074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002078:	2300      	movs	r3, #0
 800207a:	e000      	b.n	800207e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800207c:	2302      	movs	r3, #2
  }
}
 800207e:	4618      	mov	r0, r3
 8002080:	3720      	adds	r7, #32
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b084      	sub	sp, #16
 800208a:	af00      	add	r7, sp, #0
 800208c:	60f8      	str	r0, [r7, #12]
 800208e:	60b9      	str	r1, [r7, #8]
 8002090:	603b      	str	r3, [r7, #0]
 8002092:	4613      	mov	r3, r2
 8002094:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002096:	e02c      	b.n	80020f2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800209e:	d028      	beq.n	80020f2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d007      	beq.n	80020b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80020a6:	f7fe fba5 	bl	80007f4 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d21d      	bcs.n	80020f2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68da      	ldr	r2, [r3, #12]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80020c4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	695a      	ldr	r2, [r3, #20]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0201 	bic.w	r2, r2, #1
 80020d4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2220      	movs	r2, #32
 80020da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2220      	movs	r2, #32
 80020e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e00f      	b.n	8002112 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	4013      	ands	r3, r2
 80020fc:	68ba      	ldr	r2, [r7, #8]
 80020fe:	429a      	cmp	r2, r3
 8002100:	bf0c      	ite	eq
 8002102:	2301      	moveq	r3, #1
 8002104:	2300      	movne	r3, #0
 8002106:	b2db      	uxtb	r3, r3
 8002108:	461a      	mov	r2, r3
 800210a:	79fb      	ldrb	r3, [r7, #7]
 800210c:	429a      	cmp	r2, r3
 800210e:	d0c3      	beq.n	8002098 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68da      	ldr	r2, [r3, #12]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	430a      	orrs	r2, r1
 8002138:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	431a      	orrs	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	695b      	ldr	r3, [r3, #20]
 8002148:	4313      	orrs	r3, r2
 800214a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002156:	f023 030c 	bic.w	r3, r3, #12
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6812      	ldr	r2, [r2, #0]
 800215e:	68b9      	ldr	r1, [r7, #8]
 8002160:	430b      	orrs	r3, r1
 8002162:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	699a      	ldr	r2, [r3, #24]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	430a      	orrs	r2, r1
 8002178:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a2c      	ldr	r2, [pc, #176]	; (8002230 <UART_SetConfig+0x114>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d103      	bne.n	800218c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002184:	f7ff fa40 	bl	8001608 <HAL_RCC_GetPCLK2Freq>
 8002188:	60f8      	str	r0, [r7, #12]
 800218a:	e002      	b.n	8002192 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800218c:	f7ff fa28 	bl	80015e0 <HAL_RCC_GetPCLK1Freq>
 8002190:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	009a      	lsls	r2, r3, #2
 800219c:	441a      	add	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a8:	4a22      	ldr	r2, [pc, #136]	; (8002234 <UART_SetConfig+0x118>)
 80021aa:	fba2 2303 	umull	r2, r3, r2, r3
 80021ae:	095b      	lsrs	r3, r3, #5
 80021b0:	0119      	lsls	r1, r3, #4
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	4613      	mov	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	009a      	lsls	r2, r3, #2
 80021bc:	441a      	add	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80021c8:	4b1a      	ldr	r3, [pc, #104]	; (8002234 <UART_SetConfig+0x118>)
 80021ca:	fba3 0302 	umull	r0, r3, r3, r2
 80021ce:	095b      	lsrs	r3, r3, #5
 80021d0:	2064      	movs	r0, #100	; 0x64
 80021d2:	fb00 f303 	mul.w	r3, r0, r3
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	011b      	lsls	r3, r3, #4
 80021da:	3332      	adds	r3, #50	; 0x32
 80021dc:	4a15      	ldr	r2, [pc, #84]	; (8002234 <UART_SetConfig+0x118>)
 80021de:	fba2 2303 	umull	r2, r3, r2, r3
 80021e2:	095b      	lsrs	r3, r3, #5
 80021e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021e8:	4419      	add	r1, r3
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	4613      	mov	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	009a      	lsls	r2, r3, #2
 80021f4:	441a      	add	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002200:	4b0c      	ldr	r3, [pc, #48]	; (8002234 <UART_SetConfig+0x118>)
 8002202:	fba3 0302 	umull	r0, r3, r3, r2
 8002206:	095b      	lsrs	r3, r3, #5
 8002208:	2064      	movs	r0, #100	; 0x64
 800220a:	fb00 f303 	mul.w	r3, r0, r3
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	011b      	lsls	r3, r3, #4
 8002212:	3332      	adds	r3, #50	; 0x32
 8002214:	4a07      	ldr	r2, [pc, #28]	; (8002234 <UART_SetConfig+0x118>)
 8002216:	fba2 2303 	umull	r2, r3, r2, r3
 800221a:	095b      	lsrs	r3, r3, #5
 800221c:	f003 020f 	and.w	r2, r3, #15
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	440a      	add	r2, r1
 8002226:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002228:	bf00      	nop
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40013800 	.word	0x40013800
 8002234:	51eb851f 	.word	0x51eb851f

08002238 <siprintf>:
 8002238:	b40e      	push	{r1, r2, r3}
 800223a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800223e:	b500      	push	{lr}
 8002240:	b09c      	sub	sp, #112	; 0x70
 8002242:	ab1d      	add	r3, sp, #116	; 0x74
 8002244:	9002      	str	r0, [sp, #8]
 8002246:	9006      	str	r0, [sp, #24]
 8002248:	9107      	str	r1, [sp, #28]
 800224a:	9104      	str	r1, [sp, #16]
 800224c:	4808      	ldr	r0, [pc, #32]	; (8002270 <siprintf+0x38>)
 800224e:	4909      	ldr	r1, [pc, #36]	; (8002274 <siprintf+0x3c>)
 8002250:	f853 2b04 	ldr.w	r2, [r3], #4
 8002254:	9105      	str	r1, [sp, #20]
 8002256:	6800      	ldr	r0, [r0, #0]
 8002258:	a902      	add	r1, sp, #8
 800225a:	9301      	str	r3, [sp, #4]
 800225c:	f000 f98e 	bl	800257c <_svfiprintf_r>
 8002260:	2200      	movs	r2, #0
 8002262:	9b02      	ldr	r3, [sp, #8]
 8002264:	701a      	strb	r2, [r3, #0]
 8002266:	b01c      	add	sp, #112	; 0x70
 8002268:	f85d eb04 	ldr.w	lr, [sp], #4
 800226c:	b003      	add	sp, #12
 800226e:	4770      	bx	lr
 8002270:	20000058 	.word	0x20000058
 8002274:	ffff0208 	.word	0xffff0208

08002278 <memset>:
 8002278:	4603      	mov	r3, r0
 800227a:	4402      	add	r2, r0
 800227c:	4293      	cmp	r3, r2
 800227e:	d100      	bne.n	8002282 <memset+0xa>
 8002280:	4770      	bx	lr
 8002282:	f803 1b01 	strb.w	r1, [r3], #1
 8002286:	e7f9      	b.n	800227c <memset+0x4>

08002288 <__errno>:
 8002288:	4b01      	ldr	r3, [pc, #4]	; (8002290 <__errno+0x8>)
 800228a:	6818      	ldr	r0, [r3, #0]
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	20000058 	.word	0x20000058

08002294 <__libc_init_array>:
 8002294:	b570      	push	{r4, r5, r6, lr}
 8002296:	2600      	movs	r6, #0
 8002298:	4d0c      	ldr	r5, [pc, #48]	; (80022cc <__libc_init_array+0x38>)
 800229a:	4c0d      	ldr	r4, [pc, #52]	; (80022d0 <__libc_init_array+0x3c>)
 800229c:	1b64      	subs	r4, r4, r5
 800229e:	10a4      	asrs	r4, r4, #2
 80022a0:	42a6      	cmp	r6, r4
 80022a2:	d109      	bne.n	80022b8 <__libc_init_array+0x24>
 80022a4:	f000 fc7a 	bl	8002b9c <_init>
 80022a8:	2600      	movs	r6, #0
 80022aa:	4d0a      	ldr	r5, [pc, #40]	; (80022d4 <__libc_init_array+0x40>)
 80022ac:	4c0a      	ldr	r4, [pc, #40]	; (80022d8 <__libc_init_array+0x44>)
 80022ae:	1b64      	subs	r4, r4, r5
 80022b0:	10a4      	asrs	r4, r4, #2
 80022b2:	42a6      	cmp	r6, r4
 80022b4:	d105      	bne.n	80022c2 <__libc_init_array+0x2e>
 80022b6:	bd70      	pop	{r4, r5, r6, pc}
 80022b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80022bc:	4798      	blx	r3
 80022be:	3601      	adds	r6, #1
 80022c0:	e7ee      	b.n	80022a0 <__libc_init_array+0xc>
 80022c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80022c6:	4798      	blx	r3
 80022c8:	3601      	adds	r6, #1
 80022ca:	e7f2      	b.n	80022b2 <__libc_init_array+0x1e>
 80022cc:	08002c28 	.word	0x08002c28
 80022d0:	08002c28 	.word	0x08002c28
 80022d4:	08002c28 	.word	0x08002c28
 80022d8:	08002c2c 	.word	0x08002c2c

080022dc <__retarget_lock_acquire_recursive>:
 80022dc:	4770      	bx	lr

080022de <__retarget_lock_release_recursive>:
 80022de:	4770      	bx	lr

080022e0 <_free_r>:
 80022e0:	b538      	push	{r3, r4, r5, lr}
 80022e2:	4605      	mov	r5, r0
 80022e4:	2900      	cmp	r1, #0
 80022e6:	d040      	beq.n	800236a <_free_r+0x8a>
 80022e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80022ec:	1f0c      	subs	r4, r1, #4
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	bfb8      	it	lt
 80022f2:	18e4      	addlt	r4, r4, r3
 80022f4:	f000 f8dc 	bl	80024b0 <__malloc_lock>
 80022f8:	4a1c      	ldr	r2, [pc, #112]	; (800236c <_free_r+0x8c>)
 80022fa:	6813      	ldr	r3, [r2, #0]
 80022fc:	b933      	cbnz	r3, 800230c <_free_r+0x2c>
 80022fe:	6063      	str	r3, [r4, #4]
 8002300:	6014      	str	r4, [r2, #0]
 8002302:	4628      	mov	r0, r5
 8002304:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002308:	f000 b8d8 	b.w	80024bc <__malloc_unlock>
 800230c:	42a3      	cmp	r3, r4
 800230e:	d908      	bls.n	8002322 <_free_r+0x42>
 8002310:	6820      	ldr	r0, [r4, #0]
 8002312:	1821      	adds	r1, r4, r0
 8002314:	428b      	cmp	r3, r1
 8002316:	bf01      	itttt	eq
 8002318:	6819      	ldreq	r1, [r3, #0]
 800231a:	685b      	ldreq	r3, [r3, #4]
 800231c:	1809      	addeq	r1, r1, r0
 800231e:	6021      	streq	r1, [r4, #0]
 8002320:	e7ed      	b.n	80022fe <_free_r+0x1e>
 8002322:	461a      	mov	r2, r3
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	b10b      	cbz	r3, 800232c <_free_r+0x4c>
 8002328:	42a3      	cmp	r3, r4
 800232a:	d9fa      	bls.n	8002322 <_free_r+0x42>
 800232c:	6811      	ldr	r1, [r2, #0]
 800232e:	1850      	adds	r0, r2, r1
 8002330:	42a0      	cmp	r0, r4
 8002332:	d10b      	bne.n	800234c <_free_r+0x6c>
 8002334:	6820      	ldr	r0, [r4, #0]
 8002336:	4401      	add	r1, r0
 8002338:	1850      	adds	r0, r2, r1
 800233a:	4283      	cmp	r3, r0
 800233c:	6011      	str	r1, [r2, #0]
 800233e:	d1e0      	bne.n	8002302 <_free_r+0x22>
 8002340:	6818      	ldr	r0, [r3, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	4408      	add	r0, r1
 8002346:	6010      	str	r0, [r2, #0]
 8002348:	6053      	str	r3, [r2, #4]
 800234a:	e7da      	b.n	8002302 <_free_r+0x22>
 800234c:	d902      	bls.n	8002354 <_free_r+0x74>
 800234e:	230c      	movs	r3, #12
 8002350:	602b      	str	r3, [r5, #0]
 8002352:	e7d6      	b.n	8002302 <_free_r+0x22>
 8002354:	6820      	ldr	r0, [r4, #0]
 8002356:	1821      	adds	r1, r4, r0
 8002358:	428b      	cmp	r3, r1
 800235a:	bf01      	itttt	eq
 800235c:	6819      	ldreq	r1, [r3, #0]
 800235e:	685b      	ldreq	r3, [r3, #4]
 8002360:	1809      	addeq	r1, r1, r0
 8002362:	6021      	streq	r1, [r4, #0]
 8002364:	6063      	str	r3, [r4, #4]
 8002366:	6054      	str	r4, [r2, #4]
 8002368:	e7cb      	b.n	8002302 <_free_r+0x22>
 800236a:	bd38      	pop	{r3, r4, r5, pc}
 800236c:	20000258 	.word	0x20000258

08002370 <sbrk_aligned>:
 8002370:	b570      	push	{r4, r5, r6, lr}
 8002372:	4e0e      	ldr	r6, [pc, #56]	; (80023ac <sbrk_aligned+0x3c>)
 8002374:	460c      	mov	r4, r1
 8002376:	6831      	ldr	r1, [r6, #0]
 8002378:	4605      	mov	r5, r0
 800237a:	b911      	cbnz	r1, 8002382 <sbrk_aligned+0x12>
 800237c:	f000 fbaa 	bl	8002ad4 <_sbrk_r>
 8002380:	6030      	str	r0, [r6, #0]
 8002382:	4621      	mov	r1, r4
 8002384:	4628      	mov	r0, r5
 8002386:	f000 fba5 	bl	8002ad4 <_sbrk_r>
 800238a:	1c43      	adds	r3, r0, #1
 800238c:	d00a      	beq.n	80023a4 <sbrk_aligned+0x34>
 800238e:	1cc4      	adds	r4, r0, #3
 8002390:	f024 0403 	bic.w	r4, r4, #3
 8002394:	42a0      	cmp	r0, r4
 8002396:	d007      	beq.n	80023a8 <sbrk_aligned+0x38>
 8002398:	1a21      	subs	r1, r4, r0
 800239a:	4628      	mov	r0, r5
 800239c:	f000 fb9a 	bl	8002ad4 <_sbrk_r>
 80023a0:	3001      	adds	r0, #1
 80023a2:	d101      	bne.n	80023a8 <sbrk_aligned+0x38>
 80023a4:	f04f 34ff 	mov.w	r4, #4294967295
 80023a8:	4620      	mov	r0, r4
 80023aa:	bd70      	pop	{r4, r5, r6, pc}
 80023ac:	2000025c 	.word	0x2000025c

080023b0 <_malloc_r>:
 80023b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023b4:	1ccd      	adds	r5, r1, #3
 80023b6:	f025 0503 	bic.w	r5, r5, #3
 80023ba:	3508      	adds	r5, #8
 80023bc:	2d0c      	cmp	r5, #12
 80023be:	bf38      	it	cc
 80023c0:	250c      	movcc	r5, #12
 80023c2:	2d00      	cmp	r5, #0
 80023c4:	4607      	mov	r7, r0
 80023c6:	db01      	blt.n	80023cc <_malloc_r+0x1c>
 80023c8:	42a9      	cmp	r1, r5
 80023ca:	d905      	bls.n	80023d8 <_malloc_r+0x28>
 80023cc:	230c      	movs	r3, #12
 80023ce:	2600      	movs	r6, #0
 80023d0:	603b      	str	r3, [r7, #0]
 80023d2:	4630      	mov	r0, r6
 80023d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80023d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80024ac <_malloc_r+0xfc>
 80023dc:	f000 f868 	bl	80024b0 <__malloc_lock>
 80023e0:	f8d8 3000 	ldr.w	r3, [r8]
 80023e4:	461c      	mov	r4, r3
 80023e6:	bb5c      	cbnz	r4, 8002440 <_malloc_r+0x90>
 80023e8:	4629      	mov	r1, r5
 80023ea:	4638      	mov	r0, r7
 80023ec:	f7ff ffc0 	bl	8002370 <sbrk_aligned>
 80023f0:	1c43      	adds	r3, r0, #1
 80023f2:	4604      	mov	r4, r0
 80023f4:	d155      	bne.n	80024a2 <_malloc_r+0xf2>
 80023f6:	f8d8 4000 	ldr.w	r4, [r8]
 80023fa:	4626      	mov	r6, r4
 80023fc:	2e00      	cmp	r6, #0
 80023fe:	d145      	bne.n	800248c <_malloc_r+0xdc>
 8002400:	2c00      	cmp	r4, #0
 8002402:	d048      	beq.n	8002496 <_malloc_r+0xe6>
 8002404:	6823      	ldr	r3, [r4, #0]
 8002406:	4631      	mov	r1, r6
 8002408:	4638      	mov	r0, r7
 800240a:	eb04 0903 	add.w	r9, r4, r3
 800240e:	f000 fb61 	bl	8002ad4 <_sbrk_r>
 8002412:	4581      	cmp	r9, r0
 8002414:	d13f      	bne.n	8002496 <_malloc_r+0xe6>
 8002416:	6821      	ldr	r1, [r4, #0]
 8002418:	4638      	mov	r0, r7
 800241a:	1a6d      	subs	r5, r5, r1
 800241c:	4629      	mov	r1, r5
 800241e:	f7ff ffa7 	bl	8002370 <sbrk_aligned>
 8002422:	3001      	adds	r0, #1
 8002424:	d037      	beq.n	8002496 <_malloc_r+0xe6>
 8002426:	6823      	ldr	r3, [r4, #0]
 8002428:	442b      	add	r3, r5
 800242a:	6023      	str	r3, [r4, #0]
 800242c:	f8d8 3000 	ldr.w	r3, [r8]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d038      	beq.n	80024a6 <_malloc_r+0xf6>
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	42a2      	cmp	r2, r4
 8002438:	d12b      	bne.n	8002492 <_malloc_r+0xe2>
 800243a:	2200      	movs	r2, #0
 800243c:	605a      	str	r2, [r3, #4]
 800243e:	e00f      	b.n	8002460 <_malloc_r+0xb0>
 8002440:	6822      	ldr	r2, [r4, #0]
 8002442:	1b52      	subs	r2, r2, r5
 8002444:	d41f      	bmi.n	8002486 <_malloc_r+0xd6>
 8002446:	2a0b      	cmp	r2, #11
 8002448:	d917      	bls.n	800247a <_malloc_r+0xca>
 800244a:	1961      	adds	r1, r4, r5
 800244c:	42a3      	cmp	r3, r4
 800244e:	6025      	str	r5, [r4, #0]
 8002450:	bf18      	it	ne
 8002452:	6059      	strne	r1, [r3, #4]
 8002454:	6863      	ldr	r3, [r4, #4]
 8002456:	bf08      	it	eq
 8002458:	f8c8 1000 	streq.w	r1, [r8]
 800245c:	5162      	str	r2, [r4, r5]
 800245e:	604b      	str	r3, [r1, #4]
 8002460:	4638      	mov	r0, r7
 8002462:	f104 060b 	add.w	r6, r4, #11
 8002466:	f000 f829 	bl	80024bc <__malloc_unlock>
 800246a:	f026 0607 	bic.w	r6, r6, #7
 800246e:	1d23      	adds	r3, r4, #4
 8002470:	1af2      	subs	r2, r6, r3
 8002472:	d0ae      	beq.n	80023d2 <_malloc_r+0x22>
 8002474:	1b9b      	subs	r3, r3, r6
 8002476:	50a3      	str	r3, [r4, r2]
 8002478:	e7ab      	b.n	80023d2 <_malloc_r+0x22>
 800247a:	42a3      	cmp	r3, r4
 800247c:	6862      	ldr	r2, [r4, #4]
 800247e:	d1dd      	bne.n	800243c <_malloc_r+0x8c>
 8002480:	f8c8 2000 	str.w	r2, [r8]
 8002484:	e7ec      	b.n	8002460 <_malloc_r+0xb0>
 8002486:	4623      	mov	r3, r4
 8002488:	6864      	ldr	r4, [r4, #4]
 800248a:	e7ac      	b.n	80023e6 <_malloc_r+0x36>
 800248c:	4634      	mov	r4, r6
 800248e:	6876      	ldr	r6, [r6, #4]
 8002490:	e7b4      	b.n	80023fc <_malloc_r+0x4c>
 8002492:	4613      	mov	r3, r2
 8002494:	e7cc      	b.n	8002430 <_malloc_r+0x80>
 8002496:	230c      	movs	r3, #12
 8002498:	4638      	mov	r0, r7
 800249a:	603b      	str	r3, [r7, #0]
 800249c:	f000 f80e 	bl	80024bc <__malloc_unlock>
 80024a0:	e797      	b.n	80023d2 <_malloc_r+0x22>
 80024a2:	6025      	str	r5, [r4, #0]
 80024a4:	e7dc      	b.n	8002460 <_malloc_r+0xb0>
 80024a6:	605b      	str	r3, [r3, #4]
 80024a8:	deff      	udf	#255	; 0xff
 80024aa:	bf00      	nop
 80024ac:	20000258 	.word	0x20000258

080024b0 <__malloc_lock>:
 80024b0:	4801      	ldr	r0, [pc, #4]	; (80024b8 <__malloc_lock+0x8>)
 80024b2:	f7ff bf13 	b.w	80022dc <__retarget_lock_acquire_recursive>
 80024b6:	bf00      	nop
 80024b8:	20000254 	.word	0x20000254

080024bc <__malloc_unlock>:
 80024bc:	4801      	ldr	r0, [pc, #4]	; (80024c4 <__malloc_unlock+0x8>)
 80024be:	f7ff bf0e 	b.w	80022de <__retarget_lock_release_recursive>
 80024c2:	bf00      	nop
 80024c4:	20000254 	.word	0x20000254

080024c8 <__ssputs_r>:
 80024c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024cc:	461f      	mov	r7, r3
 80024ce:	688e      	ldr	r6, [r1, #8]
 80024d0:	4682      	mov	sl, r0
 80024d2:	42be      	cmp	r6, r7
 80024d4:	460c      	mov	r4, r1
 80024d6:	4690      	mov	r8, r2
 80024d8:	680b      	ldr	r3, [r1, #0]
 80024da:	d82c      	bhi.n	8002536 <__ssputs_r+0x6e>
 80024dc:	898a      	ldrh	r2, [r1, #12]
 80024de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80024e2:	d026      	beq.n	8002532 <__ssputs_r+0x6a>
 80024e4:	6965      	ldr	r5, [r4, #20]
 80024e6:	6909      	ldr	r1, [r1, #16]
 80024e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80024ec:	eba3 0901 	sub.w	r9, r3, r1
 80024f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80024f4:	1c7b      	adds	r3, r7, #1
 80024f6:	444b      	add	r3, r9
 80024f8:	106d      	asrs	r5, r5, #1
 80024fa:	429d      	cmp	r5, r3
 80024fc:	bf38      	it	cc
 80024fe:	461d      	movcc	r5, r3
 8002500:	0553      	lsls	r3, r2, #21
 8002502:	d527      	bpl.n	8002554 <__ssputs_r+0x8c>
 8002504:	4629      	mov	r1, r5
 8002506:	f7ff ff53 	bl	80023b0 <_malloc_r>
 800250a:	4606      	mov	r6, r0
 800250c:	b360      	cbz	r0, 8002568 <__ssputs_r+0xa0>
 800250e:	464a      	mov	r2, r9
 8002510:	6921      	ldr	r1, [r4, #16]
 8002512:	f000 fafd 	bl	8002b10 <memcpy>
 8002516:	89a3      	ldrh	r3, [r4, #12]
 8002518:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800251c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002520:	81a3      	strh	r3, [r4, #12]
 8002522:	6126      	str	r6, [r4, #16]
 8002524:	444e      	add	r6, r9
 8002526:	6026      	str	r6, [r4, #0]
 8002528:	463e      	mov	r6, r7
 800252a:	6165      	str	r5, [r4, #20]
 800252c:	eba5 0509 	sub.w	r5, r5, r9
 8002530:	60a5      	str	r5, [r4, #8]
 8002532:	42be      	cmp	r6, r7
 8002534:	d900      	bls.n	8002538 <__ssputs_r+0x70>
 8002536:	463e      	mov	r6, r7
 8002538:	4632      	mov	r2, r6
 800253a:	4641      	mov	r1, r8
 800253c:	6820      	ldr	r0, [r4, #0]
 800253e:	f000 faaf 	bl	8002aa0 <memmove>
 8002542:	2000      	movs	r0, #0
 8002544:	68a3      	ldr	r3, [r4, #8]
 8002546:	1b9b      	subs	r3, r3, r6
 8002548:	60a3      	str	r3, [r4, #8]
 800254a:	6823      	ldr	r3, [r4, #0]
 800254c:	4433      	add	r3, r6
 800254e:	6023      	str	r3, [r4, #0]
 8002550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002554:	462a      	mov	r2, r5
 8002556:	f000 fae9 	bl	8002b2c <_realloc_r>
 800255a:	4606      	mov	r6, r0
 800255c:	2800      	cmp	r0, #0
 800255e:	d1e0      	bne.n	8002522 <__ssputs_r+0x5a>
 8002560:	4650      	mov	r0, sl
 8002562:	6921      	ldr	r1, [r4, #16]
 8002564:	f7ff febc 	bl	80022e0 <_free_r>
 8002568:	230c      	movs	r3, #12
 800256a:	f8ca 3000 	str.w	r3, [sl]
 800256e:	89a3      	ldrh	r3, [r4, #12]
 8002570:	f04f 30ff 	mov.w	r0, #4294967295
 8002574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002578:	81a3      	strh	r3, [r4, #12]
 800257a:	e7e9      	b.n	8002550 <__ssputs_r+0x88>

0800257c <_svfiprintf_r>:
 800257c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002580:	4698      	mov	r8, r3
 8002582:	898b      	ldrh	r3, [r1, #12]
 8002584:	4607      	mov	r7, r0
 8002586:	061b      	lsls	r3, r3, #24
 8002588:	460d      	mov	r5, r1
 800258a:	4614      	mov	r4, r2
 800258c:	b09d      	sub	sp, #116	; 0x74
 800258e:	d50e      	bpl.n	80025ae <_svfiprintf_r+0x32>
 8002590:	690b      	ldr	r3, [r1, #16]
 8002592:	b963      	cbnz	r3, 80025ae <_svfiprintf_r+0x32>
 8002594:	2140      	movs	r1, #64	; 0x40
 8002596:	f7ff ff0b 	bl	80023b0 <_malloc_r>
 800259a:	6028      	str	r0, [r5, #0]
 800259c:	6128      	str	r0, [r5, #16]
 800259e:	b920      	cbnz	r0, 80025aa <_svfiprintf_r+0x2e>
 80025a0:	230c      	movs	r3, #12
 80025a2:	603b      	str	r3, [r7, #0]
 80025a4:	f04f 30ff 	mov.w	r0, #4294967295
 80025a8:	e0d0      	b.n	800274c <_svfiprintf_r+0x1d0>
 80025aa:	2340      	movs	r3, #64	; 0x40
 80025ac:	616b      	str	r3, [r5, #20]
 80025ae:	2300      	movs	r3, #0
 80025b0:	9309      	str	r3, [sp, #36]	; 0x24
 80025b2:	2320      	movs	r3, #32
 80025b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80025b8:	2330      	movs	r3, #48	; 0x30
 80025ba:	f04f 0901 	mov.w	r9, #1
 80025be:	f8cd 800c 	str.w	r8, [sp, #12]
 80025c2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8002764 <_svfiprintf_r+0x1e8>
 80025c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80025ca:	4623      	mov	r3, r4
 80025cc:	469a      	mov	sl, r3
 80025ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80025d2:	b10a      	cbz	r2, 80025d8 <_svfiprintf_r+0x5c>
 80025d4:	2a25      	cmp	r2, #37	; 0x25
 80025d6:	d1f9      	bne.n	80025cc <_svfiprintf_r+0x50>
 80025d8:	ebba 0b04 	subs.w	fp, sl, r4
 80025dc:	d00b      	beq.n	80025f6 <_svfiprintf_r+0x7a>
 80025de:	465b      	mov	r3, fp
 80025e0:	4622      	mov	r2, r4
 80025e2:	4629      	mov	r1, r5
 80025e4:	4638      	mov	r0, r7
 80025e6:	f7ff ff6f 	bl	80024c8 <__ssputs_r>
 80025ea:	3001      	adds	r0, #1
 80025ec:	f000 80a9 	beq.w	8002742 <_svfiprintf_r+0x1c6>
 80025f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80025f2:	445a      	add	r2, fp
 80025f4:	9209      	str	r2, [sp, #36]	; 0x24
 80025f6:	f89a 3000 	ldrb.w	r3, [sl]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 80a1 	beq.w	8002742 <_svfiprintf_r+0x1c6>
 8002600:	2300      	movs	r3, #0
 8002602:	f04f 32ff 	mov.w	r2, #4294967295
 8002606:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800260a:	f10a 0a01 	add.w	sl, sl, #1
 800260e:	9304      	str	r3, [sp, #16]
 8002610:	9307      	str	r3, [sp, #28]
 8002612:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002616:	931a      	str	r3, [sp, #104]	; 0x68
 8002618:	4654      	mov	r4, sl
 800261a:	2205      	movs	r2, #5
 800261c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002620:	4850      	ldr	r0, [pc, #320]	; (8002764 <_svfiprintf_r+0x1e8>)
 8002622:	f000 fa67 	bl	8002af4 <memchr>
 8002626:	9a04      	ldr	r2, [sp, #16]
 8002628:	b9d8      	cbnz	r0, 8002662 <_svfiprintf_r+0xe6>
 800262a:	06d0      	lsls	r0, r2, #27
 800262c:	bf44      	itt	mi
 800262e:	2320      	movmi	r3, #32
 8002630:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002634:	0711      	lsls	r1, r2, #28
 8002636:	bf44      	itt	mi
 8002638:	232b      	movmi	r3, #43	; 0x2b
 800263a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800263e:	f89a 3000 	ldrb.w	r3, [sl]
 8002642:	2b2a      	cmp	r3, #42	; 0x2a
 8002644:	d015      	beq.n	8002672 <_svfiprintf_r+0xf6>
 8002646:	4654      	mov	r4, sl
 8002648:	2000      	movs	r0, #0
 800264a:	f04f 0c0a 	mov.w	ip, #10
 800264e:	9a07      	ldr	r2, [sp, #28]
 8002650:	4621      	mov	r1, r4
 8002652:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002656:	3b30      	subs	r3, #48	; 0x30
 8002658:	2b09      	cmp	r3, #9
 800265a:	d94d      	bls.n	80026f8 <_svfiprintf_r+0x17c>
 800265c:	b1b0      	cbz	r0, 800268c <_svfiprintf_r+0x110>
 800265e:	9207      	str	r2, [sp, #28]
 8002660:	e014      	b.n	800268c <_svfiprintf_r+0x110>
 8002662:	eba0 0308 	sub.w	r3, r0, r8
 8002666:	fa09 f303 	lsl.w	r3, r9, r3
 800266a:	4313      	orrs	r3, r2
 800266c:	46a2      	mov	sl, r4
 800266e:	9304      	str	r3, [sp, #16]
 8002670:	e7d2      	b.n	8002618 <_svfiprintf_r+0x9c>
 8002672:	9b03      	ldr	r3, [sp, #12]
 8002674:	1d19      	adds	r1, r3, #4
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	9103      	str	r1, [sp, #12]
 800267a:	2b00      	cmp	r3, #0
 800267c:	bfbb      	ittet	lt
 800267e:	425b      	neglt	r3, r3
 8002680:	f042 0202 	orrlt.w	r2, r2, #2
 8002684:	9307      	strge	r3, [sp, #28]
 8002686:	9307      	strlt	r3, [sp, #28]
 8002688:	bfb8      	it	lt
 800268a:	9204      	strlt	r2, [sp, #16]
 800268c:	7823      	ldrb	r3, [r4, #0]
 800268e:	2b2e      	cmp	r3, #46	; 0x2e
 8002690:	d10c      	bne.n	80026ac <_svfiprintf_r+0x130>
 8002692:	7863      	ldrb	r3, [r4, #1]
 8002694:	2b2a      	cmp	r3, #42	; 0x2a
 8002696:	d134      	bne.n	8002702 <_svfiprintf_r+0x186>
 8002698:	9b03      	ldr	r3, [sp, #12]
 800269a:	3402      	adds	r4, #2
 800269c:	1d1a      	adds	r2, r3, #4
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	9203      	str	r2, [sp, #12]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	bfb8      	it	lt
 80026a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80026aa:	9305      	str	r3, [sp, #20]
 80026ac:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8002768 <_svfiprintf_r+0x1ec>
 80026b0:	2203      	movs	r2, #3
 80026b2:	4650      	mov	r0, sl
 80026b4:	7821      	ldrb	r1, [r4, #0]
 80026b6:	f000 fa1d 	bl	8002af4 <memchr>
 80026ba:	b138      	cbz	r0, 80026cc <_svfiprintf_r+0x150>
 80026bc:	2240      	movs	r2, #64	; 0x40
 80026be:	9b04      	ldr	r3, [sp, #16]
 80026c0:	eba0 000a 	sub.w	r0, r0, sl
 80026c4:	4082      	lsls	r2, r0
 80026c6:	4313      	orrs	r3, r2
 80026c8:	3401      	adds	r4, #1
 80026ca:	9304      	str	r3, [sp, #16]
 80026cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80026d0:	2206      	movs	r2, #6
 80026d2:	4826      	ldr	r0, [pc, #152]	; (800276c <_svfiprintf_r+0x1f0>)
 80026d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80026d8:	f000 fa0c 	bl	8002af4 <memchr>
 80026dc:	2800      	cmp	r0, #0
 80026de:	d038      	beq.n	8002752 <_svfiprintf_r+0x1d6>
 80026e0:	4b23      	ldr	r3, [pc, #140]	; (8002770 <_svfiprintf_r+0x1f4>)
 80026e2:	bb1b      	cbnz	r3, 800272c <_svfiprintf_r+0x1b0>
 80026e4:	9b03      	ldr	r3, [sp, #12]
 80026e6:	3307      	adds	r3, #7
 80026e8:	f023 0307 	bic.w	r3, r3, #7
 80026ec:	3308      	adds	r3, #8
 80026ee:	9303      	str	r3, [sp, #12]
 80026f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80026f2:	4433      	add	r3, r6
 80026f4:	9309      	str	r3, [sp, #36]	; 0x24
 80026f6:	e768      	b.n	80025ca <_svfiprintf_r+0x4e>
 80026f8:	460c      	mov	r4, r1
 80026fa:	2001      	movs	r0, #1
 80026fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8002700:	e7a6      	b.n	8002650 <_svfiprintf_r+0xd4>
 8002702:	2300      	movs	r3, #0
 8002704:	f04f 0c0a 	mov.w	ip, #10
 8002708:	4619      	mov	r1, r3
 800270a:	3401      	adds	r4, #1
 800270c:	9305      	str	r3, [sp, #20]
 800270e:	4620      	mov	r0, r4
 8002710:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002714:	3a30      	subs	r2, #48	; 0x30
 8002716:	2a09      	cmp	r2, #9
 8002718:	d903      	bls.n	8002722 <_svfiprintf_r+0x1a6>
 800271a:	2b00      	cmp	r3, #0
 800271c:	d0c6      	beq.n	80026ac <_svfiprintf_r+0x130>
 800271e:	9105      	str	r1, [sp, #20]
 8002720:	e7c4      	b.n	80026ac <_svfiprintf_r+0x130>
 8002722:	4604      	mov	r4, r0
 8002724:	2301      	movs	r3, #1
 8002726:	fb0c 2101 	mla	r1, ip, r1, r2
 800272a:	e7f0      	b.n	800270e <_svfiprintf_r+0x192>
 800272c:	ab03      	add	r3, sp, #12
 800272e:	9300      	str	r3, [sp, #0]
 8002730:	462a      	mov	r2, r5
 8002732:	4638      	mov	r0, r7
 8002734:	4b0f      	ldr	r3, [pc, #60]	; (8002774 <_svfiprintf_r+0x1f8>)
 8002736:	a904      	add	r1, sp, #16
 8002738:	f3af 8000 	nop.w
 800273c:	1c42      	adds	r2, r0, #1
 800273e:	4606      	mov	r6, r0
 8002740:	d1d6      	bne.n	80026f0 <_svfiprintf_r+0x174>
 8002742:	89ab      	ldrh	r3, [r5, #12]
 8002744:	065b      	lsls	r3, r3, #25
 8002746:	f53f af2d 	bmi.w	80025a4 <_svfiprintf_r+0x28>
 800274a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800274c:	b01d      	add	sp, #116	; 0x74
 800274e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002752:	ab03      	add	r3, sp, #12
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	462a      	mov	r2, r5
 8002758:	4638      	mov	r0, r7
 800275a:	4b06      	ldr	r3, [pc, #24]	; (8002774 <_svfiprintf_r+0x1f8>)
 800275c:	a904      	add	r1, sp, #16
 800275e:	f000 f87d 	bl	800285c <_printf_i>
 8002762:	e7eb      	b.n	800273c <_svfiprintf_r+0x1c0>
 8002764:	08002bf4 	.word	0x08002bf4
 8002768:	08002bfa 	.word	0x08002bfa
 800276c:	08002bfe 	.word	0x08002bfe
 8002770:	00000000 	.word	0x00000000
 8002774:	080024c9 	.word	0x080024c9

08002778 <_printf_common>:
 8002778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800277c:	4616      	mov	r6, r2
 800277e:	4699      	mov	r9, r3
 8002780:	688a      	ldr	r2, [r1, #8]
 8002782:	690b      	ldr	r3, [r1, #16]
 8002784:	4607      	mov	r7, r0
 8002786:	4293      	cmp	r3, r2
 8002788:	bfb8      	it	lt
 800278a:	4613      	movlt	r3, r2
 800278c:	6033      	str	r3, [r6, #0]
 800278e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002792:	460c      	mov	r4, r1
 8002794:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002798:	b10a      	cbz	r2, 800279e <_printf_common+0x26>
 800279a:	3301      	adds	r3, #1
 800279c:	6033      	str	r3, [r6, #0]
 800279e:	6823      	ldr	r3, [r4, #0]
 80027a0:	0699      	lsls	r1, r3, #26
 80027a2:	bf42      	ittt	mi
 80027a4:	6833      	ldrmi	r3, [r6, #0]
 80027a6:	3302      	addmi	r3, #2
 80027a8:	6033      	strmi	r3, [r6, #0]
 80027aa:	6825      	ldr	r5, [r4, #0]
 80027ac:	f015 0506 	ands.w	r5, r5, #6
 80027b0:	d106      	bne.n	80027c0 <_printf_common+0x48>
 80027b2:	f104 0a19 	add.w	sl, r4, #25
 80027b6:	68e3      	ldr	r3, [r4, #12]
 80027b8:	6832      	ldr	r2, [r6, #0]
 80027ba:	1a9b      	subs	r3, r3, r2
 80027bc:	42ab      	cmp	r3, r5
 80027be:	dc2b      	bgt.n	8002818 <_printf_common+0xa0>
 80027c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80027c4:	1e13      	subs	r3, r2, #0
 80027c6:	6822      	ldr	r2, [r4, #0]
 80027c8:	bf18      	it	ne
 80027ca:	2301      	movne	r3, #1
 80027cc:	0692      	lsls	r2, r2, #26
 80027ce:	d430      	bmi.n	8002832 <_printf_common+0xba>
 80027d0:	4649      	mov	r1, r9
 80027d2:	4638      	mov	r0, r7
 80027d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80027d8:	47c0      	blx	r8
 80027da:	3001      	adds	r0, #1
 80027dc:	d023      	beq.n	8002826 <_printf_common+0xae>
 80027de:	6823      	ldr	r3, [r4, #0]
 80027e0:	6922      	ldr	r2, [r4, #16]
 80027e2:	f003 0306 	and.w	r3, r3, #6
 80027e6:	2b04      	cmp	r3, #4
 80027e8:	bf14      	ite	ne
 80027ea:	2500      	movne	r5, #0
 80027ec:	6833      	ldreq	r3, [r6, #0]
 80027ee:	f04f 0600 	mov.w	r6, #0
 80027f2:	bf08      	it	eq
 80027f4:	68e5      	ldreq	r5, [r4, #12]
 80027f6:	f104 041a 	add.w	r4, r4, #26
 80027fa:	bf08      	it	eq
 80027fc:	1aed      	subeq	r5, r5, r3
 80027fe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002802:	bf08      	it	eq
 8002804:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002808:	4293      	cmp	r3, r2
 800280a:	bfc4      	itt	gt
 800280c:	1a9b      	subgt	r3, r3, r2
 800280e:	18ed      	addgt	r5, r5, r3
 8002810:	42b5      	cmp	r5, r6
 8002812:	d11a      	bne.n	800284a <_printf_common+0xd2>
 8002814:	2000      	movs	r0, #0
 8002816:	e008      	b.n	800282a <_printf_common+0xb2>
 8002818:	2301      	movs	r3, #1
 800281a:	4652      	mov	r2, sl
 800281c:	4649      	mov	r1, r9
 800281e:	4638      	mov	r0, r7
 8002820:	47c0      	blx	r8
 8002822:	3001      	adds	r0, #1
 8002824:	d103      	bne.n	800282e <_printf_common+0xb6>
 8002826:	f04f 30ff 	mov.w	r0, #4294967295
 800282a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800282e:	3501      	adds	r5, #1
 8002830:	e7c1      	b.n	80027b6 <_printf_common+0x3e>
 8002832:	2030      	movs	r0, #48	; 0x30
 8002834:	18e1      	adds	r1, r4, r3
 8002836:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002840:	4422      	add	r2, r4
 8002842:	3302      	adds	r3, #2
 8002844:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002848:	e7c2      	b.n	80027d0 <_printf_common+0x58>
 800284a:	2301      	movs	r3, #1
 800284c:	4622      	mov	r2, r4
 800284e:	4649      	mov	r1, r9
 8002850:	4638      	mov	r0, r7
 8002852:	47c0      	blx	r8
 8002854:	3001      	adds	r0, #1
 8002856:	d0e6      	beq.n	8002826 <_printf_common+0xae>
 8002858:	3601      	adds	r6, #1
 800285a:	e7d9      	b.n	8002810 <_printf_common+0x98>

0800285c <_printf_i>:
 800285c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002860:	7e0f      	ldrb	r7, [r1, #24]
 8002862:	4691      	mov	r9, r2
 8002864:	2f78      	cmp	r7, #120	; 0x78
 8002866:	4680      	mov	r8, r0
 8002868:	460c      	mov	r4, r1
 800286a:	469a      	mov	sl, r3
 800286c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800286e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002872:	d807      	bhi.n	8002884 <_printf_i+0x28>
 8002874:	2f62      	cmp	r7, #98	; 0x62
 8002876:	d80a      	bhi.n	800288e <_printf_i+0x32>
 8002878:	2f00      	cmp	r7, #0
 800287a:	f000 80d5 	beq.w	8002a28 <_printf_i+0x1cc>
 800287e:	2f58      	cmp	r7, #88	; 0x58
 8002880:	f000 80c1 	beq.w	8002a06 <_printf_i+0x1aa>
 8002884:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002888:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800288c:	e03a      	b.n	8002904 <_printf_i+0xa8>
 800288e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002892:	2b15      	cmp	r3, #21
 8002894:	d8f6      	bhi.n	8002884 <_printf_i+0x28>
 8002896:	a101      	add	r1, pc, #4	; (adr r1, 800289c <_printf_i+0x40>)
 8002898:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800289c:	080028f5 	.word	0x080028f5
 80028a0:	08002909 	.word	0x08002909
 80028a4:	08002885 	.word	0x08002885
 80028a8:	08002885 	.word	0x08002885
 80028ac:	08002885 	.word	0x08002885
 80028b0:	08002885 	.word	0x08002885
 80028b4:	08002909 	.word	0x08002909
 80028b8:	08002885 	.word	0x08002885
 80028bc:	08002885 	.word	0x08002885
 80028c0:	08002885 	.word	0x08002885
 80028c4:	08002885 	.word	0x08002885
 80028c8:	08002a0f 	.word	0x08002a0f
 80028cc:	08002935 	.word	0x08002935
 80028d0:	080029c9 	.word	0x080029c9
 80028d4:	08002885 	.word	0x08002885
 80028d8:	08002885 	.word	0x08002885
 80028dc:	08002a31 	.word	0x08002a31
 80028e0:	08002885 	.word	0x08002885
 80028e4:	08002935 	.word	0x08002935
 80028e8:	08002885 	.word	0x08002885
 80028ec:	08002885 	.word	0x08002885
 80028f0:	080029d1 	.word	0x080029d1
 80028f4:	682b      	ldr	r3, [r5, #0]
 80028f6:	1d1a      	adds	r2, r3, #4
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	602a      	str	r2, [r5, #0]
 80028fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002900:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002904:	2301      	movs	r3, #1
 8002906:	e0a0      	b.n	8002a4a <_printf_i+0x1ee>
 8002908:	6820      	ldr	r0, [r4, #0]
 800290a:	682b      	ldr	r3, [r5, #0]
 800290c:	0607      	lsls	r7, r0, #24
 800290e:	f103 0104 	add.w	r1, r3, #4
 8002912:	6029      	str	r1, [r5, #0]
 8002914:	d501      	bpl.n	800291a <_printf_i+0xbe>
 8002916:	681e      	ldr	r6, [r3, #0]
 8002918:	e003      	b.n	8002922 <_printf_i+0xc6>
 800291a:	0646      	lsls	r6, r0, #25
 800291c:	d5fb      	bpl.n	8002916 <_printf_i+0xba>
 800291e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002922:	2e00      	cmp	r6, #0
 8002924:	da03      	bge.n	800292e <_printf_i+0xd2>
 8002926:	232d      	movs	r3, #45	; 0x2d
 8002928:	4276      	negs	r6, r6
 800292a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800292e:	230a      	movs	r3, #10
 8002930:	4859      	ldr	r0, [pc, #356]	; (8002a98 <_printf_i+0x23c>)
 8002932:	e012      	b.n	800295a <_printf_i+0xfe>
 8002934:	682b      	ldr	r3, [r5, #0]
 8002936:	6820      	ldr	r0, [r4, #0]
 8002938:	1d19      	adds	r1, r3, #4
 800293a:	6029      	str	r1, [r5, #0]
 800293c:	0605      	lsls	r5, r0, #24
 800293e:	d501      	bpl.n	8002944 <_printf_i+0xe8>
 8002940:	681e      	ldr	r6, [r3, #0]
 8002942:	e002      	b.n	800294a <_printf_i+0xee>
 8002944:	0641      	lsls	r1, r0, #25
 8002946:	d5fb      	bpl.n	8002940 <_printf_i+0xe4>
 8002948:	881e      	ldrh	r6, [r3, #0]
 800294a:	2f6f      	cmp	r7, #111	; 0x6f
 800294c:	bf0c      	ite	eq
 800294e:	2308      	moveq	r3, #8
 8002950:	230a      	movne	r3, #10
 8002952:	4851      	ldr	r0, [pc, #324]	; (8002a98 <_printf_i+0x23c>)
 8002954:	2100      	movs	r1, #0
 8002956:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800295a:	6865      	ldr	r5, [r4, #4]
 800295c:	2d00      	cmp	r5, #0
 800295e:	bfa8      	it	ge
 8002960:	6821      	ldrge	r1, [r4, #0]
 8002962:	60a5      	str	r5, [r4, #8]
 8002964:	bfa4      	itt	ge
 8002966:	f021 0104 	bicge.w	r1, r1, #4
 800296a:	6021      	strge	r1, [r4, #0]
 800296c:	b90e      	cbnz	r6, 8002972 <_printf_i+0x116>
 800296e:	2d00      	cmp	r5, #0
 8002970:	d04b      	beq.n	8002a0a <_printf_i+0x1ae>
 8002972:	4615      	mov	r5, r2
 8002974:	fbb6 f1f3 	udiv	r1, r6, r3
 8002978:	fb03 6711 	mls	r7, r3, r1, r6
 800297c:	5dc7      	ldrb	r7, [r0, r7]
 800297e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002982:	4637      	mov	r7, r6
 8002984:	42bb      	cmp	r3, r7
 8002986:	460e      	mov	r6, r1
 8002988:	d9f4      	bls.n	8002974 <_printf_i+0x118>
 800298a:	2b08      	cmp	r3, #8
 800298c:	d10b      	bne.n	80029a6 <_printf_i+0x14a>
 800298e:	6823      	ldr	r3, [r4, #0]
 8002990:	07de      	lsls	r6, r3, #31
 8002992:	d508      	bpl.n	80029a6 <_printf_i+0x14a>
 8002994:	6923      	ldr	r3, [r4, #16]
 8002996:	6861      	ldr	r1, [r4, #4]
 8002998:	4299      	cmp	r1, r3
 800299a:	bfde      	ittt	le
 800299c:	2330      	movle	r3, #48	; 0x30
 800299e:	f805 3c01 	strble.w	r3, [r5, #-1]
 80029a2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80029a6:	1b52      	subs	r2, r2, r5
 80029a8:	6122      	str	r2, [r4, #16]
 80029aa:	464b      	mov	r3, r9
 80029ac:	4621      	mov	r1, r4
 80029ae:	4640      	mov	r0, r8
 80029b0:	f8cd a000 	str.w	sl, [sp]
 80029b4:	aa03      	add	r2, sp, #12
 80029b6:	f7ff fedf 	bl	8002778 <_printf_common>
 80029ba:	3001      	adds	r0, #1
 80029bc:	d14a      	bne.n	8002a54 <_printf_i+0x1f8>
 80029be:	f04f 30ff 	mov.w	r0, #4294967295
 80029c2:	b004      	add	sp, #16
 80029c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029c8:	6823      	ldr	r3, [r4, #0]
 80029ca:	f043 0320 	orr.w	r3, r3, #32
 80029ce:	6023      	str	r3, [r4, #0]
 80029d0:	2778      	movs	r7, #120	; 0x78
 80029d2:	4832      	ldr	r0, [pc, #200]	; (8002a9c <_printf_i+0x240>)
 80029d4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80029d8:	6823      	ldr	r3, [r4, #0]
 80029da:	6829      	ldr	r1, [r5, #0]
 80029dc:	061f      	lsls	r7, r3, #24
 80029de:	f851 6b04 	ldr.w	r6, [r1], #4
 80029e2:	d402      	bmi.n	80029ea <_printf_i+0x18e>
 80029e4:	065f      	lsls	r7, r3, #25
 80029e6:	bf48      	it	mi
 80029e8:	b2b6      	uxthmi	r6, r6
 80029ea:	07df      	lsls	r7, r3, #31
 80029ec:	bf48      	it	mi
 80029ee:	f043 0320 	orrmi.w	r3, r3, #32
 80029f2:	6029      	str	r1, [r5, #0]
 80029f4:	bf48      	it	mi
 80029f6:	6023      	strmi	r3, [r4, #0]
 80029f8:	b91e      	cbnz	r6, 8002a02 <_printf_i+0x1a6>
 80029fa:	6823      	ldr	r3, [r4, #0]
 80029fc:	f023 0320 	bic.w	r3, r3, #32
 8002a00:	6023      	str	r3, [r4, #0]
 8002a02:	2310      	movs	r3, #16
 8002a04:	e7a6      	b.n	8002954 <_printf_i+0xf8>
 8002a06:	4824      	ldr	r0, [pc, #144]	; (8002a98 <_printf_i+0x23c>)
 8002a08:	e7e4      	b.n	80029d4 <_printf_i+0x178>
 8002a0a:	4615      	mov	r5, r2
 8002a0c:	e7bd      	b.n	800298a <_printf_i+0x12e>
 8002a0e:	682b      	ldr	r3, [r5, #0]
 8002a10:	6826      	ldr	r6, [r4, #0]
 8002a12:	1d18      	adds	r0, r3, #4
 8002a14:	6961      	ldr	r1, [r4, #20]
 8002a16:	6028      	str	r0, [r5, #0]
 8002a18:	0635      	lsls	r5, r6, #24
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	d501      	bpl.n	8002a22 <_printf_i+0x1c6>
 8002a1e:	6019      	str	r1, [r3, #0]
 8002a20:	e002      	b.n	8002a28 <_printf_i+0x1cc>
 8002a22:	0670      	lsls	r0, r6, #25
 8002a24:	d5fb      	bpl.n	8002a1e <_printf_i+0x1c2>
 8002a26:	8019      	strh	r1, [r3, #0]
 8002a28:	2300      	movs	r3, #0
 8002a2a:	4615      	mov	r5, r2
 8002a2c:	6123      	str	r3, [r4, #16]
 8002a2e:	e7bc      	b.n	80029aa <_printf_i+0x14e>
 8002a30:	682b      	ldr	r3, [r5, #0]
 8002a32:	2100      	movs	r1, #0
 8002a34:	1d1a      	adds	r2, r3, #4
 8002a36:	602a      	str	r2, [r5, #0]
 8002a38:	681d      	ldr	r5, [r3, #0]
 8002a3a:	6862      	ldr	r2, [r4, #4]
 8002a3c:	4628      	mov	r0, r5
 8002a3e:	f000 f859 	bl	8002af4 <memchr>
 8002a42:	b108      	cbz	r0, 8002a48 <_printf_i+0x1ec>
 8002a44:	1b40      	subs	r0, r0, r5
 8002a46:	6060      	str	r0, [r4, #4]
 8002a48:	6863      	ldr	r3, [r4, #4]
 8002a4a:	6123      	str	r3, [r4, #16]
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a52:	e7aa      	b.n	80029aa <_printf_i+0x14e>
 8002a54:	462a      	mov	r2, r5
 8002a56:	4649      	mov	r1, r9
 8002a58:	4640      	mov	r0, r8
 8002a5a:	6923      	ldr	r3, [r4, #16]
 8002a5c:	47d0      	blx	sl
 8002a5e:	3001      	adds	r0, #1
 8002a60:	d0ad      	beq.n	80029be <_printf_i+0x162>
 8002a62:	6823      	ldr	r3, [r4, #0]
 8002a64:	079b      	lsls	r3, r3, #30
 8002a66:	d413      	bmi.n	8002a90 <_printf_i+0x234>
 8002a68:	68e0      	ldr	r0, [r4, #12]
 8002a6a:	9b03      	ldr	r3, [sp, #12]
 8002a6c:	4298      	cmp	r0, r3
 8002a6e:	bfb8      	it	lt
 8002a70:	4618      	movlt	r0, r3
 8002a72:	e7a6      	b.n	80029c2 <_printf_i+0x166>
 8002a74:	2301      	movs	r3, #1
 8002a76:	4632      	mov	r2, r6
 8002a78:	4649      	mov	r1, r9
 8002a7a:	4640      	mov	r0, r8
 8002a7c:	47d0      	blx	sl
 8002a7e:	3001      	adds	r0, #1
 8002a80:	d09d      	beq.n	80029be <_printf_i+0x162>
 8002a82:	3501      	adds	r5, #1
 8002a84:	68e3      	ldr	r3, [r4, #12]
 8002a86:	9903      	ldr	r1, [sp, #12]
 8002a88:	1a5b      	subs	r3, r3, r1
 8002a8a:	42ab      	cmp	r3, r5
 8002a8c:	dcf2      	bgt.n	8002a74 <_printf_i+0x218>
 8002a8e:	e7eb      	b.n	8002a68 <_printf_i+0x20c>
 8002a90:	2500      	movs	r5, #0
 8002a92:	f104 0619 	add.w	r6, r4, #25
 8002a96:	e7f5      	b.n	8002a84 <_printf_i+0x228>
 8002a98:	08002c05 	.word	0x08002c05
 8002a9c:	08002c16 	.word	0x08002c16

08002aa0 <memmove>:
 8002aa0:	4288      	cmp	r0, r1
 8002aa2:	b510      	push	{r4, lr}
 8002aa4:	eb01 0402 	add.w	r4, r1, r2
 8002aa8:	d902      	bls.n	8002ab0 <memmove+0x10>
 8002aaa:	4284      	cmp	r4, r0
 8002aac:	4623      	mov	r3, r4
 8002aae:	d807      	bhi.n	8002ac0 <memmove+0x20>
 8002ab0:	1e43      	subs	r3, r0, #1
 8002ab2:	42a1      	cmp	r1, r4
 8002ab4:	d008      	beq.n	8002ac8 <memmove+0x28>
 8002ab6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002aba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002abe:	e7f8      	b.n	8002ab2 <memmove+0x12>
 8002ac0:	4601      	mov	r1, r0
 8002ac2:	4402      	add	r2, r0
 8002ac4:	428a      	cmp	r2, r1
 8002ac6:	d100      	bne.n	8002aca <memmove+0x2a>
 8002ac8:	bd10      	pop	{r4, pc}
 8002aca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002ace:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002ad2:	e7f7      	b.n	8002ac4 <memmove+0x24>

08002ad4 <_sbrk_r>:
 8002ad4:	b538      	push	{r3, r4, r5, lr}
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	4d05      	ldr	r5, [pc, #20]	; (8002af0 <_sbrk_r+0x1c>)
 8002ada:	4604      	mov	r4, r0
 8002adc:	4608      	mov	r0, r1
 8002ade:	602b      	str	r3, [r5, #0]
 8002ae0:	f7fd fdce 	bl	8000680 <_sbrk>
 8002ae4:	1c43      	adds	r3, r0, #1
 8002ae6:	d102      	bne.n	8002aee <_sbrk_r+0x1a>
 8002ae8:	682b      	ldr	r3, [r5, #0]
 8002aea:	b103      	cbz	r3, 8002aee <_sbrk_r+0x1a>
 8002aec:	6023      	str	r3, [r4, #0]
 8002aee:	bd38      	pop	{r3, r4, r5, pc}
 8002af0:	20000250 	.word	0x20000250

08002af4 <memchr>:
 8002af4:	4603      	mov	r3, r0
 8002af6:	b510      	push	{r4, lr}
 8002af8:	b2c9      	uxtb	r1, r1
 8002afa:	4402      	add	r2, r0
 8002afc:	4293      	cmp	r3, r2
 8002afe:	4618      	mov	r0, r3
 8002b00:	d101      	bne.n	8002b06 <memchr+0x12>
 8002b02:	2000      	movs	r0, #0
 8002b04:	e003      	b.n	8002b0e <memchr+0x1a>
 8002b06:	7804      	ldrb	r4, [r0, #0]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	428c      	cmp	r4, r1
 8002b0c:	d1f6      	bne.n	8002afc <memchr+0x8>
 8002b0e:	bd10      	pop	{r4, pc}

08002b10 <memcpy>:
 8002b10:	440a      	add	r2, r1
 8002b12:	4291      	cmp	r1, r2
 8002b14:	f100 33ff 	add.w	r3, r0, #4294967295
 8002b18:	d100      	bne.n	8002b1c <memcpy+0xc>
 8002b1a:	4770      	bx	lr
 8002b1c:	b510      	push	{r4, lr}
 8002b1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b22:	4291      	cmp	r1, r2
 8002b24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002b28:	d1f9      	bne.n	8002b1e <memcpy+0xe>
 8002b2a:	bd10      	pop	{r4, pc}

08002b2c <_realloc_r>:
 8002b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b30:	4680      	mov	r8, r0
 8002b32:	4614      	mov	r4, r2
 8002b34:	460e      	mov	r6, r1
 8002b36:	b921      	cbnz	r1, 8002b42 <_realloc_r+0x16>
 8002b38:	4611      	mov	r1, r2
 8002b3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b3e:	f7ff bc37 	b.w	80023b0 <_malloc_r>
 8002b42:	b92a      	cbnz	r2, 8002b50 <_realloc_r+0x24>
 8002b44:	f7ff fbcc 	bl	80022e0 <_free_r>
 8002b48:	4625      	mov	r5, r4
 8002b4a:	4628      	mov	r0, r5
 8002b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b50:	f000 f81b 	bl	8002b8a <_malloc_usable_size_r>
 8002b54:	4284      	cmp	r4, r0
 8002b56:	4607      	mov	r7, r0
 8002b58:	d802      	bhi.n	8002b60 <_realloc_r+0x34>
 8002b5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002b5e:	d812      	bhi.n	8002b86 <_realloc_r+0x5a>
 8002b60:	4621      	mov	r1, r4
 8002b62:	4640      	mov	r0, r8
 8002b64:	f7ff fc24 	bl	80023b0 <_malloc_r>
 8002b68:	4605      	mov	r5, r0
 8002b6a:	2800      	cmp	r0, #0
 8002b6c:	d0ed      	beq.n	8002b4a <_realloc_r+0x1e>
 8002b6e:	42bc      	cmp	r4, r7
 8002b70:	4622      	mov	r2, r4
 8002b72:	4631      	mov	r1, r6
 8002b74:	bf28      	it	cs
 8002b76:	463a      	movcs	r2, r7
 8002b78:	f7ff ffca 	bl	8002b10 <memcpy>
 8002b7c:	4631      	mov	r1, r6
 8002b7e:	4640      	mov	r0, r8
 8002b80:	f7ff fbae 	bl	80022e0 <_free_r>
 8002b84:	e7e1      	b.n	8002b4a <_realloc_r+0x1e>
 8002b86:	4635      	mov	r5, r6
 8002b88:	e7df      	b.n	8002b4a <_realloc_r+0x1e>

08002b8a <_malloc_usable_size_r>:
 8002b8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b8e:	1f18      	subs	r0, r3, #4
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	bfbc      	itt	lt
 8002b94:	580b      	ldrlt	r3, [r1, r0]
 8002b96:	18c0      	addlt	r0, r0, r3
 8002b98:	4770      	bx	lr
	...

08002b9c <_init>:
 8002b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b9e:	bf00      	nop
 8002ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ba2:	bc08      	pop	{r3}
 8002ba4:	469e      	mov	lr, r3
 8002ba6:	4770      	bx	lr

08002ba8 <_fini>:
 8002ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002baa:	bf00      	nop
 8002bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bae:	bc08      	pop	{r3}
 8002bb0:	469e      	mov	lr, r3
 8002bb2:	4770      	bx	lr
