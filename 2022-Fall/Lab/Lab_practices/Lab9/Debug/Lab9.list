
Lab9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a0c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  08005bf8  08005bf8  00015bf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fac  08005fac  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08005fac  08005fac  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005fac  08005fac  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fac  08005fac  00015fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fb0  08005fb0  00015fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08005fb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  200001d4  08006188  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b8  08006188  000203b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000671e  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001837  00000000  00000000  0002695e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007e8  00000000  00000000  00028198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005fd  00000000  00000000  00028980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a080  00000000  00000000  00028f7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008e6b  00000000  00000000  00042ffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000974a4  00000000  00000000  0004be68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002ffc  00000000  00000000  000e330c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000e6308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001d4 	.word	0x200001d4
 8000204:	00000000 	.word	0x00000000
 8000208:	08005bdc 	.word	0x08005bdc

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001d8 	.word	0x200001d8
 8000224:	08005bdc 	.word	0x08005bdc

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b60:	b590      	push	{r4, r7, lr}
 8000b62:	b093      	sub	sp, #76	; 0x4c
 8000b64:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b66:	f000 fb35 	bl	80011d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b6a:	f000 f857 	bl	8000c1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b6e:	f000 f93b 	bl	8000de8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000b72:	f000 f8b1 	bl	8000cd8 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000b76:	f000 f90d 	bl	8000d94 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  for (int i = 0; i < 3; i++)
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000b7e:	e03a      	b.n	8000bf6 <main+0x96>
  {
  HAL_ADC_Start(&hadc1);
 8000b80:	4823      	ldr	r0, [pc, #140]	; (8000c10 <main+0xb0>)
 8000b82:	f000 fc97 	bl	80014b4 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000b86:	f04f 31ff 	mov.w	r1, #4294967295
 8000b8a:	4821      	ldr	r0, [pc, #132]	; (8000c10 <main+0xb0>)
 8000b8c:	f000 fd40 	bl	8001610 <HAL_ADC_PollForConversion>
  adcBuf[i]=HAL_ADC_GetValue(&hadc1);
 8000b90:	481f      	ldr	r0, [pc, #124]	; (8000c10 <main+0xb0>)
 8000b92:	f000 fe43 	bl	800181c <HAL_ADC_GetValue>
 8000b96:	4603      	mov	r3, r0
 8000b98:	b29a      	uxth	r2, r3
 8000b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	3340      	adds	r3, #64	; 0x40
 8000ba0:	443b      	add	r3, r7
 8000ba2:	f823 2c2c 	strh.w	r2, [r3, #-44]
  sprintf(msg, "ch:%d %f\r\n", i+4, (double)adcBuf[i]* (3.3/4096));
 8000ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ba8:	1d1c      	adds	r4, r3, #4
 8000baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	3340      	adds	r3, #64	; 0x40
 8000bb0:	443b      	add	r3, r7
 8000bb2:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fc80 	bl	80004bc <__aeabi_ui2d>
 8000bbc:	a312      	add	r3, pc, #72	; (adr r3, 8000c08 <main+0xa8>)
 8000bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bc2:	f7ff fcf5 	bl	80005b0 <__aeabi_dmul>
 8000bc6:	4602      	mov	r2, r0
 8000bc8:	460b      	mov	r3, r1
 8000bca:	4638      	mov	r0, r7
 8000bcc:	e9cd 2300 	strd	r2, r3, [sp]
 8000bd0:	4622      	mov	r2, r4
 8000bd2:	4910      	ldr	r1, [pc, #64]	; (8000c14 <main+0xb4>)
 8000bd4:	f002 feb4 	bl	8003940 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000bd8:	463b      	mov	r3, r7
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff fb24 	bl	8000228 <strlen>
 8000be0:	4603      	mov	r3, r0
 8000be2:	b29a      	uxth	r2, r3
 8000be4:	4639      	mov	r1, r7
 8000be6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bea:	480b      	ldr	r0, [pc, #44]	; (8000c18 <main+0xb8>)
 8000bec:	f002 f82f 	bl	8002c4e <HAL_UART_Transmit>
  for (int i = 0; i < 3; i++)
 8000bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	ddc1      	ble.n	8000b80 <main+0x20>
  }
  HAL_Delay(500);
 8000bfc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c00:	f000 fb4a 	bl	8001298 <HAL_Delay>
  for (int i = 0; i < 3; i++)
 8000c04:	e7b9      	b.n	8000b7a <main+0x1a>
 8000c06:	bf00      	nop
 8000c08:	66666666 	.word	0x66666666
 8000c0c:	3f4a6666 	.word	0x3f4a6666
 8000c10:	200001f0 	.word	0x200001f0
 8000c14:	08005bf8 	.word	0x08005bf8
 8000c18:	20000220 	.word	0x20000220

08000c1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b096      	sub	sp, #88	; 0x58
 8000c20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c22:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c26:	2228      	movs	r2, #40	; 0x28
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f002 feeb 	bl	8003a06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c30:	f107 031c 	add.w	r3, r7, #28
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]
 8000c4c:	611a      	str	r2, [r3, #16]
 8000c4e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c50:	2301      	movs	r3, #1
 8000c52:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c58:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c62:	2302      	movs	r3, #2
 8000c64:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c6a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c6c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c70:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c76:	4618      	mov	r0, r3
 8000c78:	f001 f9e8 	bl	800204c <HAL_RCC_OscConfig>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000c82:	f000 f8d3 	bl	8000e2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c86:	230f      	movs	r3, #15
 8000c88:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c96:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c9c:	f107 031c 	add.w	r3, r7, #28
 8000ca0:	2102      	movs	r1, #2
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f001 fc54 	bl	8002550 <HAL_RCC_ClockConfig>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000cae:	f000 f8bd 	bl	8000e2c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000cb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cba:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f001 fdde 	bl	8002880 <HAL_RCCEx_PeriphCLKConfig>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000cca:	f000 f8af 	bl	8000e2c <Error_Handler>
  }
}
 8000cce:	bf00      	nop
 8000cd0:	3758      	adds	r7, #88	; 0x58
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ce8:	4b28      	ldr	r3, [pc, #160]	; (8000d8c <MX_ADC1_Init+0xb4>)
 8000cea:	4a29      	ldr	r2, [pc, #164]	; (8000d90 <MX_ADC1_Init+0xb8>)
 8000cec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000cee:	4b27      	ldr	r3, [pc, #156]	; (8000d8c <MX_ADC1_Init+0xb4>)
 8000cf0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cf4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cf6:	4b25      	ldr	r3, [pc, #148]	; (8000d8c <MX_ADC1_Init+0xb4>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000cfc:	4b23      	ldr	r3, [pc, #140]	; (8000d8c <MX_ADC1_Init+0xb4>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	751a      	strb	r2, [r3, #20]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000d02:	4b22      	ldr	r3, [pc, #136]	; (8000d8c <MX_ADC1_Init+0xb4>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	619a      	str	r2, [r3, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d08:	4b20      	ldr	r3, [pc, #128]	; (8000d8c <MX_ADC1_Init+0xb4>)
 8000d0a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000d0e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d10:	4b1e      	ldr	r3, [pc, #120]	; (8000d8c <MX_ADC1_Init+0xb4>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000d16:	4b1d      	ldr	r3, [pc, #116]	; (8000d8c <MX_ADC1_Init+0xb4>)
 8000d18:	2203      	movs	r2, #3
 8000d1a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d1c:	481b      	ldr	r0, [pc, #108]	; (8000d8c <MX_ADC1_Init+0xb4>)
 8000d1e:	f000 fadf 	bl	80012e0 <HAL_ADC_Init>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_ADC1_Init+0x54>
  {
    Error_Handler();
 8000d28:	f000 f880 	bl	8000e2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000d2c:	2304      	movs	r3, #4
 8000d2e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d30:	2301      	movs	r3, #1
 8000d32:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d34:	2300      	movs	r3, #0
 8000d36:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4813      	ldr	r0, [pc, #76]	; (8000d8c <MX_ADC1_Init+0xb4>)
 8000d3e:	f000 fd79 	bl	8001834 <HAL_ADC_ConfigChannel>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000d48:	f000 f870 	bl	8000e2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000d4c:	2305      	movs	r3, #5
 8000d4e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000d50:	2302      	movs	r3, #2
 8000d52:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	4619      	mov	r1, r3
 8000d58:	480c      	ldr	r0, [pc, #48]	; (8000d8c <MX_ADC1_Init+0xb4>)
 8000d5a:	f000 fd6b 	bl	8001834 <HAL_ADC_ConfigChannel>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000d64:	f000 f862 	bl	8000e2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000d68:	2306      	movs	r3, #6
 8000d6a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	4619      	mov	r1, r3
 8000d74:	4805      	ldr	r0, [pc, #20]	; (8000d8c <MX_ADC1_Init+0xb4>)
 8000d76:	f000 fd5d 	bl	8001834 <HAL_ADC_ConfigChannel>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000d80:	f000 f854 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d84:	bf00      	nop
 8000d86:	3710      	adds	r7, #16
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	200001f0 	.word	0x200001f0
 8000d90:	40012400 	.word	0x40012400

08000d94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d98:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <MX_USART1_UART_Init+0x4c>)
 8000d9a:	4a12      	ldr	r2, [pc, #72]	; (8000de4 <MX_USART1_UART_Init+0x50>)
 8000d9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d9e:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <MX_USART1_UART_Init+0x4c>)
 8000da0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000da4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000da6:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <MX_USART1_UART_Init+0x4c>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dac:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <MX_USART1_UART_Init+0x4c>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000db2:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <MX_USART1_UART_Init+0x4c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000db8:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <MX_USART1_UART_Init+0x4c>)
 8000dba:	220c      	movs	r2, #12
 8000dbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dbe:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <MX_USART1_UART_Init+0x4c>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <MX_USART1_UART_Init+0x4c>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dca:	4805      	ldr	r0, [pc, #20]	; (8000de0 <MX_USART1_UART_Init+0x4c>)
 8000dcc:	f001 fef2 	bl	8002bb4 <HAL_UART_Init>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000dd6:	f000 f829 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000220 	.word	0x20000220
 8000de4:	40013800 	.word	0x40013800

08000de8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <MX_GPIO_Init+0x40>)
 8000df0:	699b      	ldr	r3, [r3, #24]
 8000df2:	4a0d      	ldr	r2, [pc, #52]	; (8000e28 <MX_GPIO_Init+0x40>)
 8000df4:	f043 0320 	orr.w	r3, r3, #32
 8000df8:	6193      	str	r3, [r2, #24]
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <MX_GPIO_Init+0x40>)
 8000dfc:	699b      	ldr	r3, [r3, #24]
 8000dfe:	f003 0320 	and.w	r3, r3, #32
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <MX_GPIO_Init+0x40>)
 8000e08:	699b      	ldr	r3, [r3, #24]
 8000e0a:	4a07      	ldr	r2, [pc, #28]	; (8000e28 <MX_GPIO_Init+0x40>)
 8000e0c:	f043 0304 	orr.w	r3, r3, #4
 8000e10:	6193      	str	r3, [r2, #24]
 8000e12:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <MX_GPIO_Init+0x40>)
 8000e14:	699b      	ldr	r3, [r3, #24]
 8000e16:	f003 0304 	and.w	r3, r3, #4
 8000e1a:	603b      	str	r3, [r7, #0]
 8000e1c:	683b      	ldr	r3, [r7, #0]

}
 8000e1e:	bf00      	nop
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr
 8000e28:	40021000 	.word	0x40021000

08000e2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e30:	b672      	cpsid	i
}
 8000e32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <Error_Handler+0x8>
	...

08000e38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <HAL_MspInit+0x5c>)
 8000e40:	699b      	ldr	r3, [r3, #24]
 8000e42:	4a14      	ldr	r2, [pc, #80]	; (8000e94 <HAL_MspInit+0x5c>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	6193      	str	r3, [r2, #24]
 8000e4a:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <HAL_MspInit+0x5c>)
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e56:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <HAL_MspInit+0x5c>)
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	4a0e      	ldr	r2, [pc, #56]	; (8000e94 <HAL_MspInit+0x5c>)
 8000e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e60:	61d3      	str	r3, [r2, #28]
 8000e62:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <HAL_MspInit+0x5c>)
 8000e64:	69db      	ldr	r3, [r3, #28]
 8000e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <HAL_MspInit+0x60>)
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	4a04      	ldr	r2, [pc, #16]	; (8000e98 <HAL_MspInit+0x60>)
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	3714      	adds	r7, #20
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr
 8000e94:	40021000 	.word	0x40021000
 8000e98:	40010000 	.word	0x40010000

08000e9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b088      	sub	sp, #32
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 0310 	add.w	r3, r7, #16
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a14      	ldr	r2, [pc, #80]	; (8000f08 <HAL_ADC_MspInit+0x6c>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d121      	bne.n	8000f00 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ebc:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <HAL_ADC_MspInit+0x70>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	4a12      	ldr	r2, [pc, #72]	; (8000f0c <HAL_ADC_MspInit+0x70>)
 8000ec2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ec6:	6193      	str	r3, [r2, #24]
 8000ec8:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <HAL_ADC_MspInit+0x70>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed4:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <HAL_ADC_MspInit+0x70>)
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	4a0c      	ldr	r2, [pc, #48]	; (8000f0c <HAL_ADC_MspInit+0x70>)
 8000eda:	f043 0304 	orr.w	r3, r3, #4
 8000ede:	6193      	str	r3, [r2, #24]
 8000ee0:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <HAL_ADC_MspInit+0x70>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	f003 0304 	and.w	r3, r3, #4
 8000ee8:	60bb      	str	r3, [r7, #8]
 8000eea:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000eec:	2370      	movs	r3, #112	; 0x70
 8000eee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef4:	f107 0310 	add.w	r3, r7, #16
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4805      	ldr	r0, [pc, #20]	; (8000f10 <HAL_ADC_MspInit+0x74>)
 8000efc:	f000 ff12 	bl	8001d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f00:	bf00      	nop
 8000f02:	3720      	adds	r7, #32
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40012400 	.word	0x40012400
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	40010800 	.word	0x40010800

08000f14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b088      	sub	sp, #32
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 0310 	add.w	r3, r7, #16
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a1c      	ldr	r2, [pc, #112]	; (8000fa0 <HAL_UART_MspInit+0x8c>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d131      	bne.n	8000f98 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f34:	4b1b      	ldr	r3, [pc, #108]	; (8000fa4 <HAL_UART_MspInit+0x90>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	4a1a      	ldr	r2, [pc, #104]	; (8000fa4 <HAL_UART_MspInit+0x90>)
 8000f3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f3e:	6193      	str	r3, [r2, #24]
 8000f40:	4b18      	ldr	r3, [pc, #96]	; (8000fa4 <HAL_UART_MspInit+0x90>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4c:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <HAL_UART_MspInit+0x90>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	4a14      	ldr	r2, [pc, #80]	; (8000fa4 <HAL_UART_MspInit+0x90>)
 8000f52:	f043 0304 	orr.w	r3, r3, #4
 8000f56:	6193      	str	r3, [r2, #24]
 8000f58:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <HAL_UART_MspInit+0x90>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	f003 0304 	and.w	r3, r3, #4
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f72:	f107 0310 	add.w	r3, r7, #16
 8000f76:	4619      	mov	r1, r3
 8000f78:	480b      	ldr	r0, [pc, #44]	; (8000fa8 <HAL_UART_MspInit+0x94>)
 8000f7a:	f000 fed3 	bl	8001d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8c:	f107 0310 	add.w	r3, r7, #16
 8000f90:	4619      	mov	r1, r3
 8000f92:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <HAL_UART_MspInit+0x94>)
 8000f94:	f000 fec6 	bl	8001d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f98:	bf00      	nop
 8000f9a:	3720      	adds	r7, #32
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40013800 	.word	0x40013800
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	40010800 	.word	0x40010800

08000fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <NMI_Handler+0x4>

08000fb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <HardFault_Handler+0x4>

08000fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <MemManage_Handler+0x4>

08000fbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <BusFault_Handler+0x4>

08000fc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <UsageFault_Handler+0x4>

08000fca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc80      	pop	{r7}
 8000fd4:	4770      	bx	lr

08000fd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr

08000fe2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc80      	pop	{r7}
 8000fec:	4770      	bx	lr

08000fee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff2:	f000 f935 	bl	8001260 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0
	return 1;
 8000ffe:	2301      	movs	r3, #1
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr

08001008 <_kill>:

int _kill(int pid, int sig)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001012:	f002 fd4b 	bl	8003aac <__errno>
 8001016:	4603      	mov	r3, r0
 8001018:	2216      	movs	r2, #22
 800101a:	601a      	str	r2, [r3, #0]
	return -1;
 800101c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <_exit>:

void _exit (int status)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001030:	f04f 31ff 	mov.w	r1, #4294967295
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff ffe7 	bl	8001008 <_kill>
	while (1) {}		/* Make sure we hang here */
 800103a:	e7fe      	b.n	800103a <_exit+0x12>

0800103c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	e00a      	b.n	8001064 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800104e:	f3af 8000 	nop.w
 8001052:	4601      	mov	r1, r0
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	1c5a      	adds	r2, r3, #1
 8001058:	60ba      	str	r2, [r7, #8]
 800105a:	b2ca      	uxtb	r2, r1
 800105c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	3301      	adds	r3, #1
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	697a      	ldr	r2, [r7, #20]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	429a      	cmp	r2, r3
 800106a:	dbf0      	blt.n	800104e <_read+0x12>
	}

return len;
 800106c:	687b      	ldr	r3, [r7, #4]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b086      	sub	sp, #24
 800107a:	af00      	add	r7, sp, #0
 800107c:	60f8      	str	r0, [r7, #12]
 800107e:	60b9      	str	r1, [r7, #8]
 8001080:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
 8001086:	e009      	b.n	800109c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	1c5a      	adds	r2, r3, #1
 800108c:	60ba      	str	r2, [r7, #8]
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	4618      	mov	r0, r3
 8001092:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	3301      	adds	r3, #1
 800109a:	617b      	str	r3, [r7, #20]
 800109c:	697a      	ldr	r2, [r7, #20]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	dbf1      	blt.n	8001088 <_write+0x12>
	}
	return len;
 80010a4:	687b      	ldr	r3, [r7, #4]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3718      	adds	r7, #24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <_close>:

int _close(int file)
{
 80010ae:	b480      	push	{r7}
 80010b0:	b083      	sub	sp, #12
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
	return -1;
 80010b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr

080010c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010d4:	605a      	str	r2, [r3, #4]
	return 0;
 80010d6:	2300      	movs	r3, #0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr

080010e2 <_isatty>:

int _isatty(int file)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
	return 1;
 80010ea:	2301      	movs	r3, #1
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr

080010f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b085      	sub	sp, #20
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	60f8      	str	r0, [r7, #12]
 80010fe:	60b9      	str	r1, [r7, #8]
 8001100:	607a      	str	r2, [r7, #4]
	return 0;
 8001102:	2300      	movs	r3, #0
}
 8001104:	4618      	mov	r0, r3
 8001106:	3714      	adds	r7, #20
 8001108:	46bd      	mov	sp, r7
 800110a:	bc80      	pop	{r7}
 800110c:	4770      	bx	lr
	...

08001110 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001118:	4a14      	ldr	r2, [pc, #80]	; (800116c <_sbrk+0x5c>)
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <_sbrk+0x60>)
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001124:	4b13      	ldr	r3, [pc, #76]	; (8001174 <_sbrk+0x64>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d102      	bne.n	8001132 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800112c:	4b11      	ldr	r3, [pc, #68]	; (8001174 <_sbrk+0x64>)
 800112e:	4a12      	ldr	r2, [pc, #72]	; (8001178 <_sbrk+0x68>)
 8001130:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001132:	4b10      	ldr	r3, [pc, #64]	; (8001174 <_sbrk+0x64>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4413      	add	r3, r2
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	429a      	cmp	r2, r3
 800113e:	d207      	bcs.n	8001150 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001140:	f002 fcb4 	bl	8003aac <__errno>
 8001144:	4603      	mov	r3, r0
 8001146:	220c      	movs	r2, #12
 8001148:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800114a:	f04f 33ff 	mov.w	r3, #4294967295
 800114e:	e009      	b.n	8001164 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001150:	4b08      	ldr	r3, [pc, #32]	; (8001174 <_sbrk+0x64>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001156:	4b07      	ldr	r3, [pc, #28]	; (8001174 <_sbrk+0x64>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4413      	add	r3, r2
 800115e:	4a05      	ldr	r2, [pc, #20]	; (8001174 <_sbrk+0x64>)
 8001160:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001162:	68fb      	ldr	r3, [r7, #12]
}
 8001164:	4618      	mov	r0, r3
 8001166:	3718      	adds	r7, #24
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	2000c000 	.word	0x2000c000
 8001170:	00000400 	.word	0x00000400
 8001174:	20000264 	.word	0x20000264
 8001178:	200003b8 	.word	0x200003b8

0800117c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr

08001188 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001188:	480c      	ldr	r0, [pc, #48]	; (80011bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800118a:	490d      	ldr	r1, [pc, #52]	; (80011c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800118c:	4a0d      	ldr	r2, [pc, #52]	; (80011c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800118e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001190:	e002      	b.n	8001198 <LoopCopyDataInit>

08001192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001196:	3304      	adds	r3, #4

08001198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800119a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800119c:	d3f9      	bcc.n	8001192 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800119e:	4a0a      	ldr	r2, [pc, #40]	; (80011c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011a0:	4c0a      	ldr	r4, [pc, #40]	; (80011cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a4:	e001      	b.n	80011aa <LoopFillZerobss>

080011a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a8:	3204      	adds	r2, #4

080011aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011ac:	d3fb      	bcc.n	80011a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011ae:	f7ff ffe5 	bl	800117c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011b2:	f002 fc81 	bl	8003ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011b6:	f7ff fcd3 	bl	8000b60 <main>
  bx lr
 80011ba:	4770      	bx	lr
  ldr r0, =_sdata
 80011bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80011c4:	08005fb4 	.word	0x08005fb4
  ldr r2, =_sbss
 80011c8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80011cc:	200003b8 	.word	0x200003b8

080011d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011d0:	e7fe      	b.n	80011d0 <ADC1_2_IRQHandler>
	...

080011d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d8:	4b08      	ldr	r3, [pc, #32]	; (80011fc <HAL_Init+0x28>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a07      	ldr	r2, [pc, #28]	; (80011fc <HAL_Init+0x28>)
 80011de:	f043 0310 	orr.w	r3, r3, #16
 80011e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e4:	2003      	movs	r0, #3
 80011e6:	f000 fd69 	bl	8001cbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ea:	200f      	movs	r0, #15
 80011ec:	f000 f808 	bl	8001200 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f0:	f7ff fe22 	bl	8000e38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40022000 	.word	0x40022000

08001200 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001208:	4b12      	ldr	r3, [pc, #72]	; (8001254 <HAL_InitTick+0x54>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <HAL_InitTick+0x58>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	4619      	mov	r1, r3
 8001212:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001216:	fbb3 f3f1 	udiv	r3, r3, r1
 800121a:	fbb2 f3f3 	udiv	r3, r2, r3
 800121e:	4618      	mov	r0, r3
 8001220:	f000 fd73 	bl	8001d0a <HAL_SYSTICK_Config>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e00e      	b.n	800124c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b0f      	cmp	r3, #15
 8001232:	d80a      	bhi.n	800124a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001234:	2200      	movs	r2, #0
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	f04f 30ff 	mov.w	r0, #4294967295
 800123c:	f000 fd49 	bl	8001cd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001240:	4a06      	ldr	r2, [pc, #24]	; (800125c <HAL_InitTick+0x5c>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001246:	2300      	movs	r3, #0
 8001248:	e000      	b.n	800124c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
}
 800124c:	4618      	mov	r0, r3
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000000 	.word	0x20000000
 8001258:	20000008 	.word	0x20000008
 800125c:	20000004 	.word	0x20000004

08001260 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <HAL_IncTick+0x1c>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	461a      	mov	r2, r3
 800126a:	4b05      	ldr	r3, [pc, #20]	; (8001280 <HAL_IncTick+0x20>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4413      	add	r3, r2
 8001270:	4a03      	ldr	r2, [pc, #12]	; (8001280 <HAL_IncTick+0x20>)
 8001272:	6013      	str	r3, [r2, #0]
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr
 800127c:	20000008 	.word	0x20000008
 8001280:	20000268 	.word	0x20000268

08001284 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return uwTick;
 8001288:	4b02      	ldr	r3, [pc, #8]	; (8001294 <HAL_GetTick+0x10>)
 800128a:	681b      	ldr	r3, [r3, #0]
}
 800128c:	4618      	mov	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr
 8001294:	20000268 	.word	0x20000268

08001298 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012a0:	f7ff fff0 	bl	8001284 <HAL_GetTick>
 80012a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b0:	d005      	beq.n	80012be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012b2:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <HAL_Delay+0x44>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	461a      	mov	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4413      	add	r3, r2
 80012bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012be:	bf00      	nop
 80012c0:	f7ff ffe0 	bl	8001284 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d8f7      	bhi.n	80012c0 <HAL_Delay+0x28>
  {
  }
}
 80012d0:	bf00      	nop
 80012d2:	bf00      	nop
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000008 	.word	0x20000008

080012e0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012e8:	2300      	movs	r3, #0
 80012ea:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80012ec:	2300      	movs	r3, #0
 80012ee:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d101      	bne.n	8001302 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e0ce      	b.n	80014a0 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800130c:	2b00      	cmp	r3, #0
 800130e:	d109      	bne.n	8001324 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff fdbc 	bl	8000e9c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f000 fbd7 	bl	8001ad8 <ADC_ConversionStop_Disable>
 800132a:	4603      	mov	r3, r0
 800132c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001332:	f003 0310 	and.w	r3, r3, #16
 8001336:	2b00      	cmp	r3, #0
 8001338:	f040 80a9 	bne.w	800148e <HAL_ADC_Init+0x1ae>
 800133c:	7dfb      	ldrb	r3, [r7, #23]
 800133e:	2b00      	cmp	r3, #0
 8001340:	f040 80a5 	bne.w	800148e <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001348:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800134c:	f023 0302 	bic.w	r3, r3, #2
 8001350:	f043 0202 	orr.w	r2, r3, #2
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4951      	ldr	r1, [pc, #324]	; (80014a8 <HAL_ADC_Init+0x1c8>)
 8001362:	428b      	cmp	r3, r1
 8001364:	d10a      	bne.n	800137c <HAL_ADC_Init+0x9c>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800136e:	d002      	beq.n	8001376 <HAL_ADC_Init+0x96>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	69db      	ldr	r3, [r3, #28]
 8001374:	e004      	b.n	8001380 <HAL_ADC_Init+0xa0>
 8001376:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800137a:	e001      	b.n	8001380 <HAL_ADC_Init+0xa0>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001380:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	7b1b      	ldrb	r3, [r3, #12]
 8001386:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001388:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	4313      	orrs	r3, r2
 800138e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001398:	d003      	beq.n	80013a2 <HAL_ADC_Init+0xc2>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d102      	bne.n	80013a8 <HAL_ADC_Init+0xc8>
 80013a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013a6:	e000      	b.n	80013aa <HAL_ADC_Init+0xca>
 80013a8:	2300      	movs	r3, #0
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	7d1b      	ldrb	r3, [r3, #20]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d119      	bne.n	80013ec <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	7b1b      	ldrb	r3, [r3, #12]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d109      	bne.n	80013d4 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	3b01      	subs	r3, #1
 80013c6:	035a      	lsls	r2, r3, #13
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013d0:	613b      	str	r3, [r7, #16]
 80013d2:	e00b      	b.n	80013ec <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d8:	f043 0220 	orr.w	r2, r3, #32
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e4:	f043 0201 	orr.w	r2, r3, #1
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	430a      	orrs	r2, r1
 80013fe:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	689a      	ldr	r2, [r3, #8]
 8001406:	4b29      	ldr	r3, [pc, #164]	; (80014ac <HAL_ADC_Init+0x1cc>)
 8001408:	4013      	ands	r3, r2
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	6812      	ldr	r2, [r2, #0]
 800140e:	68b9      	ldr	r1, [r7, #8]
 8001410:	430b      	orrs	r3, r1
 8001412:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800141c:	d003      	beq.n	8001426 <HAL_ADC_Init+0x146>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d104      	bne.n	8001430 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	691b      	ldr	r3, [r3, #16]
 800142a:	3b01      	subs	r3, #1
 800142c:	051b      	lsls	r3, r3, #20
 800142e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001436:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	430a      	orrs	r2, r1
 8001442:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	689a      	ldr	r2, [r3, #8]
 800144a:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <HAL_ADC_Init+0x1d0>)
 800144c:	4013      	ands	r3, r2
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	429a      	cmp	r2, r3
 8001452:	d10b      	bne.n	800146c <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145e:	f023 0303 	bic.w	r3, r3, #3
 8001462:	f043 0201 	orr.w	r2, r3, #1
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800146a:	e018      	b.n	800149e <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001470:	f023 0312 	bic.w	r3, r3, #18
 8001474:	f043 0210 	orr.w	r2, r3, #16
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001480:	f043 0201 	orr.w	r2, r3, #1
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800148c:	e007      	b.n	800149e <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001492:	f043 0210 	orr.w	r2, r3, #16
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800149e:	7dfb      	ldrb	r3, [r7, #23]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40013c00 	.word	0x40013c00
 80014ac:	ffe1f7fd 	.word	0xffe1f7fd
 80014b0:	ff1f0efe 	.word	0xff1f0efe

080014b4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014bc:	2300      	movs	r3, #0
 80014be:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d101      	bne.n	80014ce <HAL_ADC_Start+0x1a>
 80014ca:	2302      	movs	r3, #2
 80014cc:	e098      	b.n	8001600 <HAL_ADC_Start+0x14c>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2201      	movs	r2, #1
 80014d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f000 faa4 	bl	8001a24 <ADC_Enable>
 80014dc:	4603      	mov	r3, r0
 80014de:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80014e0:	7bfb      	ldrb	r3, [r7, #15]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f040 8087 	bne.w	80015f6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014f0:	f023 0301 	bic.w	r3, r3, #1
 80014f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a41      	ldr	r2, [pc, #260]	; (8001608 <HAL_ADC_Start+0x154>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d105      	bne.n	8001512 <HAL_ADC_Start+0x5e>
 8001506:	4b41      	ldr	r3, [pc, #260]	; (800160c <HAL_ADC_Start+0x158>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d115      	bne.n	800153e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001516:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001528:	2b00      	cmp	r3, #0
 800152a:	d026      	beq.n	800157a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001530:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001534:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800153c:	e01d      	b.n	800157a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001542:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a2f      	ldr	r2, [pc, #188]	; (800160c <HAL_ADC_Start+0x158>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d004      	beq.n	800155e <HAL_ADC_Start+0xaa>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a2b      	ldr	r2, [pc, #172]	; (8001608 <HAL_ADC_Start+0x154>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d10d      	bne.n	800157a <HAL_ADC_Start+0xc6>
 800155e:	4b2b      	ldr	r3, [pc, #172]	; (800160c <HAL_ADC_Start+0x158>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001566:	2b00      	cmp	r3, #0
 8001568:	d007      	beq.n	800157a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001572:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d006      	beq.n	8001594 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158a:	f023 0206 	bic.w	r2, r3, #6
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	62da      	str	r2, [r3, #44]	; 0x2c
 8001592:	e002      	b.n	800159a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f06f 0202 	mvn.w	r2, #2
 80015aa:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80015b6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80015ba:	d113      	bne.n	80015e4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80015c0:	4a11      	ldr	r2, [pc, #68]	; (8001608 <HAL_ADC_Start+0x154>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d105      	bne.n	80015d2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <HAL_ADC_Start+0x158>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d108      	bne.n	80015e4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	689a      	ldr	r2, [r3, #8]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80015e0:	609a      	str	r2, [r3, #8]
 80015e2:	e00c      	b.n	80015fe <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	689a      	ldr	r2, [r3, #8]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	e003      	b.n	80015fe <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80015fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001600:	4618      	mov	r0, r3
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40012800 	.word	0x40012800
 800160c:	40012400 	.word	0x40012400

08001610 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001610:	b590      	push	{r4, r7, lr}
 8001612:	b087      	sub	sp, #28
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800161e:	2300      	movs	r3, #0
 8001620:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001626:	f7ff fe2d 	bl	8001284 <HAL_GetTick>
 800162a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001636:	2b00      	cmp	r3, #0
 8001638:	d00b      	beq.n	8001652 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163e:	f043 0220 	orr.w	r2, r3, #32
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e0d3      	b.n	80017fa <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800165c:	2b00      	cmp	r3, #0
 800165e:	d131      	bne.n	80016c4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001666:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800166a:	2b00      	cmp	r3, #0
 800166c:	d12a      	bne.n	80016c4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800166e:	e021      	b.n	80016b4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001676:	d01d      	beq.n	80016b4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d007      	beq.n	800168e <HAL_ADC_PollForConversion+0x7e>
 800167e:	f7ff fe01 	bl	8001284 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	683a      	ldr	r2, [r7, #0]
 800168a:	429a      	cmp	r2, r3
 800168c:	d212      	bcs.n	80016b4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d10b      	bne.n	80016b4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a0:	f043 0204 	orr.w	r2, r3, #4
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e0a2      	b.n	80017fa <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d0d6      	beq.n	8001670 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80016c2:	e070      	b.n	80017a6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80016c4:	4b4f      	ldr	r3, [pc, #316]	; (8001804 <HAL_ADC_PollForConversion+0x1f4>)
 80016c6:	681c      	ldr	r4, [r3, #0]
 80016c8:	2002      	movs	r0, #2
 80016ca:	f001 f98f 	bl	80029ec <HAL_RCCEx_GetPeriphCLKFreq>
 80016ce:	4603      	mov	r3, r0
 80016d0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6919      	ldr	r1, [r3, #16]
 80016da:	4b4b      	ldr	r3, [pc, #300]	; (8001808 <HAL_ADC_PollForConversion+0x1f8>)
 80016dc:	400b      	ands	r3, r1
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d118      	bne.n	8001714 <HAL_ADC_PollForConversion+0x104>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	68d9      	ldr	r1, [r3, #12]
 80016e8:	4b48      	ldr	r3, [pc, #288]	; (800180c <HAL_ADC_PollForConversion+0x1fc>)
 80016ea:	400b      	ands	r3, r1
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d111      	bne.n	8001714 <HAL_ADC_PollForConversion+0x104>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6919      	ldr	r1, [r3, #16]
 80016f6:	4b46      	ldr	r3, [pc, #280]	; (8001810 <HAL_ADC_PollForConversion+0x200>)
 80016f8:	400b      	ands	r3, r1
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d108      	bne.n	8001710 <HAL_ADC_PollForConversion+0x100>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	68d9      	ldr	r1, [r3, #12]
 8001704:	4b43      	ldr	r3, [pc, #268]	; (8001814 <HAL_ADC_PollForConversion+0x204>)
 8001706:	400b      	ands	r3, r1
 8001708:	2b00      	cmp	r3, #0
 800170a:	d101      	bne.n	8001710 <HAL_ADC_PollForConversion+0x100>
 800170c:	2314      	movs	r3, #20
 800170e:	e020      	b.n	8001752 <HAL_ADC_PollForConversion+0x142>
 8001710:	2329      	movs	r3, #41	; 0x29
 8001712:	e01e      	b.n	8001752 <HAL_ADC_PollForConversion+0x142>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	6919      	ldr	r1, [r3, #16]
 800171a:	4b3d      	ldr	r3, [pc, #244]	; (8001810 <HAL_ADC_PollForConversion+0x200>)
 800171c:	400b      	ands	r3, r1
 800171e:	2b00      	cmp	r3, #0
 8001720:	d106      	bne.n	8001730 <HAL_ADC_PollForConversion+0x120>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	68d9      	ldr	r1, [r3, #12]
 8001728:	4b3a      	ldr	r3, [pc, #232]	; (8001814 <HAL_ADC_PollForConversion+0x204>)
 800172a:	400b      	ands	r3, r1
 800172c:	2b00      	cmp	r3, #0
 800172e:	d00d      	beq.n	800174c <HAL_ADC_PollForConversion+0x13c>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6919      	ldr	r1, [r3, #16]
 8001736:	4b38      	ldr	r3, [pc, #224]	; (8001818 <HAL_ADC_PollForConversion+0x208>)
 8001738:	400b      	ands	r3, r1
 800173a:	2b00      	cmp	r3, #0
 800173c:	d108      	bne.n	8001750 <HAL_ADC_PollForConversion+0x140>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68d9      	ldr	r1, [r3, #12]
 8001744:	4b34      	ldr	r3, [pc, #208]	; (8001818 <HAL_ADC_PollForConversion+0x208>)
 8001746:	400b      	ands	r3, r1
 8001748:	2b00      	cmp	r3, #0
 800174a:	d101      	bne.n	8001750 <HAL_ADC_PollForConversion+0x140>
 800174c:	2354      	movs	r3, #84	; 0x54
 800174e:	e000      	b.n	8001752 <HAL_ADC_PollForConversion+0x142>
 8001750:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001752:	fb02 f303 	mul.w	r3, r2, r3
 8001756:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001758:	e021      	b.n	800179e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001760:	d01a      	beq.n	8001798 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d007      	beq.n	8001778 <HAL_ADC_PollForConversion+0x168>
 8001768:	f7ff fd8c 	bl	8001284 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	429a      	cmp	r2, r3
 8001776:	d20f      	bcs.n	8001798 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	429a      	cmp	r2, r3
 800177e:	d90b      	bls.n	8001798 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001784:	f043 0204 	orr.w	r2, r3, #4
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e030      	b.n	80017fa <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	3301      	adds	r3, #1
 800179c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d8d9      	bhi.n	800175a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f06f 0212 	mvn.w	r2, #18
 80017ae:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80017c6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80017ca:	d115      	bne.n	80017f8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d111      	bne.n	80017f8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d105      	bne.n	80017f8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f0:	f043 0201 	orr.w	r2, r3, #1
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	371c      	adds	r7, #28
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd90      	pop	{r4, r7, pc}
 8001802:	bf00      	nop
 8001804:	20000000 	.word	0x20000000
 8001808:	24924924 	.word	0x24924924
 800180c:	00924924 	.word	0x00924924
 8001810:	12492492 	.word	0x12492492
 8001814:	00492492 	.word	0x00492492
 8001818:	00249249 	.word	0x00249249

0800181c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800182a:	4618      	mov	r0, r3
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr

08001834 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800183e:	2300      	movs	r3, #0
 8001840:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001842:	2300      	movs	r3, #0
 8001844:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800184c:	2b01      	cmp	r3, #1
 800184e:	d101      	bne.n	8001854 <HAL_ADC_ConfigChannel+0x20>
 8001850:	2302      	movs	r3, #2
 8001852:	e0dc      	b.n	8001a0e <HAL_ADC_ConfigChannel+0x1da>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2201      	movs	r2, #1
 8001858:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	2b06      	cmp	r3, #6
 8001862:	d81c      	bhi.n	800189e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685a      	ldr	r2, [r3, #4]
 800186e:	4613      	mov	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	4413      	add	r3, r2
 8001874:	3b05      	subs	r3, #5
 8001876:	221f      	movs	r2, #31
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	4019      	ands	r1, r3
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	6818      	ldr	r0, [r3, #0]
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685a      	ldr	r2, [r3, #4]
 8001888:	4613      	mov	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	3b05      	subs	r3, #5
 8001890:	fa00 f203 	lsl.w	r2, r0, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	430a      	orrs	r2, r1
 800189a:	635a      	str	r2, [r3, #52]	; 0x34
 800189c:	e03c      	b.n	8001918 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b0c      	cmp	r3, #12
 80018a4:	d81c      	bhi.n	80018e0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685a      	ldr	r2, [r3, #4]
 80018b0:	4613      	mov	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	3b23      	subs	r3, #35	; 0x23
 80018b8:	221f      	movs	r2, #31
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43db      	mvns	r3, r3
 80018c0:	4019      	ands	r1, r3
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	6818      	ldr	r0, [r3, #0]
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685a      	ldr	r2, [r3, #4]
 80018ca:	4613      	mov	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	3b23      	subs	r3, #35	; 0x23
 80018d2:	fa00 f203 	lsl.w	r2, r0, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	430a      	orrs	r2, r1
 80018dc:	631a      	str	r2, [r3, #48]	; 0x30
 80018de:	e01b      	b.n	8001918 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	4613      	mov	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4413      	add	r3, r2
 80018f0:	3b41      	subs	r3, #65	; 0x41
 80018f2:	221f      	movs	r2, #31
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	4019      	ands	r1, r3
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	6818      	ldr	r0, [r3, #0]
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685a      	ldr	r2, [r3, #4]
 8001904:	4613      	mov	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4413      	add	r3, r2
 800190a:	3b41      	subs	r3, #65	; 0x41
 800190c:	fa00 f203 	lsl.w	r2, r0, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	430a      	orrs	r2, r1
 8001916:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b09      	cmp	r3, #9
 800191e:	d91c      	bls.n	800195a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	68d9      	ldr	r1, [r3, #12]
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	4613      	mov	r3, r2
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	4413      	add	r3, r2
 8001930:	3b1e      	subs	r3, #30
 8001932:	2207      	movs	r2, #7
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	4019      	ands	r1, r3
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	6898      	ldr	r0, [r3, #8]
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	4613      	mov	r3, r2
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	4413      	add	r3, r2
 800194a:	3b1e      	subs	r3, #30
 800194c:	fa00 f203 	lsl.w	r2, r0, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	430a      	orrs	r2, r1
 8001956:	60da      	str	r2, [r3, #12]
 8001958:	e019      	b.n	800198e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6919      	ldr	r1, [r3, #16]
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	4613      	mov	r3, r2
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	4413      	add	r3, r2
 800196a:	2207      	movs	r2, #7
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	4019      	ands	r1, r3
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	6898      	ldr	r0, [r3, #8]
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4613      	mov	r3, r2
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	4413      	add	r3, r2
 8001982:	fa00 f203 	lsl.w	r2, r0, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	430a      	orrs	r2, r1
 800198c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2b10      	cmp	r3, #16
 8001994:	d003      	beq.n	800199e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800199a:	2b11      	cmp	r3, #17
 800199c:	d132      	bne.n	8001a04 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a1d      	ldr	r2, [pc, #116]	; (8001a18 <HAL_ADC_ConfigChannel+0x1e4>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d125      	bne.n	80019f4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d126      	bne.n	8001a04 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80019c4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2b10      	cmp	r3, #16
 80019cc:	d11a      	bne.n	8001a04 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019ce:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <HAL_ADC_ConfigChannel+0x1e8>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a13      	ldr	r2, [pc, #76]	; (8001a20 <HAL_ADC_ConfigChannel+0x1ec>)
 80019d4:	fba2 2303 	umull	r2, r3, r2, r3
 80019d8:	0c9a      	lsrs	r2, r3, #18
 80019da:	4613      	mov	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019e4:	e002      	b.n	80019ec <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	3b01      	subs	r3, #1
 80019ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1f9      	bne.n	80019e6 <HAL_ADC_ConfigChannel+0x1b2>
 80019f2:	e007      	b.n	8001a04 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f8:	f043 0220 	orr.w	r2, r3, #32
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3714      	adds	r7, #20
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr
 8001a18:	40012400 	.word	0x40012400
 8001a1c:	20000000 	.word	0x20000000
 8001a20:	431bde83 	.word	0x431bde83

08001a24 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d040      	beq.n	8001ac4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f042 0201 	orr.w	r2, r2, #1
 8001a50:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a52:	4b1f      	ldr	r3, [pc, #124]	; (8001ad0 <ADC_Enable+0xac>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a1f      	ldr	r2, [pc, #124]	; (8001ad4 <ADC_Enable+0xb0>)
 8001a58:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5c:	0c9b      	lsrs	r3, r3, #18
 8001a5e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a60:	e002      	b.n	8001a68 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	3b01      	subs	r3, #1
 8001a66:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f9      	bne.n	8001a62 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a6e:	f7ff fc09 	bl	8001284 <HAL_GetTick>
 8001a72:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a74:	e01f      	b.n	8001ab6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a76:	f7ff fc05 	bl	8001284 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d918      	bls.n	8001ab6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d011      	beq.n	8001ab6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a96:	f043 0210 	orr.w	r2, r3, #16
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa2:	f043 0201 	orr.w	r2, r3, #1
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e007      	b.n	8001ac6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d1d8      	bne.n	8001a76 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000000 	.word	0x20000000
 8001ad4:	431bde83 	.word	0x431bde83

08001ad8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d12e      	bne.n	8001b50 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 0201 	bic.w	r2, r2, #1
 8001b00:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b02:	f7ff fbbf 	bl	8001284 <HAL_GetTick>
 8001b06:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b08:	e01b      	b.n	8001b42 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b0a:	f7ff fbbb 	bl	8001284 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d914      	bls.n	8001b42 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d10d      	bne.n	8001b42 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2a:	f043 0210 	orr.w	r2, r3, #16
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b36:	f043 0201 	orr.w	r2, r3, #1
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e007      	b.n	8001b52 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d0dc      	beq.n	8001b0a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
	...

08001b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b72:	68ba      	ldr	r2, [r7, #8]
 8001b74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b78:	4013      	ands	r3, r2
 8001b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b8e:	4a04      	ldr	r2, [pc, #16]	; (8001ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	60d3      	str	r3, [r2, #12]
}
 8001b94:	bf00      	nop
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ba8:	4b04      	ldr	r3, [pc, #16]	; (8001bbc <__NVIC_GetPriorityGrouping+0x18>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	0a1b      	lsrs	r3, r3, #8
 8001bae:	f003 0307 	and.w	r3, r3, #7
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	6039      	str	r1, [r7, #0]
 8001bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	db0a      	blt.n	8001bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	490c      	ldr	r1, [pc, #48]	; (8001c0c <__NVIC_SetPriority+0x4c>)
 8001bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bde:	0112      	lsls	r2, r2, #4
 8001be0:	b2d2      	uxtb	r2, r2
 8001be2:	440b      	add	r3, r1
 8001be4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001be8:	e00a      	b.n	8001c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	4908      	ldr	r1, [pc, #32]	; (8001c10 <__NVIC_SetPriority+0x50>)
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	3b04      	subs	r3, #4
 8001bf8:	0112      	lsls	r2, r2, #4
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	761a      	strb	r2, [r3, #24]
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	e000e100 	.word	0xe000e100
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b089      	sub	sp, #36	; 0x24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f1c3 0307 	rsb	r3, r3, #7
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	bf28      	it	cs
 8001c32:	2304      	movcs	r3, #4
 8001c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	3304      	adds	r3, #4
 8001c3a:	2b06      	cmp	r3, #6
 8001c3c:	d902      	bls.n	8001c44 <NVIC_EncodePriority+0x30>
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3b03      	subs	r3, #3
 8001c42:	e000      	b.n	8001c46 <NVIC_EncodePriority+0x32>
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c48:	f04f 32ff 	mov.w	r2, #4294967295
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	43da      	mvns	r2, r3
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	401a      	ands	r2, r3
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	fa01 f303 	lsl.w	r3, r1, r3
 8001c66:	43d9      	mvns	r1, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c6c:	4313      	orrs	r3, r2
         );
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3724      	adds	r7, #36	; 0x24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr

08001c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c88:	d301      	bcc.n	8001c8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e00f      	b.n	8001cae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c8e:	4a0a      	ldr	r2, [pc, #40]	; (8001cb8 <SysTick_Config+0x40>)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3b01      	subs	r3, #1
 8001c94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c96:	210f      	movs	r1, #15
 8001c98:	f04f 30ff 	mov.w	r0, #4294967295
 8001c9c:	f7ff ff90 	bl	8001bc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ca0:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <SysTick_Config+0x40>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ca6:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <SysTick_Config+0x40>)
 8001ca8:	2207      	movs	r2, #7
 8001caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	e000e010 	.word	0xe000e010

08001cbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f7ff ff49 	bl	8001b5c <__NVIC_SetPriorityGrouping>
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b086      	sub	sp, #24
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	4603      	mov	r3, r0
 8001cda:	60b9      	str	r1, [r7, #8]
 8001cdc:	607a      	str	r2, [r7, #4]
 8001cde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce4:	f7ff ff5e 	bl	8001ba4 <__NVIC_GetPriorityGrouping>
 8001ce8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	68b9      	ldr	r1, [r7, #8]
 8001cee:	6978      	ldr	r0, [r7, #20]
 8001cf0:	f7ff ff90 	bl	8001c14 <NVIC_EncodePriority>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff ff5f 	bl	8001bc0 <__NVIC_SetPriority>
}
 8001d02:	bf00      	nop
 8001d04:	3718      	adds	r7, #24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff ffb0 	bl	8001c78 <SysTick_Config>
 8001d18:	4603      	mov	r3, r0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b08b      	sub	sp, #44	; 0x2c
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d32:	2300      	movs	r3, #0
 8001d34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d36:	e179      	b.n	800202c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d38:	2201      	movs	r2, #1
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	69fa      	ldr	r2, [r7, #28]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	f040 8168 	bne.w	8002026 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	4a96      	ldr	r2, [pc, #600]	; (8001fb4 <HAL_GPIO_Init+0x290>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d05e      	beq.n	8001e1e <HAL_GPIO_Init+0xfa>
 8001d60:	4a94      	ldr	r2, [pc, #592]	; (8001fb4 <HAL_GPIO_Init+0x290>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d875      	bhi.n	8001e52 <HAL_GPIO_Init+0x12e>
 8001d66:	4a94      	ldr	r2, [pc, #592]	; (8001fb8 <HAL_GPIO_Init+0x294>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d058      	beq.n	8001e1e <HAL_GPIO_Init+0xfa>
 8001d6c:	4a92      	ldr	r2, [pc, #584]	; (8001fb8 <HAL_GPIO_Init+0x294>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d86f      	bhi.n	8001e52 <HAL_GPIO_Init+0x12e>
 8001d72:	4a92      	ldr	r2, [pc, #584]	; (8001fbc <HAL_GPIO_Init+0x298>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d052      	beq.n	8001e1e <HAL_GPIO_Init+0xfa>
 8001d78:	4a90      	ldr	r2, [pc, #576]	; (8001fbc <HAL_GPIO_Init+0x298>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d869      	bhi.n	8001e52 <HAL_GPIO_Init+0x12e>
 8001d7e:	4a90      	ldr	r2, [pc, #576]	; (8001fc0 <HAL_GPIO_Init+0x29c>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d04c      	beq.n	8001e1e <HAL_GPIO_Init+0xfa>
 8001d84:	4a8e      	ldr	r2, [pc, #568]	; (8001fc0 <HAL_GPIO_Init+0x29c>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d863      	bhi.n	8001e52 <HAL_GPIO_Init+0x12e>
 8001d8a:	4a8e      	ldr	r2, [pc, #568]	; (8001fc4 <HAL_GPIO_Init+0x2a0>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d046      	beq.n	8001e1e <HAL_GPIO_Init+0xfa>
 8001d90:	4a8c      	ldr	r2, [pc, #560]	; (8001fc4 <HAL_GPIO_Init+0x2a0>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d85d      	bhi.n	8001e52 <HAL_GPIO_Init+0x12e>
 8001d96:	2b12      	cmp	r3, #18
 8001d98:	d82a      	bhi.n	8001df0 <HAL_GPIO_Init+0xcc>
 8001d9a:	2b12      	cmp	r3, #18
 8001d9c:	d859      	bhi.n	8001e52 <HAL_GPIO_Init+0x12e>
 8001d9e:	a201      	add	r2, pc, #4	; (adr r2, 8001da4 <HAL_GPIO_Init+0x80>)
 8001da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da4:	08001e1f 	.word	0x08001e1f
 8001da8:	08001df9 	.word	0x08001df9
 8001dac:	08001e0b 	.word	0x08001e0b
 8001db0:	08001e4d 	.word	0x08001e4d
 8001db4:	08001e53 	.word	0x08001e53
 8001db8:	08001e53 	.word	0x08001e53
 8001dbc:	08001e53 	.word	0x08001e53
 8001dc0:	08001e53 	.word	0x08001e53
 8001dc4:	08001e53 	.word	0x08001e53
 8001dc8:	08001e53 	.word	0x08001e53
 8001dcc:	08001e53 	.word	0x08001e53
 8001dd0:	08001e53 	.word	0x08001e53
 8001dd4:	08001e53 	.word	0x08001e53
 8001dd8:	08001e53 	.word	0x08001e53
 8001ddc:	08001e53 	.word	0x08001e53
 8001de0:	08001e53 	.word	0x08001e53
 8001de4:	08001e53 	.word	0x08001e53
 8001de8:	08001e01 	.word	0x08001e01
 8001dec:	08001e15 	.word	0x08001e15
 8001df0:	4a75      	ldr	r2, [pc, #468]	; (8001fc8 <HAL_GPIO_Init+0x2a4>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d013      	beq.n	8001e1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001df6:	e02c      	b.n	8001e52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	623b      	str	r3, [r7, #32]
          break;
 8001dfe:	e029      	b.n	8001e54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	3304      	adds	r3, #4
 8001e06:	623b      	str	r3, [r7, #32]
          break;
 8001e08:	e024      	b.n	8001e54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	3308      	adds	r3, #8
 8001e10:	623b      	str	r3, [r7, #32]
          break;
 8001e12:	e01f      	b.n	8001e54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	330c      	adds	r3, #12
 8001e1a:	623b      	str	r3, [r7, #32]
          break;
 8001e1c:	e01a      	b.n	8001e54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d102      	bne.n	8001e2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e26:	2304      	movs	r3, #4
 8001e28:	623b      	str	r3, [r7, #32]
          break;
 8001e2a:	e013      	b.n	8001e54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d105      	bne.n	8001e40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e34:	2308      	movs	r3, #8
 8001e36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69fa      	ldr	r2, [r7, #28]
 8001e3c:	611a      	str	r2, [r3, #16]
          break;
 8001e3e:	e009      	b.n	8001e54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e40:	2308      	movs	r3, #8
 8001e42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	69fa      	ldr	r2, [r7, #28]
 8001e48:	615a      	str	r2, [r3, #20]
          break;
 8001e4a:	e003      	b.n	8001e54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	623b      	str	r3, [r7, #32]
          break;
 8001e50:	e000      	b.n	8001e54 <HAL_GPIO_Init+0x130>
          break;
 8001e52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	2bff      	cmp	r3, #255	; 0xff
 8001e58:	d801      	bhi.n	8001e5e <HAL_GPIO_Init+0x13a>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	e001      	b.n	8001e62 <HAL_GPIO_Init+0x13e>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	3304      	adds	r3, #4
 8001e62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	2bff      	cmp	r3, #255	; 0xff
 8001e68:	d802      	bhi.n	8001e70 <HAL_GPIO_Init+0x14c>
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	e002      	b.n	8001e76 <HAL_GPIO_Init+0x152>
 8001e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e72:	3b08      	subs	r3, #8
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	210f      	movs	r1, #15
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	fa01 f303 	lsl.w	r3, r1, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	401a      	ands	r2, r3
 8001e88:	6a39      	ldr	r1, [r7, #32]
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e90:	431a      	orrs	r2, r3
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 80c1 	beq.w	8002026 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ea4:	4b49      	ldr	r3, [pc, #292]	; (8001fcc <HAL_GPIO_Init+0x2a8>)
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	4a48      	ldr	r2, [pc, #288]	; (8001fcc <HAL_GPIO_Init+0x2a8>)
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	6193      	str	r3, [r2, #24]
 8001eb0:	4b46      	ldr	r3, [pc, #280]	; (8001fcc <HAL_GPIO_Init+0x2a8>)
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ebc:	4a44      	ldr	r2, [pc, #272]	; (8001fd0 <HAL_GPIO_Init+0x2ac>)
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec0:	089b      	lsrs	r3, r3, #2
 8001ec2:	3302      	adds	r3, #2
 8001ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	f003 0303 	and.w	r3, r3, #3
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	220f      	movs	r2, #15
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	4013      	ands	r3, r2
 8001ede:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a3c      	ldr	r2, [pc, #240]	; (8001fd4 <HAL_GPIO_Init+0x2b0>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d01f      	beq.n	8001f28 <HAL_GPIO_Init+0x204>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a3b      	ldr	r2, [pc, #236]	; (8001fd8 <HAL_GPIO_Init+0x2b4>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d019      	beq.n	8001f24 <HAL_GPIO_Init+0x200>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a3a      	ldr	r2, [pc, #232]	; (8001fdc <HAL_GPIO_Init+0x2b8>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d013      	beq.n	8001f20 <HAL_GPIO_Init+0x1fc>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a39      	ldr	r2, [pc, #228]	; (8001fe0 <HAL_GPIO_Init+0x2bc>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d00d      	beq.n	8001f1c <HAL_GPIO_Init+0x1f8>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a38      	ldr	r2, [pc, #224]	; (8001fe4 <HAL_GPIO_Init+0x2c0>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d007      	beq.n	8001f18 <HAL_GPIO_Init+0x1f4>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a37      	ldr	r2, [pc, #220]	; (8001fe8 <HAL_GPIO_Init+0x2c4>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d101      	bne.n	8001f14 <HAL_GPIO_Init+0x1f0>
 8001f10:	2305      	movs	r3, #5
 8001f12:	e00a      	b.n	8001f2a <HAL_GPIO_Init+0x206>
 8001f14:	2306      	movs	r3, #6
 8001f16:	e008      	b.n	8001f2a <HAL_GPIO_Init+0x206>
 8001f18:	2304      	movs	r3, #4
 8001f1a:	e006      	b.n	8001f2a <HAL_GPIO_Init+0x206>
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e004      	b.n	8001f2a <HAL_GPIO_Init+0x206>
 8001f20:	2302      	movs	r3, #2
 8001f22:	e002      	b.n	8001f2a <HAL_GPIO_Init+0x206>
 8001f24:	2301      	movs	r3, #1
 8001f26:	e000      	b.n	8001f2a <HAL_GPIO_Init+0x206>
 8001f28:	2300      	movs	r3, #0
 8001f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f2c:	f002 0203 	and.w	r2, r2, #3
 8001f30:	0092      	lsls	r2, r2, #2
 8001f32:	4093      	lsls	r3, r2
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f3a:	4925      	ldr	r1, [pc, #148]	; (8001fd0 <HAL_GPIO_Init+0x2ac>)
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	089b      	lsrs	r3, r3, #2
 8001f40:	3302      	adds	r3, #2
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d006      	beq.n	8001f62 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f54:	4b25      	ldr	r3, [pc, #148]	; (8001fec <HAL_GPIO_Init+0x2c8>)
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	4924      	ldr	r1, [pc, #144]	; (8001fec <HAL_GPIO_Init+0x2c8>)
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	600b      	str	r3, [r1, #0]
 8001f60:	e006      	b.n	8001f70 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f62:	4b22      	ldr	r3, [pc, #136]	; (8001fec <HAL_GPIO_Init+0x2c8>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	4920      	ldr	r1, [pc, #128]	; (8001fec <HAL_GPIO_Init+0x2c8>)
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d006      	beq.n	8001f8a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f7c:	4b1b      	ldr	r3, [pc, #108]	; (8001fec <HAL_GPIO_Init+0x2c8>)
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	491a      	ldr	r1, [pc, #104]	; (8001fec <HAL_GPIO_Init+0x2c8>)
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	604b      	str	r3, [r1, #4]
 8001f88:	e006      	b.n	8001f98 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f8a:	4b18      	ldr	r3, [pc, #96]	; (8001fec <HAL_GPIO_Init+0x2c8>)
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	43db      	mvns	r3, r3
 8001f92:	4916      	ldr	r1, [pc, #88]	; (8001fec <HAL_GPIO_Init+0x2c8>)
 8001f94:	4013      	ands	r3, r2
 8001f96:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d025      	beq.n	8001ff0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fa4:	4b11      	ldr	r3, [pc, #68]	; (8001fec <HAL_GPIO_Init+0x2c8>)
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	4910      	ldr	r1, [pc, #64]	; (8001fec <HAL_GPIO_Init+0x2c8>)
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	608b      	str	r3, [r1, #8]
 8001fb0:	e025      	b.n	8001ffe <HAL_GPIO_Init+0x2da>
 8001fb2:	bf00      	nop
 8001fb4:	10320000 	.word	0x10320000
 8001fb8:	10310000 	.word	0x10310000
 8001fbc:	10220000 	.word	0x10220000
 8001fc0:	10210000 	.word	0x10210000
 8001fc4:	10120000 	.word	0x10120000
 8001fc8:	10110000 	.word	0x10110000
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	40010000 	.word	0x40010000
 8001fd4:	40010800 	.word	0x40010800
 8001fd8:	40010c00 	.word	0x40010c00
 8001fdc:	40011000 	.word	0x40011000
 8001fe0:	40011400 	.word	0x40011400
 8001fe4:	40011800 	.word	0x40011800
 8001fe8:	40011c00 	.word	0x40011c00
 8001fec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ff0:	4b15      	ldr	r3, [pc, #84]	; (8002048 <HAL_GPIO_Init+0x324>)
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	4913      	ldr	r1, [pc, #76]	; (8002048 <HAL_GPIO_Init+0x324>)
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d006      	beq.n	8002018 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800200a:	4b0f      	ldr	r3, [pc, #60]	; (8002048 <HAL_GPIO_Init+0x324>)
 800200c:	68da      	ldr	r2, [r3, #12]
 800200e:	490e      	ldr	r1, [pc, #56]	; (8002048 <HAL_GPIO_Init+0x324>)
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	4313      	orrs	r3, r2
 8002014:	60cb      	str	r3, [r1, #12]
 8002016:	e006      	b.n	8002026 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002018:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <HAL_GPIO_Init+0x324>)
 800201a:	68da      	ldr	r2, [r3, #12]
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	43db      	mvns	r3, r3
 8002020:	4909      	ldr	r1, [pc, #36]	; (8002048 <HAL_GPIO_Init+0x324>)
 8002022:	4013      	ands	r3, r2
 8002024:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	3301      	adds	r3, #1
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	fa22 f303 	lsr.w	r3, r2, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	f47f ae7e 	bne.w	8001d38 <HAL_GPIO_Init+0x14>
  }
}
 800203c:	bf00      	nop
 800203e:	bf00      	nop
 8002040:	372c      	adds	r7, #44	; 0x2c
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr
 8002048:	40010400 	.word	0x40010400

0800204c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e272      	b.n	8002544 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 8087 	beq.w	800217a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800206c:	4b92      	ldr	r3, [pc, #584]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 030c 	and.w	r3, r3, #12
 8002074:	2b04      	cmp	r3, #4
 8002076:	d00c      	beq.n	8002092 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002078:	4b8f      	ldr	r3, [pc, #572]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f003 030c 	and.w	r3, r3, #12
 8002080:	2b08      	cmp	r3, #8
 8002082:	d112      	bne.n	80020aa <HAL_RCC_OscConfig+0x5e>
 8002084:	4b8c      	ldr	r3, [pc, #560]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800208c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002090:	d10b      	bne.n	80020aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002092:	4b89      	ldr	r3, [pc, #548]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d06c      	beq.n	8002178 <HAL_RCC_OscConfig+0x12c>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d168      	bne.n	8002178 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e24c      	b.n	8002544 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020b2:	d106      	bne.n	80020c2 <HAL_RCC_OscConfig+0x76>
 80020b4:	4b80      	ldr	r3, [pc, #512]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a7f      	ldr	r2, [pc, #508]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80020ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020be:	6013      	str	r3, [r2, #0]
 80020c0:	e02e      	b.n	8002120 <HAL_RCC_OscConfig+0xd4>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10c      	bne.n	80020e4 <HAL_RCC_OscConfig+0x98>
 80020ca:	4b7b      	ldr	r3, [pc, #492]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a7a      	ldr	r2, [pc, #488]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80020d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	4b78      	ldr	r3, [pc, #480]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a77      	ldr	r2, [pc, #476]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	e01d      	b.n	8002120 <HAL_RCC_OscConfig+0xd4>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020ec:	d10c      	bne.n	8002108 <HAL_RCC_OscConfig+0xbc>
 80020ee:	4b72      	ldr	r3, [pc, #456]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a71      	ldr	r2, [pc, #452]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80020f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	4b6f      	ldr	r3, [pc, #444]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a6e      	ldr	r2, [pc, #440]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 8002100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002104:	6013      	str	r3, [r2, #0]
 8002106:	e00b      	b.n	8002120 <HAL_RCC_OscConfig+0xd4>
 8002108:	4b6b      	ldr	r3, [pc, #428]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a6a      	ldr	r2, [pc, #424]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 800210e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002112:	6013      	str	r3, [r2, #0]
 8002114:	4b68      	ldr	r3, [pc, #416]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a67      	ldr	r2, [pc, #412]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 800211a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800211e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d013      	beq.n	8002150 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002128:	f7ff f8ac 	bl	8001284 <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002130:	f7ff f8a8 	bl	8001284 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b64      	cmp	r3, #100	; 0x64
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e200      	b.n	8002544 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002142:	4b5d      	ldr	r3, [pc, #372]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d0f0      	beq.n	8002130 <HAL_RCC_OscConfig+0xe4>
 800214e:	e014      	b.n	800217a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002150:	f7ff f898 	bl	8001284 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002158:	f7ff f894 	bl	8001284 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b64      	cmp	r3, #100	; 0x64
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e1ec      	b.n	8002544 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800216a:	4b53      	ldr	r3, [pc, #332]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f0      	bne.n	8002158 <HAL_RCC_OscConfig+0x10c>
 8002176:	e000      	b.n	800217a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002178:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d063      	beq.n	800224e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002186:	4b4c      	ldr	r3, [pc, #304]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f003 030c 	and.w	r3, r3, #12
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00b      	beq.n	80021aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002192:	4b49      	ldr	r3, [pc, #292]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f003 030c 	and.w	r3, r3, #12
 800219a:	2b08      	cmp	r3, #8
 800219c:	d11c      	bne.n	80021d8 <HAL_RCC_OscConfig+0x18c>
 800219e:	4b46      	ldr	r3, [pc, #280]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d116      	bne.n	80021d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021aa:	4b43      	ldr	r3, [pc, #268]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d005      	beq.n	80021c2 <HAL_RCC_OscConfig+0x176>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d001      	beq.n	80021c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e1c0      	b.n	8002544 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c2:	4b3d      	ldr	r3, [pc, #244]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	4939      	ldr	r1, [pc, #228]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021d6:	e03a      	b.n	800224e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d020      	beq.n	8002222 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021e0:	4b36      	ldr	r3, [pc, #216]	; (80022bc <HAL_RCC_OscConfig+0x270>)
 80021e2:	2201      	movs	r2, #1
 80021e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e6:	f7ff f84d 	bl	8001284 <HAL_GetTick>
 80021ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ec:	e008      	b.n	8002200 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ee:	f7ff f849 	bl	8001284 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e1a1      	b.n	8002544 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002200:	4b2d      	ldr	r3, [pc, #180]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d0f0      	beq.n	80021ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800220c:	4b2a      	ldr	r3, [pc, #168]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	4927      	ldr	r1, [pc, #156]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 800221c:	4313      	orrs	r3, r2
 800221e:	600b      	str	r3, [r1, #0]
 8002220:	e015      	b.n	800224e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002222:	4b26      	ldr	r3, [pc, #152]	; (80022bc <HAL_RCC_OscConfig+0x270>)
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002228:	f7ff f82c 	bl	8001284 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002230:	f7ff f828 	bl	8001284 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e180      	b.n	8002544 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002242:	4b1d      	ldr	r3, [pc, #116]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1f0      	bne.n	8002230 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0308 	and.w	r3, r3, #8
 8002256:	2b00      	cmp	r3, #0
 8002258:	d03a      	beq.n	80022d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d019      	beq.n	8002296 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002262:	4b17      	ldr	r3, [pc, #92]	; (80022c0 <HAL_RCC_OscConfig+0x274>)
 8002264:	2201      	movs	r2, #1
 8002266:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002268:	f7ff f80c 	bl	8001284 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002270:	f7ff f808 	bl	8001284 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e160      	b.n	8002544 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002282:	4b0d      	ldr	r3, [pc, #52]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0f0      	beq.n	8002270 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800228e:	2001      	movs	r0, #1
 8002290:	f000 fad8 	bl	8002844 <RCC_Delay>
 8002294:	e01c      	b.n	80022d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002296:	4b0a      	ldr	r3, [pc, #40]	; (80022c0 <HAL_RCC_OscConfig+0x274>)
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800229c:	f7fe fff2 	bl	8001284 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022a2:	e00f      	b.n	80022c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022a4:	f7fe ffee 	bl	8001284 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d908      	bls.n	80022c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e146      	b.n	8002544 <HAL_RCC_OscConfig+0x4f8>
 80022b6:	bf00      	nop
 80022b8:	40021000 	.word	0x40021000
 80022bc:	42420000 	.word	0x42420000
 80022c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022c4:	4b92      	ldr	r3, [pc, #584]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d1e9      	bne.n	80022a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0304 	and.w	r3, r3, #4
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f000 80a6 	beq.w	800242a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022de:	2300      	movs	r3, #0
 80022e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022e2:	4b8b      	ldr	r3, [pc, #556]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10d      	bne.n	800230a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ee:	4b88      	ldr	r3, [pc, #544]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	4a87      	ldr	r2, [pc, #540]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 80022f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022f8:	61d3      	str	r3, [r2, #28]
 80022fa:	4b85      	ldr	r3, [pc, #532]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002302:	60bb      	str	r3, [r7, #8]
 8002304:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002306:	2301      	movs	r3, #1
 8002308:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800230a:	4b82      	ldr	r3, [pc, #520]	; (8002514 <HAL_RCC_OscConfig+0x4c8>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002312:	2b00      	cmp	r3, #0
 8002314:	d118      	bne.n	8002348 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002316:	4b7f      	ldr	r3, [pc, #508]	; (8002514 <HAL_RCC_OscConfig+0x4c8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a7e      	ldr	r2, [pc, #504]	; (8002514 <HAL_RCC_OscConfig+0x4c8>)
 800231c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002320:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002322:	f7fe ffaf 	bl	8001284 <HAL_GetTick>
 8002326:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002328:	e008      	b.n	800233c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800232a:	f7fe ffab 	bl	8001284 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b64      	cmp	r3, #100	; 0x64
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e103      	b.n	8002544 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800233c:	4b75      	ldr	r3, [pc, #468]	; (8002514 <HAL_RCC_OscConfig+0x4c8>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0f0      	beq.n	800232a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d106      	bne.n	800235e <HAL_RCC_OscConfig+0x312>
 8002350:	4b6f      	ldr	r3, [pc, #444]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	4a6e      	ldr	r2, [pc, #440]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 8002356:	f043 0301 	orr.w	r3, r3, #1
 800235a:	6213      	str	r3, [r2, #32]
 800235c:	e02d      	b.n	80023ba <HAL_RCC_OscConfig+0x36e>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d10c      	bne.n	8002380 <HAL_RCC_OscConfig+0x334>
 8002366:	4b6a      	ldr	r3, [pc, #424]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	4a69      	ldr	r2, [pc, #420]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 800236c:	f023 0301 	bic.w	r3, r3, #1
 8002370:	6213      	str	r3, [r2, #32]
 8002372:	4b67      	ldr	r3, [pc, #412]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 8002374:	6a1b      	ldr	r3, [r3, #32]
 8002376:	4a66      	ldr	r2, [pc, #408]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 8002378:	f023 0304 	bic.w	r3, r3, #4
 800237c:	6213      	str	r3, [r2, #32]
 800237e:	e01c      	b.n	80023ba <HAL_RCC_OscConfig+0x36e>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	2b05      	cmp	r3, #5
 8002386:	d10c      	bne.n	80023a2 <HAL_RCC_OscConfig+0x356>
 8002388:	4b61      	ldr	r3, [pc, #388]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	4a60      	ldr	r2, [pc, #384]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 800238e:	f043 0304 	orr.w	r3, r3, #4
 8002392:	6213      	str	r3, [r2, #32]
 8002394:	4b5e      	ldr	r3, [pc, #376]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	4a5d      	ldr	r2, [pc, #372]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 800239a:	f043 0301 	orr.w	r3, r3, #1
 800239e:	6213      	str	r3, [r2, #32]
 80023a0:	e00b      	b.n	80023ba <HAL_RCC_OscConfig+0x36e>
 80023a2:	4b5b      	ldr	r3, [pc, #364]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	4a5a      	ldr	r2, [pc, #360]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 80023a8:	f023 0301 	bic.w	r3, r3, #1
 80023ac:	6213      	str	r3, [r2, #32]
 80023ae:	4b58      	ldr	r3, [pc, #352]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	4a57      	ldr	r2, [pc, #348]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 80023b4:	f023 0304 	bic.w	r3, r3, #4
 80023b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d015      	beq.n	80023ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c2:	f7fe ff5f 	bl	8001284 <HAL_GetTick>
 80023c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c8:	e00a      	b.n	80023e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ca:	f7fe ff5b 	bl	8001284 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d8:	4293      	cmp	r3, r2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e0b1      	b.n	8002544 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e0:	4b4b      	ldr	r3, [pc, #300]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0ee      	beq.n	80023ca <HAL_RCC_OscConfig+0x37e>
 80023ec:	e014      	b.n	8002418 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ee:	f7fe ff49 	bl	8001284 <HAL_GetTick>
 80023f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023f4:	e00a      	b.n	800240c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023f6:	f7fe ff45 	bl	8001284 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	f241 3288 	movw	r2, #5000	; 0x1388
 8002404:	4293      	cmp	r3, r2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e09b      	b.n	8002544 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800240c:	4b40      	ldr	r3, [pc, #256]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1ee      	bne.n	80023f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002418:	7dfb      	ldrb	r3, [r7, #23]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d105      	bne.n	800242a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800241e:	4b3c      	ldr	r3, [pc, #240]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	4a3b      	ldr	r2, [pc, #236]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 8002424:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002428:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	2b00      	cmp	r3, #0
 8002430:	f000 8087 	beq.w	8002542 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002434:	4b36      	ldr	r3, [pc, #216]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f003 030c 	and.w	r3, r3, #12
 800243c:	2b08      	cmp	r3, #8
 800243e:	d061      	beq.n	8002504 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	69db      	ldr	r3, [r3, #28]
 8002444:	2b02      	cmp	r3, #2
 8002446:	d146      	bne.n	80024d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002448:	4b33      	ldr	r3, [pc, #204]	; (8002518 <HAL_RCC_OscConfig+0x4cc>)
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244e:	f7fe ff19 	bl	8001284 <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002456:	f7fe ff15 	bl	8001284 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e06d      	b.n	8002544 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002468:	4b29      	ldr	r3, [pc, #164]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1f0      	bne.n	8002456 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800247c:	d108      	bne.n	8002490 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800247e:	4b24      	ldr	r3, [pc, #144]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	4921      	ldr	r1, [pc, #132]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 800248c:	4313      	orrs	r3, r2
 800248e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002490:	4b1f      	ldr	r3, [pc, #124]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a19      	ldr	r1, [r3, #32]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a0:	430b      	orrs	r3, r1
 80024a2:	491b      	ldr	r1, [pc, #108]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024a8:	4b1b      	ldr	r3, [pc, #108]	; (8002518 <HAL_RCC_OscConfig+0x4cc>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ae:	f7fe fee9 	bl	8001284 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b6:	f7fe fee5 	bl	8001284 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e03d      	b.n	8002544 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024c8:	4b11      	ldr	r3, [pc, #68]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x46a>
 80024d4:	e035      	b.n	8002542 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d6:	4b10      	ldr	r3, [pc, #64]	; (8002518 <HAL_RCC_OscConfig+0x4cc>)
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024dc:	f7fe fed2 	bl	8001284 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e4:	f7fe fece 	bl	8001284 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e026      	b.n	8002544 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f6:	4b06      	ldr	r3, [pc, #24]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f0      	bne.n	80024e4 <HAL_RCC_OscConfig+0x498>
 8002502:	e01e      	b.n	8002542 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d107      	bne.n	800251c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e019      	b.n	8002544 <HAL_RCC_OscConfig+0x4f8>
 8002510:	40021000 	.word	0x40021000
 8002514:	40007000 	.word	0x40007000
 8002518:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800251c:	4b0b      	ldr	r3, [pc, #44]	; (800254c <HAL_RCC_OscConfig+0x500>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	429a      	cmp	r2, r3
 800252e:	d106      	bne.n	800253e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800253a:	429a      	cmp	r2, r3
 800253c:	d001      	beq.n	8002542 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e000      	b.n	8002544 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3718      	adds	r7, #24
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40021000 	.word	0x40021000

08002550 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e0d0      	b.n	8002706 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002564:	4b6a      	ldr	r3, [pc, #424]	; (8002710 <HAL_RCC_ClockConfig+0x1c0>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	429a      	cmp	r2, r3
 8002570:	d910      	bls.n	8002594 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002572:	4b67      	ldr	r3, [pc, #412]	; (8002710 <HAL_RCC_ClockConfig+0x1c0>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f023 0207 	bic.w	r2, r3, #7
 800257a:	4965      	ldr	r1, [pc, #404]	; (8002710 <HAL_RCC_ClockConfig+0x1c0>)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	4313      	orrs	r3, r2
 8002580:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002582:	4b63      	ldr	r3, [pc, #396]	; (8002710 <HAL_RCC_ClockConfig+0x1c0>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	429a      	cmp	r2, r3
 800258e:	d001      	beq.n	8002594 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e0b8      	b.n	8002706 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d020      	beq.n	80025e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d005      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025ac:	4b59      	ldr	r3, [pc, #356]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	4a58      	ldr	r2, [pc, #352]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80025b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0308 	and.w	r3, r3, #8
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d005      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025c4:	4b53      	ldr	r3, [pc, #332]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	4a52      	ldr	r2, [pc, #328]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80025ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025d0:	4b50      	ldr	r3, [pc, #320]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	494d      	ldr	r1, [pc, #308]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d040      	beq.n	8002670 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d107      	bne.n	8002606 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f6:	4b47      	ldr	r3, [pc, #284]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d115      	bne.n	800262e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e07f      	b.n	8002706 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b02      	cmp	r3, #2
 800260c:	d107      	bne.n	800261e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800260e:	4b41      	ldr	r3, [pc, #260]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d109      	bne.n	800262e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e073      	b.n	8002706 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800261e:	4b3d      	ldr	r3, [pc, #244]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e06b      	b.n	8002706 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800262e:	4b39      	ldr	r3, [pc, #228]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f023 0203 	bic.w	r2, r3, #3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	4936      	ldr	r1, [pc, #216]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 800263c:	4313      	orrs	r3, r2
 800263e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002640:	f7fe fe20 	bl	8001284 <HAL_GetTick>
 8002644:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002646:	e00a      	b.n	800265e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002648:	f7fe fe1c 	bl	8001284 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	f241 3288 	movw	r2, #5000	; 0x1388
 8002656:	4293      	cmp	r3, r2
 8002658:	d901      	bls.n	800265e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e053      	b.n	8002706 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800265e:	4b2d      	ldr	r3, [pc, #180]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f003 020c 	and.w	r2, r3, #12
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	429a      	cmp	r2, r3
 800266e:	d1eb      	bne.n	8002648 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002670:	4b27      	ldr	r3, [pc, #156]	; (8002710 <HAL_RCC_ClockConfig+0x1c0>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	429a      	cmp	r2, r3
 800267c:	d210      	bcs.n	80026a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267e:	4b24      	ldr	r3, [pc, #144]	; (8002710 <HAL_RCC_ClockConfig+0x1c0>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f023 0207 	bic.w	r2, r3, #7
 8002686:	4922      	ldr	r1, [pc, #136]	; (8002710 <HAL_RCC_ClockConfig+0x1c0>)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	4313      	orrs	r3, r2
 800268c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800268e:	4b20      	ldr	r3, [pc, #128]	; (8002710 <HAL_RCC_ClockConfig+0x1c0>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	429a      	cmp	r2, r3
 800269a:	d001      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e032      	b.n	8002706 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d008      	beq.n	80026be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026ac:	4b19      	ldr	r3, [pc, #100]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	4916      	ldr	r1, [pc, #88]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d009      	beq.n	80026de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026ca:	4b12      	ldr	r3, [pc, #72]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	490e      	ldr	r1, [pc, #56]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026de:	f000 f821 	bl	8002724 <HAL_RCC_GetSysClockFreq>
 80026e2:	4602      	mov	r2, r0
 80026e4:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	091b      	lsrs	r3, r3, #4
 80026ea:	f003 030f 	and.w	r3, r3, #15
 80026ee:	490a      	ldr	r1, [pc, #40]	; (8002718 <HAL_RCC_ClockConfig+0x1c8>)
 80026f0:	5ccb      	ldrb	r3, [r1, r3]
 80026f2:	fa22 f303 	lsr.w	r3, r2, r3
 80026f6:	4a09      	ldr	r2, [pc, #36]	; (800271c <HAL_RCC_ClockConfig+0x1cc>)
 80026f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026fa:	4b09      	ldr	r3, [pc, #36]	; (8002720 <HAL_RCC_ClockConfig+0x1d0>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7fe fd7e 	bl	8001200 <HAL_InitTick>

  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40022000 	.word	0x40022000
 8002714:	40021000 	.word	0x40021000
 8002718:	08005c24 	.word	0x08005c24
 800271c:	20000000 	.word	0x20000000
 8002720:	20000004 	.word	0x20000004

08002724 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002724:	b490      	push	{r4, r7}
 8002726:	b08a      	sub	sp, #40	; 0x28
 8002728:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800272a:	4b29      	ldr	r3, [pc, #164]	; (80027d0 <HAL_RCC_GetSysClockFreq+0xac>)
 800272c:	1d3c      	adds	r4, r7, #4
 800272e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002730:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002734:	f240 2301 	movw	r3, #513	; 0x201
 8002738:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800273a:	2300      	movs	r3, #0
 800273c:	61fb      	str	r3, [r7, #28]
 800273e:	2300      	movs	r3, #0
 8002740:	61bb      	str	r3, [r7, #24]
 8002742:	2300      	movs	r3, #0
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
 8002746:	2300      	movs	r3, #0
 8002748:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800274a:	2300      	movs	r3, #0
 800274c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800274e:	4b21      	ldr	r3, [pc, #132]	; (80027d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f003 030c 	and.w	r3, r3, #12
 800275a:	2b04      	cmp	r3, #4
 800275c:	d002      	beq.n	8002764 <HAL_RCC_GetSysClockFreq+0x40>
 800275e:	2b08      	cmp	r3, #8
 8002760:	d003      	beq.n	800276a <HAL_RCC_GetSysClockFreq+0x46>
 8002762:	e02b      	b.n	80027bc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002764:	4b1c      	ldr	r3, [pc, #112]	; (80027d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002766:	623b      	str	r3, [r7, #32]
      break;
 8002768:	e02b      	b.n	80027c2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	0c9b      	lsrs	r3, r3, #18
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	3328      	adds	r3, #40	; 0x28
 8002774:	443b      	add	r3, r7
 8002776:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800277a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d012      	beq.n	80027ac <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002786:	4b13      	ldr	r3, [pc, #76]	; (80027d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	0c5b      	lsrs	r3, r3, #17
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	3328      	adds	r3, #40	; 0x28
 8002792:	443b      	add	r3, r7
 8002794:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002798:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	4a0e      	ldr	r2, [pc, #56]	; (80027d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800279e:	fb03 f202 	mul.w	r2, r3, r2
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a8:	627b      	str	r3, [r7, #36]	; 0x24
 80027aa:	e004      	b.n	80027b6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	4a0b      	ldr	r2, [pc, #44]	; (80027dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80027b0:	fb02 f303 	mul.w	r3, r2, r3
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	623b      	str	r3, [r7, #32]
      break;
 80027ba:	e002      	b.n	80027c2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027bc:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027be:	623b      	str	r3, [r7, #32]
      break;
 80027c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027c2:	6a3b      	ldr	r3, [r7, #32]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3728      	adds	r7, #40	; 0x28
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc90      	pop	{r4, r7}
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	08005c04 	.word	0x08005c04
 80027d4:	40021000 	.word	0x40021000
 80027d8:	007a1200 	.word	0x007a1200
 80027dc:	003d0900 	.word	0x003d0900

080027e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027e4:	4b02      	ldr	r3, [pc, #8]	; (80027f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80027e6:	681b      	ldr	r3, [r3, #0]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr
 80027f0:	20000000 	.word	0x20000000

080027f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027f8:	f7ff fff2 	bl	80027e0 <HAL_RCC_GetHCLKFreq>
 80027fc:	4602      	mov	r2, r0
 80027fe:	4b05      	ldr	r3, [pc, #20]	; (8002814 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	0a1b      	lsrs	r3, r3, #8
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	4903      	ldr	r1, [pc, #12]	; (8002818 <HAL_RCC_GetPCLK1Freq+0x24>)
 800280a:	5ccb      	ldrb	r3, [r1, r3]
 800280c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002810:	4618      	mov	r0, r3
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40021000 	.word	0x40021000
 8002818:	08005c34 	.word	0x08005c34

0800281c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002820:	f7ff ffde 	bl	80027e0 <HAL_RCC_GetHCLKFreq>
 8002824:	4602      	mov	r2, r0
 8002826:	4b05      	ldr	r3, [pc, #20]	; (800283c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	0adb      	lsrs	r3, r3, #11
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	4903      	ldr	r1, [pc, #12]	; (8002840 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002832:	5ccb      	ldrb	r3, [r1, r3]
 8002834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002838:	4618      	mov	r0, r3
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40021000 	.word	0x40021000
 8002840:	08005c34 	.word	0x08005c34

08002844 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800284c:	4b0a      	ldr	r3, [pc, #40]	; (8002878 <RCC_Delay+0x34>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a0a      	ldr	r2, [pc, #40]	; (800287c <RCC_Delay+0x38>)
 8002852:	fba2 2303 	umull	r2, r3, r2, r3
 8002856:	0a5b      	lsrs	r3, r3, #9
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	fb02 f303 	mul.w	r3, r2, r3
 800285e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002860:	bf00      	nop
  }
  while (Delay --);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	1e5a      	subs	r2, r3, #1
 8002866:	60fa      	str	r2, [r7, #12]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1f9      	bne.n	8002860 <RCC_Delay+0x1c>
}
 800286c:	bf00      	nop
 800286e:	bf00      	nop
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr
 8002878:	20000000 	.word	0x20000000
 800287c:	10624dd3 	.word	0x10624dd3

08002880 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	613b      	str	r3, [r7, #16]
 800288c:	2300      	movs	r3, #0
 800288e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b00      	cmp	r3, #0
 800289a:	d07d      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800289c:	2300      	movs	r3, #0
 800289e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028a0:	4b4f      	ldr	r3, [pc, #316]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028a2:	69db      	ldr	r3, [r3, #28]
 80028a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10d      	bne.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ac:	4b4c      	ldr	r3, [pc, #304]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	4a4b      	ldr	r2, [pc, #300]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028b6:	61d3      	str	r3, [r2, #28]
 80028b8:	4b49      	ldr	r3, [pc, #292]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ba:	69db      	ldr	r3, [r3, #28]
 80028bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c0:	60bb      	str	r3, [r7, #8]
 80028c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028c4:	2301      	movs	r3, #1
 80028c6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c8:	4b46      	ldr	r3, [pc, #280]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d118      	bne.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028d4:	4b43      	ldr	r3, [pc, #268]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a42      	ldr	r2, [pc, #264]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028e0:	f7fe fcd0 	bl	8001284 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e6:	e008      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e8:	f7fe fccc 	bl	8001284 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b64      	cmp	r3, #100	; 0x64
 80028f4:	d901      	bls.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e06d      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028fa:	4b3a      	ldr	r3, [pc, #232]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0f0      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002906:	4b36      	ldr	r3, [pc, #216]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800290e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d02e      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	429a      	cmp	r2, r3
 8002922:	d027      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002924:	4b2e      	ldr	r3, [pc, #184]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800292c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800292e:	4b2e      	ldr	r3, [pc, #184]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002930:	2201      	movs	r2, #1
 8002932:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002934:	4b2c      	ldr	r3, [pc, #176]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800293a:	4a29      	ldr	r2, [pc, #164]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	d014      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294a:	f7fe fc9b 	bl	8001284 <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002950:	e00a      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002952:	f7fe fc97 	bl	8001284 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002960:	4293      	cmp	r3, r2
 8002962:	d901      	bls.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e036      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002968:	4b1d      	ldr	r3, [pc, #116]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0ee      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002974:	4b1a      	ldr	r3, [pc, #104]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	4917      	ldr	r1, [pc, #92]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002982:	4313      	orrs	r3, r2
 8002984:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002986:	7dfb      	ldrb	r3, [r7, #23]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d105      	bne.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800298c:	4b14      	ldr	r3, [pc, #80]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800298e:	69db      	ldr	r3, [r3, #28]
 8002990:	4a13      	ldr	r2, [pc, #76]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002992:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002996:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d008      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029a4:	4b0e      	ldr	r3, [pc, #56]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	490b      	ldr	r1, [pc, #44]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0310 	and.w	r3, r3, #16
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d008      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029c2:	4b07      	ldr	r3, [pc, #28]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	4904      	ldr	r1, [pc, #16]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3718      	adds	r7, #24
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40007000 	.word	0x40007000
 80029e8:	42420440 	.word	0x42420440

080029ec <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80029ec:	b590      	push	{r4, r7, lr}
 80029ee:	b08d      	sub	sp, #52	; 0x34
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80029f4:	4b6a      	ldr	r3, [pc, #424]	; (8002ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 80029f6:	f107 040c 	add.w	r4, r7, #12
 80029fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a00:	f240 2301 	movw	r3, #513	; 0x201
 8002a04:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	627b      	str	r3, [r7, #36]	; 0x24
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a0e:	2300      	movs	r3, #0
 8002a10:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002a12:	2300      	movs	r3, #0
 8002a14:	61fb      	str	r3, [r7, #28]
 8002a16:	2300      	movs	r3, #0
 8002a18:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	2b0f      	cmp	r3, #15
 8002a20:	f200 80b4 	bhi.w	8002b8c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 8002a24:	a201      	add	r2, pc, #4	; (adr r2, 8002a2c <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 8002a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a2a:	bf00      	nop
 8002a2c:	08002b0b 	.word	0x08002b0b
 8002a30:	08002b71 	.word	0x08002b71
 8002a34:	08002b8d 	.word	0x08002b8d
 8002a38:	08002afb 	.word	0x08002afb
 8002a3c:	08002b8d 	.word	0x08002b8d
 8002a40:	08002b8d 	.word	0x08002b8d
 8002a44:	08002b8d 	.word	0x08002b8d
 8002a48:	08002b03 	.word	0x08002b03
 8002a4c:	08002b8d 	.word	0x08002b8d
 8002a50:	08002b8d 	.word	0x08002b8d
 8002a54:	08002b8d 	.word	0x08002b8d
 8002a58:	08002b8d 	.word	0x08002b8d
 8002a5c:	08002b8d 	.word	0x08002b8d
 8002a60:	08002b8d 	.word	0x08002b8d
 8002a64:	08002b8d 	.word	0x08002b8d
 8002a68:	08002a6d 	.word	0x08002a6d
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8002a6c:	4b4d      	ldr	r3, [pc, #308]	; (8002ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002a72:	4b4c      	ldr	r3, [pc, #304]	; (8002ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f000 8088 	beq.w	8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	0c9b      	lsrs	r3, r3, #18
 8002a84:	f003 030f 	and.w	r3, r3, #15
 8002a88:	3330      	adds	r3, #48	; 0x30
 8002a8a:	443b      	add	r3, r7
 8002a8c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a90:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d017      	beq.n	8002acc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a9c:	4b41      	ldr	r3, [pc, #260]	; (8002ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	0c5b      	lsrs	r3, r3, #17
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	3330      	adds	r3, #48	; 0x30
 8002aa8:	443b      	add	r3, r7
 8002aaa:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002aae:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00d      	beq.n	8002ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002aba:	4a3b      	ldr	r2, [pc, #236]	; (8002ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8002abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abe:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ac2:	6a3b      	ldr	r3, [r7, #32]
 8002ac4:	fb02 f303 	mul.w	r3, r2, r3
 8002ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aca:	e004      	b.n	8002ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002acc:	6a3b      	ldr	r3, [r7, #32]
 8002ace:	4a37      	ldr	r2, [pc, #220]	; (8002bac <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002ad0:	fb02 f303 	mul.w	r3, r2, r3
 8002ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002ad6:	4b33      	ldr	r3, [pc, #204]	; (8002ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ade:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ae2:	d102      	bne.n	8002aea <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8002ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae6:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8002ae8:	e052      	b.n	8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          frequency = (pllclk * 2) / 3;
 8002aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	4a30      	ldr	r2, [pc, #192]	; (8002bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8002af0:	fba2 2303 	umull	r2, r3, r2, r3
 8002af4:	085b      	lsrs	r3, r3, #1
 8002af6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002af8:	e04a      	b.n	8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8002afa:	f7ff fe13 	bl	8002724 <HAL_RCC_GetSysClockFreq>
 8002afe:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002b00:	e049      	b.n	8002b96 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8002b02:	f7ff fe0f 	bl	8002724 <HAL_RCC_GetSysClockFreq>
 8002b06:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002b08:	e045      	b.n	8002b96 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8002b0a:	4b26      	ldr	r3, [pc, #152]	; (8002ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b1a:	d108      	bne.n	8002b2e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      {
        frequency = LSE_VALUE;
 8002b26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b2c:	e01f      	b.n	8002b6e <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b38:	d109      	bne.n	8002b4e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8002b3a:	4b1a      	ldr	r3, [pc, #104]	; (8002ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      {
        frequency = LSI_VALUE;
 8002b46:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002b4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b4c:	e00f      	b.n	8002b6e <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b58:	d11c      	bne.n	8002b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8002b5a:	4b12      	ldr	r3, [pc, #72]	; (8002ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d016      	beq.n	8002b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        frequency = HSE_VALUE / 128U;
 8002b66:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002b6a:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8002b6c:	e012      	b.n	8002b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8002b6e:	e011      	b.n	8002b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002b70:	f7ff fe54 	bl	800281c <HAL_RCC_GetPCLK2Freq>
 8002b74:	4602      	mov	r2, r0
 8002b76:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	0b9b      	lsrs	r3, r3, #14
 8002b7c:	f003 0303 	and.w	r3, r3, #3
 8002b80:	3301      	adds	r3, #1
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b88:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002b8a:	e004      	b.n	8002b96 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    default:
    {
      break;
 8002b8c:	bf00      	nop
 8002b8e:	e002      	b.n	8002b96 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 8002b90:	bf00      	nop
 8002b92:	e000      	b.n	8002b96 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 8002b94:	bf00      	nop
    }
  }
  return (frequency);
 8002b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3734      	adds	r7, #52	; 0x34
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd90      	pop	{r4, r7, pc}
 8002ba0:	08005c14 	.word	0x08005c14
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	007a1200 	.word	0x007a1200
 8002bac:	003d0900 	.word	0x003d0900
 8002bb0:	aaaaaaab 	.word	0xaaaaaaab

08002bb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e03f      	b.n	8002c46 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d106      	bne.n	8002be0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7fe f99a 	bl	8000f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2224      	movs	r2, #36	; 0x24
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68da      	ldr	r2, [r3, #12]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bf6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f905 	bl	8002e08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	691a      	ldr	r2, [r3, #16]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	695a      	ldr	r2, [r3, #20]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68da      	ldr	r2, [r3, #12]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2220      	movs	r2, #32
 8002c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2220      	movs	r2, #32
 8002c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b08a      	sub	sp, #40	; 0x28
 8002c52:	af02      	add	r7, sp, #8
 8002c54:	60f8      	str	r0, [r7, #12]
 8002c56:	60b9      	str	r1, [r7, #8]
 8002c58:	603b      	str	r3, [r7, #0]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b20      	cmp	r3, #32
 8002c6c:	d17c      	bne.n	8002d68 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d002      	beq.n	8002c7a <HAL_UART_Transmit+0x2c>
 8002c74:	88fb      	ldrh	r3, [r7, #6]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e075      	b.n	8002d6a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d101      	bne.n	8002c8c <HAL_UART_Transmit+0x3e>
 8002c88:	2302      	movs	r3, #2
 8002c8a:	e06e      	b.n	8002d6a <HAL_UART_Transmit+0x11c>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2221      	movs	r2, #33	; 0x21
 8002c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ca2:	f7fe faef 	bl	8001284 <HAL_GetTick>
 8002ca6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	88fa      	ldrh	r2, [r7, #6]
 8002cac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	88fa      	ldrh	r2, [r7, #6]
 8002cb2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cbc:	d108      	bne.n	8002cd0 <HAL_UART_Transmit+0x82>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d104      	bne.n	8002cd0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	61bb      	str	r3, [r7, #24]
 8002cce:	e003      	b.n	8002cd8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002ce0:	e02a      	b.n	8002d38 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	9300      	str	r3, [sp, #0]
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	2180      	movs	r1, #128	; 0x80
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f000 f840 	bl	8002d72 <UART_WaitOnFlagUntilTimeout>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e036      	b.n	8002d6a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10b      	bne.n	8002d1a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	881b      	ldrh	r3, [r3, #0]
 8002d06:	461a      	mov	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	3302      	adds	r3, #2
 8002d16:	61bb      	str	r3, [r7, #24]
 8002d18:	e007      	b.n	8002d2a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	781a      	ldrb	r2, [r3, #0]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	3301      	adds	r3, #1
 8002d28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1cf      	bne.n	8002ce2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	2140      	movs	r1, #64	; 0x40
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 f810 	bl	8002d72 <UART_WaitOnFlagUntilTimeout>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e006      	b.n	8002d6a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2220      	movs	r2, #32
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d64:	2300      	movs	r3, #0
 8002d66:	e000      	b.n	8002d6a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d68:	2302      	movs	r3, #2
  }
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3720      	adds	r7, #32
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b084      	sub	sp, #16
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	60f8      	str	r0, [r7, #12]
 8002d7a:	60b9      	str	r1, [r7, #8]
 8002d7c:	603b      	str	r3, [r7, #0]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d82:	e02c      	b.n	8002dde <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d8a:	d028      	beq.n	8002dde <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d007      	beq.n	8002da2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d92:	f7fe fa77 	bl	8001284 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d21d      	bcs.n	8002dde <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68da      	ldr	r2, [r3, #12]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002db0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695a      	ldr	r2, [r3, #20]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 0201 	bic.w	r2, r2, #1
 8002dc0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2220      	movs	r2, #32
 8002dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2220      	movs	r2, #32
 8002dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e00f      	b.n	8002dfe <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	4013      	ands	r3, r2
 8002de8:	68ba      	ldr	r2, [r7, #8]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	bf0c      	ite	eq
 8002dee:	2301      	moveq	r3, #1
 8002df0:	2300      	movne	r3, #0
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	461a      	mov	r2, r3
 8002df6:	79fb      	ldrb	r3, [r7, #7]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d0c3      	beq.n	8002d84 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
	...

08002e08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	68da      	ldr	r2, [r3, #12]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	689a      	ldr	r2, [r3, #8]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	695b      	ldr	r3, [r3, #20]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002e42:	f023 030c 	bic.w	r3, r3, #12
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	6812      	ldr	r2, [r2, #0]
 8002e4a:	68b9      	ldr	r1, [r7, #8]
 8002e4c:	430b      	orrs	r3, r1
 8002e4e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	699a      	ldr	r2, [r3, #24]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a2c      	ldr	r2, [pc, #176]	; (8002f1c <UART_SetConfig+0x114>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d103      	bne.n	8002e78 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002e70:	f7ff fcd4 	bl	800281c <HAL_RCC_GetPCLK2Freq>
 8002e74:	60f8      	str	r0, [r7, #12]
 8002e76:	e002      	b.n	8002e7e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002e78:	f7ff fcbc 	bl	80027f4 <HAL_RCC_GetPCLK1Freq>
 8002e7c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	4613      	mov	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4413      	add	r3, r2
 8002e86:	009a      	lsls	r2, r3, #2
 8002e88:	441a      	add	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e94:	4a22      	ldr	r2, [pc, #136]	; (8002f20 <UART_SetConfig+0x118>)
 8002e96:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9a:	095b      	lsrs	r3, r3, #5
 8002e9c:	0119      	lsls	r1, r3, #4
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	009a      	lsls	r2, r3, #2
 8002ea8:	441a      	add	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002eb4:	4b1a      	ldr	r3, [pc, #104]	; (8002f20 <UART_SetConfig+0x118>)
 8002eb6:	fba3 0302 	umull	r0, r3, r3, r2
 8002eba:	095b      	lsrs	r3, r3, #5
 8002ebc:	2064      	movs	r0, #100	; 0x64
 8002ebe:	fb00 f303 	mul.w	r3, r0, r3
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	011b      	lsls	r3, r3, #4
 8002ec6:	3332      	adds	r3, #50	; 0x32
 8002ec8:	4a15      	ldr	r2, [pc, #84]	; (8002f20 <UART_SetConfig+0x118>)
 8002eca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ece:	095b      	lsrs	r3, r3, #5
 8002ed0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ed4:	4419      	add	r1, r3
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	009a      	lsls	r2, r3, #2
 8002ee0:	441a      	add	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002eec:	4b0c      	ldr	r3, [pc, #48]	; (8002f20 <UART_SetConfig+0x118>)
 8002eee:	fba3 0302 	umull	r0, r3, r3, r2
 8002ef2:	095b      	lsrs	r3, r3, #5
 8002ef4:	2064      	movs	r0, #100	; 0x64
 8002ef6:	fb00 f303 	mul.w	r3, r0, r3
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	011b      	lsls	r3, r3, #4
 8002efe:	3332      	adds	r3, #50	; 0x32
 8002f00:	4a07      	ldr	r2, [pc, #28]	; (8002f20 <UART_SetConfig+0x118>)
 8002f02:	fba2 2303 	umull	r2, r3, r2, r3
 8002f06:	095b      	lsrs	r3, r3, #5
 8002f08:	f003 020f 	and.w	r2, r3, #15
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	440a      	add	r2, r1
 8002f12:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002f14:	bf00      	nop
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40013800 	.word	0x40013800
 8002f20:	51eb851f 	.word	0x51eb851f

08002f24 <__cvt>:
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f2a:	461f      	mov	r7, r3
 8002f2c:	bfbb      	ittet	lt
 8002f2e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002f32:	461f      	movlt	r7, r3
 8002f34:	2300      	movge	r3, #0
 8002f36:	232d      	movlt	r3, #45	; 0x2d
 8002f38:	b088      	sub	sp, #32
 8002f3a:	4614      	mov	r4, r2
 8002f3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002f3e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002f40:	7013      	strb	r3, [r2, #0]
 8002f42:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002f44:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002f48:	f023 0820 	bic.w	r8, r3, #32
 8002f4c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002f50:	d005      	beq.n	8002f5e <__cvt+0x3a>
 8002f52:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002f56:	d100      	bne.n	8002f5a <__cvt+0x36>
 8002f58:	3501      	adds	r5, #1
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	e000      	b.n	8002f60 <__cvt+0x3c>
 8002f5e:	2303      	movs	r3, #3
 8002f60:	aa07      	add	r2, sp, #28
 8002f62:	9204      	str	r2, [sp, #16]
 8002f64:	aa06      	add	r2, sp, #24
 8002f66:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002f6a:	e9cd 3500 	strd	r3, r5, [sp]
 8002f6e:	4622      	mov	r2, r4
 8002f70:	463b      	mov	r3, r7
 8002f72:	f000 fe61 	bl	8003c38 <_dtoa_r>
 8002f76:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002f7a:	4606      	mov	r6, r0
 8002f7c:	d102      	bne.n	8002f84 <__cvt+0x60>
 8002f7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002f80:	07db      	lsls	r3, r3, #31
 8002f82:	d522      	bpl.n	8002fca <__cvt+0xa6>
 8002f84:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002f88:	eb06 0905 	add.w	r9, r6, r5
 8002f8c:	d110      	bne.n	8002fb0 <__cvt+0x8c>
 8002f8e:	7833      	ldrb	r3, [r6, #0]
 8002f90:	2b30      	cmp	r3, #48	; 0x30
 8002f92:	d10a      	bne.n	8002faa <__cvt+0x86>
 8002f94:	2200      	movs	r2, #0
 8002f96:	2300      	movs	r3, #0
 8002f98:	4620      	mov	r0, r4
 8002f9a:	4639      	mov	r1, r7
 8002f9c:	f7fd fd70 	bl	8000a80 <__aeabi_dcmpeq>
 8002fa0:	b918      	cbnz	r0, 8002faa <__cvt+0x86>
 8002fa2:	f1c5 0501 	rsb	r5, r5, #1
 8002fa6:	f8ca 5000 	str.w	r5, [sl]
 8002faa:	f8da 3000 	ldr.w	r3, [sl]
 8002fae:	4499      	add	r9, r3
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	4620      	mov	r0, r4
 8002fb6:	4639      	mov	r1, r7
 8002fb8:	f7fd fd62 	bl	8000a80 <__aeabi_dcmpeq>
 8002fbc:	b108      	cbz	r0, 8002fc2 <__cvt+0x9e>
 8002fbe:	f8cd 901c 	str.w	r9, [sp, #28]
 8002fc2:	2230      	movs	r2, #48	; 0x30
 8002fc4:	9b07      	ldr	r3, [sp, #28]
 8002fc6:	454b      	cmp	r3, r9
 8002fc8:	d307      	bcc.n	8002fda <__cvt+0xb6>
 8002fca:	4630      	mov	r0, r6
 8002fcc:	9b07      	ldr	r3, [sp, #28]
 8002fce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002fd0:	1b9b      	subs	r3, r3, r6
 8002fd2:	6013      	str	r3, [r2, #0]
 8002fd4:	b008      	add	sp, #32
 8002fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fda:	1c59      	adds	r1, r3, #1
 8002fdc:	9107      	str	r1, [sp, #28]
 8002fde:	701a      	strb	r2, [r3, #0]
 8002fe0:	e7f0      	b.n	8002fc4 <__cvt+0xa0>

08002fe2 <__exponent>:
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002fe6:	2900      	cmp	r1, #0
 8002fe8:	f803 2b02 	strb.w	r2, [r3], #2
 8002fec:	bfb6      	itet	lt
 8002fee:	222d      	movlt	r2, #45	; 0x2d
 8002ff0:	222b      	movge	r2, #43	; 0x2b
 8002ff2:	4249      	neglt	r1, r1
 8002ff4:	2909      	cmp	r1, #9
 8002ff6:	7042      	strb	r2, [r0, #1]
 8002ff8:	dd2a      	ble.n	8003050 <__exponent+0x6e>
 8002ffa:	f10d 0207 	add.w	r2, sp, #7
 8002ffe:	4617      	mov	r7, r2
 8003000:	260a      	movs	r6, #10
 8003002:	fb91 f5f6 	sdiv	r5, r1, r6
 8003006:	4694      	mov	ip, r2
 8003008:	fb06 1415 	mls	r4, r6, r5, r1
 800300c:	3430      	adds	r4, #48	; 0x30
 800300e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003012:	460c      	mov	r4, r1
 8003014:	2c63      	cmp	r4, #99	; 0x63
 8003016:	4629      	mov	r1, r5
 8003018:	f102 32ff 	add.w	r2, r2, #4294967295
 800301c:	dcf1      	bgt.n	8003002 <__exponent+0x20>
 800301e:	3130      	adds	r1, #48	; 0x30
 8003020:	f1ac 0402 	sub.w	r4, ip, #2
 8003024:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003028:	4622      	mov	r2, r4
 800302a:	1c41      	adds	r1, r0, #1
 800302c:	42ba      	cmp	r2, r7
 800302e:	d30a      	bcc.n	8003046 <__exponent+0x64>
 8003030:	f10d 0209 	add.w	r2, sp, #9
 8003034:	eba2 020c 	sub.w	r2, r2, ip
 8003038:	42bc      	cmp	r4, r7
 800303a:	bf88      	it	hi
 800303c:	2200      	movhi	r2, #0
 800303e:	4413      	add	r3, r2
 8003040:	1a18      	subs	r0, r3, r0
 8003042:	b003      	add	sp, #12
 8003044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003046:	f812 5b01 	ldrb.w	r5, [r2], #1
 800304a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800304e:	e7ed      	b.n	800302c <__exponent+0x4a>
 8003050:	2330      	movs	r3, #48	; 0x30
 8003052:	3130      	adds	r1, #48	; 0x30
 8003054:	7083      	strb	r3, [r0, #2]
 8003056:	70c1      	strb	r1, [r0, #3]
 8003058:	1d03      	adds	r3, r0, #4
 800305a:	e7f1      	b.n	8003040 <__exponent+0x5e>

0800305c <_printf_float>:
 800305c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003060:	b091      	sub	sp, #68	; 0x44
 8003062:	460c      	mov	r4, r1
 8003064:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003068:	4616      	mov	r6, r2
 800306a:	461f      	mov	r7, r3
 800306c:	4605      	mov	r5, r0
 800306e:	f000 fcd3 	bl	8003a18 <_localeconv_r>
 8003072:	6803      	ldr	r3, [r0, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	9309      	str	r3, [sp, #36]	; 0x24
 8003078:	f7fd f8d6 	bl	8000228 <strlen>
 800307c:	2300      	movs	r3, #0
 800307e:	930e      	str	r3, [sp, #56]	; 0x38
 8003080:	f8d8 3000 	ldr.w	r3, [r8]
 8003084:	900a      	str	r0, [sp, #40]	; 0x28
 8003086:	3307      	adds	r3, #7
 8003088:	f023 0307 	bic.w	r3, r3, #7
 800308c:	f103 0208 	add.w	r2, r3, #8
 8003090:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003094:	f8d4 b000 	ldr.w	fp, [r4]
 8003098:	f8c8 2000 	str.w	r2, [r8]
 800309c:	e9d3 a800 	ldrd	sl, r8, [r3]
 80030a0:	4652      	mov	r2, sl
 80030a2:	4643      	mov	r3, r8
 80030a4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80030a8:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80030ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80030ae:	f04f 32ff 	mov.w	r2, #4294967295
 80030b2:	4650      	mov	r0, sl
 80030b4:	4b9c      	ldr	r3, [pc, #624]	; (8003328 <_printf_float+0x2cc>)
 80030b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80030b8:	f7fd fd14 	bl	8000ae4 <__aeabi_dcmpun>
 80030bc:	bb70      	cbnz	r0, 800311c <_printf_float+0xc0>
 80030be:	f04f 32ff 	mov.w	r2, #4294967295
 80030c2:	4650      	mov	r0, sl
 80030c4:	4b98      	ldr	r3, [pc, #608]	; (8003328 <_printf_float+0x2cc>)
 80030c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80030c8:	f7fd fcee 	bl	8000aa8 <__aeabi_dcmple>
 80030cc:	bb30      	cbnz	r0, 800311c <_printf_float+0xc0>
 80030ce:	2200      	movs	r2, #0
 80030d0:	2300      	movs	r3, #0
 80030d2:	4650      	mov	r0, sl
 80030d4:	4641      	mov	r1, r8
 80030d6:	f7fd fcdd 	bl	8000a94 <__aeabi_dcmplt>
 80030da:	b110      	cbz	r0, 80030e2 <_printf_float+0x86>
 80030dc:	232d      	movs	r3, #45	; 0x2d
 80030de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030e2:	4a92      	ldr	r2, [pc, #584]	; (800332c <_printf_float+0x2d0>)
 80030e4:	4b92      	ldr	r3, [pc, #584]	; (8003330 <_printf_float+0x2d4>)
 80030e6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80030ea:	bf94      	ite	ls
 80030ec:	4690      	movls	r8, r2
 80030ee:	4698      	movhi	r8, r3
 80030f0:	2303      	movs	r3, #3
 80030f2:	f04f 0a00 	mov.w	sl, #0
 80030f6:	6123      	str	r3, [r4, #16]
 80030f8:	f02b 0304 	bic.w	r3, fp, #4
 80030fc:	6023      	str	r3, [r4, #0]
 80030fe:	4633      	mov	r3, r6
 8003100:	4621      	mov	r1, r4
 8003102:	4628      	mov	r0, r5
 8003104:	9700      	str	r7, [sp, #0]
 8003106:	aa0f      	add	r2, sp, #60	; 0x3c
 8003108:	f000 f9d6 	bl	80034b8 <_printf_common>
 800310c:	3001      	adds	r0, #1
 800310e:	f040 8090 	bne.w	8003232 <_printf_float+0x1d6>
 8003112:	f04f 30ff 	mov.w	r0, #4294967295
 8003116:	b011      	add	sp, #68	; 0x44
 8003118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800311c:	4652      	mov	r2, sl
 800311e:	4643      	mov	r3, r8
 8003120:	4650      	mov	r0, sl
 8003122:	4641      	mov	r1, r8
 8003124:	f7fd fcde 	bl	8000ae4 <__aeabi_dcmpun>
 8003128:	b148      	cbz	r0, 800313e <_printf_float+0xe2>
 800312a:	f1b8 0f00 	cmp.w	r8, #0
 800312e:	bfb8      	it	lt
 8003130:	232d      	movlt	r3, #45	; 0x2d
 8003132:	4a80      	ldr	r2, [pc, #512]	; (8003334 <_printf_float+0x2d8>)
 8003134:	bfb8      	it	lt
 8003136:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800313a:	4b7f      	ldr	r3, [pc, #508]	; (8003338 <_printf_float+0x2dc>)
 800313c:	e7d3      	b.n	80030e6 <_printf_float+0x8a>
 800313e:	6863      	ldr	r3, [r4, #4]
 8003140:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003144:	1c5a      	adds	r2, r3, #1
 8003146:	d142      	bne.n	80031ce <_printf_float+0x172>
 8003148:	2306      	movs	r3, #6
 800314a:	6063      	str	r3, [r4, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	9206      	str	r2, [sp, #24]
 8003150:	aa0e      	add	r2, sp, #56	; 0x38
 8003152:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003156:	aa0d      	add	r2, sp, #52	; 0x34
 8003158:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800315c:	9203      	str	r2, [sp, #12]
 800315e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003162:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003166:	6023      	str	r3, [r4, #0]
 8003168:	6863      	ldr	r3, [r4, #4]
 800316a:	4652      	mov	r2, sl
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	4628      	mov	r0, r5
 8003170:	4643      	mov	r3, r8
 8003172:	910b      	str	r1, [sp, #44]	; 0x2c
 8003174:	f7ff fed6 	bl	8002f24 <__cvt>
 8003178:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800317a:	4680      	mov	r8, r0
 800317c:	2947      	cmp	r1, #71	; 0x47
 800317e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003180:	d108      	bne.n	8003194 <_printf_float+0x138>
 8003182:	1cc8      	adds	r0, r1, #3
 8003184:	db02      	blt.n	800318c <_printf_float+0x130>
 8003186:	6863      	ldr	r3, [r4, #4]
 8003188:	4299      	cmp	r1, r3
 800318a:	dd40      	ble.n	800320e <_printf_float+0x1b2>
 800318c:	f1a9 0902 	sub.w	r9, r9, #2
 8003190:	fa5f f989 	uxtb.w	r9, r9
 8003194:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003198:	d81f      	bhi.n	80031da <_printf_float+0x17e>
 800319a:	464a      	mov	r2, r9
 800319c:	3901      	subs	r1, #1
 800319e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80031a2:	910d      	str	r1, [sp, #52]	; 0x34
 80031a4:	f7ff ff1d 	bl	8002fe2 <__exponent>
 80031a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80031aa:	4682      	mov	sl, r0
 80031ac:	1813      	adds	r3, r2, r0
 80031ae:	2a01      	cmp	r2, #1
 80031b0:	6123      	str	r3, [r4, #16]
 80031b2:	dc02      	bgt.n	80031ba <_printf_float+0x15e>
 80031b4:	6822      	ldr	r2, [r4, #0]
 80031b6:	07d2      	lsls	r2, r2, #31
 80031b8:	d501      	bpl.n	80031be <_printf_float+0x162>
 80031ba:	3301      	adds	r3, #1
 80031bc:	6123      	str	r3, [r4, #16]
 80031be:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d09b      	beq.n	80030fe <_printf_float+0xa2>
 80031c6:	232d      	movs	r3, #45	; 0x2d
 80031c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031cc:	e797      	b.n	80030fe <_printf_float+0xa2>
 80031ce:	2947      	cmp	r1, #71	; 0x47
 80031d0:	d1bc      	bne.n	800314c <_printf_float+0xf0>
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1ba      	bne.n	800314c <_printf_float+0xf0>
 80031d6:	2301      	movs	r3, #1
 80031d8:	e7b7      	b.n	800314a <_printf_float+0xee>
 80031da:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80031de:	d118      	bne.n	8003212 <_printf_float+0x1b6>
 80031e0:	2900      	cmp	r1, #0
 80031e2:	6863      	ldr	r3, [r4, #4]
 80031e4:	dd0b      	ble.n	80031fe <_printf_float+0x1a2>
 80031e6:	6121      	str	r1, [r4, #16]
 80031e8:	b913      	cbnz	r3, 80031f0 <_printf_float+0x194>
 80031ea:	6822      	ldr	r2, [r4, #0]
 80031ec:	07d0      	lsls	r0, r2, #31
 80031ee:	d502      	bpl.n	80031f6 <_printf_float+0x19a>
 80031f0:	3301      	adds	r3, #1
 80031f2:	440b      	add	r3, r1
 80031f4:	6123      	str	r3, [r4, #16]
 80031f6:	f04f 0a00 	mov.w	sl, #0
 80031fa:	65a1      	str	r1, [r4, #88]	; 0x58
 80031fc:	e7df      	b.n	80031be <_printf_float+0x162>
 80031fe:	b913      	cbnz	r3, 8003206 <_printf_float+0x1aa>
 8003200:	6822      	ldr	r2, [r4, #0]
 8003202:	07d2      	lsls	r2, r2, #31
 8003204:	d501      	bpl.n	800320a <_printf_float+0x1ae>
 8003206:	3302      	adds	r3, #2
 8003208:	e7f4      	b.n	80031f4 <_printf_float+0x198>
 800320a:	2301      	movs	r3, #1
 800320c:	e7f2      	b.n	80031f4 <_printf_float+0x198>
 800320e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003212:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003214:	4299      	cmp	r1, r3
 8003216:	db05      	blt.n	8003224 <_printf_float+0x1c8>
 8003218:	6823      	ldr	r3, [r4, #0]
 800321a:	6121      	str	r1, [r4, #16]
 800321c:	07d8      	lsls	r0, r3, #31
 800321e:	d5ea      	bpl.n	80031f6 <_printf_float+0x19a>
 8003220:	1c4b      	adds	r3, r1, #1
 8003222:	e7e7      	b.n	80031f4 <_printf_float+0x198>
 8003224:	2900      	cmp	r1, #0
 8003226:	bfcc      	ite	gt
 8003228:	2201      	movgt	r2, #1
 800322a:	f1c1 0202 	rsble	r2, r1, #2
 800322e:	4413      	add	r3, r2
 8003230:	e7e0      	b.n	80031f4 <_printf_float+0x198>
 8003232:	6823      	ldr	r3, [r4, #0]
 8003234:	055a      	lsls	r2, r3, #21
 8003236:	d407      	bmi.n	8003248 <_printf_float+0x1ec>
 8003238:	6923      	ldr	r3, [r4, #16]
 800323a:	4642      	mov	r2, r8
 800323c:	4631      	mov	r1, r6
 800323e:	4628      	mov	r0, r5
 8003240:	47b8      	blx	r7
 8003242:	3001      	adds	r0, #1
 8003244:	d12b      	bne.n	800329e <_printf_float+0x242>
 8003246:	e764      	b.n	8003112 <_printf_float+0xb6>
 8003248:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800324c:	f240 80dd 	bls.w	800340a <_printf_float+0x3ae>
 8003250:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003254:	2200      	movs	r2, #0
 8003256:	2300      	movs	r3, #0
 8003258:	f7fd fc12 	bl	8000a80 <__aeabi_dcmpeq>
 800325c:	2800      	cmp	r0, #0
 800325e:	d033      	beq.n	80032c8 <_printf_float+0x26c>
 8003260:	2301      	movs	r3, #1
 8003262:	4631      	mov	r1, r6
 8003264:	4628      	mov	r0, r5
 8003266:	4a35      	ldr	r2, [pc, #212]	; (800333c <_printf_float+0x2e0>)
 8003268:	47b8      	blx	r7
 800326a:	3001      	adds	r0, #1
 800326c:	f43f af51 	beq.w	8003112 <_printf_float+0xb6>
 8003270:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003274:	429a      	cmp	r2, r3
 8003276:	db02      	blt.n	800327e <_printf_float+0x222>
 8003278:	6823      	ldr	r3, [r4, #0]
 800327a:	07d8      	lsls	r0, r3, #31
 800327c:	d50f      	bpl.n	800329e <_printf_float+0x242>
 800327e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003282:	4631      	mov	r1, r6
 8003284:	4628      	mov	r0, r5
 8003286:	47b8      	blx	r7
 8003288:	3001      	adds	r0, #1
 800328a:	f43f af42 	beq.w	8003112 <_printf_float+0xb6>
 800328e:	f04f 0800 	mov.w	r8, #0
 8003292:	f104 091a 	add.w	r9, r4, #26
 8003296:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003298:	3b01      	subs	r3, #1
 800329a:	4543      	cmp	r3, r8
 800329c:	dc09      	bgt.n	80032b2 <_printf_float+0x256>
 800329e:	6823      	ldr	r3, [r4, #0]
 80032a0:	079b      	lsls	r3, r3, #30
 80032a2:	f100 8104 	bmi.w	80034ae <_printf_float+0x452>
 80032a6:	68e0      	ldr	r0, [r4, #12]
 80032a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80032aa:	4298      	cmp	r0, r3
 80032ac:	bfb8      	it	lt
 80032ae:	4618      	movlt	r0, r3
 80032b0:	e731      	b.n	8003116 <_printf_float+0xba>
 80032b2:	2301      	movs	r3, #1
 80032b4:	464a      	mov	r2, r9
 80032b6:	4631      	mov	r1, r6
 80032b8:	4628      	mov	r0, r5
 80032ba:	47b8      	blx	r7
 80032bc:	3001      	adds	r0, #1
 80032be:	f43f af28 	beq.w	8003112 <_printf_float+0xb6>
 80032c2:	f108 0801 	add.w	r8, r8, #1
 80032c6:	e7e6      	b.n	8003296 <_printf_float+0x23a>
 80032c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	dc38      	bgt.n	8003340 <_printf_float+0x2e4>
 80032ce:	2301      	movs	r3, #1
 80032d0:	4631      	mov	r1, r6
 80032d2:	4628      	mov	r0, r5
 80032d4:	4a19      	ldr	r2, [pc, #100]	; (800333c <_printf_float+0x2e0>)
 80032d6:	47b8      	blx	r7
 80032d8:	3001      	adds	r0, #1
 80032da:	f43f af1a 	beq.w	8003112 <_printf_float+0xb6>
 80032de:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80032e2:	4313      	orrs	r3, r2
 80032e4:	d102      	bne.n	80032ec <_printf_float+0x290>
 80032e6:	6823      	ldr	r3, [r4, #0]
 80032e8:	07d9      	lsls	r1, r3, #31
 80032ea:	d5d8      	bpl.n	800329e <_printf_float+0x242>
 80032ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80032f0:	4631      	mov	r1, r6
 80032f2:	4628      	mov	r0, r5
 80032f4:	47b8      	blx	r7
 80032f6:	3001      	adds	r0, #1
 80032f8:	f43f af0b 	beq.w	8003112 <_printf_float+0xb6>
 80032fc:	f04f 0900 	mov.w	r9, #0
 8003300:	f104 0a1a 	add.w	sl, r4, #26
 8003304:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003306:	425b      	negs	r3, r3
 8003308:	454b      	cmp	r3, r9
 800330a:	dc01      	bgt.n	8003310 <_printf_float+0x2b4>
 800330c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800330e:	e794      	b.n	800323a <_printf_float+0x1de>
 8003310:	2301      	movs	r3, #1
 8003312:	4652      	mov	r2, sl
 8003314:	4631      	mov	r1, r6
 8003316:	4628      	mov	r0, r5
 8003318:	47b8      	blx	r7
 800331a:	3001      	adds	r0, #1
 800331c:	f43f aef9 	beq.w	8003112 <_printf_float+0xb6>
 8003320:	f109 0901 	add.w	r9, r9, #1
 8003324:	e7ee      	b.n	8003304 <_printf_float+0x2a8>
 8003326:	bf00      	nop
 8003328:	7fefffff 	.word	0x7fefffff
 800332c:	08005c3c 	.word	0x08005c3c
 8003330:	08005c40 	.word	0x08005c40
 8003334:	08005c44 	.word	0x08005c44
 8003338:	08005c48 	.word	0x08005c48
 800333c:	08005c4c 	.word	0x08005c4c
 8003340:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003342:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003344:	429a      	cmp	r2, r3
 8003346:	bfa8      	it	ge
 8003348:	461a      	movge	r2, r3
 800334a:	2a00      	cmp	r2, #0
 800334c:	4691      	mov	r9, r2
 800334e:	dc37      	bgt.n	80033c0 <_printf_float+0x364>
 8003350:	f04f 0b00 	mov.w	fp, #0
 8003354:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003358:	f104 021a 	add.w	r2, r4, #26
 800335c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003360:	ebaa 0309 	sub.w	r3, sl, r9
 8003364:	455b      	cmp	r3, fp
 8003366:	dc33      	bgt.n	80033d0 <_printf_float+0x374>
 8003368:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800336c:	429a      	cmp	r2, r3
 800336e:	db3b      	blt.n	80033e8 <_printf_float+0x38c>
 8003370:	6823      	ldr	r3, [r4, #0]
 8003372:	07da      	lsls	r2, r3, #31
 8003374:	d438      	bmi.n	80033e8 <_printf_float+0x38c>
 8003376:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800337a:	eba2 0903 	sub.w	r9, r2, r3
 800337e:	eba2 020a 	sub.w	r2, r2, sl
 8003382:	4591      	cmp	r9, r2
 8003384:	bfa8      	it	ge
 8003386:	4691      	movge	r9, r2
 8003388:	f1b9 0f00 	cmp.w	r9, #0
 800338c:	dc34      	bgt.n	80033f8 <_printf_float+0x39c>
 800338e:	f04f 0800 	mov.w	r8, #0
 8003392:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003396:	f104 0a1a 	add.w	sl, r4, #26
 800339a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800339e:	1a9b      	subs	r3, r3, r2
 80033a0:	eba3 0309 	sub.w	r3, r3, r9
 80033a4:	4543      	cmp	r3, r8
 80033a6:	f77f af7a 	ble.w	800329e <_printf_float+0x242>
 80033aa:	2301      	movs	r3, #1
 80033ac:	4652      	mov	r2, sl
 80033ae:	4631      	mov	r1, r6
 80033b0:	4628      	mov	r0, r5
 80033b2:	47b8      	blx	r7
 80033b4:	3001      	adds	r0, #1
 80033b6:	f43f aeac 	beq.w	8003112 <_printf_float+0xb6>
 80033ba:	f108 0801 	add.w	r8, r8, #1
 80033be:	e7ec      	b.n	800339a <_printf_float+0x33e>
 80033c0:	4613      	mov	r3, r2
 80033c2:	4631      	mov	r1, r6
 80033c4:	4642      	mov	r2, r8
 80033c6:	4628      	mov	r0, r5
 80033c8:	47b8      	blx	r7
 80033ca:	3001      	adds	r0, #1
 80033cc:	d1c0      	bne.n	8003350 <_printf_float+0x2f4>
 80033ce:	e6a0      	b.n	8003112 <_printf_float+0xb6>
 80033d0:	2301      	movs	r3, #1
 80033d2:	4631      	mov	r1, r6
 80033d4:	4628      	mov	r0, r5
 80033d6:	920b      	str	r2, [sp, #44]	; 0x2c
 80033d8:	47b8      	blx	r7
 80033da:	3001      	adds	r0, #1
 80033dc:	f43f ae99 	beq.w	8003112 <_printf_float+0xb6>
 80033e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80033e2:	f10b 0b01 	add.w	fp, fp, #1
 80033e6:	e7b9      	b.n	800335c <_printf_float+0x300>
 80033e8:	4631      	mov	r1, r6
 80033ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80033ee:	4628      	mov	r0, r5
 80033f0:	47b8      	blx	r7
 80033f2:	3001      	adds	r0, #1
 80033f4:	d1bf      	bne.n	8003376 <_printf_float+0x31a>
 80033f6:	e68c      	b.n	8003112 <_printf_float+0xb6>
 80033f8:	464b      	mov	r3, r9
 80033fa:	4631      	mov	r1, r6
 80033fc:	4628      	mov	r0, r5
 80033fe:	eb08 020a 	add.w	r2, r8, sl
 8003402:	47b8      	blx	r7
 8003404:	3001      	adds	r0, #1
 8003406:	d1c2      	bne.n	800338e <_printf_float+0x332>
 8003408:	e683      	b.n	8003112 <_printf_float+0xb6>
 800340a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800340c:	2a01      	cmp	r2, #1
 800340e:	dc01      	bgt.n	8003414 <_printf_float+0x3b8>
 8003410:	07db      	lsls	r3, r3, #31
 8003412:	d539      	bpl.n	8003488 <_printf_float+0x42c>
 8003414:	2301      	movs	r3, #1
 8003416:	4642      	mov	r2, r8
 8003418:	4631      	mov	r1, r6
 800341a:	4628      	mov	r0, r5
 800341c:	47b8      	blx	r7
 800341e:	3001      	adds	r0, #1
 8003420:	f43f ae77 	beq.w	8003112 <_printf_float+0xb6>
 8003424:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003428:	4631      	mov	r1, r6
 800342a:	4628      	mov	r0, r5
 800342c:	47b8      	blx	r7
 800342e:	3001      	adds	r0, #1
 8003430:	f43f ae6f 	beq.w	8003112 <_printf_float+0xb6>
 8003434:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003438:	2200      	movs	r2, #0
 800343a:	2300      	movs	r3, #0
 800343c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8003440:	f7fd fb1e 	bl	8000a80 <__aeabi_dcmpeq>
 8003444:	b9d8      	cbnz	r0, 800347e <_printf_float+0x422>
 8003446:	f109 33ff 	add.w	r3, r9, #4294967295
 800344a:	f108 0201 	add.w	r2, r8, #1
 800344e:	4631      	mov	r1, r6
 8003450:	4628      	mov	r0, r5
 8003452:	47b8      	blx	r7
 8003454:	3001      	adds	r0, #1
 8003456:	d10e      	bne.n	8003476 <_printf_float+0x41a>
 8003458:	e65b      	b.n	8003112 <_printf_float+0xb6>
 800345a:	2301      	movs	r3, #1
 800345c:	464a      	mov	r2, r9
 800345e:	4631      	mov	r1, r6
 8003460:	4628      	mov	r0, r5
 8003462:	47b8      	blx	r7
 8003464:	3001      	adds	r0, #1
 8003466:	f43f ae54 	beq.w	8003112 <_printf_float+0xb6>
 800346a:	f108 0801 	add.w	r8, r8, #1
 800346e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003470:	3b01      	subs	r3, #1
 8003472:	4543      	cmp	r3, r8
 8003474:	dcf1      	bgt.n	800345a <_printf_float+0x3fe>
 8003476:	4653      	mov	r3, sl
 8003478:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800347c:	e6de      	b.n	800323c <_printf_float+0x1e0>
 800347e:	f04f 0800 	mov.w	r8, #0
 8003482:	f104 091a 	add.w	r9, r4, #26
 8003486:	e7f2      	b.n	800346e <_printf_float+0x412>
 8003488:	2301      	movs	r3, #1
 800348a:	4642      	mov	r2, r8
 800348c:	e7df      	b.n	800344e <_printf_float+0x3f2>
 800348e:	2301      	movs	r3, #1
 8003490:	464a      	mov	r2, r9
 8003492:	4631      	mov	r1, r6
 8003494:	4628      	mov	r0, r5
 8003496:	47b8      	blx	r7
 8003498:	3001      	adds	r0, #1
 800349a:	f43f ae3a 	beq.w	8003112 <_printf_float+0xb6>
 800349e:	f108 0801 	add.w	r8, r8, #1
 80034a2:	68e3      	ldr	r3, [r4, #12]
 80034a4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80034a6:	1a5b      	subs	r3, r3, r1
 80034a8:	4543      	cmp	r3, r8
 80034aa:	dcf0      	bgt.n	800348e <_printf_float+0x432>
 80034ac:	e6fb      	b.n	80032a6 <_printf_float+0x24a>
 80034ae:	f04f 0800 	mov.w	r8, #0
 80034b2:	f104 0919 	add.w	r9, r4, #25
 80034b6:	e7f4      	b.n	80034a2 <_printf_float+0x446>

080034b8 <_printf_common>:
 80034b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034bc:	4616      	mov	r6, r2
 80034be:	4699      	mov	r9, r3
 80034c0:	688a      	ldr	r2, [r1, #8]
 80034c2:	690b      	ldr	r3, [r1, #16]
 80034c4:	4607      	mov	r7, r0
 80034c6:	4293      	cmp	r3, r2
 80034c8:	bfb8      	it	lt
 80034ca:	4613      	movlt	r3, r2
 80034cc:	6033      	str	r3, [r6, #0]
 80034ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80034d2:	460c      	mov	r4, r1
 80034d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80034d8:	b10a      	cbz	r2, 80034de <_printf_common+0x26>
 80034da:	3301      	adds	r3, #1
 80034dc:	6033      	str	r3, [r6, #0]
 80034de:	6823      	ldr	r3, [r4, #0]
 80034e0:	0699      	lsls	r1, r3, #26
 80034e2:	bf42      	ittt	mi
 80034e4:	6833      	ldrmi	r3, [r6, #0]
 80034e6:	3302      	addmi	r3, #2
 80034e8:	6033      	strmi	r3, [r6, #0]
 80034ea:	6825      	ldr	r5, [r4, #0]
 80034ec:	f015 0506 	ands.w	r5, r5, #6
 80034f0:	d106      	bne.n	8003500 <_printf_common+0x48>
 80034f2:	f104 0a19 	add.w	sl, r4, #25
 80034f6:	68e3      	ldr	r3, [r4, #12]
 80034f8:	6832      	ldr	r2, [r6, #0]
 80034fa:	1a9b      	subs	r3, r3, r2
 80034fc:	42ab      	cmp	r3, r5
 80034fe:	dc2b      	bgt.n	8003558 <_printf_common+0xa0>
 8003500:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003504:	1e13      	subs	r3, r2, #0
 8003506:	6822      	ldr	r2, [r4, #0]
 8003508:	bf18      	it	ne
 800350a:	2301      	movne	r3, #1
 800350c:	0692      	lsls	r2, r2, #26
 800350e:	d430      	bmi.n	8003572 <_printf_common+0xba>
 8003510:	4649      	mov	r1, r9
 8003512:	4638      	mov	r0, r7
 8003514:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003518:	47c0      	blx	r8
 800351a:	3001      	adds	r0, #1
 800351c:	d023      	beq.n	8003566 <_printf_common+0xae>
 800351e:	6823      	ldr	r3, [r4, #0]
 8003520:	6922      	ldr	r2, [r4, #16]
 8003522:	f003 0306 	and.w	r3, r3, #6
 8003526:	2b04      	cmp	r3, #4
 8003528:	bf14      	ite	ne
 800352a:	2500      	movne	r5, #0
 800352c:	6833      	ldreq	r3, [r6, #0]
 800352e:	f04f 0600 	mov.w	r6, #0
 8003532:	bf08      	it	eq
 8003534:	68e5      	ldreq	r5, [r4, #12]
 8003536:	f104 041a 	add.w	r4, r4, #26
 800353a:	bf08      	it	eq
 800353c:	1aed      	subeq	r5, r5, r3
 800353e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003542:	bf08      	it	eq
 8003544:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003548:	4293      	cmp	r3, r2
 800354a:	bfc4      	itt	gt
 800354c:	1a9b      	subgt	r3, r3, r2
 800354e:	18ed      	addgt	r5, r5, r3
 8003550:	42b5      	cmp	r5, r6
 8003552:	d11a      	bne.n	800358a <_printf_common+0xd2>
 8003554:	2000      	movs	r0, #0
 8003556:	e008      	b.n	800356a <_printf_common+0xb2>
 8003558:	2301      	movs	r3, #1
 800355a:	4652      	mov	r2, sl
 800355c:	4649      	mov	r1, r9
 800355e:	4638      	mov	r0, r7
 8003560:	47c0      	blx	r8
 8003562:	3001      	adds	r0, #1
 8003564:	d103      	bne.n	800356e <_printf_common+0xb6>
 8003566:	f04f 30ff 	mov.w	r0, #4294967295
 800356a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800356e:	3501      	adds	r5, #1
 8003570:	e7c1      	b.n	80034f6 <_printf_common+0x3e>
 8003572:	2030      	movs	r0, #48	; 0x30
 8003574:	18e1      	adds	r1, r4, r3
 8003576:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800357a:	1c5a      	adds	r2, r3, #1
 800357c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003580:	4422      	add	r2, r4
 8003582:	3302      	adds	r3, #2
 8003584:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003588:	e7c2      	b.n	8003510 <_printf_common+0x58>
 800358a:	2301      	movs	r3, #1
 800358c:	4622      	mov	r2, r4
 800358e:	4649      	mov	r1, r9
 8003590:	4638      	mov	r0, r7
 8003592:	47c0      	blx	r8
 8003594:	3001      	adds	r0, #1
 8003596:	d0e6      	beq.n	8003566 <_printf_common+0xae>
 8003598:	3601      	adds	r6, #1
 800359a:	e7d9      	b.n	8003550 <_printf_common+0x98>

0800359c <_printf_i>:
 800359c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80035a0:	7e0f      	ldrb	r7, [r1, #24]
 80035a2:	4691      	mov	r9, r2
 80035a4:	2f78      	cmp	r7, #120	; 0x78
 80035a6:	4680      	mov	r8, r0
 80035a8:	460c      	mov	r4, r1
 80035aa:	469a      	mov	sl, r3
 80035ac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80035ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80035b2:	d807      	bhi.n	80035c4 <_printf_i+0x28>
 80035b4:	2f62      	cmp	r7, #98	; 0x62
 80035b6:	d80a      	bhi.n	80035ce <_printf_i+0x32>
 80035b8:	2f00      	cmp	r7, #0
 80035ba:	f000 80d5 	beq.w	8003768 <_printf_i+0x1cc>
 80035be:	2f58      	cmp	r7, #88	; 0x58
 80035c0:	f000 80c1 	beq.w	8003746 <_printf_i+0x1aa>
 80035c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80035cc:	e03a      	b.n	8003644 <_printf_i+0xa8>
 80035ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80035d2:	2b15      	cmp	r3, #21
 80035d4:	d8f6      	bhi.n	80035c4 <_printf_i+0x28>
 80035d6:	a101      	add	r1, pc, #4	; (adr r1, 80035dc <_printf_i+0x40>)
 80035d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80035dc:	08003635 	.word	0x08003635
 80035e0:	08003649 	.word	0x08003649
 80035e4:	080035c5 	.word	0x080035c5
 80035e8:	080035c5 	.word	0x080035c5
 80035ec:	080035c5 	.word	0x080035c5
 80035f0:	080035c5 	.word	0x080035c5
 80035f4:	08003649 	.word	0x08003649
 80035f8:	080035c5 	.word	0x080035c5
 80035fc:	080035c5 	.word	0x080035c5
 8003600:	080035c5 	.word	0x080035c5
 8003604:	080035c5 	.word	0x080035c5
 8003608:	0800374f 	.word	0x0800374f
 800360c:	08003675 	.word	0x08003675
 8003610:	08003709 	.word	0x08003709
 8003614:	080035c5 	.word	0x080035c5
 8003618:	080035c5 	.word	0x080035c5
 800361c:	08003771 	.word	0x08003771
 8003620:	080035c5 	.word	0x080035c5
 8003624:	08003675 	.word	0x08003675
 8003628:	080035c5 	.word	0x080035c5
 800362c:	080035c5 	.word	0x080035c5
 8003630:	08003711 	.word	0x08003711
 8003634:	682b      	ldr	r3, [r5, #0]
 8003636:	1d1a      	adds	r2, r3, #4
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	602a      	str	r2, [r5, #0]
 800363c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003640:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003644:	2301      	movs	r3, #1
 8003646:	e0a0      	b.n	800378a <_printf_i+0x1ee>
 8003648:	6820      	ldr	r0, [r4, #0]
 800364a:	682b      	ldr	r3, [r5, #0]
 800364c:	0607      	lsls	r7, r0, #24
 800364e:	f103 0104 	add.w	r1, r3, #4
 8003652:	6029      	str	r1, [r5, #0]
 8003654:	d501      	bpl.n	800365a <_printf_i+0xbe>
 8003656:	681e      	ldr	r6, [r3, #0]
 8003658:	e003      	b.n	8003662 <_printf_i+0xc6>
 800365a:	0646      	lsls	r6, r0, #25
 800365c:	d5fb      	bpl.n	8003656 <_printf_i+0xba>
 800365e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003662:	2e00      	cmp	r6, #0
 8003664:	da03      	bge.n	800366e <_printf_i+0xd2>
 8003666:	232d      	movs	r3, #45	; 0x2d
 8003668:	4276      	negs	r6, r6
 800366a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800366e:	230a      	movs	r3, #10
 8003670:	4859      	ldr	r0, [pc, #356]	; (80037d8 <_printf_i+0x23c>)
 8003672:	e012      	b.n	800369a <_printf_i+0xfe>
 8003674:	682b      	ldr	r3, [r5, #0]
 8003676:	6820      	ldr	r0, [r4, #0]
 8003678:	1d19      	adds	r1, r3, #4
 800367a:	6029      	str	r1, [r5, #0]
 800367c:	0605      	lsls	r5, r0, #24
 800367e:	d501      	bpl.n	8003684 <_printf_i+0xe8>
 8003680:	681e      	ldr	r6, [r3, #0]
 8003682:	e002      	b.n	800368a <_printf_i+0xee>
 8003684:	0641      	lsls	r1, r0, #25
 8003686:	d5fb      	bpl.n	8003680 <_printf_i+0xe4>
 8003688:	881e      	ldrh	r6, [r3, #0]
 800368a:	2f6f      	cmp	r7, #111	; 0x6f
 800368c:	bf0c      	ite	eq
 800368e:	2308      	moveq	r3, #8
 8003690:	230a      	movne	r3, #10
 8003692:	4851      	ldr	r0, [pc, #324]	; (80037d8 <_printf_i+0x23c>)
 8003694:	2100      	movs	r1, #0
 8003696:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800369a:	6865      	ldr	r5, [r4, #4]
 800369c:	2d00      	cmp	r5, #0
 800369e:	bfa8      	it	ge
 80036a0:	6821      	ldrge	r1, [r4, #0]
 80036a2:	60a5      	str	r5, [r4, #8]
 80036a4:	bfa4      	itt	ge
 80036a6:	f021 0104 	bicge.w	r1, r1, #4
 80036aa:	6021      	strge	r1, [r4, #0]
 80036ac:	b90e      	cbnz	r6, 80036b2 <_printf_i+0x116>
 80036ae:	2d00      	cmp	r5, #0
 80036b0:	d04b      	beq.n	800374a <_printf_i+0x1ae>
 80036b2:	4615      	mov	r5, r2
 80036b4:	fbb6 f1f3 	udiv	r1, r6, r3
 80036b8:	fb03 6711 	mls	r7, r3, r1, r6
 80036bc:	5dc7      	ldrb	r7, [r0, r7]
 80036be:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80036c2:	4637      	mov	r7, r6
 80036c4:	42bb      	cmp	r3, r7
 80036c6:	460e      	mov	r6, r1
 80036c8:	d9f4      	bls.n	80036b4 <_printf_i+0x118>
 80036ca:	2b08      	cmp	r3, #8
 80036cc:	d10b      	bne.n	80036e6 <_printf_i+0x14a>
 80036ce:	6823      	ldr	r3, [r4, #0]
 80036d0:	07de      	lsls	r6, r3, #31
 80036d2:	d508      	bpl.n	80036e6 <_printf_i+0x14a>
 80036d4:	6923      	ldr	r3, [r4, #16]
 80036d6:	6861      	ldr	r1, [r4, #4]
 80036d8:	4299      	cmp	r1, r3
 80036da:	bfde      	ittt	le
 80036dc:	2330      	movle	r3, #48	; 0x30
 80036de:	f805 3c01 	strble.w	r3, [r5, #-1]
 80036e2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80036e6:	1b52      	subs	r2, r2, r5
 80036e8:	6122      	str	r2, [r4, #16]
 80036ea:	464b      	mov	r3, r9
 80036ec:	4621      	mov	r1, r4
 80036ee:	4640      	mov	r0, r8
 80036f0:	f8cd a000 	str.w	sl, [sp]
 80036f4:	aa03      	add	r2, sp, #12
 80036f6:	f7ff fedf 	bl	80034b8 <_printf_common>
 80036fa:	3001      	adds	r0, #1
 80036fc:	d14a      	bne.n	8003794 <_printf_i+0x1f8>
 80036fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003702:	b004      	add	sp, #16
 8003704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003708:	6823      	ldr	r3, [r4, #0]
 800370a:	f043 0320 	orr.w	r3, r3, #32
 800370e:	6023      	str	r3, [r4, #0]
 8003710:	2778      	movs	r7, #120	; 0x78
 8003712:	4832      	ldr	r0, [pc, #200]	; (80037dc <_printf_i+0x240>)
 8003714:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003718:	6823      	ldr	r3, [r4, #0]
 800371a:	6829      	ldr	r1, [r5, #0]
 800371c:	061f      	lsls	r7, r3, #24
 800371e:	f851 6b04 	ldr.w	r6, [r1], #4
 8003722:	d402      	bmi.n	800372a <_printf_i+0x18e>
 8003724:	065f      	lsls	r7, r3, #25
 8003726:	bf48      	it	mi
 8003728:	b2b6      	uxthmi	r6, r6
 800372a:	07df      	lsls	r7, r3, #31
 800372c:	bf48      	it	mi
 800372e:	f043 0320 	orrmi.w	r3, r3, #32
 8003732:	6029      	str	r1, [r5, #0]
 8003734:	bf48      	it	mi
 8003736:	6023      	strmi	r3, [r4, #0]
 8003738:	b91e      	cbnz	r6, 8003742 <_printf_i+0x1a6>
 800373a:	6823      	ldr	r3, [r4, #0]
 800373c:	f023 0320 	bic.w	r3, r3, #32
 8003740:	6023      	str	r3, [r4, #0]
 8003742:	2310      	movs	r3, #16
 8003744:	e7a6      	b.n	8003694 <_printf_i+0xf8>
 8003746:	4824      	ldr	r0, [pc, #144]	; (80037d8 <_printf_i+0x23c>)
 8003748:	e7e4      	b.n	8003714 <_printf_i+0x178>
 800374a:	4615      	mov	r5, r2
 800374c:	e7bd      	b.n	80036ca <_printf_i+0x12e>
 800374e:	682b      	ldr	r3, [r5, #0]
 8003750:	6826      	ldr	r6, [r4, #0]
 8003752:	1d18      	adds	r0, r3, #4
 8003754:	6961      	ldr	r1, [r4, #20]
 8003756:	6028      	str	r0, [r5, #0]
 8003758:	0635      	lsls	r5, r6, #24
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	d501      	bpl.n	8003762 <_printf_i+0x1c6>
 800375e:	6019      	str	r1, [r3, #0]
 8003760:	e002      	b.n	8003768 <_printf_i+0x1cc>
 8003762:	0670      	lsls	r0, r6, #25
 8003764:	d5fb      	bpl.n	800375e <_printf_i+0x1c2>
 8003766:	8019      	strh	r1, [r3, #0]
 8003768:	2300      	movs	r3, #0
 800376a:	4615      	mov	r5, r2
 800376c:	6123      	str	r3, [r4, #16]
 800376e:	e7bc      	b.n	80036ea <_printf_i+0x14e>
 8003770:	682b      	ldr	r3, [r5, #0]
 8003772:	2100      	movs	r1, #0
 8003774:	1d1a      	adds	r2, r3, #4
 8003776:	602a      	str	r2, [r5, #0]
 8003778:	681d      	ldr	r5, [r3, #0]
 800377a:	6862      	ldr	r2, [r4, #4]
 800377c:	4628      	mov	r0, r5
 800377e:	f000 f9c1 	bl	8003b04 <memchr>
 8003782:	b108      	cbz	r0, 8003788 <_printf_i+0x1ec>
 8003784:	1b40      	subs	r0, r0, r5
 8003786:	6060      	str	r0, [r4, #4]
 8003788:	6863      	ldr	r3, [r4, #4]
 800378a:	6123      	str	r3, [r4, #16]
 800378c:	2300      	movs	r3, #0
 800378e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003792:	e7aa      	b.n	80036ea <_printf_i+0x14e>
 8003794:	462a      	mov	r2, r5
 8003796:	4649      	mov	r1, r9
 8003798:	4640      	mov	r0, r8
 800379a:	6923      	ldr	r3, [r4, #16]
 800379c:	47d0      	blx	sl
 800379e:	3001      	adds	r0, #1
 80037a0:	d0ad      	beq.n	80036fe <_printf_i+0x162>
 80037a2:	6823      	ldr	r3, [r4, #0]
 80037a4:	079b      	lsls	r3, r3, #30
 80037a6:	d413      	bmi.n	80037d0 <_printf_i+0x234>
 80037a8:	68e0      	ldr	r0, [r4, #12]
 80037aa:	9b03      	ldr	r3, [sp, #12]
 80037ac:	4298      	cmp	r0, r3
 80037ae:	bfb8      	it	lt
 80037b0:	4618      	movlt	r0, r3
 80037b2:	e7a6      	b.n	8003702 <_printf_i+0x166>
 80037b4:	2301      	movs	r3, #1
 80037b6:	4632      	mov	r2, r6
 80037b8:	4649      	mov	r1, r9
 80037ba:	4640      	mov	r0, r8
 80037bc:	47d0      	blx	sl
 80037be:	3001      	adds	r0, #1
 80037c0:	d09d      	beq.n	80036fe <_printf_i+0x162>
 80037c2:	3501      	adds	r5, #1
 80037c4:	68e3      	ldr	r3, [r4, #12]
 80037c6:	9903      	ldr	r1, [sp, #12]
 80037c8:	1a5b      	subs	r3, r3, r1
 80037ca:	42ab      	cmp	r3, r5
 80037cc:	dcf2      	bgt.n	80037b4 <_printf_i+0x218>
 80037ce:	e7eb      	b.n	80037a8 <_printf_i+0x20c>
 80037d0:	2500      	movs	r5, #0
 80037d2:	f104 0619 	add.w	r6, r4, #25
 80037d6:	e7f5      	b.n	80037c4 <_printf_i+0x228>
 80037d8:	08005c4e 	.word	0x08005c4e
 80037dc:	08005c5f 	.word	0x08005c5f

080037e0 <std>:
 80037e0:	2300      	movs	r3, #0
 80037e2:	b510      	push	{r4, lr}
 80037e4:	4604      	mov	r4, r0
 80037e6:	e9c0 3300 	strd	r3, r3, [r0]
 80037ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80037ee:	6083      	str	r3, [r0, #8]
 80037f0:	8181      	strh	r1, [r0, #12]
 80037f2:	6643      	str	r3, [r0, #100]	; 0x64
 80037f4:	81c2      	strh	r2, [r0, #14]
 80037f6:	6183      	str	r3, [r0, #24]
 80037f8:	4619      	mov	r1, r3
 80037fa:	2208      	movs	r2, #8
 80037fc:	305c      	adds	r0, #92	; 0x5c
 80037fe:	f000 f902 	bl	8003a06 <memset>
 8003802:	4b05      	ldr	r3, [pc, #20]	; (8003818 <std+0x38>)
 8003804:	6224      	str	r4, [r4, #32]
 8003806:	6263      	str	r3, [r4, #36]	; 0x24
 8003808:	4b04      	ldr	r3, [pc, #16]	; (800381c <std+0x3c>)
 800380a:	62a3      	str	r3, [r4, #40]	; 0x28
 800380c:	4b04      	ldr	r3, [pc, #16]	; (8003820 <std+0x40>)
 800380e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003810:	4b04      	ldr	r3, [pc, #16]	; (8003824 <std+0x44>)
 8003812:	6323      	str	r3, [r4, #48]	; 0x30
 8003814:	bd10      	pop	{r4, pc}
 8003816:	bf00      	nop
 8003818:	08003981 	.word	0x08003981
 800381c:	080039a3 	.word	0x080039a3
 8003820:	080039db 	.word	0x080039db
 8003824:	080039ff 	.word	0x080039ff

08003828 <stdio_exit_handler>:
 8003828:	4a02      	ldr	r2, [pc, #8]	; (8003834 <stdio_exit_handler+0xc>)
 800382a:	4903      	ldr	r1, [pc, #12]	; (8003838 <stdio_exit_handler+0x10>)
 800382c:	4803      	ldr	r0, [pc, #12]	; (800383c <stdio_exit_handler+0x14>)
 800382e:	f000 b869 	b.w	8003904 <_fwalk_sglue>
 8003832:	bf00      	nop
 8003834:	2000000c 	.word	0x2000000c
 8003838:	0800549d 	.word	0x0800549d
 800383c:	20000018 	.word	0x20000018

08003840 <cleanup_stdio>:
 8003840:	6841      	ldr	r1, [r0, #4]
 8003842:	4b0c      	ldr	r3, [pc, #48]	; (8003874 <cleanup_stdio+0x34>)
 8003844:	b510      	push	{r4, lr}
 8003846:	4299      	cmp	r1, r3
 8003848:	4604      	mov	r4, r0
 800384a:	d001      	beq.n	8003850 <cleanup_stdio+0x10>
 800384c:	f001 fe26 	bl	800549c <_fflush_r>
 8003850:	68a1      	ldr	r1, [r4, #8]
 8003852:	4b09      	ldr	r3, [pc, #36]	; (8003878 <cleanup_stdio+0x38>)
 8003854:	4299      	cmp	r1, r3
 8003856:	d002      	beq.n	800385e <cleanup_stdio+0x1e>
 8003858:	4620      	mov	r0, r4
 800385a:	f001 fe1f 	bl	800549c <_fflush_r>
 800385e:	68e1      	ldr	r1, [r4, #12]
 8003860:	4b06      	ldr	r3, [pc, #24]	; (800387c <cleanup_stdio+0x3c>)
 8003862:	4299      	cmp	r1, r3
 8003864:	d004      	beq.n	8003870 <cleanup_stdio+0x30>
 8003866:	4620      	mov	r0, r4
 8003868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800386c:	f001 be16 	b.w	800549c <_fflush_r>
 8003870:	bd10      	pop	{r4, pc}
 8003872:	bf00      	nop
 8003874:	2000026c 	.word	0x2000026c
 8003878:	200002d4 	.word	0x200002d4
 800387c:	2000033c 	.word	0x2000033c

08003880 <global_stdio_init.part.0>:
 8003880:	b510      	push	{r4, lr}
 8003882:	4b0b      	ldr	r3, [pc, #44]	; (80038b0 <global_stdio_init.part.0+0x30>)
 8003884:	4c0b      	ldr	r4, [pc, #44]	; (80038b4 <global_stdio_init.part.0+0x34>)
 8003886:	4a0c      	ldr	r2, [pc, #48]	; (80038b8 <global_stdio_init.part.0+0x38>)
 8003888:	4620      	mov	r0, r4
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	2104      	movs	r1, #4
 800388e:	2200      	movs	r2, #0
 8003890:	f7ff ffa6 	bl	80037e0 <std>
 8003894:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003898:	2201      	movs	r2, #1
 800389a:	2109      	movs	r1, #9
 800389c:	f7ff ffa0 	bl	80037e0 <std>
 80038a0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80038a4:	2202      	movs	r2, #2
 80038a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038aa:	2112      	movs	r1, #18
 80038ac:	f7ff bf98 	b.w	80037e0 <std>
 80038b0:	200003a4 	.word	0x200003a4
 80038b4:	2000026c 	.word	0x2000026c
 80038b8:	08003829 	.word	0x08003829

080038bc <__sfp_lock_acquire>:
 80038bc:	4801      	ldr	r0, [pc, #4]	; (80038c4 <__sfp_lock_acquire+0x8>)
 80038be:	f000 b91f 	b.w	8003b00 <__retarget_lock_acquire_recursive>
 80038c2:	bf00      	nop
 80038c4:	200003ad 	.word	0x200003ad

080038c8 <__sfp_lock_release>:
 80038c8:	4801      	ldr	r0, [pc, #4]	; (80038d0 <__sfp_lock_release+0x8>)
 80038ca:	f000 b91a 	b.w	8003b02 <__retarget_lock_release_recursive>
 80038ce:	bf00      	nop
 80038d0:	200003ad 	.word	0x200003ad

080038d4 <__sinit>:
 80038d4:	b510      	push	{r4, lr}
 80038d6:	4604      	mov	r4, r0
 80038d8:	f7ff fff0 	bl	80038bc <__sfp_lock_acquire>
 80038dc:	6a23      	ldr	r3, [r4, #32]
 80038de:	b11b      	cbz	r3, 80038e8 <__sinit+0x14>
 80038e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038e4:	f7ff bff0 	b.w	80038c8 <__sfp_lock_release>
 80038e8:	4b04      	ldr	r3, [pc, #16]	; (80038fc <__sinit+0x28>)
 80038ea:	6223      	str	r3, [r4, #32]
 80038ec:	4b04      	ldr	r3, [pc, #16]	; (8003900 <__sinit+0x2c>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1f5      	bne.n	80038e0 <__sinit+0xc>
 80038f4:	f7ff ffc4 	bl	8003880 <global_stdio_init.part.0>
 80038f8:	e7f2      	b.n	80038e0 <__sinit+0xc>
 80038fa:	bf00      	nop
 80038fc:	08003841 	.word	0x08003841
 8003900:	200003a4 	.word	0x200003a4

08003904 <_fwalk_sglue>:
 8003904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003908:	4607      	mov	r7, r0
 800390a:	4688      	mov	r8, r1
 800390c:	4614      	mov	r4, r2
 800390e:	2600      	movs	r6, #0
 8003910:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003914:	f1b9 0901 	subs.w	r9, r9, #1
 8003918:	d505      	bpl.n	8003926 <_fwalk_sglue+0x22>
 800391a:	6824      	ldr	r4, [r4, #0]
 800391c:	2c00      	cmp	r4, #0
 800391e:	d1f7      	bne.n	8003910 <_fwalk_sglue+0xc>
 8003920:	4630      	mov	r0, r6
 8003922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003926:	89ab      	ldrh	r3, [r5, #12]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d907      	bls.n	800393c <_fwalk_sglue+0x38>
 800392c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003930:	3301      	adds	r3, #1
 8003932:	d003      	beq.n	800393c <_fwalk_sglue+0x38>
 8003934:	4629      	mov	r1, r5
 8003936:	4638      	mov	r0, r7
 8003938:	47c0      	blx	r8
 800393a:	4306      	orrs	r6, r0
 800393c:	3568      	adds	r5, #104	; 0x68
 800393e:	e7e9      	b.n	8003914 <_fwalk_sglue+0x10>

08003940 <siprintf>:
 8003940:	b40e      	push	{r1, r2, r3}
 8003942:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003946:	b500      	push	{lr}
 8003948:	b09c      	sub	sp, #112	; 0x70
 800394a:	ab1d      	add	r3, sp, #116	; 0x74
 800394c:	9002      	str	r0, [sp, #8]
 800394e:	9006      	str	r0, [sp, #24]
 8003950:	9107      	str	r1, [sp, #28]
 8003952:	9104      	str	r1, [sp, #16]
 8003954:	4808      	ldr	r0, [pc, #32]	; (8003978 <siprintf+0x38>)
 8003956:	4909      	ldr	r1, [pc, #36]	; (800397c <siprintf+0x3c>)
 8003958:	f853 2b04 	ldr.w	r2, [r3], #4
 800395c:	9105      	str	r1, [sp, #20]
 800395e:	6800      	ldr	r0, [r0, #0]
 8003960:	a902      	add	r1, sp, #8
 8003962:	9301      	str	r3, [sp, #4]
 8003964:	f001 fc1a 	bl	800519c <_svfiprintf_r>
 8003968:	2200      	movs	r2, #0
 800396a:	9b02      	ldr	r3, [sp, #8]
 800396c:	701a      	strb	r2, [r3, #0]
 800396e:	b01c      	add	sp, #112	; 0x70
 8003970:	f85d eb04 	ldr.w	lr, [sp], #4
 8003974:	b003      	add	sp, #12
 8003976:	4770      	bx	lr
 8003978:	20000064 	.word	0x20000064
 800397c:	ffff0208 	.word	0xffff0208

08003980 <__sread>:
 8003980:	b510      	push	{r4, lr}
 8003982:	460c      	mov	r4, r1
 8003984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003988:	f000 f86c 	bl	8003a64 <_read_r>
 800398c:	2800      	cmp	r0, #0
 800398e:	bfab      	itete	ge
 8003990:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003992:	89a3      	ldrhlt	r3, [r4, #12]
 8003994:	181b      	addge	r3, r3, r0
 8003996:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800399a:	bfac      	ite	ge
 800399c:	6563      	strge	r3, [r4, #84]	; 0x54
 800399e:	81a3      	strhlt	r3, [r4, #12]
 80039a0:	bd10      	pop	{r4, pc}

080039a2 <__swrite>:
 80039a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039a6:	461f      	mov	r7, r3
 80039a8:	898b      	ldrh	r3, [r1, #12]
 80039aa:	4605      	mov	r5, r0
 80039ac:	05db      	lsls	r3, r3, #23
 80039ae:	460c      	mov	r4, r1
 80039b0:	4616      	mov	r6, r2
 80039b2:	d505      	bpl.n	80039c0 <__swrite+0x1e>
 80039b4:	2302      	movs	r3, #2
 80039b6:	2200      	movs	r2, #0
 80039b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039bc:	f000 f840 	bl	8003a40 <_lseek_r>
 80039c0:	89a3      	ldrh	r3, [r4, #12]
 80039c2:	4632      	mov	r2, r6
 80039c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039c8:	81a3      	strh	r3, [r4, #12]
 80039ca:	4628      	mov	r0, r5
 80039cc:	463b      	mov	r3, r7
 80039ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80039d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039d6:	f000 b857 	b.w	8003a88 <_write_r>

080039da <__sseek>:
 80039da:	b510      	push	{r4, lr}
 80039dc:	460c      	mov	r4, r1
 80039de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039e2:	f000 f82d 	bl	8003a40 <_lseek_r>
 80039e6:	1c43      	adds	r3, r0, #1
 80039e8:	89a3      	ldrh	r3, [r4, #12]
 80039ea:	bf15      	itete	ne
 80039ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80039ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80039f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80039f6:	81a3      	strheq	r3, [r4, #12]
 80039f8:	bf18      	it	ne
 80039fa:	81a3      	strhne	r3, [r4, #12]
 80039fc:	bd10      	pop	{r4, pc}

080039fe <__sclose>:
 80039fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a02:	f000 b80d 	b.w	8003a20 <_close_r>

08003a06 <memset>:
 8003a06:	4603      	mov	r3, r0
 8003a08:	4402      	add	r2, r0
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d100      	bne.n	8003a10 <memset+0xa>
 8003a0e:	4770      	bx	lr
 8003a10:	f803 1b01 	strb.w	r1, [r3], #1
 8003a14:	e7f9      	b.n	8003a0a <memset+0x4>
	...

08003a18 <_localeconv_r>:
 8003a18:	4800      	ldr	r0, [pc, #0]	; (8003a1c <_localeconv_r+0x4>)
 8003a1a:	4770      	bx	lr
 8003a1c:	20000158 	.word	0x20000158

08003a20 <_close_r>:
 8003a20:	b538      	push	{r3, r4, r5, lr}
 8003a22:	2300      	movs	r3, #0
 8003a24:	4d05      	ldr	r5, [pc, #20]	; (8003a3c <_close_r+0x1c>)
 8003a26:	4604      	mov	r4, r0
 8003a28:	4608      	mov	r0, r1
 8003a2a:	602b      	str	r3, [r5, #0]
 8003a2c:	f7fd fb3f 	bl	80010ae <_close>
 8003a30:	1c43      	adds	r3, r0, #1
 8003a32:	d102      	bne.n	8003a3a <_close_r+0x1a>
 8003a34:	682b      	ldr	r3, [r5, #0]
 8003a36:	b103      	cbz	r3, 8003a3a <_close_r+0x1a>
 8003a38:	6023      	str	r3, [r4, #0]
 8003a3a:	bd38      	pop	{r3, r4, r5, pc}
 8003a3c:	200003a8 	.word	0x200003a8

08003a40 <_lseek_r>:
 8003a40:	b538      	push	{r3, r4, r5, lr}
 8003a42:	4604      	mov	r4, r0
 8003a44:	4608      	mov	r0, r1
 8003a46:	4611      	mov	r1, r2
 8003a48:	2200      	movs	r2, #0
 8003a4a:	4d05      	ldr	r5, [pc, #20]	; (8003a60 <_lseek_r+0x20>)
 8003a4c:	602a      	str	r2, [r5, #0]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	f7fd fb51 	bl	80010f6 <_lseek>
 8003a54:	1c43      	adds	r3, r0, #1
 8003a56:	d102      	bne.n	8003a5e <_lseek_r+0x1e>
 8003a58:	682b      	ldr	r3, [r5, #0]
 8003a5a:	b103      	cbz	r3, 8003a5e <_lseek_r+0x1e>
 8003a5c:	6023      	str	r3, [r4, #0]
 8003a5e:	bd38      	pop	{r3, r4, r5, pc}
 8003a60:	200003a8 	.word	0x200003a8

08003a64 <_read_r>:
 8003a64:	b538      	push	{r3, r4, r5, lr}
 8003a66:	4604      	mov	r4, r0
 8003a68:	4608      	mov	r0, r1
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	4d05      	ldr	r5, [pc, #20]	; (8003a84 <_read_r+0x20>)
 8003a70:	602a      	str	r2, [r5, #0]
 8003a72:	461a      	mov	r2, r3
 8003a74:	f7fd fae2 	bl	800103c <_read>
 8003a78:	1c43      	adds	r3, r0, #1
 8003a7a:	d102      	bne.n	8003a82 <_read_r+0x1e>
 8003a7c:	682b      	ldr	r3, [r5, #0]
 8003a7e:	b103      	cbz	r3, 8003a82 <_read_r+0x1e>
 8003a80:	6023      	str	r3, [r4, #0]
 8003a82:	bd38      	pop	{r3, r4, r5, pc}
 8003a84:	200003a8 	.word	0x200003a8

08003a88 <_write_r>:
 8003a88:	b538      	push	{r3, r4, r5, lr}
 8003a8a:	4604      	mov	r4, r0
 8003a8c:	4608      	mov	r0, r1
 8003a8e:	4611      	mov	r1, r2
 8003a90:	2200      	movs	r2, #0
 8003a92:	4d05      	ldr	r5, [pc, #20]	; (8003aa8 <_write_r+0x20>)
 8003a94:	602a      	str	r2, [r5, #0]
 8003a96:	461a      	mov	r2, r3
 8003a98:	f7fd faed 	bl	8001076 <_write>
 8003a9c:	1c43      	adds	r3, r0, #1
 8003a9e:	d102      	bne.n	8003aa6 <_write_r+0x1e>
 8003aa0:	682b      	ldr	r3, [r5, #0]
 8003aa2:	b103      	cbz	r3, 8003aa6 <_write_r+0x1e>
 8003aa4:	6023      	str	r3, [r4, #0]
 8003aa6:	bd38      	pop	{r3, r4, r5, pc}
 8003aa8:	200003a8 	.word	0x200003a8

08003aac <__errno>:
 8003aac:	4b01      	ldr	r3, [pc, #4]	; (8003ab4 <__errno+0x8>)
 8003aae:	6818      	ldr	r0, [r3, #0]
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	20000064 	.word	0x20000064

08003ab8 <__libc_init_array>:
 8003ab8:	b570      	push	{r4, r5, r6, lr}
 8003aba:	2600      	movs	r6, #0
 8003abc:	4d0c      	ldr	r5, [pc, #48]	; (8003af0 <__libc_init_array+0x38>)
 8003abe:	4c0d      	ldr	r4, [pc, #52]	; (8003af4 <__libc_init_array+0x3c>)
 8003ac0:	1b64      	subs	r4, r4, r5
 8003ac2:	10a4      	asrs	r4, r4, #2
 8003ac4:	42a6      	cmp	r6, r4
 8003ac6:	d109      	bne.n	8003adc <__libc_init_array+0x24>
 8003ac8:	f002 f888 	bl	8005bdc <_init>
 8003acc:	2600      	movs	r6, #0
 8003ace:	4d0a      	ldr	r5, [pc, #40]	; (8003af8 <__libc_init_array+0x40>)
 8003ad0:	4c0a      	ldr	r4, [pc, #40]	; (8003afc <__libc_init_array+0x44>)
 8003ad2:	1b64      	subs	r4, r4, r5
 8003ad4:	10a4      	asrs	r4, r4, #2
 8003ad6:	42a6      	cmp	r6, r4
 8003ad8:	d105      	bne.n	8003ae6 <__libc_init_array+0x2e>
 8003ada:	bd70      	pop	{r4, r5, r6, pc}
 8003adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ae0:	4798      	blx	r3
 8003ae2:	3601      	adds	r6, #1
 8003ae4:	e7ee      	b.n	8003ac4 <__libc_init_array+0xc>
 8003ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aea:	4798      	blx	r3
 8003aec:	3601      	adds	r6, #1
 8003aee:	e7f2      	b.n	8003ad6 <__libc_init_array+0x1e>
 8003af0:	08005fac 	.word	0x08005fac
 8003af4:	08005fac 	.word	0x08005fac
 8003af8:	08005fac 	.word	0x08005fac
 8003afc:	08005fb0 	.word	0x08005fb0

08003b00 <__retarget_lock_acquire_recursive>:
 8003b00:	4770      	bx	lr

08003b02 <__retarget_lock_release_recursive>:
 8003b02:	4770      	bx	lr

08003b04 <memchr>:
 8003b04:	4603      	mov	r3, r0
 8003b06:	b510      	push	{r4, lr}
 8003b08:	b2c9      	uxtb	r1, r1
 8003b0a:	4402      	add	r2, r0
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	4618      	mov	r0, r3
 8003b10:	d101      	bne.n	8003b16 <memchr+0x12>
 8003b12:	2000      	movs	r0, #0
 8003b14:	e003      	b.n	8003b1e <memchr+0x1a>
 8003b16:	7804      	ldrb	r4, [r0, #0]
 8003b18:	3301      	adds	r3, #1
 8003b1a:	428c      	cmp	r4, r1
 8003b1c:	d1f6      	bne.n	8003b0c <memchr+0x8>
 8003b1e:	bd10      	pop	{r4, pc}

08003b20 <quorem>:
 8003b20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b24:	6903      	ldr	r3, [r0, #16]
 8003b26:	690c      	ldr	r4, [r1, #16]
 8003b28:	4607      	mov	r7, r0
 8003b2a:	42a3      	cmp	r3, r4
 8003b2c:	db7f      	blt.n	8003c2e <quorem+0x10e>
 8003b2e:	3c01      	subs	r4, #1
 8003b30:	f100 0514 	add.w	r5, r0, #20
 8003b34:	f101 0814 	add.w	r8, r1, #20
 8003b38:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003b3c:	9301      	str	r3, [sp, #4]
 8003b3e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003b42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003b46:	3301      	adds	r3, #1
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	fbb2 f6f3 	udiv	r6, r2, r3
 8003b4e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003b52:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003b56:	d331      	bcc.n	8003bbc <quorem+0x9c>
 8003b58:	f04f 0e00 	mov.w	lr, #0
 8003b5c:	4640      	mov	r0, r8
 8003b5e:	46ac      	mov	ip, r5
 8003b60:	46f2      	mov	sl, lr
 8003b62:	f850 2b04 	ldr.w	r2, [r0], #4
 8003b66:	b293      	uxth	r3, r2
 8003b68:	fb06 e303 	mla	r3, r6, r3, lr
 8003b6c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003b70:	0c1a      	lsrs	r2, r3, #16
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	fb06 220e 	mla	r2, r6, lr, r2
 8003b78:	ebaa 0303 	sub.w	r3, sl, r3
 8003b7c:	f8dc a000 	ldr.w	sl, [ip]
 8003b80:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003b84:	fa1f fa8a 	uxth.w	sl, sl
 8003b88:	4453      	add	r3, sl
 8003b8a:	f8dc a000 	ldr.w	sl, [ip]
 8003b8e:	b292      	uxth	r2, r2
 8003b90:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003b94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003b9e:	4581      	cmp	r9, r0
 8003ba0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003ba4:	f84c 3b04 	str.w	r3, [ip], #4
 8003ba8:	d2db      	bcs.n	8003b62 <quorem+0x42>
 8003baa:	f855 300b 	ldr.w	r3, [r5, fp]
 8003bae:	b92b      	cbnz	r3, 8003bbc <quorem+0x9c>
 8003bb0:	9b01      	ldr	r3, [sp, #4]
 8003bb2:	3b04      	subs	r3, #4
 8003bb4:	429d      	cmp	r5, r3
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	d32d      	bcc.n	8003c16 <quorem+0xf6>
 8003bba:	613c      	str	r4, [r7, #16]
 8003bbc:	4638      	mov	r0, r7
 8003bbe:	f001 f995 	bl	8004eec <__mcmp>
 8003bc2:	2800      	cmp	r0, #0
 8003bc4:	db23      	blt.n	8003c0e <quorem+0xee>
 8003bc6:	4629      	mov	r1, r5
 8003bc8:	2000      	movs	r0, #0
 8003bca:	3601      	adds	r6, #1
 8003bcc:	f858 2b04 	ldr.w	r2, [r8], #4
 8003bd0:	f8d1 c000 	ldr.w	ip, [r1]
 8003bd4:	b293      	uxth	r3, r2
 8003bd6:	1ac3      	subs	r3, r0, r3
 8003bd8:	0c12      	lsrs	r2, r2, #16
 8003bda:	fa1f f08c 	uxth.w	r0, ip
 8003bde:	4403      	add	r3, r0
 8003be0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003be4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003bee:	45c1      	cmp	r9, r8
 8003bf0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003bf4:	f841 3b04 	str.w	r3, [r1], #4
 8003bf8:	d2e8      	bcs.n	8003bcc <quorem+0xac>
 8003bfa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003bfe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003c02:	b922      	cbnz	r2, 8003c0e <quorem+0xee>
 8003c04:	3b04      	subs	r3, #4
 8003c06:	429d      	cmp	r5, r3
 8003c08:	461a      	mov	r2, r3
 8003c0a:	d30a      	bcc.n	8003c22 <quorem+0x102>
 8003c0c:	613c      	str	r4, [r7, #16]
 8003c0e:	4630      	mov	r0, r6
 8003c10:	b003      	add	sp, #12
 8003c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c16:	6812      	ldr	r2, [r2, #0]
 8003c18:	3b04      	subs	r3, #4
 8003c1a:	2a00      	cmp	r2, #0
 8003c1c:	d1cd      	bne.n	8003bba <quorem+0x9a>
 8003c1e:	3c01      	subs	r4, #1
 8003c20:	e7c8      	b.n	8003bb4 <quorem+0x94>
 8003c22:	6812      	ldr	r2, [r2, #0]
 8003c24:	3b04      	subs	r3, #4
 8003c26:	2a00      	cmp	r2, #0
 8003c28:	d1f0      	bne.n	8003c0c <quorem+0xec>
 8003c2a:	3c01      	subs	r4, #1
 8003c2c:	e7eb      	b.n	8003c06 <quorem+0xe6>
 8003c2e:	2000      	movs	r0, #0
 8003c30:	e7ee      	b.n	8003c10 <quorem+0xf0>
 8003c32:	0000      	movs	r0, r0
 8003c34:	0000      	movs	r0, r0
	...

08003c38 <_dtoa_r>:
 8003c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c3c:	4616      	mov	r6, r2
 8003c3e:	461f      	mov	r7, r3
 8003c40:	69c4      	ldr	r4, [r0, #28]
 8003c42:	b099      	sub	sp, #100	; 0x64
 8003c44:	4605      	mov	r5, r0
 8003c46:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003c4a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8003c4e:	b974      	cbnz	r4, 8003c6e <_dtoa_r+0x36>
 8003c50:	2010      	movs	r0, #16
 8003c52:	f000 fe1d 	bl	8004890 <malloc>
 8003c56:	4602      	mov	r2, r0
 8003c58:	61e8      	str	r0, [r5, #28]
 8003c5a:	b920      	cbnz	r0, 8003c66 <_dtoa_r+0x2e>
 8003c5c:	21ef      	movs	r1, #239	; 0xef
 8003c5e:	4bac      	ldr	r3, [pc, #688]	; (8003f10 <_dtoa_r+0x2d8>)
 8003c60:	48ac      	ldr	r0, [pc, #688]	; (8003f14 <_dtoa_r+0x2dc>)
 8003c62:	f001 fc7b 	bl	800555c <__assert_func>
 8003c66:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003c6a:	6004      	str	r4, [r0, #0]
 8003c6c:	60c4      	str	r4, [r0, #12]
 8003c6e:	69eb      	ldr	r3, [r5, #28]
 8003c70:	6819      	ldr	r1, [r3, #0]
 8003c72:	b151      	cbz	r1, 8003c8a <_dtoa_r+0x52>
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	2301      	movs	r3, #1
 8003c78:	4093      	lsls	r3, r2
 8003c7a:	604a      	str	r2, [r1, #4]
 8003c7c:	608b      	str	r3, [r1, #8]
 8003c7e:	4628      	mov	r0, r5
 8003c80:	f000 fefa 	bl	8004a78 <_Bfree>
 8003c84:	2200      	movs	r2, #0
 8003c86:	69eb      	ldr	r3, [r5, #28]
 8003c88:	601a      	str	r2, [r3, #0]
 8003c8a:	1e3b      	subs	r3, r7, #0
 8003c8c:	bfaf      	iteee	ge
 8003c8e:	2300      	movge	r3, #0
 8003c90:	2201      	movlt	r2, #1
 8003c92:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003c96:	9305      	strlt	r3, [sp, #20]
 8003c98:	bfa8      	it	ge
 8003c9a:	f8c8 3000 	strge.w	r3, [r8]
 8003c9e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003ca2:	4b9d      	ldr	r3, [pc, #628]	; (8003f18 <_dtoa_r+0x2e0>)
 8003ca4:	bfb8      	it	lt
 8003ca6:	f8c8 2000 	strlt.w	r2, [r8]
 8003caa:	ea33 0309 	bics.w	r3, r3, r9
 8003cae:	d119      	bne.n	8003ce4 <_dtoa_r+0xac>
 8003cb0:	f242 730f 	movw	r3, #9999	; 0x270f
 8003cb4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003cb6:	6013      	str	r3, [r2, #0]
 8003cb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003cbc:	4333      	orrs	r3, r6
 8003cbe:	f000 8589 	beq.w	80047d4 <_dtoa_r+0xb9c>
 8003cc2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003cc4:	b953      	cbnz	r3, 8003cdc <_dtoa_r+0xa4>
 8003cc6:	4b95      	ldr	r3, [pc, #596]	; (8003f1c <_dtoa_r+0x2e4>)
 8003cc8:	e023      	b.n	8003d12 <_dtoa_r+0xda>
 8003cca:	4b95      	ldr	r3, [pc, #596]	; (8003f20 <_dtoa_r+0x2e8>)
 8003ccc:	9303      	str	r3, [sp, #12]
 8003cce:	3308      	adds	r3, #8
 8003cd0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003cd2:	6013      	str	r3, [r2, #0]
 8003cd4:	9803      	ldr	r0, [sp, #12]
 8003cd6:	b019      	add	sp, #100	; 0x64
 8003cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cdc:	4b8f      	ldr	r3, [pc, #572]	; (8003f1c <_dtoa_r+0x2e4>)
 8003cde:	9303      	str	r3, [sp, #12]
 8003ce0:	3303      	adds	r3, #3
 8003ce2:	e7f5      	b.n	8003cd0 <_dtoa_r+0x98>
 8003ce4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003ce8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8003cec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	f7fc fec4 	bl	8000a80 <__aeabi_dcmpeq>
 8003cf8:	4680      	mov	r8, r0
 8003cfa:	b160      	cbz	r0, 8003d16 <_dtoa_r+0xde>
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003d00:	6013      	str	r3, [r2, #0]
 8003d02:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f000 8562 	beq.w	80047ce <_dtoa_r+0xb96>
 8003d0a:	4b86      	ldr	r3, [pc, #536]	; (8003f24 <_dtoa_r+0x2ec>)
 8003d0c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003d0e:	6013      	str	r3, [r2, #0]
 8003d10:	3b01      	subs	r3, #1
 8003d12:	9303      	str	r3, [sp, #12]
 8003d14:	e7de      	b.n	8003cd4 <_dtoa_r+0x9c>
 8003d16:	ab16      	add	r3, sp, #88	; 0x58
 8003d18:	9301      	str	r3, [sp, #4]
 8003d1a:	ab17      	add	r3, sp, #92	; 0x5c
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	4628      	mov	r0, r5
 8003d20:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003d24:	f001 f98a 	bl	800503c <__d2b>
 8003d28:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003d2c:	4682      	mov	sl, r0
 8003d2e:	2c00      	cmp	r4, #0
 8003d30:	d07e      	beq.n	8003e30 <_dtoa_r+0x1f8>
 8003d32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003d36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d38:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003d3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d40:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8003d44:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003d48:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	2200      	movs	r2, #0
 8003d50:	4b75      	ldr	r3, [pc, #468]	; (8003f28 <_dtoa_r+0x2f0>)
 8003d52:	f7fc fa75 	bl	8000240 <__aeabi_dsub>
 8003d56:	a368      	add	r3, pc, #416	; (adr r3, 8003ef8 <_dtoa_r+0x2c0>)
 8003d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5c:	f7fc fc28 	bl	80005b0 <__aeabi_dmul>
 8003d60:	a367      	add	r3, pc, #412	; (adr r3, 8003f00 <_dtoa_r+0x2c8>)
 8003d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d66:	f7fc fa6d 	bl	8000244 <__adddf3>
 8003d6a:	4606      	mov	r6, r0
 8003d6c:	4620      	mov	r0, r4
 8003d6e:	460f      	mov	r7, r1
 8003d70:	f7fc fbb4 	bl	80004dc <__aeabi_i2d>
 8003d74:	a364      	add	r3, pc, #400	; (adr r3, 8003f08 <_dtoa_r+0x2d0>)
 8003d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7a:	f7fc fc19 	bl	80005b0 <__aeabi_dmul>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	460b      	mov	r3, r1
 8003d82:	4630      	mov	r0, r6
 8003d84:	4639      	mov	r1, r7
 8003d86:	f7fc fa5d 	bl	8000244 <__adddf3>
 8003d8a:	4606      	mov	r6, r0
 8003d8c:	460f      	mov	r7, r1
 8003d8e:	f7fc febf 	bl	8000b10 <__aeabi_d2iz>
 8003d92:	2200      	movs	r2, #0
 8003d94:	4683      	mov	fp, r0
 8003d96:	2300      	movs	r3, #0
 8003d98:	4630      	mov	r0, r6
 8003d9a:	4639      	mov	r1, r7
 8003d9c:	f7fc fe7a 	bl	8000a94 <__aeabi_dcmplt>
 8003da0:	b148      	cbz	r0, 8003db6 <_dtoa_r+0x17e>
 8003da2:	4658      	mov	r0, fp
 8003da4:	f7fc fb9a 	bl	80004dc <__aeabi_i2d>
 8003da8:	4632      	mov	r2, r6
 8003daa:	463b      	mov	r3, r7
 8003dac:	f7fc fe68 	bl	8000a80 <__aeabi_dcmpeq>
 8003db0:	b908      	cbnz	r0, 8003db6 <_dtoa_r+0x17e>
 8003db2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003db6:	f1bb 0f16 	cmp.w	fp, #22
 8003dba:	d857      	bhi.n	8003e6c <_dtoa_r+0x234>
 8003dbc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003dc0:	4b5a      	ldr	r3, [pc, #360]	; (8003f2c <_dtoa_r+0x2f4>)
 8003dc2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dca:	f7fc fe63 	bl	8000a94 <__aeabi_dcmplt>
 8003dce:	2800      	cmp	r0, #0
 8003dd0:	d04e      	beq.n	8003e70 <_dtoa_r+0x238>
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003dd8:	930f      	str	r3, [sp, #60]	; 0x3c
 8003dda:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003ddc:	1b1b      	subs	r3, r3, r4
 8003dde:	1e5a      	subs	r2, r3, #1
 8003de0:	bf46      	itte	mi
 8003de2:	f1c3 0901 	rsbmi	r9, r3, #1
 8003de6:	2300      	movmi	r3, #0
 8003de8:	f04f 0900 	movpl.w	r9, #0
 8003dec:	9209      	str	r2, [sp, #36]	; 0x24
 8003dee:	bf48      	it	mi
 8003df0:	9309      	strmi	r3, [sp, #36]	; 0x24
 8003df2:	f1bb 0f00 	cmp.w	fp, #0
 8003df6:	db3d      	blt.n	8003e74 <_dtoa_r+0x23c>
 8003df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dfa:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8003dfe:	445b      	add	r3, fp
 8003e00:	9309      	str	r3, [sp, #36]	; 0x24
 8003e02:	2300      	movs	r3, #0
 8003e04:	930a      	str	r3, [sp, #40]	; 0x28
 8003e06:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e08:	2b09      	cmp	r3, #9
 8003e0a:	d867      	bhi.n	8003edc <_dtoa_r+0x2a4>
 8003e0c:	2b05      	cmp	r3, #5
 8003e0e:	bfc4      	itt	gt
 8003e10:	3b04      	subgt	r3, #4
 8003e12:	9322      	strgt	r3, [sp, #136]	; 0x88
 8003e14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e16:	bfc8      	it	gt
 8003e18:	2400      	movgt	r4, #0
 8003e1a:	f1a3 0302 	sub.w	r3, r3, #2
 8003e1e:	bfd8      	it	le
 8003e20:	2401      	movle	r4, #1
 8003e22:	2b03      	cmp	r3, #3
 8003e24:	f200 8086 	bhi.w	8003f34 <_dtoa_r+0x2fc>
 8003e28:	e8df f003 	tbb	[pc, r3]
 8003e2c:	5637392c 	.word	0x5637392c
 8003e30:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8003e34:	441c      	add	r4, r3
 8003e36:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8003e3a:	2b20      	cmp	r3, #32
 8003e3c:	bfc1      	itttt	gt
 8003e3e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003e42:	fa09 f903 	lslgt.w	r9, r9, r3
 8003e46:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8003e4a:	fa26 f303 	lsrgt.w	r3, r6, r3
 8003e4e:	bfd6      	itet	le
 8003e50:	f1c3 0320 	rsble	r3, r3, #32
 8003e54:	ea49 0003 	orrgt.w	r0, r9, r3
 8003e58:	fa06 f003 	lslle.w	r0, r6, r3
 8003e5c:	f7fc fb2e 	bl	80004bc <__aeabi_ui2d>
 8003e60:	2201      	movs	r2, #1
 8003e62:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8003e66:	3c01      	subs	r4, #1
 8003e68:	9213      	str	r2, [sp, #76]	; 0x4c
 8003e6a:	e76f      	b.n	8003d4c <_dtoa_r+0x114>
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e7b3      	b.n	8003dd8 <_dtoa_r+0x1a0>
 8003e70:	900f      	str	r0, [sp, #60]	; 0x3c
 8003e72:	e7b2      	b.n	8003dda <_dtoa_r+0x1a2>
 8003e74:	f1cb 0300 	rsb	r3, fp, #0
 8003e78:	930a      	str	r3, [sp, #40]	; 0x28
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	eba9 090b 	sub.w	r9, r9, fp
 8003e80:	930e      	str	r3, [sp, #56]	; 0x38
 8003e82:	e7c0      	b.n	8003e06 <_dtoa_r+0x1ce>
 8003e84:	2300      	movs	r3, #0
 8003e86:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e88:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	dc55      	bgt.n	8003f3a <_dtoa_r+0x302>
 8003e8e:	2301      	movs	r3, #1
 8003e90:	461a      	mov	r2, r3
 8003e92:	9306      	str	r3, [sp, #24]
 8003e94:	9308      	str	r3, [sp, #32]
 8003e96:	9223      	str	r2, [sp, #140]	; 0x8c
 8003e98:	e00b      	b.n	8003eb2 <_dtoa_r+0x27a>
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e7f3      	b.n	8003e86 <_dtoa_r+0x24e>
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ea2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003ea4:	445b      	add	r3, fp
 8003ea6:	9306      	str	r3, [sp, #24]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	9308      	str	r3, [sp, #32]
 8003eae:	bfb8      	it	lt
 8003eb0:	2301      	movlt	r3, #1
 8003eb2:	2100      	movs	r1, #0
 8003eb4:	2204      	movs	r2, #4
 8003eb6:	69e8      	ldr	r0, [r5, #28]
 8003eb8:	f102 0614 	add.w	r6, r2, #20
 8003ebc:	429e      	cmp	r6, r3
 8003ebe:	d940      	bls.n	8003f42 <_dtoa_r+0x30a>
 8003ec0:	6041      	str	r1, [r0, #4]
 8003ec2:	4628      	mov	r0, r5
 8003ec4:	f000 fd98 	bl	80049f8 <_Balloc>
 8003ec8:	9003      	str	r0, [sp, #12]
 8003eca:	2800      	cmp	r0, #0
 8003ecc:	d13c      	bne.n	8003f48 <_dtoa_r+0x310>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	f240 11af 	movw	r1, #431	; 0x1af
 8003ed4:	4b16      	ldr	r3, [pc, #88]	; (8003f30 <_dtoa_r+0x2f8>)
 8003ed6:	e6c3      	b.n	8003c60 <_dtoa_r+0x28>
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e7e1      	b.n	8003ea0 <_dtoa_r+0x268>
 8003edc:	2401      	movs	r4, #1
 8003ede:	2300      	movs	r3, #0
 8003ee0:	940b      	str	r4, [sp, #44]	; 0x2c
 8003ee2:	9322      	str	r3, [sp, #136]	; 0x88
 8003ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee8:	2200      	movs	r2, #0
 8003eea:	9306      	str	r3, [sp, #24]
 8003eec:	9308      	str	r3, [sp, #32]
 8003eee:	2312      	movs	r3, #18
 8003ef0:	e7d1      	b.n	8003e96 <_dtoa_r+0x25e>
 8003ef2:	bf00      	nop
 8003ef4:	f3af 8000 	nop.w
 8003ef8:	636f4361 	.word	0x636f4361
 8003efc:	3fd287a7 	.word	0x3fd287a7
 8003f00:	8b60c8b3 	.word	0x8b60c8b3
 8003f04:	3fc68a28 	.word	0x3fc68a28
 8003f08:	509f79fb 	.word	0x509f79fb
 8003f0c:	3fd34413 	.word	0x3fd34413
 8003f10:	08005c7d 	.word	0x08005c7d
 8003f14:	08005c94 	.word	0x08005c94
 8003f18:	7ff00000 	.word	0x7ff00000
 8003f1c:	08005c79 	.word	0x08005c79
 8003f20:	08005c70 	.word	0x08005c70
 8003f24:	08005c4d 	.word	0x08005c4d
 8003f28:	3ff80000 	.word	0x3ff80000
 8003f2c:	08005d80 	.word	0x08005d80
 8003f30:	08005cec 	.word	0x08005cec
 8003f34:	2301      	movs	r3, #1
 8003f36:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f38:	e7d4      	b.n	8003ee4 <_dtoa_r+0x2ac>
 8003f3a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003f3c:	9306      	str	r3, [sp, #24]
 8003f3e:	9308      	str	r3, [sp, #32]
 8003f40:	e7b7      	b.n	8003eb2 <_dtoa_r+0x27a>
 8003f42:	3101      	adds	r1, #1
 8003f44:	0052      	lsls	r2, r2, #1
 8003f46:	e7b7      	b.n	8003eb8 <_dtoa_r+0x280>
 8003f48:	69eb      	ldr	r3, [r5, #28]
 8003f4a:	9a03      	ldr	r2, [sp, #12]
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	9b08      	ldr	r3, [sp, #32]
 8003f50:	2b0e      	cmp	r3, #14
 8003f52:	f200 80a8 	bhi.w	80040a6 <_dtoa_r+0x46e>
 8003f56:	2c00      	cmp	r4, #0
 8003f58:	f000 80a5 	beq.w	80040a6 <_dtoa_r+0x46e>
 8003f5c:	f1bb 0f00 	cmp.w	fp, #0
 8003f60:	dd34      	ble.n	8003fcc <_dtoa_r+0x394>
 8003f62:	4b9a      	ldr	r3, [pc, #616]	; (80041cc <_dtoa_r+0x594>)
 8003f64:	f00b 020f 	and.w	r2, fp, #15
 8003f68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003f6c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8003f70:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f74:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003f78:	ea4f 142b 	mov.w	r4, fp, asr #4
 8003f7c:	d016      	beq.n	8003fac <_dtoa_r+0x374>
 8003f7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003f82:	4b93      	ldr	r3, [pc, #588]	; (80041d0 <_dtoa_r+0x598>)
 8003f84:	2703      	movs	r7, #3
 8003f86:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003f8a:	f7fc fc3b 	bl	8000804 <__aeabi_ddiv>
 8003f8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003f92:	f004 040f 	and.w	r4, r4, #15
 8003f96:	4e8e      	ldr	r6, [pc, #568]	; (80041d0 <_dtoa_r+0x598>)
 8003f98:	b954      	cbnz	r4, 8003fb0 <_dtoa_r+0x378>
 8003f9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003f9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003fa2:	f7fc fc2f 	bl	8000804 <__aeabi_ddiv>
 8003fa6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003faa:	e029      	b.n	8004000 <_dtoa_r+0x3c8>
 8003fac:	2702      	movs	r7, #2
 8003fae:	e7f2      	b.n	8003f96 <_dtoa_r+0x35e>
 8003fb0:	07e1      	lsls	r1, r4, #31
 8003fb2:	d508      	bpl.n	8003fc6 <_dtoa_r+0x38e>
 8003fb4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003fb8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003fbc:	f7fc faf8 	bl	80005b0 <__aeabi_dmul>
 8003fc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003fc4:	3701      	adds	r7, #1
 8003fc6:	1064      	asrs	r4, r4, #1
 8003fc8:	3608      	adds	r6, #8
 8003fca:	e7e5      	b.n	8003f98 <_dtoa_r+0x360>
 8003fcc:	f000 80a5 	beq.w	800411a <_dtoa_r+0x4e2>
 8003fd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003fd4:	f1cb 0400 	rsb	r4, fp, #0
 8003fd8:	4b7c      	ldr	r3, [pc, #496]	; (80041cc <_dtoa_r+0x594>)
 8003fda:	f004 020f 	and.w	r2, r4, #15
 8003fde:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe6:	f7fc fae3 	bl	80005b0 <__aeabi_dmul>
 8003fea:	2702      	movs	r7, #2
 8003fec:	2300      	movs	r3, #0
 8003fee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003ff2:	4e77      	ldr	r6, [pc, #476]	; (80041d0 <_dtoa_r+0x598>)
 8003ff4:	1124      	asrs	r4, r4, #4
 8003ff6:	2c00      	cmp	r4, #0
 8003ff8:	f040 8084 	bne.w	8004104 <_dtoa_r+0x4cc>
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1d2      	bne.n	8003fa6 <_dtoa_r+0x36e>
 8004000:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004004:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004008:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800400a:	2b00      	cmp	r3, #0
 800400c:	f000 8087 	beq.w	800411e <_dtoa_r+0x4e6>
 8004010:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004014:	2200      	movs	r2, #0
 8004016:	4b6f      	ldr	r3, [pc, #444]	; (80041d4 <_dtoa_r+0x59c>)
 8004018:	f7fc fd3c 	bl	8000a94 <__aeabi_dcmplt>
 800401c:	2800      	cmp	r0, #0
 800401e:	d07e      	beq.n	800411e <_dtoa_r+0x4e6>
 8004020:	9b08      	ldr	r3, [sp, #32]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d07b      	beq.n	800411e <_dtoa_r+0x4e6>
 8004026:	9b06      	ldr	r3, [sp, #24]
 8004028:	2b00      	cmp	r3, #0
 800402a:	dd38      	ble.n	800409e <_dtoa_r+0x466>
 800402c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004030:	2200      	movs	r2, #0
 8004032:	4b69      	ldr	r3, [pc, #420]	; (80041d8 <_dtoa_r+0x5a0>)
 8004034:	f7fc fabc 	bl	80005b0 <__aeabi_dmul>
 8004038:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800403c:	9c06      	ldr	r4, [sp, #24]
 800403e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8004042:	3701      	adds	r7, #1
 8004044:	4638      	mov	r0, r7
 8004046:	f7fc fa49 	bl	80004dc <__aeabi_i2d>
 800404a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800404e:	f7fc faaf 	bl	80005b0 <__aeabi_dmul>
 8004052:	2200      	movs	r2, #0
 8004054:	4b61      	ldr	r3, [pc, #388]	; (80041dc <_dtoa_r+0x5a4>)
 8004056:	f7fc f8f5 	bl	8000244 <__adddf3>
 800405a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800405e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004062:	9611      	str	r6, [sp, #68]	; 0x44
 8004064:	2c00      	cmp	r4, #0
 8004066:	d15d      	bne.n	8004124 <_dtoa_r+0x4ec>
 8004068:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800406c:	2200      	movs	r2, #0
 800406e:	4b5c      	ldr	r3, [pc, #368]	; (80041e0 <_dtoa_r+0x5a8>)
 8004070:	f7fc f8e6 	bl	8000240 <__aeabi_dsub>
 8004074:	4602      	mov	r2, r0
 8004076:	460b      	mov	r3, r1
 8004078:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800407c:	4633      	mov	r3, r6
 800407e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004080:	f7fc fd26 	bl	8000ad0 <__aeabi_dcmpgt>
 8004084:	2800      	cmp	r0, #0
 8004086:	f040 8295 	bne.w	80045b4 <_dtoa_r+0x97c>
 800408a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800408e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004090:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004094:	f7fc fcfe 	bl	8000a94 <__aeabi_dcmplt>
 8004098:	2800      	cmp	r0, #0
 800409a:	f040 8289 	bne.w	80045b0 <_dtoa_r+0x978>
 800409e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80040a2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80040a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f2c0 8151 	blt.w	8004350 <_dtoa_r+0x718>
 80040ae:	f1bb 0f0e 	cmp.w	fp, #14
 80040b2:	f300 814d 	bgt.w	8004350 <_dtoa_r+0x718>
 80040b6:	4b45      	ldr	r3, [pc, #276]	; (80041cc <_dtoa_r+0x594>)
 80040b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80040bc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80040c0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80040c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f280 80da 	bge.w	8004280 <_dtoa_r+0x648>
 80040cc:	9b08      	ldr	r3, [sp, #32]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f300 80d6 	bgt.w	8004280 <_dtoa_r+0x648>
 80040d4:	f040 826b 	bne.w	80045ae <_dtoa_r+0x976>
 80040d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80040dc:	2200      	movs	r2, #0
 80040de:	4b40      	ldr	r3, [pc, #256]	; (80041e0 <_dtoa_r+0x5a8>)
 80040e0:	f7fc fa66 	bl	80005b0 <__aeabi_dmul>
 80040e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040e8:	f7fc fce8 	bl	8000abc <__aeabi_dcmpge>
 80040ec:	9c08      	ldr	r4, [sp, #32]
 80040ee:	4626      	mov	r6, r4
 80040f0:	2800      	cmp	r0, #0
 80040f2:	f040 8241 	bne.w	8004578 <_dtoa_r+0x940>
 80040f6:	2331      	movs	r3, #49	; 0x31
 80040f8:	9f03      	ldr	r7, [sp, #12]
 80040fa:	f10b 0b01 	add.w	fp, fp, #1
 80040fe:	f807 3b01 	strb.w	r3, [r7], #1
 8004102:	e23d      	b.n	8004580 <_dtoa_r+0x948>
 8004104:	07e2      	lsls	r2, r4, #31
 8004106:	d505      	bpl.n	8004114 <_dtoa_r+0x4dc>
 8004108:	e9d6 2300 	ldrd	r2, r3, [r6]
 800410c:	f7fc fa50 	bl	80005b0 <__aeabi_dmul>
 8004110:	2301      	movs	r3, #1
 8004112:	3701      	adds	r7, #1
 8004114:	1064      	asrs	r4, r4, #1
 8004116:	3608      	adds	r6, #8
 8004118:	e76d      	b.n	8003ff6 <_dtoa_r+0x3be>
 800411a:	2702      	movs	r7, #2
 800411c:	e770      	b.n	8004000 <_dtoa_r+0x3c8>
 800411e:	46d8      	mov	r8, fp
 8004120:	9c08      	ldr	r4, [sp, #32]
 8004122:	e78f      	b.n	8004044 <_dtoa_r+0x40c>
 8004124:	9903      	ldr	r1, [sp, #12]
 8004126:	4b29      	ldr	r3, [pc, #164]	; (80041cc <_dtoa_r+0x594>)
 8004128:	4421      	add	r1, r4
 800412a:	9112      	str	r1, [sp, #72]	; 0x48
 800412c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800412e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004132:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004136:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800413a:	2900      	cmp	r1, #0
 800413c:	d054      	beq.n	80041e8 <_dtoa_r+0x5b0>
 800413e:	2000      	movs	r0, #0
 8004140:	4928      	ldr	r1, [pc, #160]	; (80041e4 <_dtoa_r+0x5ac>)
 8004142:	f7fc fb5f 	bl	8000804 <__aeabi_ddiv>
 8004146:	463b      	mov	r3, r7
 8004148:	4632      	mov	r2, r6
 800414a:	f7fc f879 	bl	8000240 <__aeabi_dsub>
 800414e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004152:	9f03      	ldr	r7, [sp, #12]
 8004154:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004158:	f7fc fcda 	bl	8000b10 <__aeabi_d2iz>
 800415c:	4604      	mov	r4, r0
 800415e:	f7fc f9bd 	bl	80004dc <__aeabi_i2d>
 8004162:	4602      	mov	r2, r0
 8004164:	460b      	mov	r3, r1
 8004166:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800416a:	f7fc f869 	bl	8000240 <__aeabi_dsub>
 800416e:	4602      	mov	r2, r0
 8004170:	460b      	mov	r3, r1
 8004172:	3430      	adds	r4, #48	; 0x30
 8004174:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004178:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800417c:	f807 4b01 	strb.w	r4, [r7], #1
 8004180:	f7fc fc88 	bl	8000a94 <__aeabi_dcmplt>
 8004184:	2800      	cmp	r0, #0
 8004186:	d173      	bne.n	8004270 <_dtoa_r+0x638>
 8004188:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800418c:	2000      	movs	r0, #0
 800418e:	4911      	ldr	r1, [pc, #68]	; (80041d4 <_dtoa_r+0x59c>)
 8004190:	f7fc f856 	bl	8000240 <__aeabi_dsub>
 8004194:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004198:	f7fc fc7c 	bl	8000a94 <__aeabi_dcmplt>
 800419c:	2800      	cmp	r0, #0
 800419e:	f040 80b6 	bne.w	800430e <_dtoa_r+0x6d6>
 80041a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80041a4:	429f      	cmp	r7, r3
 80041a6:	f43f af7a 	beq.w	800409e <_dtoa_r+0x466>
 80041aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80041ae:	2200      	movs	r2, #0
 80041b0:	4b09      	ldr	r3, [pc, #36]	; (80041d8 <_dtoa_r+0x5a0>)
 80041b2:	f7fc f9fd 	bl	80005b0 <__aeabi_dmul>
 80041b6:	2200      	movs	r2, #0
 80041b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80041bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80041c0:	4b05      	ldr	r3, [pc, #20]	; (80041d8 <_dtoa_r+0x5a0>)
 80041c2:	f7fc f9f5 	bl	80005b0 <__aeabi_dmul>
 80041c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80041ca:	e7c3      	b.n	8004154 <_dtoa_r+0x51c>
 80041cc:	08005d80 	.word	0x08005d80
 80041d0:	08005d58 	.word	0x08005d58
 80041d4:	3ff00000 	.word	0x3ff00000
 80041d8:	40240000 	.word	0x40240000
 80041dc:	401c0000 	.word	0x401c0000
 80041e0:	40140000 	.word	0x40140000
 80041e4:	3fe00000 	.word	0x3fe00000
 80041e8:	4630      	mov	r0, r6
 80041ea:	4639      	mov	r1, r7
 80041ec:	f7fc f9e0 	bl	80005b0 <__aeabi_dmul>
 80041f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80041f2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80041f6:	9c03      	ldr	r4, [sp, #12]
 80041f8:	9314      	str	r3, [sp, #80]	; 0x50
 80041fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80041fe:	f7fc fc87 	bl	8000b10 <__aeabi_d2iz>
 8004202:	9015      	str	r0, [sp, #84]	; 0x54
 8004204:	f7fc f96a 	bl	80004dc <__aeabi_i2d>
 8004208:	4602      	mov	r2, r0
 800420a:	460b      	mov	r3, r1
 800420c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004210:	f7fc f816 	bl	8000240 <__aeabi_dsub>
 8004214:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004216:	4606      	mov	r6, r0
 8004218:	3330      	adds	r3, #48	; 0x30
 800421a:	f804 3b01 	strb.w	r3, [r4], #1
 800421e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004220:	460f      	mov	r7, r1
 8004222:	429c      	cmp	r4, r3
 8004224:	f04f 0200 	mov.w	r2, #0
 8004228:	d124      	bne.n	8004274 <_dtoa_r+0x63c>
 800422a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800422e:	4baf      	ldr	r3, [pc, #700]	; (80044ec <_dtoa_r+0x8b4>)
 8004230:	f7fc f808 	bl	8000244 <__adddf3>
 8004234:	4602      	mov	r2, r0
 8004236:	460b      	mov	r3, r1
 8004238:	4630      	mov	r0, r6
 800423a:	4639      	mov	r1, r7
 800423c:	f7fc fc48 	bl	8000ad0 <__aeabi_dcmpgt>
 8004240:	2800      	cmp	r0, #0
 8004242:	d163      	bne.n	800430c <_dtoa_r+0x6d4>
 8004244:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004248:	2000      	movs	r0, #0
 800424a:	49a8      	ldr	r1, [pc, #672]	; (80044ec <_dtoa_r+0x8b4>)
 800424c:	f7fb fff8 	bl	8000240 <__aeabi_dsub>
 8004250:	4602      	mov	r2, r0
 8004252:	460b      	mov	r3, r1
 8004254:	4630      	mov	r0, r6
 8004256:	4639      	mov	r1, r7
 8004258:	f7fc fc1c 	bl	8000a94 <__aeabi_dcmplt>
 800425c:	2800      	cmp	r0, #0
 800425e:	f43f af1e 	beq.w	800409e <_dtoa_r+0x466>
 8004262:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004264:	1e7b      	subs	r3, r7, #1
 8004266:	9314      	str	r3, [sp, #80]	; 0x50
 8004268:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800426c:	2b30      	cmp	r3, #48	; 0x30
 800426e:	d0f8      	beq.n	8004262 <_dtoa_r+0x62a>
 8004270:	46c3      	mov	fp, r8
 8004272:	e03b      	b.n	80042ec <_dtoa_r+0x6b4>
 8004274:	4b9e      	ldr	r3, [pc, #632]	; (80044f0 <_dtoa_r+0x8b8>)
 8004276:	f7fc f99b 	bl	80005b0 <__aeabi_dmul>
 800427a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800427e:	e7bc      	b.n	80041fa <_dtoa_r+0x5c2>
 8004280:	9f03      	ldr	r7, [sp, #12]
 8004282:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004286:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800428a:	4640      	mov	r0, r8
 800428c:	4649      	mov	r1, r9
 800428e:	f7fc fab9 	bl	8000804 <__aeabi_ddiv>
 8004292:	f7fc fc3d 	bl	8000b10 <__aeabi_d2iz>
 8004296:	4604      	mov	r4, r0
 8004298:	f7fc f920 	bl	80004dc <__aeabi_i2d>
 800429c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80042a0:	f7fc f986 	bl	80005b0 <__aeabi_dmul>
 80042a4:	4602      	mov	r2, r0
 80042a6:	460b      	mov	r3, r1
 80042a8:	4640      	mov	r0, r8
 80042aa:	4649      	mov	r1, r9
 80042ac:	f7fb ffc8 	bl	8000240 <__aeabi_dsub>
 80042b0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80042b4:	f807 6b01 	strb.w	r6, [r7], #1
 80042b8:	9e03      	ldr	r6, [sp, #12]
 80042ba:	f8dd c020 	ldr.w	ip, [sp, #32]
 80042be:	1bbe      	subs	r6, r7, r6
 80042c0:	45b4      	cmp	ip, r6
 80042c2:	4602      	mov	r2, r0
 80042c4:	460b      	mov	r3, r1
 80042c6:	d136      	bne.n	8004336 <_dtoa_r+0x6fe>
 80042c8:	f7fb ffbc 	bl	8000244 <__adddf3>
 80042cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80042d0:	4680      	mov	r8, r0
 80042d2:	4689      	mov	r9, r1
 80042d4:	f7fc fbfc 	bl	8000ad0 <__aeabi_dcmpgt>
 80042d8:	bb58      	cbnz	r0, 8004332 <_dtoa_r+0x6fa>
 80042da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80042de:	4640      	mov	r0, r8
 80042e0:	4649      	mov	r1, r9
 80042e2:	f7fc fbcd 	bl	8000a80 <__aeabi_dcmpeq>
 80042e6:	b108      	cbz	r0, 80042ec <_dtoa_r+0x6b4>
 80042e8:	07e3      	lsls	r3, r4, #31
 80042ea:	d422      	bmi.n	8004332 <_dtoa_r+0x6fa>
 80042ec:	4651      	mov	r1, sl
 80042ee:	4628      	mov	r0, r5
 80042f0:	f000 fbc2 	bl	8004a78 <_Bfree>
 80042f4:	2300      	movs	r3, #0
 80042f6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80042f8:	703b      	strb	r3, [r7, #0]
 80042fa:	f10b 0301 	add.w	r3, fp, #1
 80042fe:	6013      	str	r3, [r2, #0]
 8004300:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004302:	2b00      	cmp	r3, #0
 8004304:	f43f ace6 	beq.w	8003cd4 <_dtoa_r+0x9c>
 8004308:	601f      	str	r7, [r3, #0]
 800430a:	e4e3      	b.n	8003cd4 <_dtoa_r+0x9c>
 800430c:	4627      	mov	r7, r4
 800430e:	463b      	mov	r3, r7
 8004310:	461f      	mov	r7, r3
 8004312:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004316:	2a39      	cmp	r2, #57	; 0x39
 8004318:	d107      	bne.n	800432a <_dtoa_r+0x6f2>
 800431a:	9a03      	ldr	r2, [sp, #12]
 800431c:	429a      	cmp	r2, r3
 800431e:	d1f7      	bne.n	8004310 <_dtoa_r+0x6d8>
 8004320:	2230      	movs	r2, #48	; 0x30
 8004322:	9903      	ldr	r1, [sp, #12]
 8004324:	f108 0801 	add.w	r8, r8, #1
 8004328:	700a      	strb	r2, [r1, #0]
 800432a:	781a      	ldrb	r2, [r3, #0]
 800432c:	3201      	adds	r2, #1
 800432e:	701a      	strb	r2, [r3, #0]
 8004330:	e79e      	b.n	8004270 <_dtoa_r+0x638>
 8004332:	46d8      	mov	r8, fp
 8004334:	e7eb      	b.n	800430e <_dtoa_r+0x6d6>
 8004336:	2200      	movs	r2, #0
 8004338:	4b6d      	ldr	r3, [pc, #436]	; (80044f0 <_dtoa_r+0x8b8>)
 800433a:	f7fc f939 	bl	80005b0 <__aeabi_dmul>
 800433e:	2200      	movs	r2, #0
 8004340:	2300      	movs	r3, #0
 8004342:	4680      	mov	r8, r0
 8004344:	4689      	mov	r9, r1
 8004346:	f7fc fb9b 	bl	8000a80 <__aeabi_dcmpeq>
 800434a:	2800      	cmp	r0, #0
 800434c:	d09b      	beq.n	8004286 <_dtoa_r+0x64e>
 800434e:	e7cd      	b.n	80042ec <_dtoa_r+0x6b4>
 8004350:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004352:	2a00      	cmp	r2, #0
 8004354:	f000 80c4 	beq.w	80044e0 <_dtoa_r+0x8a8>
 8004358:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800435a:	2a01      	cmp	r2, #1
 800435c:	f300 80a8 	bgt.w	80044b0 <_dtoa_r+0x878>
 8004360:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004362:	2a00      	cmp	r2, #0
 8004364:	f000 80a0 	beq.w	80044a8 <_dtoa_r+0x870>
 8004368:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800436c:	464f      	mov	r7, r9
 800436e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004370:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004372:	2101      	movs	r1, #1
 8004374:	441a      	add	r2, r3
 8004376:	4628      	mov	r0, r5
 8004378:	4499      	add	r9, r3
 800437a:	9209      	str	r2, [sp, #36]	; 0x24
 800437c:	f000 fc32 	bl	8004be4 <__i2b>
 8004380:	4606      	mov	r6, r0
 8004382:	b15f      	cbz	r7, 800439c <_dtoa_r+0x764>
 8004384:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004386:	2b00      	cmp	r3, #0
 8004388:	dd08      	ble.n	800439c <_dtoa_r+0x764>
 800438a:	42bb      	cmp	r3, r7
 800438c:	bfa8      	it	ge
 800438e:	463b      	movge	r3, r7
 8004390:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004392:	eba9 0903 	sub.w	r9, r9, r3
 8004396:	1aff      	subs	r7, r7, r3
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	9309      	str	r3, [sp, #36]	; 0x24
 800439c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800439e:	b1f3      	cbz	r3, 80043de <_dtoa_r+0x7a6>
 80043a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	f000 80a0 	beq.w	80044e8 <_dtoa_r+0x8b0>
 80043a8:	2c00      	cmp	r4, #0
 80043aa:	dd10      	ble.n	80043ce <_dtoa_r+0x796>
 80043ac:	4631      	mov	r1, r6
 80043ae:	4622      	mov	r2, r4
 80043b0:	4628      	mov	r0, r5
 80043b2:	f000 fcd5 	bl	8004d60 <__pow5mult>
 80043b6:	4652      	mov	r2, sl
 80043b8:	4601      	mov	r1, r0
 80043ba:	4606      	mov	r6, r0
 80043bc:	4628      	mov	r0, r5
 80043be:	f000 fc27 	bl	8004c10 <__multiply>
 80043c2:	4680      	mov	r8, r0
 80043c4:	4651      	mov	r1, sl
 80043c6:	4628      	mov	r0, r5
 80043c8:	f000 fb56 	bl	8004a78 <_Bfree>
 80043cc:	46c2      	mov	sl, r8
 80043ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043d0:	1b1a      	subs	r2, r3, r4
 80043d2:	d004      	beq.n	80043de <_dtoa_r+0x7a6>
 80043d4:	4651      	mov	r1, sl
 80043d6:	4628      	mov	r0, r5
 80043d8:	f000 fcc2 	bl	8004d60 <__pow5mult>
 80043dc:	4682      	mov	sl, r0
 80043de:	2101      	movs	r1, #1
 80043e0:	4628      	mov	r0, r5
 80043e2:	f000 fbff 	bl	8004be4 <__i2b>
 80043e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043e8:	4604      	mov	r4, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f340 8082 	ble.w	80044f4 <_dtoa_r+0x8bc>
 80043f0:	461a      	mov	r2, r3
 80043f2:	4601      	mov	r1, r0
 80043f4:	4628      	mov	r0, r5
 80043f6:	f000 fcb3 	bl	8004d60 <__pow5mult>
 80043fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80043fc:	4604      	mov	r4, r0
 80043fe:	2b01      	cmp	r3, #1
 8004400:	dd7b      	ble.n	80044fa <_dtoa_r+0x8c2>
 8004402:	f04f 0800 	mov.w	r8, #0
 8004406:	6923      	ldr	r3, [r4, #16]
 8004408:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800440c:	6918      	ldr	r0, [r3, #16]
 800440e:	f000 fb9b 	bl	8004b48 <__hi0bits>
 8004412:	f1c0 0020 	rsb	r0, r0, #32
 8004416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004418:	4418      	add	r0, r3
 800441a:	f010 001f 	ands.w	r0, r0, #31
 800441e:	f000 8092 	beq.w	8004546 <_dtoa_r+0x90e>
 8004422:	f1c0 0320 	rsb	r3, r0, #32
 8004426:	2b04      	cmp	r3, #4
 8004428:	f340 8085 	ble.w	8004536 <_dtoa_r+0x8fe>
 800442c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800442e:	f1c0 001c 	rsb	r0, r0, #28
 8004432:	4403      	add	r3, r0
 8004434:	4481      	add	r9, r0
 8004436:	4407      	add	r7, r0
 8004438:	9309      	str	r3, [sp, #36]	; 0x24
 800443a:	f1b9 0f00 	cmp.w	r9, #0
 800443e:	dd05      	ble.n	800444c <_dtoa_r+0x814>
 8004440:	4651      	mov	r1, sl
 8004442:	464a      	mov	r2, r9
 8004444:	4628      	mov	r0, r5
 8004446:	f000 fce5 	bl	8004e14 <__lshift>
 800444a:	4682      	mov	sl, r0
 800444c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800444e:	2b00      	cmp	r3, #0
 8004450:	dd05      	ble.n	800445e <_dtoa_r+0x826>
 8004452:	4621      	mov	r1, r4
 8004454:	461a      	mov	r2, r3
 8004456:	4628      	mov	r0, r5
 8004458:	f000 fcdc 	bl	8004e14 <__lshift>
 800445c:	4604      	mov	r4, r0
 800445e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004460:	2b00      	cmp	r3, #0
 8004462:	d072      	beq.n	800454a <_dtoa_r+0x912>
 8004464:	4621      	mov	r1, r4
 8004466:	4650      	mov	r0, sl
 8004468:	f000 fd40 	bl	8004eec <__mcmp>
 800446c:	2800      	cmp	r0, #0
 800446e:	da6c      	bge.n	800454a <_dtoa_r+0x912>
 8004470:	2300      	movs	r3, #0
 8004472:	4651      	mov	r1, sl
 8004474:	220a      	movs	r2, #10
 8004476:	4628      	mov	r0, r5
 8004478:	f000 fb20 	bl	8004abc <__multadd>
 800447c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800447e:	4682      	mov	sl, r0
 8004480:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 81ac 	beq.w	80047e2 <_dtoa_r+0xbaa>
 800448a:	2300      	movs	r3, #0
 800448c:	4631      	mov	r1, r6
 800448e:	220a      	movs	r2, #10
 8004490:	4628      	mov	r0, r5
 8004492:	f000 fb13 	bl	8004abc <__multadd>
 8004496:	9b06      	ldr	r3, [sp, #24]
 8004498:	4606      	mov	r6, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	f300 8093 	bgt.w	80045c6 <_dtoa_r+0x98e>
 80044a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	dc59      	bgt.n	800455a <_dtoa_r+0x922>
 80044a6:	e08e      	b.n	80045c6 <_dtoa_r+0x98e>
 80044a8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80044aa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80044ae:	e75d      	b.n	800436c <_dtoa_r+0x734>
 80044b0:	9b08      	ldr	r3, [sp, #32]
 80044b2:	1e5c      	subs	r4, r3, #1
 80044b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044b6:	42a3      	cmp	r3, r4
 80044b8:	bfbf      	itttt	lt
 80044ba:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80044bc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80044be:	1ae3      	sublt	r3, r4, r3
 80044c0:	18d2      	addlt	r2, r2, r3
 80044c2:	bfa8      	it	ge
 80044c4:	1b1c      	subge	r4, r3, r4
 80044c6:	9b08      	ldr	r3, [sp, #32]
 80044c8:	bfbe      	ittt	lt
 80044ca:	940a      	strlt	r4, [sp, #40]	; 0x28
 80044cc:	920e      	strlt	r2, [sp, #56]	; 0x38
 80044ce:	2400      	movlt	r4, #0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	bfb5      	itete	lt
 80044d4:	eba9 0703 	sublt.w	r7, r9, r3
 80044d8:	464f      	movge	r7, r9
 80044da:	2300      	movlt	r3, #0
 80044dc:	9b08      	ldrge	r3, [sp, #32]
 80044de:	e747      	b.n	8004370 <_dtoa_r+0x738>
 80044e0:	464f      	mov	r7, r9
 80044e2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80044e4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80044e6:	e74c      	b.n	8004382 <_dtoa_r+0x74a>
 80044e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044ea:	e773      	b.n	80043d4 <_dtoa_r+0x79c>
 80044ec:	3fe00000 	.word	0x3fe00000
 80044f0:	40240000 	.word	0x40240000
 80044f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	dc18      	bgt.n	800452c <_dtoa_r+0x8f4>
 80044fa:	9b04      	ldr	r3, [sp, #16]
 80044fc:	b9b3      	cbnz	r3, 800452c <_dtoa_r+0x8f4>
 80044fe:	9b05      	ldr	r3, [sp, #20]
 8004500:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004504:	b993      	cbnz	r3, 800452c <_dtoa_r+0x8f4>
 8004506:	9b05      	ldr	r3, [sp, #20]
 8004508:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800450c:	0d1b      	lsrs	r3, r3, #20
 800450e:	051b      	lsls	r3, r3, #20
 8004510:	b17b      	cbz	r3, 8004532 <_dtoa_r+0x8fa>
 8004512:	f04f 0801 	mov.w	r8, #1
 8004516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004518:	f109 0901 	add.w	r9, r9, #1
 800451c:	3301      	adds	r3, #1
 800451e:	9309      	str	r3, [sp, #36]	; 0x24
 8004520:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004522:	2b00      	cmp	r3, #0
 8004524:	f47f af6f 	bne.w	8004406 <_dtoa_r+0x7ce>
 8004528:	2001      	movs	r0, #1
 800452a:	e774      	b.n	8004416 <_dtoa_r+0x7de>
 800452c:	f04f 0800 	mov.w	r8, #0
 8004530:	e7f6      	b.n	8004520 <_dtoa_r+0x8e8>
 8004532:	4698      	mov	r8, r3
 8004534:	e7f4      	b.n	8004520 <_dtoa_r+0x8e8>
 8004536:	d080      	beq.n	800443a <_dtoa_r+0x802>
 8004538:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800453a:	331c      	adds	r3, #28
 800453c:	441a      	add	r2, r3
 800453e:	4499      	add	r9, r3
 8004540:	441f      	add	r7, r3
 8004542:	9209      	str	r2, [sp, #36]	; 0x24
 8004544:	e779      	b.n	800443a <_dtoa_r+0x802>
 8004546:	4603      	mov	r3, r0
 8004548:	e7f6      	b.n	8004538 <_dtoa_r+0x900>
 800454a:	9b08      	ldr	r3, [sp, #32]
 800454c:	2b00      	cmp	r3, #0
 800454e:	dc34      	bgt.n	80045ba <_dtoa_r+0x982>
 8004550:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004552:	2b02      	cmp	r3, #2
 8004554:	dd31      	ble.n	80045ba <_dtoa_r+0x982>
 8004556:	9b08      	ldr	r3, [sp, #32]
 8004558:	9306      	str	r3, [sp, #24]
 800455a:	9b06      	ldr	r3, [sp, #24]
 800455c:	b963      	cbnz	r3, 8004578 <_dtoa_r+0x940>
 800455e:	4621      	mov	r1, r4
 8004560:	2205      	movs	r2, #5
 8004562:	4628      	mov	r0, r5
 8004564:	f000 faaa 	bl	8004abc <__multadd>
 8004568:	4601      	mov	r1, r0
 800456a:	4604      	mov	r4, r0
 800456c:	4650      	mov	r0, sl
 800456e:	f000 fcbd 	bl	8004eec <__mcmp>
 8004572:	2800      	cmp	r0, #0
 8004574:	f73f adbf 	bgt.w	80040f6 <_dtoa_r+0x4be>
 8004578:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800457a:	9f03      	ldr	r7, [sp, #12]
 800457c:	ea6f 0b03 	mvn.w	fp, r3
 8004580:	f04f 0800 	mov.w	r8, #0
 8004584:	4621      	mov	r1, r4
 8004586:	4628      	mov	r0, r5
 8004588:	f000 fa76 	bl	8004a78 <_Bfree>
 800458c:	2e00      	cmp	r6, #0
 800458e:	f43f aead 	beq.w	80042ec <_dtoa_r+0x6b4>
 8004592:	f1b8 0f00 	cmp.w	r8, #0
 8004596:	d005      	beq.n	80045a4 <_dtoa_r+0x96c>
 8004598:	45b0      	cmp	r8, r6
 800459a:	d003      	beq.n	80045a4 <_dtoa_r+0x96c>
 800459c:	4641      	mov	r1, r8
 800459e:	4628      	mov	r0, r5
 80045a0:	f000 fa6a 	bl	8004a78 <_Bfree>
 80045a4:	4631      	mov	r1, r6
 80045a6:	4628      	mov	r0, r5
 80045a8:	f000 fa66 	bl	8004a78 <_Bfree>
 80045ac:	e69e      	b.n	80042ec <_dtoa_r+0x6b4>
 80045ae:	2400      	movs	r4, #0
 80045b0:	4626      	mov	r6, r4
 80045b2:	e7e1      	b.n	8004578 <_dtoa_r+0x940>
 80045b4:	46c3      	mov	fp, r8
 80045b6:	4626      	mov	r6, r4
 80045b8:	e59d      	b.n	80040f6 <_dtoa_r+0x4be>
 80045ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f000 80c8 	beq.w	8004752 <_dtoa_r+0xb1a>
 80045c2:	9b08      	ldr	r3, [sp, #32]
 80045c4:	9306      	str	r3, [sp, #24]
 80045c6:	2f00      	cmp	r7, #0
 80045c8:	dd05      	ble.n	80045d6 <_dtoa_r+0x99e>
 80045ca:	4631      	mov	r1, r6
 80045cc:	463a      	mov	r2, r7
 80045ce:	4628      	mov	r0, r5
 80045d0:	f000 fc20 	bl	8004e14 <__lshift>
 80045d4:	4606      	mov	r6, r0
 80045d6:	f1b8 0f00 	cmp.w	r8, #0
 80045da:	d05b      	beq.n	8004694 <_dtoa_r+0xa5c>
 80045dc:	4628      	mov	r0, r5
 80045de:	6871      	ldr	r1, [r6, #4]
 80045e0:	f000 fa0a 	bl	80049f8 <_Balloc>
 80045e4:	4607      	mov	r7, r0
 80045e6:	b928      	cbnz	r0, 80045f4 <_dtoa_r+0x9bc>
 80045e8:	4602      	mov	r2, r0
 80045ea:	f240 21ef 	movw	r1, #751	; 0x2ef
 80045ee:	4b81      	ldr	r3, [pc, #516]	; (80047f4 <_dtoa_r+0xbbc>)
 80045f0:	f7ff bb36 	b.w	8003c60 <_dtoa_r+0x28>
 80045f4:	6932      	ldr	r2, [r6, #16]
 80045f6:	f106 010c 	add.w	r1, r6, #12
 80045fa:	3202      	adds	r2, #2
 80045fc:	0092      	lsls	r2, r2, #2
 80045fe:	300c      	adds	r0, #12
 8004600:	f000 ff9e 	bl	8005540 <memcpy>
 8004604:	2201      	movs	r2, #1
 8004606:	4639      	mov	r1, r7
 8004608:	4628      	mov	r0, r5
 800460a:	f000 fc03 	bl	8004e14 <__lshift>
 800460e:	46b0      	mov	r8, r6
 8004610:	4606      	mov	r6, r0
 8004612:	9b03      	ldr	r3, [sp, #12]
 8004614:	9a03      	ldr	r2, [sp, #12]
 8004616:	3301      	adds	r3, #1
 8004618:	9308      	str	r3, [sp, #32]
 800461a:	9b06      	ldr	r3, [sp, #24]
 800461c:	4413      	add	r3, r2
 800461e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004620:	9b04      	ldr	r3, [sp, #16]
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	930a      	str	r3, [sp, #40]	; 0x28
 8004628:	9b08      	ldr	r3, [sp, #32]
 800462a:	4621      	mov	r1, r4
 800462c:	3b01      	subs	r3, #1
 800462e:	4650      	mov	r0, sl
 8004630:	9304      	str	r3, [sp, #16]
 8004632:	f7ff fa75 	bl	8003b20 <quorem>
 8004636:	4641      	mov	r1, r8
 8004638:	9006      	str	r0, [sp, #24]
 800463a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800463e:	4650      	mov	r0, sl
 8004640:	f000 fc54 	bl	8004eec <__mcmp>
 8004644:	4632      	mov	r2, r6
 8004646:	9009      	str	r0, [sp, #36]	; 0x24
 8004648:	4621      	mov	r1, r4
 800464a:	4628      	mov	r0, r5
 800464c:	f000 fc6a 	bl	8004f24 <__mdiff>
 8004650:	68c2      	ldr	r2, [r0, #12]
 8004652:	4607      	mov	r7, r0
 8004654:	bb02      	cbnz	r2, 8004698 <_dtoa_r+0xa60>
 8004656:	4601      	mov	r1, r0
 8004658:	4650      	mov	r0, sl
 800465a:	f000 fc47 	bl	8004eec <__mcmp>
 800465e:	4602      	mov	r2, r0
 8004660:	4639      	mov	r1, r7
 8004662:	4628      	mov	r0, r5
 8004664:	920c      	str	r2, [sp, #48]	; 0x30
 8004666:	f000 fa07 	bl	8004a78 <_Bfree>
 800466a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800466c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800466e:	9f08      	ldr	r7, [sp, #32]
 8004670:	ea43 0102 	orr.w	r1, r3, r2
 8004674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004676:	4319      	orrs	r1, r3
 8004678:	d110      	bne.n	800469c <_dtoa_r+0xa64>
 800467a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800467e:	d029      	beq.n	80046d4 <_dtoa_r+0xa9c>
 8004680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004682:	2b00      	cmp	r3, #0
 8004684:	dd02      	ble.n	800468c <_dtoa_r+0xa54>
 8004686:	9b06      	ldr	r3, [sp, #24]
 8004688:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800468c:	9b04      	ldr	r3, [sp, #16]
 800468e:	f883 9000 	strb.w	r9, [r3]
 8004692:	e777      	b.n	8004584 <_dtoa_r+0x94c>
 8004694:	4630      	mov	r0, r6
 8004696:	e7ba      	b.n	800460e <_dtoa_r+0x9d6>
 8004698:	2201      	movs	r2, #1
 800469a:	e7e1      	b.n	8004660 <_dtoa_r+0xa28>
 800469c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800469e:	2b00      	cmp	r3, #0
 80046a0:	db04      	blt.n	80046ac <_dtoa_r+0xa74>
 80046a2:	9922      	ldr	r1, [sp, #136]	; 0x88
 80046a4:	430b      	orrs	r3, r1
 80046a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80046a8:	430b      	orrs	r3, r1
 80046aa:	d120      	bne.n	80046ee <_dtoa_r+0xab6>
 80046ac:	2a00      	cmp	r2, #0
 80046ae:	dded      	ble.n	800468c <_dtoa_r+0xa54>
 80046b0:	4651      	mov	r1, sl
 80046b2:	2201      	movs	r2, #1
 80046b4:	4628      	mov	r0, r5
 80046b6:	f000 fbad 	bl	8004e14 <__lshift>
 80046ba:	4621      	mov	r1, r4
 80046bc:	4682      	mov	sl, r0
 80046be:	f000 fc15 	bl	8004eec <__mcmp>
 80046c2:	2800      	cmp	r0, #0
 80046c4:	dc03      	bgt.n	80046ce <_dtoa_r+0xa96>
 80046c6:	d1e1      	bne.n	800468c <_dtoa_r+0xa54>
 80046c8:	f019 0f01 	tst.w	r9, #1
 80046cc:	d0de      	beq.n	800468c <_dtoa_r+0xa54>
 80046ce:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80046d2:	d1d8      	bne.n	8004686 <_dtoa_r+0xa4e>
 80046d4:	2339      	movs	r3, #57	; 0x39
 80046d6:	9a04      	ldr	r2, [sp, #16]
 80046d8:	7013      	strb	r3, [r2, #0]
 80046da:	463b      	mov	r3, r7
 80046dc:	461f      	mov	r7, r3
 80046de:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80046e2:	3b01      	subs	r3, #1
 80046e4:	2a39      	cmp	r2, #57	; 0x39
 80046e6:	d06b      	beq.n	80047c0 <_dtoa_r+0xb88>
 80046e8:	3201      	adds	r2, #1
 80046ea:	701a      	strb	r2, [r3, #0]
 80046ec:	e74a      	b.n	8004584 <_dtoa_r+0x94c>
 80046ee:	2a00      	cmp	r2, #0
 80046f0:	dd07      	ble.n	8004702 <_dtoa_r+0xaca>
 80046f2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80046f6:	d0ed      	beq.n	80046d4 <_dtoa_r+0xa9c>
 80046f8:	9a04      	ldr	r2, [sp, #16]
 80046fa:	f109 0301 	add.w	r3, r9, #1
 80046fe:	7013      	strb	r3, [r2, #0]
 8004700:	e740      	b.n	8004584 <_dtoa_r+0x94c>
 8004702:	9b08      	ldr	r3, [sp, #32]
 8004704:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004706:	f803 9c01 	strb.w	r9, [r3, #-1]
 800470a:	4293      	cmp	r3, r2
 800470c:	d042      	beq.n	8004794 <_dtoa_r+0xb5c>
 800470e:	4651      	mov	r1, sl
 8004710:	2300      	movs	r3, #0
 8004712:	220a      	movs	r2, #10
 8004714:	4628      	mov	r0, r5
 8004716:	f000 f9d1 	bl	8004abc <__multadd>
 800471a:	45b0      	cmp	r8, r6
 800471c:	4682      	mov	sl, r0
 800471e:	f04f 0300 	mov.w	r3, #0
 8004722:	f04f 020a 	mov.w	r2, #10
 8004726:	4641      	mov	r1, r8
 8004728:	4628      	mov	r0, r5
 800472a:	d107      	bne.n	800473c <_dtoa_r+0xb04>
 800472c:	f000 f9c6 	bl	8004abc <__multadd>
 8004730:	4680      	mov	r8, r0
 8004732:	4606      	mov	r6, r0
 8004734:	9b08      	ldr	r3, [sp, #32]
 8004736:	3301      	adds	r3, #1
 8004738:	9308      	str	r3, [sp, #32]
 800473a:	e775      	b.n	8004628 <_dtoa_r+0x9f0>
 800473c:	f000 f9be 	bl	8004abc <__multadd>
 8004740:	4631      	mov	r1, r6
 8004742:	4680      	mov	r8, r0
 8004744:	2300      	movs	r3, #0
 8004746:	220a      	movs	r2, #10
 8004748:	4628      	mov	r0, r5
 800474a:	f000 f9b7 	bl	8004abc <__multadd>
 800474e:	4606      	mov	r6, r0
 8004750:	e7f0      	b.n	8004734 <_dtoa_r+0xafc>
 8004752:	9b08      	ldr	r3, [sp, #32]
 8004754:	9306      	str	r3, [sp, #24]
 8004756:	9f03      	ldr	r7, [sp, #12]
 8004758:	4621      	mov	r1, r4
 800475a:	4650      	mov	r0, sl
 800475c:	f7ff f9e0 	bl	8003b20 <quorem>
 8004760:	9b03      	ldr	r3, [sp, #12]
 8004762:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004766:	f807 9b01 	strb.w	r9, [r7], #1
 800476a:	1afa      	subs	r2, r7, r3
 800476c:	9b06      	ldr	r3, [sp, #24]
 800476e:	4293      	cmp	r3, r2
 8004770:	dd07      	ble.n	8004782 <_dtoa_r+0xb4a>
 8004772:	4651      	mov	r1, sl
 8004774:	2300      	movs	r3, #0
 8004776:	220a      	movs	r2, #10
 8004778:	4628      	mov	r0, r5
 800477a:	f000 f99f 	bl	8004abc <__multadd>
 800477e:	4682      	mov	sl, r0
 8004780:	e7ea      	b.n	8004758 <_dtoa_r+0xb20>
 8004782:	9b06      	ldr	r3, [sp, #24]
 8004784:	f04f 0800 	mov.w	r8, #0
 8004788:	2b00      	cmp	r3, #0
 800478a:	bfcc      	ite	gt
 800478c:	461f      	movgt	r7, r3
 800478e:	2701      	movle	r7, #1
 8004790:	9b03      	ldr	r3, [sp, #12]
 8004792:	441f      	add	r7, r3
 8004794:	4651      	mov	r1, sl
 8004796:	2201      	movs	r2, #1
 8004798:	4628      	mov	r0, r5
 800479a:	f000 fb3b 	bl	8004e14 <__lshift>
 800479e:	4621      	mov	r1, r4
 80047a0:	4682      	mov	sl, r0
 80047a2:	f000 fba3 	bl	8004eec <__mcmp>
 80047a6:	2800      	cmp	r0, #0
 80047a8:	dc97      	bgt.n	80046da <_dtoa_r+0xaa2>
 80047aa:	d102      	bne.n	80047b2 <_dtoa_r+0xb7a>
 80047ac:	f019 0f01 	tst.w	r9, #1
 80047b0:	d193      	bne.n	80046da <_dtoa_r+0xaa2>
 80047b2:	463b      	mov	r3, r7
 80047b4:	461f      	mov	r7, r3
 80047b6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80047ba:	2a30      	cmp	r2, #48	; 0x30
 80047bc:	d0fa      	beq.n	80047b4 <_dtoa_r+0xb7c>
 80047be:	e6e1      	b.n	8004584 <_dtoa_r+0x94c>
 80047c0:	9a03      	ldr	r2, [sp, #12]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d18a      	bne.n	80046dc <_dtoa_r+0xaa4>
 80047c6:	2331      	movs	r3, #49	; 0x31
 80047c8:	f10b 0b01 	add.w	fp, fp, #1
 80047cc:	e797      	b.n	80046fe <_dtoa_r+0xac6>
 80047ce:	4b0a      	ldr	r3, [pc, #40]	; (80047f8 <_dtoa_r+0xbc0>)
 80047d0:	f7ff ba9f 	b.w	8003d12 <_dtoa_r+0xda>
 80047d4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f47f aa77 	bne.w	8003cca <_dtoa_r+0x92>
 80047dc:	4b07      	ldr	r3, [pc, #28]	; (80047fc <_dtoa_r+0xbc4>)
 80047de:	f7ff ba98 	b.w	8003d12 <_dtoa_r+0xda>
 80047e2:	9b06      	ldr	r3, [sp, #24]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	dcb6      	bgt.n	8004756 <_dtoa_r+0xb1e>
 80047e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	f73f aeb5 	bgt.w	800455a <_dtoa_r+0x922>
 80047f0:	e7b1      	b.n	8004756 <_dtoa_r+0xb1e>
 80047f2:	bf00      	nop
 80047f4:	08005cec 	.word	0x08005cec
 80047f8:	08005c4c 	.word	0x08005c4c
 80047fc:	08005c70 	.word	0x08005c70

08004800 <_free_r>:
 8004800:	b538      	push	{r3, r4, r5, lr}
 8004802:	4605      	mov	r5, r0
 8004804:	2900      	cmp	r1, #0
 8004806:	d040      	beq.n	800488a <_free_r+0x8a>
 8004808:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800480c:	1f0c      	subs	r4, r1, #4
 800480e:	2b00      	cmp	r3, #0
 8004810:	bfb8      	it	lt
 8004812:	18e4      	addlt	r4, r4, r3
 8004814:	f000 f8e4 	bl	80049e0 <__malloc_lock>
 8004818:	4a1c      	ldr	r2, [pc, #112]	; (800488c <_free_r+0x8c>)
 800481a:	6813      	ldr	r3, [r2, #0]
 800481c:	b933      	cbnz	r3, 800482c <_free_r+0x2c>
 800481e:	6063      	str	r3, [r4, #4]
 8004820:	6014      	str	r4, [r2, #0]
 8004822:	4628      	mov	r0, r5
 8004824:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004828:	f000 b8e0 	b.w	80049ec <__malloc_unlock>
 800482c:	42a3      	cmp	r3, r4
 800482e:	d908      	bls.n	8004842 <_free_r+0x42>
 8004830:	6820      	ldr	r0, [r4, #0]
 8004832:	1821      	adds	r1, r4, r0
 8004834:	428b      	cmp	r3, r1
 8004836:	bf01      	itttt	eq
 8004838:	6819      	ldreq	r1, [r3, #0]
 800483a:	685b      	ldreq	r3, [r3, #4]
 800483c:	1809      	addeq	r1, r1, r0
 800483e:	6021      	streq	r1, [r4, #0]
 8004840:	e7ed      	b.n	800481e <_free_r+0x1e>
 8004842:	461a      	mov	r2, r3
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	b10b      	cbz	r3, 800484c <_free_r+0x4c>
 8004848:	42a3      	cmp	r3, r4
 800484a:	d9fa      	bls.n	8004842 <_free_r+0x42>
 800484c:	6811      	ldr	r1, [r2, #0]
 800484e:	1850      	adds	r0, r2, r1
 8004850:	42a0      	cmp	r0, r4
 8004852:	d10b      	bne.n	800486c <_free_r+0x6c>
 8004854:	6820      	ldr	r0, [r4, #0]
 8004856:	4401      	add	r1, r0
 8004858:	1850      	adds	r0, r2, r1
 800485a:	4283      	cmp	r3, r0
 800485c:	6011      	str	r1, [r2, #0]
 800485e:	d1e0      	bne.n	8004822 <_free_r+0x22>
 8004860:	6818      	ldr	r0, [r3, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	4408      	add	r0, r1
 8004866:	6010      	str	r0, [r2, #0]
 8004868:	6053      	str	r3, [r2, #4]
 800486a:	e7da      	b.n	8004822 <_free_r+0x22>
 800486c:	d902      	bls.n	8004874 <_free_r+0x74>
 800486e:	230c      	movs	r3, #12
 8004870:	602b      	str	r3, [r5, #0]
 8004872:	e7d6      	b.n	8004822 <_free_r+0x22>
 8004874:	6820      	ldr	r0, [r4, #0]
 8004876:	1821      	adds	r1, r4, r0
 8004878:	428b      	cmp	r3, r1
 800487a:	bf01      	itttt	eq
 800487c:	6819      	ldreq	r1, [r3, #0]
 800487e:	685b      	ldreq	r3, [r3, #4]
 8004880:	1809      	addeq	r1, r1, r0
 8004882:	6021      	streq	r1, [r4, #0]
 8004884:	6063      	str	r3, [r4, #4]
 8004886:	6054      	str	r4, [r2, #4]
 8004888:	e7cb      	b.n	8004822 <_free_r+0x22>
 800488a:	bd38      	pop	{r3, r4, r5, pc}
 800488c:	200003b0 	.word	0x200003b0

08004890 <malloc>:
 8004890:	4b02      	ldr	r3, [pc, #8]	; (800489c <malloc+0xc>)
 8004892:	4601      	mov	r1, r0
 8004894:	6818      	ldr	r0, [r3, #0]
 8004896:	f000 b823 	b.w	80048e0 <_malloc_r>
 800489a:	bf00      	nop
 800489c:	20000064 	.word	0x20000064

080048a0 <sbrk_aligned>:
 80048a0:	b570      	push	{r4, r5, r6, lr}
 80048a2:	4e0e      	ldr	r6, [pc, #56]	; (80048dc <sbrk_aligned+0x3c>)
 80048a4:	460c      	mov	r4, r1
 80048a6:	6831      	ldr	r1, [r6, #0]
 80048a8:	4605      	mov	r5, r0
 80048aa:	b911      	cbnz	r1, 80048b2 <sbrk_aligned+0x12>
 80048ac:	f000 fe38 	bl	8005520 <_sbrk_r>
 80048b0:	6030      	str	r0, [r6, #0]
 80048b2:	4621      	mov	r1, r4
 80048b4:	4628      	mov	r0, r5
 80048b6:	f000 fe33 	bl	8005520 <_sbrk_r>
 80048ba:	1c43      	adds	r3, r0, #1
 80048bc:	d00a      	beq.n	80048d4 <sbrk_aligned+0x34>
 80048be:	1cc4      	adds	r4, r0, #3
 80048c0:	f024 0403 	bic.w	r4, r4, #3
 80048c4:	42a0      	cmp	r0, r4
 80048c6:	d007      	beq.n	80048d8 <sbrk_aligned+0x38>
 80048c8:	1a21      	subs	r1, r4, r0
 80048ca:	4628      	mov	r0, r5
 80048cc:	f000 fe28 	bl	8005520 <_sbrk_r>
 80048d0:	3001      	adds	r0, #1
 80048d2:	d101      	bne.n	80048d8 <sbrk_aligned+0x38>
 80048d4:	f04f 34ff 	mov.w	r4, #4294967295
 80048d8:	4620      	mov	r0, r4
 80048da:	bd70      	pop	{r4, r5, r6, pc}
 80048dc:	200003b4 	.word	0x200003b4

080048e0 <_malloc_r>:
 80048e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048e4:	1ccd      	adds	r5, r1, #3
 80048e6:	f025 0503 	bic.w	r5, r5, #3
 80048ea:	3508      	adds	r5, #8
 80048ec:	2d0c      	cmp	r5, #12
 80048ee:	bf38      	it	cc
 80048f0:	250c      	movcc	r5, #12
 80048f2:	2d00      	cmp	r5, #0
 80048f4:	4607      	mov	r7, r0
 80048f6:	db01      	blt.n	80048fc <_malloc_r+0x1c>
 80048f8:	42a9      	cmp	r1, r5
 80048fa:	d905      	bls.n	8004908 <_malloc_r+0x28>
 80048fc:	230c      	movs	r3, #12
 80048fe:	2600      	movs	r6, #0
 8004900:	603b      	str	r3, [r7, #0]
 8004902:	4630      	mov	r0, r6
 8004904:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004908:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80049dc <_malloc_r+0xfc>
 800490c:	f000 f868 	bl	80049e0 <__malloc_lock>
 8004910:	f8d8 3000 	ldr.w	r3, [r8]
 8004914:	461c      	mov	r4, r3
 8004916:	bb5c      	cbnz	r4, 8004970 <_malloc_r+0x90>
 8004918:	4629      	mov	r1, r5
 800491a:	4638      	mov	r0, r7
 800491c:	f7ff ffc0 	bl	80048a0 <sbrk_aligned>
 8004920:	1c43      	adds	r3, r0, #1
 8004922:	4604      	mov	r4, r0
 8004924:	d155      	bne.n	80049d2 <_malloc_r+0xf2>
 8004926:	f8d8 4000 	ldr.w	r4, [r8]
 800492a:	4626      	mov	r6, r4
 800492c:	2e00      	cmp	r6, #0
 800492e:	d145      	bne.n	80049bc <_malloc_r+0xdc>
 8004930:	2c00      	cmp	r4, #0
 8004932:	d048      	beq.n	80049c6 <_malloc_r+0xe6>
 8004934:	6823      	ldr	r3, [r4, #0]
 8004936:	4631      	mov	r1, r6
 8004938:	4638      	mov	r0, r7
 800493a:	eb04 0903 	add.w	r9, r4, r3
 800493e:	f000 fdef 	bl	8005520 <_sbrk_r>
 8004942:	4581      	cmp	r9, r0
 8004944:	d13f      	bne.n	80049c6 <_malloc_r+0xe6>
 8004946:	6821      	ldr	r1, [r4, #0]
 8004948:	4638      	mov	r0, r7
 800494a:	1a6d      	subs	r5, r5, r1
 800494c:	4629      	mov	r1, r5
 800494e:	f7ff ffa7 	bl	80048a0 <sbrk_aligned>
 8004952:	3001      	adds	r0, #1
 8004954:	d037      	beq.n	80049c6 <_malloc_r+0xe6>
 8004956:	6823      	ldr	r3, [r4, #0]
 8004958:	442b      	add	r3, r5
 800495a:	6023      	str	r3, [r4, #0]
 800495c:	f8d8 3000 	ldr.w	r3, [r8]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d038      	beq.n	80049d6 <_malloc_r+0xf6>
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	42a2      	cmp	r2, r4
 8004968:	d12b      	bne.n	80049c2 <_malloc_r+0xe2>
 800496a:	2200      	movs	r2, #0
 800496c:	605a      	str	r2, [r3, #4]
 800496e:	e00f      	b.n	8004990 <_malloc_r+0xb0>
 8004970:	6822      	ldr	r2, [r4, #0]
 8004972:	1b52      	subs	r2, r2, r5
 8004974:	d41f      	bmi.n	80049b6 <_malloc_r+0xd6>
 8004976:	2a0b      	cmp	r2, #11
 8004978:	d917      	bls.n	80049aa <_malloc_r+0xca>
 800497a:	1961      	adds	r1, r4, r5
 800497c:	42a3      	cmp	r3, r4
 800497e:	6025      	str	r5, [r4, #0]
 8004980:	bf18      	it	ne
 8004982:	6059      	strne	r1, [r3, #4]
 8004984:	6863      	ldr	r3, [r4, #4]
 8004986:	bf08      	it	eq
 8004988:	f8c8 1000 	streq.w	r1, [r8]
 800498c:	5162      	str	r2, [r4, r5]
 800498e:	604b      	str	r3, [r1, #4]
 8004990:	4638      	mov	r0, r7
 8004992:	f104 060b 	add.w	r6, r4, #11
 8004996:	f000 f829 	bl	80049ec <__malloc_unlock>
 800499a:	f026 0607 	bic.w	r6, r6, #7
 800499e:	1d23      	adds	r3, r4, #4
 80049a0:	1af2      	subs	r2, r6, r3
 80049a2:	d0ae      	beq.n	8004902 <_malloc_r+0x22>
 80049a4:	1b9b      	subs	r3, r3, r6
 80049a6:	50a3      	str	r3, [r4, r2]
 80049a8:	e7ab      	b.n	8004902 <_malloc_r+0x22>
 80049aa:	42a3      	cmp	r3, r4
 80049ac:	6862      	ldr	r2, [r4, #4]
 80049ae:	d1dd      	bne.n	800496c <_malloc_r+0x8c>
 80049b0:	f8c8 2000 	str.w	r2, [r8]
 80049b4:	e7ec      	b.n	8004990 <_malloc_r+0xb0>
 80049b6:	4623      	mov	r3, r4
 80049b8:	6864      	ldr	r4, [r4, #4]
 80049ba:	e7ac      	b.n	8004916 <_malloc_r+0x36>
 80049bc:	4634      	mov	r4, r6
 80049be:	6876      	ldr	r6, [r6, #4]
 80049c0:	e7b4      	b.n	800492c <_malloc_r+0x4c>
 80049c2:	4613      	mov	r3, r2
 80049c4:	e7cc      	b.n	8004960 <_malloc_r+0x80>
 80049c6:	230c      	movs	r3, #12
 80049c8:	4638      	mov	r0, r7
 80049ca:	603b      	str	r3, [r7, #0]
 80049cc:	f000 f80e 	bl	80049ec <__malloc_unlock>
 80049d0:	e797      	b.n	8004902 <_malloc_r+0x22>
 80049d2:	6025      	str	r5, [r4, #0]
 80049d4:	e7dc      	b.n	8004990 <_malloc_r+0xb0>
 80049d6:	605b      	str	r3, [r3, #4]
 80049d8:	deff      	udf	#255	; 0xff
 80049da:	bf00      	nop
 80049dc:	200003b0 	.word	0x200003b0

080049e0 <__malloc_lock>:
 80049e0:	4801      	ldr	r0, [pc, #4]	; (80049e8 <__malloc_lock+0x8>)
 80049e2:	f7ff b88d 	b.w	8003b00 <__retarget_lock_acquire_recursive>
 80049e6:	bf00      	nop
 80049e8:	200003ac 	.word	0x200003ac

080049ec <__malloc_unlock>:
 80049ec:	4801      	ldr	r0, [pc, #4]	; (80049f4 <__malloc_unlock+0x8>)
 80049ee:	f7ff b888 	b.w	8003b02 <__retarget_lock_release_recursive>
 80049f2:	bf00      	nop
 80049f4:	200003ac 	.word	0x200003ac

080049f8 <_Balloc>:
 80049f8:	b570      	push	{r4, r5, r6, lr}
 80049fa:	69c6      	ldr	r6, [r0, #28]
 80049fc:	4604      	mov	r4, r0
 80049fe:	460d      	mov	r5, r1
 8004a00:	b976      	cbnz	r6, 8004a20 <_Balloc+0x28>
 8004a02:	2010      	movs	r0, #16
 8004a04:	f7ff ff44 	bl	8004890 <malloc>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	61e0      	str	r0, [r4, #28]
 8004a0c:	b920      	cbnz	r0, 8004a18 <_Balloc+0x20>
 8004a0e:	216b      	movs	r1, #107	; 0x6b
 8004a10:	4b17      	ldr	r3, [pc, #92]	; (8004a70 <_Balloc+0x78>)
 8004a12:	4818      	ldr	r0, [pc, #96]	; (8004a74 <_Balloc+0x7c>)
 8004a14:	f000 fda2 	bl	800555c <__assert_func>
 8004a18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004a1c:	6006      	str	r6, [r0, #0]
 8004a1e:	60c6      	str	r6, [r0, #12]
 8004a20:	69e6      	ldr	r6, [r4, #28]
 8004a22:	68f3      	ldr	r3, [r6, #12]
 8004a24:	b183      	cbz	r3, 8004a48 <_Balloc+0x50>
 8004a26:	69e3      	ldr	r3, [r4, #28]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004a2e:	b9b8      	cbnz	r0, 8004a60 <_Balloc+0x68>
 8004a30:	2101      	movs	r1, #1
 8004a32:	fa01 f605 	lsl.w	r6, r1, r5
 8004a36:	1d72      	adds	r2, r6, #5
 8004a38:	4620      	mov	r0, r4
 8004a3a:	0092      	lsls	r2, r2, #2
 8004a3c:	f000 fdac 	bl	8005598 <_calloc_r>
 8004a40:	b160      	cbz	r0, 8004a5c <_Balloc+0x64>
 8004a42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004a46:	e00e      	b.n	8004a66 <_Balloc+0x6e>
 8004a48:	2221      	movs	r2, #33	; 0x21
 8004a4a:	2104      	movs	r1, #4
 8004a4c:	4620      	mov	r0, r4
 8004a4e:	f000 fda3 	bl	8005598 <_calloc_r>
 8004a52:	69e3      	ldr	r3, [r4, #28]
 8004a54:	60f0      	str	r0, [r6, #12]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1e4      	bne.n	8004a26 <_Balloc+0x2e>
 8004a5c:	2000      	movs	r0, #0
 8004a5e:	bd70      	pop	{r4, r5, r6, pc}
 8004a60:	6802      	ldr	r2, [r0, #0]
 8004a62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004a66:	2300      	movs	r3, #0
 8004a68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004a6c:	e7f7      	b.n	8004a5e <_Balloc+0x66>
 8004a6e:	bf00      	nop
 8004a70:	08005c7d 	.word	0x08005c7d
 8004a74:	08005cfd 	.word	0x08005cfd

08004a78 <_Bfree>:
 8004a78:	b570      	push	{r4, r5, r6, lr}
 8004a7a:	69c6      	ldr	r6, [r0, #28]
 8004a7c:	4605      	mov	r5, r0
 8004a7e:	460c      	mov	r4, r1
 8004a80:	b976      	cbnz	r6, 8004aa0 <_Bfree+0x28>
 8004a82:	2010      	movs	r0, #16
 8004a84:	f7ff ff04 	bl	8004890 <malloc>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	61e8      	str	r0, [r5, #28]
 8004a8c:	b920      	cbnz	r0, 8004a98 <_Bfree+0x20>
 8004a8e:	218f      	movs	r1, #143	; 0x8f
 8004a90:	4b08      	ldr	r3, [pc, #32]	; (8004ab4 <_Bfree+0x3c>)
 8004a92:	4809      	ldr	r0, [pc, #36]	; (8004ab8 <_Bfree+0x40>)
 8004a94:	f000 fd62 	bl	800555c <__assert_func>
 8004a98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004a9c:	6006      	str	r6, [r0, #0]
 8004a9e:	60c6      	str	r6, [r0, #12]
 8004aa0:	b13c      	cbz	r4, 8004ab2 <_Bfree+0x3a>
 8004aa2:	69eb      	ldr	r3, [r5, #28]
 8004aa4:	6862      	ldr	r2, [r4, #4]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004aac:	6021      	str	r1, [r4, #0]
 8004aae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004ab2:	bd70      	pop	{r4, r5, r6, pc}
 8004ab4:	08005c7d 	.word	0x08005c7d
 8004ab8:	08005cfd 	.word	0x08005cfd

08004abc <__multadd>:
 8004abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ac0:	4607      	mov	r7, r0
 8004ac2:	460c      	mov	r4, r1
 8004ac4:	461e      	mov	r6, r3
 8004ac6:	2000      	movs	r0, #0
 8004ac8:	690d      	ldr	r5, [r1, #16]
 8004aca:	f101 0c14 	add.w	ip, r1, #20
 8004ace:	f8dc 3000 	ldr.w	r3, [ip]
 8004ad2:	3001      	adds	r0, #1
 8004ad4:	b299      	uxth	r1, r3
 8004ad6:	fb02 6101 	mla	r1, r2, r1, r6
 8004ada:	0c1e      	lsrs	r6, r3, #16
 8004adc:	0c0b      	lsrs	r3, r1, #16
 8004ade:	fb02 3306 	mla	r3, r2, r6, r3
 8004ae2:	b289      	uxth	r1, r1
 8004ae4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004ae8:	4285      	cmp	r5, r0
 8004aea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004aee:	f84c 1b04 	str.w	r1, [ip], #4
 8004af2:	dcec      	bgt.n	8004ace <__multadd+0x12>
 8004af4:	b30e      	cbz	r6, 8004b3a <__multadd+0x7e>
 8004af6:	68a3      	ldr	r3, [r4, #8]
 8004af8:	42ab      	cmp	r3, r5
 8004afa:	dc19      	bgt.n	8004b30 <__multadd+0x74>
 8004afc:	6861      	ldr	r1, [r4, #4]
 8004afe:	4638      	mov	r0, r7
 8004b00:	3101      	adds	r1, #1
 8004b02:	f7ff ff79 	bl	80049f8 <_Balloc>
 8004b06:	4680      	mov	r8, r0
 8004b08:	b928      	cbnz	r0, 8004b16 <__multadd+0x5a>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	21ba      	movs	r1, #186	; 0xba
 8004b0e:	4b0c      	ldr	r3, [pc, #48]	; (8004b40 <__multadd+0x84>)
 8004b10:	480c      	ldr	r0, [pc, #48]	; (8004b44 <__multadd+0x88>)
 8004b12:	f000 fd23 	bl	800555c <__assert_func>
 8004b16:	6922      	ldr	r2, [r4, #16]
 8004b18:	f104 010c 	add.w	r1, r4, #12
 8004b1c:	3202      	adds	r2, #2
 8004b1e:	0092      	lsls	r2, r2, #2
 8004b20:	300c      	adds	r0, #12
 8004b22:	f000 fd0d 	bl	8005540 <memcpy>
 8004b26:	4621      	mov	r1, r4
 8004b28:	4638      	mov	r0, r7
 8004b2a:	f7ff ffa5 	bl	8004a78 <_Bfree>
 8004b2e:	4644      	mov	r4, r8
 8004b30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004b34:	3501      	adds	r5, #1
 8004b36:	615e      	str	r6, [r3, #20]
 8004b38:	6125      	str	r5, [r4, #16]
 8004b3a:	4620      	mov	r0, r4
 8004b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b40:	08005cec 	.word	0x08005cec
 8004b44:	08005cfd 	.word	0x08005cfd

08004b48 <__hi0bits>:
 8004b48:	0c02      	lsrs	r2, r0, #16
 8004b4a:	0412      	lsls	r2, r2, #16
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	b9ca      	cbnz	r2, 8004b84 <__hi0bits+0x3c>
 8004b50:	0403      	lsls	r3, r0, #16
 8004b52:	2010      	movs	r0, #16
 8004b54:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004b58:	bf04      	itt	eq
 8004b5a:	021b      	lsleq	r3, r3, #8
 8004b5c:	3008      	addeq	r0, #8
 8004b5e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004b62:	bf04      	itt	eq
 8004b64:	011b      	lsleq	r3, r3, #4
 8004b66:	3004      	addeq	r0, #4
 8004b68:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004b6c:	bf04      	itt	eq
 8004b6e:	009b      	lsleq	r3, r3, #2
 8004b70:	3002      	addeq	r0, #2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	db05      	blt.n	8004b82 <__hi0bits+0x3a>
 8004b76:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004b7a:	f100 0001 	add.w	r0, r0, #1
 8004b7e:	bf08      	it	eq
 8004b80:	2020      	moveq	r0, #32
 8004b82:	4770      	bx	lr
 8004b84:	2000      	movs	r0, #0
 8004b86:	e7e5      	b.n	8004b54 <__hi0bits+0xc>

08004b88 <__lo0bits>:
 8004b88:	6803      	ldr	r3, [r0, #0]
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	f013 0007 	ands.w	r0, r3, #7
 8004b90:	d00b      	beq.n	8004baa <__lo0bits+0x22>
 8004b92:	07d9      	lsls	r1, r3, #31
 8004b94:	d421      	bmi.n	8004bda <__lo0bits+0x52>
 8004b96:	0798      	lsls	r0, r3, #30
 8004b98:	bf49      	itett	mi
 8004b9a:	085b      	lsrmi	r3, r3, #1
 8004b9c:	089b      	lsrpl	r3, r3, #2
 8004b9e:	2001      	movmi	r0, #1
 8004ba0:	6013      	strmi	r3, [r2, #0]
 8004ba2:	bf5c      	itt	pl
 8004ba4:	2002      	movpl	r0, #2
 8004ba6:	6013      	strpl	r3, [r2, #0]
 8004ba8:	4770      	bx	lr
 8004baa:	b299      	uxth	r1, r3
 8004bac:	b909      	cbnz	r1, 8004bb2 <__lo0bits+0x2a>
 8004bae:	2010      	movs	r0, #16
 8004bb0:	0c1b      	lsrs	r3, r3, #16
 8004bb2:	b2d9      	uxtb	r1, r3
 8004bb4:	b909      	cbnz	r1, 8004bba <__lo0bits+0x32>
 8004bb6:	3008      	adds	r0, #8
 8004bb8:	0a1b      	lsrs	r3, r3, #8
 8004bba:	0719      	lsls	r1, r3, #28
 8004bbc:	bf04      	itt	eq
 8004bbe:	091b      	lsreq	r3, r3, #4
 8004bc0:	3004      	addeq	r0, #4
 8004bc2:	0799      	lsls	r1, r3, #30
 8004bc4:	bf04      	itt	eq
 8004bc6:	089b      	lsreq	r3, r3, #2
 8004bc8:	3002      	addeq	r0, #2
 8004bca:	07d9      	lsls	r1, r3, #31
 8004bcc:	d403      	bmi.n	8004bd6 <__lo0bits+0x4e>
 8004bce:	085b      	lsrs	r3, r3, #1
 8004bd0:	f100 0001 	add.w	r0, r0, #1
 8004bd4:	d003      	beq.n	8004bde <__lo0bits+0x56>
 8004bd6:	6013      	str	r3, [r2, #0]
 8004bd8:	4770      	bx	lr
 8004bda:	2000      	movs	r0, #0
 8004bdc:	4770      	bx	lr
 8004bde:	2020      	movs	r0, #32
 8004be0:	4770      	bx	lr
	...

08004be4 <__i2b>:
 8004be4:	b510      	push	{r4, lr}
 8004be6:	460c      	mov	r4, r1
 8004be8:	2101      	movs	r1, #1
 8004bea:	f7ff ff05 	bl	80049f8 <_Balloc>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	b928      	cbnz	r0, 8004bfe <__i2b+0x1a>
 8004bf2:	f240 1145 	movw	r1, #325	; 0x145
 8004bf6:	4b04      	ldr	r3, [pc, #16]	; (8004c08 <__i2b+0x24>)
 8004bf8:	4804      	ldr	r0, [pc, #16]	; (8004c0c <__i2b+0x28>)
 8004bfa:	f000 fcaf 	bl	800555c <__assert_func>
 8004bfe:	2301      	movs	r3, #1
 8004c00:	6144      	str	r4, [r0, #20]
 8004c02:	6103      	str	r3, [r0, #16]
 8004c04:	bd10      	pop	{r4, pc}
 8004c06:	bf00      	nop
 8004c08:	08005cec 	.word	0x08005cec
 8004c0c:	08005cfd 	.word	0x08005cfd

08004c10 <__multiply>:
 8004c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c14:	4691      	mov	r9, r2
 8004c16:	690a      	ldr	r2, [r1, #16]
 8004c18:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004c1c:	460c      	mov	r4, r1
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	bfbe      	ittt	lt
 8004c22:	460b      	movlt	r3, r1
 8004c24:	464c      	movlt	r4, r9
 8004c26:	4699      	movlt	r9, r3
 8004c28:	6927      	ldr	r7, [r4, #16]
 8004c2a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004c2e:	68a3      	ldr	r3, [r4, #8]
 8004c30:	6861      	ldr	r1, [r4, #4]
 8004c32:	eb07 060a 	add.w	r6, r7, sl
 8004c36:	42b3      	cmp	r3, r6
 8004c38:	b085      	sub	sp, #20
 8004c3a:	bfb8      	it	lt
 8004c3c:	3101      	addlt	r1, #1
 8004c3e:	f7ff fedb 	bl	80049f8 <_Balloc>
 8004c42:	b930      	cbnz	r0, 8004c52 <__multiply+0x42>
 8004c44:	4602      	mov	r2, r0
 8004c46:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8004c4a:	4b43      	ldr	r3, [pc, #268]	; (8004d58 <__multiply+0x148>)
 8004c4c:	4843      	ldr	r0, [pc, #268]	; (8004d5c <__multiply+0x14c>)
 8004c4e:	f000 fc85 	bl	800555c <__assert_func>
 8004c52:	f100 0514 	add.w	r5, r0, #20
 8004c56:	462b      	mov	r3, r5
 8004c58:	2200      	movs	r2, #0
 8004c5a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004c5e:	4543      	cmp	r3, r8
 8004c60:	d321      	bcc.n	8004ca6 <__multiply+0x96>
 8004c62:	f104 0314 	add.w	r3, r4, #20
 8004c66:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004c6a:	f109 0314 	add.w	r3, r9, #20
 8004c6e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004c72:	9202      	str	r2, [sp, #8]
 8004c74:	1b3a      	subs	r2, r7, r4
 8004c76:	3a15      	subs	r2, #21
 8004c78:	f022 0203 	bic.w	r2, r2, #3
 8004c7c:	3204      	adds	r2, #4
 8004c7e:	f104 0115 	add.w	r1, r4, #21
 8004c82:	428f      	cmp	r7, r1
 8004c84:	bf38      	it	cc
 8004c86:	2204      	movcc	r2, #4
 8004c88:	9201      	str	r2, [sp, #4]
 8004c8a:	9a02      	ldr	r2, [sp, #8]
 8004c8c:	9303      	str	r3, [sp, #12]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d80c      	bhi.n	8004cac <__multiply+0x9c>
 8004c92:	2e00      	cmp	r6, #0
 8004c94:	dd03      	ble.n	8004c9e <__multiply+0x8e>
 8004c96:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d05a      	beq.n	8004d54 <__multiply+0x144>
 8004c9e:	6106      	str	r6, [r0, #16]
 8004ca0:	b005      	add	sp, #20
 8004ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ca6:	f843 2b04 	str.w	r2, [r3], #4
 8004caa:	e7d8      	b.n	8004c5e <__multiply+0x4e>
 8004cac:	f8b3 a000 	ldrh.w	sl, [r3]
 8004cb0:	f1ba 0f00 	cmp.w	sl, #0
 8004cb4:	d023      	beq.n	8004cfe <__multiply+0xee>
 8004cb6:	46a9      	mov	r9, r5
 8004cb8:	f04f 0c00 	mov.w	ip, #0
 8004cbc:	f104 0e14 	add.w	lr, r4, #20
 8004cc0:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004cc4:	f8d9 1000 	ldr.w	r1, [r9]
 8004cc8:	fa1f fb82 	uxth.w	fp, r2
 8004ccc:	b289      	uxth	r1, r1
 8004cce:	fb0a 110b 	mla	r1, sl, fp, r1
 8004cd2:	4461      	add	r1, ip
 8004cd4:	f8d9 c000 	ldr.w	ip, [r9]
 8004cd8:	0c12      	lsrs	r2, r2, #16
 8004cda:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004cde:	fb0a c202 	mla	r2, sl, r2, ip
 8004ce2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004ce6:	b289      	uxth	r1, r1
 8004ce8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004cec:	4577      	cmp	r7, lr
 8004cee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004cf2:	f849 1b04 	str.w	r1, [r9], #4
 8004cf6:	d8e3      	bhi.n	8004cc0 <__multiply+0xb0>
 8004cf8:	9a01      	ldr	r2, [sp, #4]
 8004cfa:	f845 c002 	str.w	ip, [r5, r2]
 8004cfe:	9a03      	ldr	r2, [sp, #12]
 8004d00:	3304      	adds	r3, #4
 8004d02:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004d06:	f1b9 0f00 	cmp.w	r9, #0
 8004d0a:	d021      	beq.n	8004d50 <__multiply+0x140>
 8004d0c:	46ae      	mov	lr, r5
 8004d0e:	f04f 0a00 	mov.w	sl, #0
 8004d12:	6829      	ldr	r1, [r5, #0]
 8004d14:	f104 0c14 	add.w	ip, r4, #20
 8004d18:	f8bc b000 	ldrh.w	fp, [ip]
 8004d1c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004d20:	b289      	uxth	r1, r1
 8004d22:	fb09 220b 	mla	r2, r9, fp, r2
 8004d26:	4452      	add	r2, sl
 8004d28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004d2c:	f84e 1b04 	str.w	r1, [lr], #4
 8004d30:	f85c 1b04 	ldr.w	r1, [ip], #4
 8004d34:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004d38:	f8be 1000 	ldrh.w	r1, [lr]
 8004d3c:	4567      	cmp	r7, ip
 8004d3e:	fb09 110a 	mla	r1, r9, sl, r1
 8004d42:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8004d46:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004d4a:	d8e5      	bhi.n	8004d18 <__multiply+0x108>
 8004d4c:	9a01      	ldr	r2, [sp, #4]
 8004d4e:	50a9      	str	r1, [r5, r2]
 8004d50:	3504      	adds	r5, #4
 8004d52:	e79a      	b.n	8004c8a <__multiply+0x7a>
 8004d54:	3e01      	subs	r6, #1
 8004d56:	e79c      	b.n	8004c92 <__multiply+0x82>
 8004d58:	08005cec 	.word	0x08005cec
 8004d5c:	08005cfd 	.word	0x08005cfd

08004d60 <__pow5mult>:
 8004d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d64:	4615      	mov	r5, r2
 8004d66:	f012 0203 	ands.w	r2, r2, #3
 8004d6a:	4606      	mov	r6, r0
 8004d6c:	460f      	mov	r7, r1
 8004d6e:	d007      	beq.n	8004d80 <__pow5mult+0x20>
 8004d70:	4c25      	ldr	r4, [pc, #148]	; (8004e08 <__pow5mult+0xa8>)
 8004d72:	3a01      	subs	r2, #1
 8004d74:	2300      	movs	r3, #0
 8004d76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004d7a:	f7ff fe9f 	bl	8004abc <__multadd>
 8004d7e:	4607      	mov	r7, r0
 8004d80:	10ad      	asrs	r5, r5, #2
 8004d82:	d03d      	beq.n	8004e00 <__pow5mult+0xa0>
 8004d84:	69f4      	ldr	r4, [r6, #28]
 8004d86:	b97c      	cbnz	r4, 8004da8 <__pow5mult+0x48>
 8004d88:	2010      	movs	r0, #16
 8004d8a:	f7ff fd81 	bl	8004890 <malloc>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	61f0      	str	r0, [r6, #28]
 8004d92:	b928      	cbnz	r0, 8004da0 <__pow5mult+0x40>
 8004d94:	f240 11b3 	movw	r1, #435	; 0x1b3
 8004d98:	4b1c      	ldr	r3, [pc, #112]	; (8004e0c <__pow5mult+0xac>)
 8004d9a:	481d      	ldr	r0, [pc, #116]	; (8004e10 <__pow5mult+0xb0>)
 8004d9c:	f000 fbde 	bl	800555c <__assert_func>
 8004da0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004da4:	6004      	str	r4, [r0, #0]
 8004da6:	60c4      	str	r4, [r0, #12]
 8004da8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8004dac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004db0:	b94c      	cbnz	r4, 8004dc6 <__pow5mult+0x66>
 8004db2:	f240 2171 	movw	r1, #625	; 0x271
 8004db6:	4630      	mov	r0, r6
 8004db8:	f7ff ff14 	bl	8004be4 <__i2b>
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	4604      	mov	r4, r0
 8004dc0:	f8c8 0008 	str.w	r0, [r8, #8]
 8004dc4:	6003      	str	r3, [r0, #0]
 8004dc6:	f04f 0900 	mov.w	r9, #0
 8004dca:	07eb      	lsls	r3, r5, #31
 8004dcc:	d50a      	bpl.n	8004de4 <__pow5mult+0x84>
 8004dce:	4639      	mov	r1, r7
 8004dd0:	4622      	mov	r2, r4
 8004dd2:	4630      	mov	r0, r6
 8004dd4:	f7ff ff1c 	bl	8004c10 <__multiply>
 8004dd8:	4680      	mov	r8, r0
 8004dda:	4639      	mov	r1, r7
 8004ddc:	4630      	mov	r0, r6
 8004dde:	f7ff fe4b 	bl	8004a78 <_Bfree>
 8004de2:	4647      	mov	r7, r8
 8004de4:	106d      	asrs	r5, r5, #1
 8004de6:	d00b      	beq.n	8004e00 <__pow5mult+0xa0>
 8004de8:	6820      	ldr	r0, [r4, #0]
 8004dea:	b938      	cbnz	r0, 8004dfc <__pow5mult+0x9c>
 8004dec:	4622      	mov	r2, r4
 8004dee:	4621      	mov	r1, r4
 8004df0:	4630      	mov	r0, r6
 8004df2:	f7ff ff0d 	bl	8004c10 <__multiply>
 8004df6:	6020      	str	r0, [r4, #0]
 8004df8:	f8c0 9000 	str.w	r9, [r0]
 8004dfc:	4604      	mov	r4, r0
 8004dfe:	e7e4      	b.n	8004dca <__pow5mult+0x6a>
 8004e00:	4638      	mov	r0, r7
 8004e02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e06:	bf00      	nop
 8004e08:	08005e48 	.word	0x08005e48
 8004e0c:	08005c7d 	.word	0x08005c7d
 8004e10:	08005cfd 	.word	0x08005cfd

08004e14 <__lshift>:
 8004e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e18:	460c      	mov	r4, r1
 8004e1a:	4607      	mov	r7, r0
 8004e1c:	4691      	mov	r9, r2
 8004e1e:	6923      	ldr	r3, [r4, #16]
 8004e20:	6849      	ldr	r1, [r1, #4]
 8004e22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004e26:	68a3      	ldr	r3, [r4, #8]
 8004e28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004e2c:	f108 0601 	add.w	r6, r8, #1
 8004e30:	42b3      	cmp	r3, r6
 8004e32:	db0b      	blt.n	8004e4c <__lshift+0x38>
 8004e34:	4638      	mov	r0, r7
 8004e36:	f7ff fddf 	bl	80049f8 <_Balloc>
 8004e3a:	4605      	mov	r5, r0
 8004e3c:	b948      	cbnz	r0, 8004e52 <__lshift+0x3e>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8004e44:	4b27      	ldr	r3, [pc, #156]	; (8004ee4 <__lshift+0xd0>)
 8004e46:	4828      	ldr	r0, [pc, #160]	; (8004ee8 <__lshift+0xd4>)
 8004e48:	f000 fb88 	bl	800555c <__assert_func>
 8004e4c:	3101      	adds	r1, #1
 8004e4e:	005b      	lsls	r3, r3, #1
 8004e50:	e7ee      	b.n	8004e30 <__lshift+0x1c>
 8004e52:	2300      	movs	r3, #0
 8004e54:	f100 0114 	add.w	r1, r0, #20
 8004e58:	f100 0210 	add.w	r2, r0, #16
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	4553      	cmp	r3, sl
 8004e60:	db33      	blt.n	8004eca <__lshift+0xb6>
 8004e62:	6920      	ldr	r0, [r4, #16]
 8004e64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004e68:	f104 0314 	add.w	r3, r4, #20
 8004e6c:	f019 091f 	ands.w	r9, r9, #31
 8004e70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004e74:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004e78:	d02b      	beq.n	8004ed2 <__lshift+0xbe>
 8004e7a:	468a      	mov	sl, r1
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f1c9 0e20 	rsb	lr, r9, #32
 8004e82:	6818      	ldr	r0, [r3, #0]
 8004e84:	fa00 f009 	lsl.w	r0, r0, r9
 8004e88:	4310      	orrs	r0, r2
 8004e8a:	f84a 0b04 	str.w	r0, [sl], #4
 8004e8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e92:	459c      	cmp	ip, r3
 8004e94:	fa22 f20e 	lsr.w	r2, r2, lr
 8004e98:	d8f3      	bhi.n	8004e82 <__lshift+0x6e>
 8004e9a:	ebac 0304 	sub.w	r3, ip, r4
 8004e9e:	3b15      	subs	r3, #21
 8004ea0:	f023 0303 	bic.w	r3, r3, #3
 8004ea4:	3304      	adds	r3, #4
 8004ea6:	f104 0015 	add.w	r0, r4, #21
 8004eaa:	4584      	cmp	ip, r0
 8004eac:	bf38      	it	cc
 8004eae:	2304      	movcc	r3, #4
 8004eb0:	50ca      	str	r2, [r1, r3]
 8004eb2:	b10a      	cbz	r2, 8004eb8 <__lshift+0xa4>
 8004eb4:	f108 0602 	add.w	r6, r8, #2
 8004eb8:	3e01      	subs	r6, #1
 8004eba:	4638      	mov	r0, r7
 8004ebc:	4621      	mov	r1, r4
 8004ebe:	612e      	str	r6, [r5, #16]
 8004ec0:	f7ff fdda 	bl	8004a78 <_Bfree>
 8004ec4:	4628      	mov	r0, r5
 8004ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eca:	f842 0f04 	str.w	r0, [r2, #4]!
 8004ece:	3301      	adds	r3, #1
 8004ed0:	e7c5      	b.n	8004e5e <__lshift+0x4a>
 8004ed2:	3904      	subs	r1, #4
 8004ed4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ed8:	459c      	cmp	ip, r3
 8004eda:	f841 2f04 	str.w	r2, [r1, #4]!
 8004ede:	d8f9      	bhi.n	8004ed4 <__lshift+0xc0>
 8004ee0:	e7ea      	b.n	8004eb8 <__lshift+0xa4>
 8004ee2:	bf00      	nop
 8004ee4:	08005cec 	.word	0x08005cec
 8004ee8:	08005cfd 	.word	0x08005cfd

08004eec <__mcmp>:
 8004eec:	4603      	mov	r3, r0
 8004eee:	690a      	ldr	r2, [r1, #16]
 8004ef0:	6900      	ldr	r0, [r0, #16]
 8004ef2:	b530      	push	{r4, r5, lr}
 8004ef4:	1a80      	subs	r0, r0, r2
 8004ef6:	d10d      	bne.n	8004f14 <__mcmp+0x28>
 8004ef8:	3314      	adds	r3, #20
 8004efa:	3114      	adds	r1, #20
 8004efc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004f00:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004f04:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004f08:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004f0c:	4295      	cmp	r5, r2
 8004f0e:	d002      	beq.n	8004f16 <__mcmp+0x2a>
 8004f10:	d304      	bcc.n	8004f1c <__mcmp+0x30>
 8004f12:	2001      	movs	r0, #1
 8004f14:	bd30      	pop	{r4, r5, pc}
 8004f16:	42a3      	cmp	r3, r4
 8004f18:	d3f4      	bcc.n	8004f04 <__mcmp+0x18>
 8004f1a:	e7fb      	b.n	8004f14 <__mcmp+0x28>
 8004f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f20:	e7f8      	b.n	8004f14 <__mcmp+0x28>
	...

08004f24 <__mdiff>:
 8004f24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f28:	460d      	mov	r5, r1
 8004f2a:	4607      	mov	r7, r0
 8004f2c:	4611      	mov	r1, r2
 8004f2e:	4628      	mov	r0, r5
 8004f30:	4614      	mov	r4, r2
 8004f32:	f7ff ffdb 	bl	8004eec <__mcmp>
 8004f36:	1e06      	subs	r6, r0, #0
 8004f38:	d111      	bne.n	8004f5e <__mdiff+0x3a>
 8004f3a:	4631      	mov	r1, r6
 8004f3c:	4638      	mov	r0, r7
 8004f3e:	f7ff fd5b 	bl	80049f8 <_Balloc>
 8004f42:	4602      	mov	r2, r0
 8004f44:	b928      	cbnz	r0, 8004f52 <__mdiff+0x2e>
 8004f46:	f240 2137 	movw	r1, #567	; 0x237
 8004f4a:	4b3a      	ldr	r3, [pc, #232]	; (8005034 <__mdiff+0x110>)
 8004f4c:	483a      	ldr	r0, [pc, #232]	; (8005038 <__mdiff+0x114>)
 8004f4e:	f000 fb05 	bl	800555c <__assert_func>
 8004f52:	2301      	movs	r3, #1
 8004f54:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004f58:	4610      	mov	r0, r2
 8004f5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f5e:	bfa4      	itt	ge
 8004f60:	4623      	movge	r3, r4
 8004f62:	462c      	movge	r4, r5
 8004f64:	4638      	mov	r0, r7
 8004f66:	6861      	ldr	r1, [r4, #4]
 8004f68:	bfa6      	itte	ge
 8004f6a:	461d      	movge	r5, r3
 8004f6c:	2600      	movge	r6, #0
 8004f6e:	2601      	movlt	r6, #1
 8004f70:	f7ff fd42 	bl	80049f8 <_Balloc>
 8004f74:	4602      	mov	r2, r0
 8004f76:	b918      	cbnz	r0, 8004f80 <__mdiff+0x5c>
 8004f78:	f240 2145 	movw	r1, #581	; 0x245
 8004f7c:	4b2d      	ldr	r3, [pc, #180]	; (8005034 <__mdiff+0x110>)
 8004f7e:	e7e5      	b.n	8004f4c <__mdiff+0x28>
 8004f80:	f102 0814 	add.w	r8, r2, #20
 8004f84:	46c2      	mov	sl, r8
 8004f86:	f04f 0c00 	mov.w	ip, #0
 8004f8a:	6927      	ldr	r7, [r4, #16]
 8004f8c:	60c6      	str	r6, [r0, #12]
 8004f8e:	692e      	ldr	r6, [r5, #16]
 8004f90:	f104 0014 	add.w	r0, r4, #20
 8004f94:	f105 0914 	add.w	r9, r5, #20
 8004f98:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8004f9c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004fa0:	3410      	adds	r4, #16
 8004fa2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8004fa6:	f859 3b04 	ldr.w	r3, [r9], #4
 8004faa:	fa1f f18b 	uxth.w	r1, fp
 8004fae:	4461      	add	r1, ip
 8004fb0:	fa1f fc83 	uxth.w	ip, r3
 8004fb4:	0c1b      	lsrs	r3, r3, #16
 8004fb6:	eba1 010c 	sub.w	r1, r1, ip
 8004fba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004fbe:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004fc2:	b289      	uxth	r1, r1
 8004fc4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8004fc8:	454e      	cmp	r6, r9
 8004fca:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004fce:	f84a 1b04 	str.w	r1, [sl], #4
 8004fd2:	d8e6      	bhi.n	8004fa2 <__mdiff+0x7e>
 8004fd4:	1b73      	subs	r3, r6, r5
 8004fd6:	3b15      	subs	r3, #21
 8004fd8:	f023 0303 	bic.w	r3, r3, #3
 8004fdc:	3515      	adds	r5, #21
 8004fde:	3304      	adds	r3, #4
 8004fe0:	42ae      	cmp	r6, r5
 8004fe2:	bf38      	it	cc
 8004fe4:	2304      	movcc	r3, #4
 8004fe6:	4418      	add	r0, r3
 8004fe8:	4443      	add	r3, r8
 8004fea:	461e      	mov	r6, r3
 8004fec:	4605      	mov	r5, r0
 8004fee:	4575      	cmp	r5, lr
 8004ff0:	d30e      	bcc.n	8005010 <__mdiff+0xec>
 8004ff2:	f10e 0103 	add.w	r1, lr, #3
 8004ff6:	1a09      	subs	r1, r1, r0
 8004ff8:	f021 0103 	bic.w	r1, r1, #3
 8004ffc:	3803      	subs	r0, #3
 8004ffe:	4586      	cmp	lr, r0
 8005000:	bf38      	it	cc
 8005002:	2100      	movcc	r1, #0
 8005004:	440b      	add	r3, r1
 8005006:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800500a:	b189      	cbz	r1, 8005030 <__mdiff+0x10c>
 800500c:	6117      	str	r7, [r2, #16]
 800500e:	e7a3      	b.n	8004f58 <__mdiff+0x34>
 8005010:	f855 8b04 	ldr.w	r8, [r5], #4
 8005014:	fa1f f188 	uxth.w	r1, r8
 8005018:	4461      	add	r1, ip
 800501a:	140c      	asrs	r4, r1, #16
 800501c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005020:	b289      	uxth	r1, r1
 8005022:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005026:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800502a:	f846 1b04 	str.w	r1, [r6], #4
 800502e:	e7de      	b.n	8004fee <__mdiff+0xca>
 8005030:	3f01      	subs	r7, #1
 8005032:	e7e8      	b.n	8005006 <__mdiff+0xe2>
 8005034:	08005cec 	.word	0x08005cec
 8005038:	08005cfd 	.word	0x08005cfd

0800503c <__d2b>:
 800503c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800503e:	2101      	movs	r1, #1
 8005040:	4617      	mov	r7, r2
 8005042:	461c      	mov	r4, r3
 8005044:	9e08      	ldr	r6, [sp, #32]
 8005046:	f7ff fcd7 	bl	80049f8 <_Balloc>
 800504a:	4605      	mov	r5, r0
 800504c:	b930      	cbnz	r0, 800505c <__d2b+0x20>
 800504e:	4602      	mov	r2, r0
 8005050:	f240 310f 	movw	r1, #783	; 0x30f
 8005054:	4b22      	ldr	r3, [pc, #136]	; (80050e0 <__d2b+0xa4>)
 8005056:	4823      	ldr	r0, [pc, #140]	; (80050e4 <__d2b+0xa8>)
 8005058:	f000 fa80 	bl	800555c <__assert_func>
 800505c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8005060:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8005064:	bb24      	cbnz	r4, 80050b0 <__d2b+0x74>
 8005066:	2f00      	cmp	r7, #0
 8005068:	9301      	str	r3, [sp, #4]
 800506a:	d026      	beq.n	80050ba <__d2b+0x7e>
 800506c:	4668      	mov	r0, sp
 800506e:	9700      	str	r7, [sp, #0]
 8005070:	f7ff fd8a 	bl	8004b88 <__lo0bits>
 8005074:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005078:	b1e8      	cbz	r0, 80050b6 <__d2b+0x7a>
 800507a:	f1c0 0320 	rsb	r3, r0, #32
 800507e:	fa02 f303 	lsl.w	r3, r2, r3
 8005082:	430b      	orrs	r3, r1
 8005084:	40c2      	lsrs	r2, r0
 8005086:	616b      	str	r3, [r5, #20]
 8005088:	9201      	str	r2, [sp, #4]
 800508a:	9b01      	ldr	r3, [sp, #4]
 800508c:	2b00      	cmp	r3, #0
 800508e:	bf14      	ite	ne
 8005090:	2102      	movne	r1, #2
 8005092:	2101      	moveq	r1, #1
 8005094:	61ab      	str	r3, [r5, #24]
 8005096:	6129      	str	r1, [r5, #16]
 8005098:	b1bc      	cbz	r4, 80050ca <__d2b+0x8e>
 800509a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800509e:	4404      	add	r4, r0
 80050a0:	6034      	str	r4, [r6, #0]
 80050a2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80050a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050a8:	6018      	str	r0, [r3, #0]
 80050aa:	4628      	mov	r0, r5
 80050ac:	b003      	add	sp, #12
 80050ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050b4:	e7d7      	b.n	8005066 <__d2b+0x2a>
 80050b6:	6169      	str	r1, [r5, #20]
 80050b8:	e7e7      	b.n	800508a <__d2b+0x4e>
 80050ba:	a801      	add	r0, sp, #4
 80050bc:	f7ff fd64 	bl	8004b88 <__lo0bits>
 80050c0:	9b01      	ldr	r3, [sp, #4]
 80050c2:	2101      	movs	r1, #1
 80050c4:	616b      	str	r3, [r5, #20]
 80050c6:	3020      	adds	r0, #32
 80050c8:	e7e5      	b.n	8005096 <__d2b+0x5a>
 80050ca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80050ce:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80050d2:	6030      	str	r0, [r6, #0]
 80050d4:	6918      	ldr	r0, [r3, #16]
 80050d6:	f7ff fd37 	bl	8004b48 <__hi0bits>
 80050da:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80050de:	e7e2      	b.n	80050a6 <__d2b+0x6a>
 80050e0:	08005cec 	.word	0x08005cec
 80050e4:	08005cfd 	.word	0x08005cfd

080050e8 <__ssputs_r>:
 80050e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050ec:	461f      	mov	r7, r3
 80050ee:	688e      	ldr	r6, [r1, #8]
 80050f0:	4682      	mov	sl, r0
 80050f2:	42be      	cmp	r6, r7
 80050f4:	460c      	mov	r4, r1
 80050f6:	4690      	mov	r8, r2
 80050f8:	680b      	ldr	r3, [r1, #0]
 80050fa:	d82c      	bhi.n	8005156 <__ssputs_r+0x6e>
 80050fc:	898a      	ldrh	r2, [r1, #12]
 80050fe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005102:	d026      	beq.n	8005152 <__ssputs_r+0x6a>
 8005104:	6965      	ldr	r5, [r4, #20]
 8005106:	6909      	ldr	r1, [r1, #16]
 8005108:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800510c:	eba3 0901 	sub.w	r9, r3, r1
 8005110:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005114:	1c7b      	adds	r3, r7, #1
 8005116:	444b      	add	r3, r9
 8005118:	106d      	asrs	r5, r5, #1
 800511a:	429d      	cmp	r5, r3
 800511c:	bf38      	it	cc
 800511e:	461d      	movcc	r5, r3
 8005120:	0553      	lsls	r3, r2, #21
 8005122:	d527      	bpl.n	8005174 <__ssputs_r+0x8c>
 8005124:	4629      	mov	r1, r5
 8005126:	f7ff fbdb 	bl	80048e0 <_malloc_r>
 800512a:	4606      	mov	r6, r0
 800512c:	b360      	cbz	r0, 8005188 <__ssputs_r+0xa0>
 800512e:	464a      	mov	r2, r9
 8005130:	6921      	ldr	r1, [r4, #16]
 8005132:	f000 fa05 	bl	8005540 <memcpy>
 8005136:	89a3      	ldrh	r3, [r4, #12]
 8005138:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800513c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005140:	81a3      	strh	r3, [r4, #12]
 8005142:	6126      	str	r6, [r4, #16]
 8005144:	444e      	add	r6, r9
 8005146:	6026      	str	r6, [r4, #0]
 8005148:	463e      	mov	r6, r7
 800514a:	6165      	str	r5, [r4, #20]
 800514c:	eba5 0509 	sub.w	r5, r5, r9
 8005150:	60a5      	str	r5, [r4, #8]
 8005152:	42be      	cmp	r6, r7
 8005154:	d900      	bls.n	8005158 <__ssputs_r+0x70>
 8005156:	463e      	mov	r6, r7
 8005158:	4632      	mov	r2, r6
 800515a:	4641      	mov	r1, r8
 800515c:	6820      	ldr	r0, [r4, #0]
 800515e:	f000 f9c5 	bl	80054ec <memmove>
 8005162:	2000      	movs	r0, #0
 8005164:	68a3      	ldr	r3, [r4, #8]
 8005166:	1b9b      	subs	r3, r3, r6
 8005168:	60a3      	str	r3, [r4, #8]
 800516a:	6823      	ldr	r3, [r4, #0]
 800516c:	4433      	add	r3, r6
 800516e:	6023      	str	r3, [r4, #0]
 8005170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005174:	462a      	mov	r2, r5
 8005176:	f000 fa35 	bl	80055e4 <_realloc_r>
 800517a:	4606      	mov	r6, r0
 800517c:	2800      	cmp	r0, #0
 800517e:	d1e0      	bne.n	8005142 <__ssputs_r+0x5a>
 8005180:	4650      	mov	r0, sl
 8005182:	6921      	ldr	r1, [r4, #16]
 8005184:	f7ff fb3c 	bl	8004800 <_free_r>
 8005188:	230c      	movs	r3, #12
 800518a:	f8ca 3000 	str.w	r3, [sl]
 800518e:	89a3      	ldrh	r3, [r4, #12]
 8005190:	f04f 30ff 	mov.w	r0, #4294967295
 8005194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005198:	81a3      	strh	r3, [r4, #12]
 800519a:	e7e9      	b.n	8005170 <__ssputs_r+0x88>

0800519c <_svfiprintf_r>:
 800519c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051a0:	4698      	mov	r8, r3
 80051a2:	898b      	ldrh	r3, [r1, #12]
 80051a4:	4607      	mov	r7, r0
 80051a6:	061b      	lsls	r3, r3, #24
 80051a8:	460d      	mov	r5, r1
 80051aa:	4614      	mov	r4, r2
 80051ac:	b09d      	sub	sp, #116	; 0x74
 80051ae:	d50e      	bpl.n	80051ce <_svfiprintf_r+0x32>
 80051b0:	690b      	ldr	r3, [r1, #16]
 80051b2:	b963      	cbnz	r3, 80051ce <_svfiprintf_r+0x32>
 80051b4:	2140      	movs	r1, #64	; 0x40
 80051b6:	f7ff fb93 	bl	80048e0 <_malloc_r>
 80051ba:	6028      	str	r0, [r5, #0]
 80051bc:	6128      	str	r0, [r5, #16]
 80051be:	b920      	cbnz	r0, 80051ca <_svfiprintf_r+0x2e>
 80051c0:	230c      	movs	r3, #12
 80051c2:	603b      	str	r3, [r7, #0]
 80051c4:	f04f 30ff 	mov.w	r0, #4294967295
 80051c8:	e0d0      	b.n	800536c <_svfiprintf_r+0x1d0>
 80051ca:	2340      	movs	r3, #64	; 0x40
 80051cc:	616b      	str	r3, [r5, #20]
 80051ce:	2300      	movs	r3, #0
 80051d0:	9309      	str	r3, [sp, #36]	; 0x24
 80051d2:	2320      	movs	r3, #32
 80051d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051d8:	2330      	movs	r3, #48	; 0x30
 80051da:	f04f 0901 	mov.w	r9, #1
 80051de:	f8cd 800c 	str.w	r8, [sp, #12]
 80051e2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8005384 <_svfiprintf_r+0x1e8>
 80051e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051ea:	4623      	mov	r3, r4
 80051ec:	469a      	mov	sl, r3
 80051ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051f2:	b10a      	cbz	r2, 80051f8 <_svfiprintf_r+0x5c>
 80051f4:	2a25      	cmp	r2, #37	; 0x25
 80051f6:	d1f9      	bne.n	80051ec <_svfiprintf_r+0x50>
 80051f8:	ebba 0b04 	subs.w	fp, sl, r4
 80051fc:	d00b      	beq.n	8005216 <_svfiprintf_r+0x7a>
 80051fe:	465b      	mov	r3, fp
 8005200:	4622      	mov	r2, r4
 8005202:	4629      	mov	r1, r5
 8005204:	4638      	mov	r0, r7
 8005206:	f7ff ff6f 	bl	80050e8 <__ssputs_r>
 800520a:	3001      	adds	r0, #1
 800520c:	f000 80a9 	beq.w	8005362 <_svfiprintf_r+0x1c6>
 8005210:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005212:	445a      	add	r2, fp
 8005214:	9209      	str	r2, [sp, #36]	; 0x24
 8005216:	f89a 3000 	ldrb.w	r3, [sl]
 800521a:	2b00      	cmp	r3, #0
 800521c:	f000 80a1 	beq.w	8005362 <_svfiprintf_r+0x1c6>
 8005220:	2300      	movs	r3, #0
 8005222:	f04f 32ff 	mov.w	r2, #4294967295
 8005226:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800522a:	f10a 0a01 	add.w	sl, sl, #1
 800522e:	9304      	str	r3, [sp, #16]
 8005230:	9307      	str	r3, [sp, #28]
 8005232:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005236:	931a      	str	r3, [sp, #104]	; 0x68
 8005238:	4654      	mov	r4, sl
 800523a:	2205      	movs	r2, #5
 800523c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005240:	4850      	ldr	r0, [pc, #320]	; (8005384 <_svfiprintf_r+0x1e8>)
 8005242:	f7fe fc5f 	bl	8003b04 <memchr>
 8005246:	9a04      	ldr	r2, [sp, #16]
 8005248:	b9d8      	cbnz	r0, 8005282 <_svfiprintf_r+0xe6>
 800524a:	06d0      	lsls	r0, r2, #27
 800524c:	bf44      	itt	mi
 800524e:	2320      	movmi	r3, #32
 8005250:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005254:	0711      	lsls	r1, r2, #28
 8005256:	bf44      	itt	mi
 8005258:	232b      	movmi	r3, #43	; 0x2b
 800525a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800525e:	f89a 3000 	ldrb.w	r3, [sl]
 8005262:	2b2a      	cmp	r3, #42	; 0x2a
 8005264:	d015      	beq.n	8005292 <_svfiprintf_r+0xf6>
 8005266:	4654      	mov	r4, sl
 8005268:	2000      	movs	r0, #0
 800526a:	f04f 0c0a 	mov.w	ip, #10
 800526e:	9a07      	ldr	r2, [sp, #28]
 8005270:	4621      	mov	r1, r4
 8005272:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005276:	3b30      	subs	r3, #48	; 0x30
 8005278:	2b09      	cmp	r3, #9
 800527a:	d94d      	bls.n	8005318 <_svfiprintf_r+0x17c>
 800527c:	b1b0      	cbz	r0, 80052ac <_svfiprintf_r+0x110>
 800527e:	9207      	str	r2, [sp, #28]
 8005280:	e014      	b.n	80052ac <_svfiprintf_r+0x110>
 8005282:	eba0 0308 	sub.w	r3, r0, r8
 8005286:	fa09 f303 	lsl.w	r3, r9, r3
 800528a:	4313      	orrs	r3, r2
 800528c:	46a2      	mov	sl, r4
 800528e:	9304      	str	r3, [sp, #16]
 8005290:	e7d2      	b.n	8005238 <_svfiprintf_r+0x9c>
 8005292:	9b03      	ldr	r3, [sp, #12]
 8005294:	1d19      	adds	r1, r3, #4
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	9103      	str	r1, [sp, #12]
 800529a:	2b00      	cmp	r3, #0
 800529c:	bfbb      	ittet	lt
 800529e:	425b      	neglt	r3, r3
 80052a0:	f042 0202 	orrlt.w	r2, r2, #2
 80052a4:	9307      	strge	r3, [sp, #28]
 80052a6:	9307      	strlt	r3, [sp, #28]
 80052a8:	bfb8      	it	lt
 80052aa:	9204      	strlt	r2, [sp, #16]
 80052ac:	7823      	ldrb	r3, [r4, #0]
 80052ae:	2b2e      	cmp	r3, #46	; 0x2e
 80052b0:	d10c      	bne.n	80052cc <_svfiprintf_r+0x130>
 80052b2:	7863      	ldrb	r3, [r4, #1]
 80052b4:	2b2a      	cmp	r3, #42	; 0x2a
 80052b6:	d134      	bne.n	8005322 <_svfiprintf_r+0x186>
 80052b8:	9b03      	ldr	r3, [sp, #12]
 80052ba:	3402      	adds	r4, #2
 80052bc:	1d1a      	adds	r2, r3, #4
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	9203      	str	r2, [sp, #12]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	bfb8      	it	lt
 80052c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80052ca:	9305      	str	r3, [sp, #20]
 80052cc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8005388 <_svfiprintf_r+0x1ec>
 80052d0:	2203      	movs	r2, #3
 80052d2:	4650      	mov	r0, sl
 80052d4:	7821      	ldrb	r1, [r4, #0]
 80052d6:	f7fe fc15 	bl	8003b04 <memchr>
 80052da:	b138      	cbz	r0, 80052ec <_svfiprintf_r+0x150>
 80052dc:	2240      	movs	r2, #64	; 0x40
 80052de:	9b04      	ldr	r3, [sp, #16]
 80052e0:	eba0 000a 	sub.w	r0, r0, sl
 80052e4:	4082      	lsls	r2, r0
 80052e6:	4313      	orrs	r3, r2
 80052e8:	3401      	adds	r4, #1
 80052ea:	9304      	str	r3, [sp, #16]
 80052ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052f0:	2206      	movs	r2, #6
 80052f2:	4826      	ldr	r0, [pc, #152]	; (800538c <_svfiprintf_r+0x1f0>)
 80052f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052f8:	f7fe fc04 	bl	8003b04 <memchr>
 80052fc:	2800      	cmp	r0, #0
 80052fe:	d038      	beq.n	8005372 <_svfiprintf_r+0x1d6>
 8005300:	4b23      	ldr	r3, [pc, #140]	; (8005390 <_svfiprintf_r+0x1f4>)
 8005302:	bb1b      	cbnz	r3, 800534c <_svfiprintf_r+0x1b0>
 8005304:	9b03      	ldr	r3, [sp, #12]
 8005306:	3307      	adds	r3, #7
 8005308:	f023 0307 	bic.w	r3, r3, #7
 800530c:	3308      	adds	r3, #8
 800530e:	9303      	str	r3, [sp, #12]
 8005310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005312:	4433      	add	r3, r6
 8005314:	9309      	str	r3, [sp, #36]	; 0x24
 8005316:	e768      	b.n	80051ea <_svfiprintf_r+0x4e>
 8005318:	460c      	mov	r4, r1
 800531a:	2001      	movs	r0, #1
 800531c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005320:	e7a6      	b.n	8005270 <_svfiprintf_r+0xd4>
 8005322:	2300      	movs	r3, #0
 8005324:	f04f 0c0a 	mov.w	ip, #10
 8005328:	4619      	mov	r1, r3
 800532a:	3401      	adds	r4, #1
 800532c:	9305      	str	r3, [sp, #20]
 800532e:	4620      	mov	r0, r4
 8005330:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005334:	3a30      	subs	r2, #48	; 0x30
 8005336:	2a09      	cmp	r2, #9
 8005338:	d903      	bls.n	8005342 <_svfiprintf_r+0x1a6>
 800533a:	2b00      	cmp	r3, #0
 800533c:	d0c6      	beq.n	80052cc <_svfiprintf_r+0x130>
 800533e:	9105      	str	r1, [sp, #20]
 8005340:	e7c4      	b.n	80052cc <_svfiprintf_r+0x130>
 8005342:	4604      	mov	r4, r0
 8005344:	2301      	movs	r3, #1
 8005346:	fb0c 2101 	mla	r1, ip, r1, r2
 800534a:	e7f0      	b.n	800532e <_svfiprintf_r+0x192>
 800534c:	ab03      	add	r3, sp, #12
 800534e:	9300      	str	r3, [sp, #0]
 8005350:	462a      	mov	r2, r5
 8005352:	4638      	mov	r0, r7
 8005354:	4b0f      	ldr	r3, [pc, #60]	; (8005394 <_svfiprintf_r+0x1f8>)
 8005356:	a904      	add	r1, sp, #16
 8005358:	f7fd fe80 	bl	800305c <_printf_float>
 800535c:	1c42      	adds	r2, r0, #1
 800535e:	4606      	mov	r6, r0
 8005360:	d1d6      	bne.n	8005310 <_svfiprintf_r+0x174>
 8005362:	89ab      	ldrh	r3, [r5, #12]
 8005364:	065b      	lsls	r3, r3, #25
 8005366:	f53f af2d 	bmi.w	80051c4 <_svfiprintf_r+0x28>
 800536a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800536c:	b01d      	add	sp, #116	; 0x74
 800536e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005372:	ab03      	add	r3, sp, #12
 8005374:	9300      	str	r3, [sp, #0]
 8005376:	462a      	mov	r2, r5
 8005378:	4638      	mov	r0, r7
 800537a:	4b06      	ldr	r3, [pc, #24]	; (8005394 <_svfiprintf_r+0x1f8>)
 800537c:	a904      	add	r1, sp, #16
 800537e:	f7fe f90d 	bl	800359c <_printf_i>
 8005382:	e7eb      	b.n	800535c <_svfiprintf_r+0x1c0>
 8005384:	08005e54 	.word	0x08005e54
 8005388:	08005e5a 	.word	0x08005e5a
 800538c:	08005e5e 	.word	0x08005e5e
 8005390:	0800305d 	.word	0x0800305d
 8005394:	080050e9 	.word	0x080050e9

08005398 <__sflush_r>:
 8005398:	898a      	ldrh	r2, [r1, #12]
 800539a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800539c:	4605      	mov	r5, r0
 800539e:	0710      	lsls	r0, r2, #28
 80053a0:	460c      	mov	r4, r1
 80053a2:	d457      	bmi.n	8005454 <__sflush_r+0xbc>
 80053a4:	684b      	ldr	r3, [r1, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	dc04      	bgt.n	80053b4 <__sflush_r+0x1c>
 80053aa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	dc01      	bgt.n	80053b4 <__sflush_r+0x1c>
 80053b0:	2000      	movs	r0, #0
 80053b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053b6:	2e00      	cmp	r6, #0
 80053b8:	d0fa      	beq.n	80053b0 <__sflush_r+0x18>
 80053ba:	2300      	movs	r3, #0
 80053bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80053c0:	682f      	ldr	r7, [r5, #0]
 80053c2:	6a21      	ldr	r1, [r4, #32]
 80053c4:	602b      	str	r3, [r5, #0]
 80053c6:	d032      	beq.n	800542e <__sflush_r+0x96>
 80053c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80053ca:	89a3      	ldrh	r3, [r4, #12]
 80053cc:	075a      	lsls	r2, r3, #29
 80053ce:	d505      	bpl.n	80053dc <__sflush_r+0x44>
 80053d0:	6863      	ldr	r3, [r4, #4]
 80053d2:	1ac0      	subs	r0, r0, r3
 80053d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80053d6:	b10b      	cbz	r3, 80053dc <__sflush_r+0x44>
 80053d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053da:	1ac0      	subs	r0, r0, r3
 80053dc:	2300      	movs	r3, #0
 80053de:	4602      	mov	r2, r0
 80053e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053e2:	4628      	mov	r0, r5
 80053e4:	6a21      	ldr	r1, [r4, #32]
 80053e6:	47b0      	blx	r6
 80053e8:	1c43      	adds	r3, r0, #1
 80053ea:	89a3      	ldrh	r3, [r4, #12]
 80053ec:	d106      	bne.n	80053fc <__sflush_r+0x64>
 80053ee:	6829      	ldr	r1, [r5, #0]
 80053f0:	291d      	cmp	r1, #29
 80053f2:	d82b      	bhi.n	800544c <__sflush_r+0xb4>
 80053f4:	4a28      	ldr	r2, [pc, #160]	; (8005498 <__sflush_r+0x100>)
 80053f6:	410a      	asrs	r2, r1
 80053f8:	07d6      	lsls	r6, r2, #31
 80053fa:	d427      	bmi.n	800544c <__sflush_r+0xb4>
 80053fc:	2200      	movs	r2, #0
 80053fe:	6062      	str	r2, [r4, #4]
 8005400:	6922      	ldr	r2, [r4, #16]
 8005402:	04d9      	lsls	r1, r3, #19
 8005404:	6022      	str	r2, [r4, #0]
 8005406:	d504      	bpl.n	8005412 <__sflush_r+0x7a>
 8005408:	1c42      	adds	r2, r0, #1
 800540a:	d101      	bne.n	8005410 <__sflush_r+0x78>
 800540c:	682b      	ldr	r3, [r5, #0]
 800540e:	b903      	cbnz	r3, 8005412 <__sflush_r+0x7a>
 8005410:	6560      	str	r0, [r4, #84]	; 0x54
 8005412:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005414:	602f      	str	r7, [r5, #0]
 8005416:	2900      	cmp	r1, #0
 8005418:	d0ca      	beq.n	80053b0 <__sflush_r+0x18>
 800541a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800541e:	4299      	cmp	r1, r3
 8005420:	d002      	beq.n	8005428 <__sflush_r+0x90>
 8005422:	4628      	mov	r0, r5
 8005424:	f7ff f9ec 	bl	8004800 <_free_r>
 8005428:	2000      	movs	r0, #0
 800542a:	6360      	str	r0, [r4, #52]	; 0x34
 800542c:	e7c1      	b.n	80053b2 <__sflush_r+0x1a>
 800542e:	2301      	movs	r3, #1
 8005430:	4628      	mov	r0, r5
 8005432:	47b0      	blx	r6
 8005434:	1c41      	adds	r1, r0, #1
 8005436:	d1c8      	bne.n	80053ca <__sflush_r+0x32>
 8005438:	682b      	ldr	r3, [r5, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d0c5      	beq.n	80053ca <__sflush_r+0x32>
 800543e:	2b1d      	cmp	r3, #29
 8005440:	d001      	beq.n	8005446 <__sflush_r+0xae>
 8005442:	2b16      	cmp	r3, #22
 8005444:	d101      	bne.n	800544a <__sflush_r+0xb2>
 8005446:	602f      	str	r7, [r5, #0]
 8005448:	e7b2      	b.n	80053b0 <__sflush_r+0x18>
 800544a:	89a3      	ldrh	r3, [r4, #12]
 800544c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005450:	81a3      	strh	r3, [r4, #12]
 8005452:	e7ae      	b.n	80053b2 <__sflush_r+0x1a>
 8005454:	690f      	ldr	r7, [r1, #16]
 8005456:	2f00      	cmp	r7, #0
 8005458:	d0aa      	beq.n	80053b0 <__sflush_r+0x18>
 800545a:	0793      	lsls	r3, r2, #30
 800545c:	bf18      	it	ne
 800545e:	2300      	movne	r3, #0
 8005460:	680e      	ldr	r6, [r1, #0]
 8005462:	bf08      	it	eq
 8005464:	694b      	ldreq	r3, [r1, #20]
 8005466:	1bf6      	subs	r6, r6, r7
 8005468:	600f      	str	r7, [r1, #0]
 800546a:	608b      	str	r3, [r1, #8]
 800546c:	2e00      	cmp	r6, #0
 800546e:	dd9f      	ble.n	80053b0 <__sflush_r+0x18>
 8005470:	4633      	mov	r3, r6
 8005472:	463a      	mov	r2, r7
 8005474:	4628      	mov	r0, r5
 8005476:	6a21      	ldr	r1, [r4, #32]
 8005478:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800547c:	47e0      	blx	ip
 800547e:	2800      	cmp	r0, #0
 8005480:	dc06      	bgt.n	8005490 <__sflush_r+0xf8>
 8005482:	89a3      	ldrh	r3, [r4, #12]
 8005484:	f04f 30ff 	mov.w	r0, #4294967295
 8005488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800548c:	81a3      	strh	r3, [r4, #12]
 800548e:	e790      	b.n	80053b2 <__sflush_r+0x1a>
 8005490:	4407      	add	r7, r0
 8005492:	1a36      	subs	r6, r6, r0
 8005494:	e7ea      	b.n	800546c <__sflush_r+0xd4>
 8005496:	bf00      	nop
 8005498:	dfbffffe 	.word	0xdfbffffe

0800549c <_fflush_r>:
 800549c:	b538      	push	{r3, r4, r5, lr}
 800549e:	690b      	ldr	r3, [r1, #16]
 80054a0:	4605      	mov	r5, r0
 80054a2:	460c      	mov	r4, r1
 80054a4:	b913      	cbnz	r3, 80054ac <_fflush_r+0x10>
 80054a6:	2500      	movs	r5, #0
 80054a8:	4628      	mov	r0, r5
 80054aa:	bd38      	pop	{r3, r4, r5, pc}
 80054ac:	b118      	cbz	r0, 80054b6 <_fflush_r+0x1a>
 80054ae:	6a03      	ldr	r3, [r0, #32]
 80054b0:	b90b      	cbnz	r3, 80054b6 <_fflush_r+0x1a>
 80054b2:	f7fe fa0f 	bl	80038d4 <__sinit>
 80054b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d0f3      	beq.n	80054a6 <_fflush_r+0xa>
 80054be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80054c0:	07d0      	lsls	r0, r2, #31
 80054c2:	d404      	bmi.n	80054ce <_fflush_r+0x32>
 80054c4:	0599      	lsls	r1, r3, #22
 80054c6:	d402      	bmi.n	80054ce <_fflush_r+0x32>
 80054c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054ca:	f7fe fb19 	bl	8003b00 <__retarget_lock_acquire_recursive>
 80054ce:	4628      	mov	r0, r5
 80054d0:	4621      	mov	r1, r4
 80054d2:	f7ff ff61 	bl	8005398 <__sflush_r>
 80054d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054d8:	4605      	mov	r5, r0
 80054da:	07da      	lsls	r2, r3, #31
 80054dc:	d4e4      	bmi.n	80054a8 <_fflush_r+0xc>
 80054de:	89a3      	ldrh	r3, [r4, #12]
 80054e0:	059b      	lsls	r3, r3, #22
 80054e2:	d4e1      	bmi.n	80054a8 <_fflush_r+0xc>
 80054e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054e6:	f7fe fb0c 	bl	8003b02 <__retarget_lock_release_recursive>
 80054ea:	e7dd      	b.n	80054a8 <_fflush_r+0xc>

080054ec <memmove>:
 80054ec:	4288      	cmp	r0, r1
 80054ee:	b510      	push	{r4, lr}
 80054f0:	eb01 0402 	add.w	r4, r1, r2
 80054f4:	d902      	bls.n	80054fc <memmove+0x10>
 80054f6:	4284      	cmp	r4, r0
 80054f8:	4623      	mov	r3, r4
 80054fa:	d807      	bhi.n	800550c <memmove+0x20>
 80054fc:	1e43      	subs	r3, r0, #1
 80054fe:	42a1      	cmp	r1, r4
 8005500:	d008      	beq.n	8005514 <memmove+0x28>
 8005502:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005506:	f803 2f01 	strb.w	r2, [r3, #1]!
 800550a:	e7f8      	b.n	80054fe <memmove+0x12>
 800550c:	4601      	mov	r1, r0
 800550e:	4402      	add	r2, r0
 8005510:	428a      	cmp	r2, r1
 8005512:	d100      	bne.n	8005516 <memmove+0x2a>
 8005514:	bd10      	pop	{r4, pc}
 8005516:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800551a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800551e:	e7f7      	b.n	8005510 <memmove+0x24>

08005520 <_sbrk_r>:
 8005520:	b538      	push	{r3, r4, r5, lr}
 8005522:	2300      	movs	r3, #0
 8005524:	4d05      	ldr	r5, [pc, #20]	; (800553c <_sbrk_r+0x1c>)
 8005526:	4604      	mov	r4, r0
 8005528:	4608      	mov	r0, r1
 800552a:	602b      	str	r3, [r5, #0]
 800552c:	f7fb fdf0 	bl	8001110 <_sbrk>
 8005530:	1c43      	adds	r3, r0, #1
 8005532:	d102      	bne.n	800553a <_sbrk_r+0x1a>
 8005534:	682b      	ldr	r3, [r5, #0]
 8005536:	b103      	cbz	r3, 800553a <_sbrk_r+0x1a>
 8005538:	6023      	str	r3, [r4, #0]
 800553a:	bd38      	pop	{r3, r4, r5, pc}
 800553c:	200003a8 	.word	0x200003a8

08005540 <memcpy>:
 8005540:	440a      	add	r2, r1
 8005542:	4291      	cmp	r1, r2
 8005544:	f100 33ff 	add.w	r3, r0, #4294967295
 8005548:	d100      	bne.n	800554c <memcpy+0xc>
 800554a:	4770      	bx	lr
 800554c:	b510      	push	{r4, lr}
 800554e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005552:	4291      	cmp	r1, r2
 8005554:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005558:	d1f9      	bne.n	800554e <memcpy+0xe>
 800555a:	bd10      	pop	{r4, pc}

0800555c <__assert_func>:
 800555c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800555e:	4614      	mov	r4, r2
 8005560:	461a      	mov	r2, r3
 8005562:	4b09      	ldr	r3, [pc, #36]	; (8005588 <__assert_func+0x2c>)
 8005564:	4605      	mov	r5, r0
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68d8      	ldr	r0, [r3, #12]
 800556a:	b14c      	cbz	r4, 8005580 <__assert_func+0x24>
 800556c:	4b07      	ldr	r3, [pc, #28]	; (800558c <__assert_func+0x30>)
 800556e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005572:	9100      	str	r1, [sp, #0]
 8005574:	462b      	mov	r3, r5
 8005576:	4906      	ldr	r1, [pc, #24]	; (8005590 <__assert_func+0x34>)
 8005578:	f000 f870 	bl	800565c <fiprintf>
 800557c:	f000 f880 	bl	8005680 <abort>
 8005580:	4b04      	ldr	r3, [pc, #16]	; (8005594 <__assert_func+0x38>)
 8005582:	461c      	mov	r4, r3
 8005584:	e7f3      	b.n	800556e <__assert_func+0x12>
 8005586:	bf00      	nop
 8005588:	20000064 	.word	0x20000064
 800558c:	08005e6f 	.word	0x08005e6f
 8005590:	08005e7c 	.word	0x08005e7c
 8005594:	08005eaa 	.word	0x08005eaa

08005598 <_calloc_r>:
 8005598:	b570      	push	{r4, r5, r6, lr}
 800559a:	fba1 5402 	umull	r5, r4, r1, r2
 800559e:	b934      	cbnz	r4, 80055ae <_calloc_r+0x16>
 80055a0:	4629      	mov	r1, r5
 80055a2:	f7ff f99d 	bl	80048e0 <_malloc_r>
 80055a6:	4606      	mov	r6, r0
 80055a8:	b928      	cbnz	r0, 80055b6 <_calloc_r+0x1e>
 80055aa:	4630      	mov	r0, r6
 80055ac:	bd70      	pop	{r4, r5, r6, pc}
 80055ae:	220c      	movs	r2, #12
 80055b0:	2600      	movs	r6, #0
 80055b2:	6002      	str	r2, [r0, #0]
 80055b4:	e7f9      	b.n	80055aa <_calloc_r+0x12>
 80055b6:	462a      	mov	r2, r5
 80055b8:	4621      	mov	r1, r4
 80055ba:	f7fe fa24 	bl	8003a06 <memset>
 80055be:	e7f4      	b.n	80055aa <_calloc_r+0x12>

080055c0 <__ascii_mbtowc>:
 80055c0:	b082      	sub	sp, #8
 80055c2:	b901      	cbnz	r1, 80055c6 <__ascii_mbtowc+0x6>
 80055c4:	a901      	add	r1, sp, #4
 80055c6:	b142      	cbz	r2, 80055da <__ascii_mbtowc+0x1a>
 80055c8:	b14b      	cbz	r3, 80055de <__ascii_mbtowc+0x1e>
 80055ca:	7813      	ldrb	r3, [r2, #0]
 80055cc:	600b      	str	r3, [r1, #0]
 80055ce:	7812      	ldrb	r2, [r2, #0]
 80055d0:	1e10      	subs	r0, r2, #0
 80055d2:	bf18      	it	ne
 80055d4:	2001      	movne	r0, #1
 80055d6:	b002      	add	sp, #8
 80055d8:	4770      	bx	lr
 80055da:	4610      	mov	r0, r2
 80055dc:	e7fb      	b.n	80055d6 <__ascii_mbtowc+0x16>
 80055de:	f06f 0001 	mvn.w	r0, #1
 80055e2:	e7f8      	b.n	80055d6 <__ascii_mbtowc+0x16>

080055e4 <_realloc_r>:
 80055e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055e8:	4680      	mov	r8, r0
 80055ea:	4614      	mov	r4, r2
 80055ec:	460e      	mov	r6, r1
 80055ee:	b921      	cbnz	r1, 80055fa <_realloc_r+0x16>
 80055f0:	4611      	mov	r1, r2
 80055f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055f6:	f7ff b973 	b.w	80048e0 <_malloc_r>
 80055fa:	b92a      	cbnz	r2, 8005608 <_realloc_r+0x24>
 80055fc:	f7ff f900 	bl	8004800 <_free_r>
 8005600:	4625      	mov	r5, r4
 8005602:	4628      	mov	r0, r5
 8005604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005608:	f000 f841 	bl	800568e <_malloc_usable_size_r>
 800560c:	4284      	cmp	r4, r0
 800560e:	4607      	mov	r7, r0
 8005610:	d802      	bhi.n	8005618 <_realloc_r+0x34>
 8005612:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005616:	d812      	bhi.n	800563e <_realloc_r+0x5a>
 8005618:	4621      	mov	r1, r4
 800561a:	4640      	mov	r0, r8
 800561c:	f7ff f960 	bl	80048e0 <_malloc_r>
 8005620:	4605      	mov	r5, r0
 8005622:	2800      	cmp	r0, #0
 8005624:	d0ed      	beq.n	8005602 <_realloc_r+0x1e>
 8005626:	42bc      	cmp	r4, r7
 8005628:	4622      	mov	r2, r4
 800562a:	4631      	mov	r1, r6
 800562c:	bf28      	it	cs
 800562e:	463a      	movcs	r2, r7
 8005630:	f7ff ff86 	bl	8005540 <memcpy>
 8005634:	4631      	mov	r1, r6
 8005636:	4640      	mov	r0, r8
 8005638:	f7ff f8e2 	bl	8004800 <_free_r>
 800563c:	e7e1      	b.n	8005602 <_realloc_r+0x1e>
 800563e:	4635      	mov	r5, r6
 8005640:	e7df      	b.n	8005602 <_realloc_r+0x1e>

08005642 <__ascii_wctomb>:
 8005642:	4603      	mov	r3, r0
 8005644:	4608      	mov	r0, r1
 8005646:	b141      	cbz	r1, 800565a <__ascii_wctomb+0x18>
 8005648:	2aff      	cmp	r2, #255	; 0xff
 800564a:	d904      	bls.n	8005656 <__ascii_wctomb+0x14>
 800564c:	228a      	movs	r2, #138	; 0x8a
 800564e:	f04f 30ff 	mov.w	r0, #4294967295
 8005652:	601a      	str	r2, [r3, #0]
 8005654:	4770      	bx	lr
 8005656:	2001      	movs	r0, #1
 8005658:	700a      	strb	r2, [r1, #0]
 800565a:	4770      	bx	lr

0800565c <fiprintf>:
 800565c:	b40e      	push	{r1, r2, r3}
 800565e:	b503      	push	{r0, r1, lr}
 8005660:	4601      	mov	r1, r0
 8005662:	ab03      	add	r3, sp, #12
 8005664:	4805      	ldr	r0, [pc, #20]	; (800567c <fiprintf+0x20>)
 8005666:	f853 2b04 	ldr.w	r2, [r3], #4
 800566a:	6800      	ldr	r0, [r0, #0]
 800566c:	9301      	str	r3, [sp, #4]
 800566e:	f000 f83d 	bl	80056ec <_vfiprintf_r>
 8005672:	b002      	add	sp, #8
 8005674:	f85d eb04 	ldr.w	lr, [sp], #4
 8005678:	b003      	add	sp, #12
 800567a:	4770      	bx	lr
 800567c:	20000064 	.word	0x20000064

08005680 <abort>:
 8005680:	2006      	movs	r0, #6
 8005682:	b508      	push	{r3, lr}
 8005684:	f000 fa0a 	bl	8005a9c <raise>
 8005688:	2001      	movs	r0, #1
 800568a:	f7fb fccd 	bl	8001028 <_exit>

0800568e <_malloc_usable_size_r>:
 800568e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005692:	1f18      	subs	r0, r3, #4
 8005694:	2b00      	cmp	r3, #0
 8005696:	bfbc      	itt	lt
 8005698:	580b      	ldrlt	r3, [r1, r0]
 800569a:	18c0      	addlt	r0, r0, r3
 800569c:	4770      	bx	lr

0800569e <__sfputc_r>:
 800569e:	6893      	ldr	r3, [r2, #8]
 80056a0:	b410      	push	{r4}
 80056a2:	3b01      	subs	r3, #1
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	6093      	str	r3, [r2, #8]
 80056a8:	da07      	bge.n	80056ba <__sfputc_r+0x1c>
 80056aa:	6994      	ldr	r4, [r2, #24]
 80056ac:	42a3      	cmp	r3, r4
 80056ae:	db01      	blt.n	80056b4 <__sfputc_r+0x16>
 80056b0:	290a      	cmp	r1, #10
 80056b2:	d102      	bne.n	80056ba <__sfputc_r+0x1c>
 80056b4:	bc10      	pop	{r4}
 80056b6:	f000 b933 	b.w	8005920 <__swbuf_r>
 80056ba:	6813      	ldr	r3, [r2, #0]
 80056bc:	1c58      	adds	r0, r3, #1
 80056be:	6010      	str	r0, [r2, #0]
 80056c0:	7019      	strb	r1, [r3, #0]
 80056c2:	4608      	mov	r0, r1
 80056c4:	bc10      	pop	{r4}
 80056c6:	4770      	bx	lr

080056c8 <__sfputs_r>:
 80056c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ca:	4606      	mov	r6, r0
 80056cc:	460f      	mov	r7, r1
 80056ce:	4614      	mov	r4, r2
 80056d0:	18d5      	adds	r5, r2, r3
 80056d2:	42ac      	cmp	r4, r5
 80056d4:	d101      	bne.n	80056da <__sfputs_r+0x12>
 80056d6:	2000      	movs	r0, #0
 80056d8:	e007      	b.n	80056ea <__sfputs_r+0x22>
 80056da:	463a      	mov	r2, r7
 80056dc:	4630      	mov	r0, r6
 80056de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056e2:	f7ff ffdc 	bl	800569e <__sfputc_r>
 80056e6:	1c43      	adds	r3, r0, #1
 80056e8:	d1f3      	bne.n	80056d2 <__sfputs_r+0xa>
 80056ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080056ec <_vfiprintf_r>:
 80056ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056f0:	460d      	mov	r5, r1
 80056f2:	4614      	mov	r4, r2
 80056f4:	4698      	mov	r8, r3
 80056f6:	4606      	mov	r6, r0
 80056f8:	b09d      	sub	sp, #116	; 0x74
 80056fa:	b118      	cbz	r0, 8005704 <_vfiprintf_r+0x18>
 80056fc:	6a03      	ldr	r3, [r0, #32]
 80056fe:	b90b      	cbnz	r3, 8005704 <_vfiprintf_r+0x18>
 8005700:	f7fe f8e8 	bl	80038d4 <__sinit>
 8005704:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005706:	07d9      	lsls	r1, r3, #31
 8005708:	d405      	bmi.n	8005716 <_vfiprintf_r+0x2a>
 800570a:	89ab      	ldrh	r3, [r5, #12]
 800570c:	059a      	lsls	r2, r3, #22
 800570e:	d402      	bmi.n	8005716 <_vfiprintf_r+0x2a>
 8005710:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005712:	f7fe f9f5 	bl	8003b00 <__retarget_lock_acquire_recursive>
 8005716:	89ab      	ldrh	r3, [r5, #12]
 8005718:	071b      	lsls	r3, r3, #28
 800571a:	d501      	bpl.n	8005720 <_vfiprintf_r+0x34>
 800571c:	692b      	ldr	r3, [r5, #16]
 800571e:	b99b      	cbnz	r3, 8005748 <_vfiprintf_r+0x5c>
 8005720:	4629      	mov	r1, r5
 8005722:	4630      	mov	r0, r6
 8005724:	f000 f93a 	bl	800599c <__swsetup_r>
 8005728:	b170      	cbz	r0, 8005748 <_vfiprintf_r+0x5c>
 800572a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800572c:	07dc      	lsls	r4, r3, #31
 800572e:	d504      	bpl.n	800573a <_vfiprintf_r+0x4e>
 8005730:	f04f 30ff 	mov.w	r0, #4294967295
 8005734:	b01d      	add	sp, #116	; 0x74
 8005736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800573a:	89ab      	ldrh	r3, [r5, #12]
 800573c:	0598      	lsls	r0, r3, #22
 800573e:	d4f7      	bmi.n	8005730 <_vfiprintf_r+0x44>
 8005740:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005742:	f7fe f9de 	bl	8003b02 <__retarget_lock_release_recursive>
 8005746:	e7f3      	b.n	8005730 <_vfiprintf_r+0x44>
 8005748:	2300      	movs	r3, #0
 800574a:	9309      	str	r3, [sp, #36]	; 0x24
 800574c:	2320      	movs	r3, #32
 800574e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005752:	2330      	movs	r3, #48	; 0x30
 8005754:	f04f 0901 	mov.w	r9, #1
 8005758:	f8cd 800c 	str.w	r8, [sp, #12]
 800575c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800590c <_vfiprintf_r+0x220>
 8005760:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005764:	4623      	mov	r3, r4
 8005766:	469a      	mov	sl, r3
 8005768:	f813 2b01 	ldrb.w	r2, [r3], #1
 800576c:	b10a      	cbz	r2, 8005772 <_vfiprintf_r+0x86>
 800576e:	2a25      	cmp	r2, #37	; 0x25
 8005770:	d1f9      	bne.n	8005766 <_vfiprintf_r+0x7a>
 8005772:	ebba 0b04 	subs.w	fp, sl, r4
 8005776:	d00b      	beq.n	8005790 <_vfiprintf_r+0xa4>
 8005778:	465b      	mov	r3, fp
 800577a:	4622      	mov	r2, r4
 800577c:	4629      	mov	r1, r5
 800577e:	4630      	mov	r0, r6
 8005780:	f7ff ffa2 	bl	80056c8 <__sfputs_r>
 8005784:	3001      	adds	r0, #1
 8005786:	f000 80a9 	beq.w	80058dc <_vfiprintf_r+0x1f0>
 800578a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800578c:	445a      	add	r2, fp
 800578e:	9209      	str	r2, [sp, #36]	; 0x24
 8005790:	f89a 3000 	ldrb.w	r3, [sl]
 8005794:	2b00      	cmp	r3, #0
 8005796:	f000 80a1 	beq.w	80058dc <_vfiprintf_r+0x1f0>
 800579a:	2300      	movs	r3, #0
 800579c:	f04f 32ff 	mov.w	r2, #4294967295
 80057a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057a4:	f10a 0a01 	add.w	sl, sl, #1
 80057a8:	9304      	str	r3, [sp, #16]
 80057aa:	9307      	str	r3, [sp, #28]
 80057ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80057b0:	931a      	str	r3, [sp, #104]	; 0x68
 80057b2:	4654      	mov	r4, sl
 80057b4:	2205      	movs	r2, #5
 80057b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057ba:	4854      	ldr	r0, [pc, #336]	; (800590c <_vfiprintf_r+0x220>)
 80057bc:	f7fe f9a2 	bl	8003b04 <memchr>
 80057c0:	9a04      	ldr	r2, [sp, #16]
 80057c2:	b9d8      	cbnz	r0, 80057fc <_vfiprintf_r+0x110>
 80057c4:	06d1      	lsls	r1, r2, #27
 80057c6:	bf44      	itt	mi
 80057c8:	2320      	movmi	r3, #32
 80057ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057ce:	0713      	lsls	r3, r2, #28
 80057d0:	bf44      	itt	mi
 80057d2:	232b      	movmi	r3, #43	; 0x2b
 80057d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057d8:	f89a 3000 	ldrb.w	r3, [sl]
 80057dc:	2b2a      	cmp	r3, #42	; 0x2a
 80057de:	d015      	beq.n	800580c <_vfiprintf_r+0x120>
 80057e0:	4654      	mov	r4, sl
 80057e2:	2000      	movs	r0, #0
 80057e4:	f04f 0c0a 	mov.w	ip, #10
 80057e8:	9a07      	ldr	r2, [sp, #28]
 80057ea:	4621      	mov	r1, r4
 80057ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057f0:	3b30      	subs	r3, #48	; 0x30
 80057f2:	2b09      	cmp	r3, #9
 80057f4:	d94d      	bls.n	8005892 <_vfiprintf_r+0x1a6>
 80057f6:	b1b0      	cbz	r0, 8005826 <_vfiprintf_r+0x13a>
 80057f8:	9207      	str	r2, [sp, #28]
 80057fa:	e014      	b.n	8005826 <_vfiprintf_r+0x13a>
 80057fc:	eba0 0308 	sub.w	r3, r0, r8
 8005800:	fa09 f303 	lsl.w	r3, r9, r3
 8005804:	4313      	orrs	r3, r2
 8005806:	46a2      	mov	sl, r4
 8005808:	9304      	str	r3, [sp, #16]
 800580a:	e7d2      	b.n	80057b2 <_vfiprintf_r+0xc6>
 800580c:	9b03      	ldr	r3, [sp, #12]
 800580e:	1d19      	adds	r1, r3, #4
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	9103      	str	r1, [sp, #12]
 8005814:	2b00      	cmp	r3, #0
 8005816:	bfbb      	ittet	lt
 8005818:	425b      	neglt	r3, r3
 800581a:	f042 0202 	orrlt.w	r2, r2, #2
 800581e:	9307      	strge	r3, [sp, #28]
 8005820:	9307      	strlt	r3, [sp, #28]
 8005822:	bfb8      	it	lt
 8005824:	9204      	strlt	r2, [sp, #16]
 8005826:	7823      	ldrb	r3, [r4, #0]
 8005828:	2b2e      	cmp	r3, #46	; 0x2e
 800582a:	d10c      	bne.n	8005846 <_vfiprintf_r+0x15a>
 800582c:	7863      	ldrb	r3, [r4, #1]
 800582e:	2b2a      	cmp	r3, #42	; 0x2a
 8005830:	d134      	bne.n	800589c <_vfiprintf_r+0x1b0>
 8005832:	9b03      	ldr	r3, [sp, #12]
 8005834:	3402      	adds	r4, #2
 8005836:	1d1a      	adds	r2, r3, #4
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	9203      	str	r2, [sp, #12]
 800583c:	2b00      	cmp	r3, #0
 800583e:	bfb8      	it	lt
 8005840:	f04f 33ff 	movlt.w	r3, #4294967295
 8005844:	9305      	str	r3, [sp, #20]
 8005846:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005910 <_vfiprintf_r+0x224>
 800584a:	2203      	movs	r2, #3
 800584c:	4650      	mov	r0, sl
 800584e:	7821      	ldrb	r1, [r4, #0]
 8005850:	f7fe f958 	bl	8003b04 <memchr>
 8005854:	b138      	cbz	r0, 8005866 <_vfiprintf_r+0x17a>
 8005856:	2240      	movs	r2, #64	; 0x40
 8005858:	9b04      	ldr	r3, [sp, #16]
 800585a:	eba0 000a 	sub.w	r0, r0, sl
 800585e:	4082      	lsls	r2, r0
 8005860:	4313      	orrs	r3, r2
 8005862:	3401      	adds	r4, #1
 8005864:	9304      	str	r3, [sp, #16]
 8005866:	f814 1b01 	ldrb.w	r1, [r4], #1
 800586a:	2206      	movs	r2, #6
 800586c:	4829      	ldr	r0, [pc, #164]	; (8005914 <_vfiprintf_r+0x228>)
 800586e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005872:	f7fe f947 	bl	8003b04 <memchr>
 8005876:	2800      	cmp	r0, #0
 8005878:	d03f      	beq.n	80058fa <_vfiprintf_r+0x20e>
 800587a:	4b27      	ldr	r3, [pc, #156]	; (8005918 <_vfiprintf_r+0x22c>)
 800587c:	bb1b      	cbnz	r3, 80058c6 <_vfiprintf_r+0x1da>
 800587e:	9b03      	ldr	r3, [sp, #12]
 8005880:	3307      	adds	r3, #7
 8005882:	f023 0307 	bic.w	r3, r3, #7
 8005886:	3308      	adds	r3, #8
 8005888:	9303      	str	r3, [sp, #12]
 800588a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800588c:	443b      	add	r3, r7
 800588e:	9309      	str	r3, [sp, #36]	; 0x24
 8005890:	e768      	b.n	8005764 <_vfiprintf_r+0x78>
 8005892:	460c      	mov	r4, r1
 8005894:	2001      	movs	r0, #1
 8005896:	fb0c 3202 	mla	r2, ip, r2, r3
 800589a:	e7a6      	b.n	80057ea <_vfiprintf_r+0xfe>
 800589c:	2300      	movs	r3, #0
 800589e:	f04f 0c0a 	mov.w	ip, #10
 80058a2:	4619      	mov	r1, r3
 80058a4:	3401      	adds	r4, #1
 80058a6:	9305      	str	r3, [sp, #20]
 80058a8:	4620      	mov	r0, r4
 80058aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058ae:	3a30      	subs	r2, #48	; 0x30
 80058b0:	2a09      	cmp	r2, #9
 80058b2:	d903      	bls.n	80058bc <_vfiprintf_r+0x1d0>
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d0c6      	beq.n	8005846 <_vfiprintf_r+0x15a>
 80058b8:	9105      	str	r1, [sp, #20]
 80058ba:	e7c4      	b.n	8005846 <_vfiprintf_r+0x15a>
 80058bc:	4604      	mov	r4, r0
 80058be:	2301      	movs	r3, #1
 80058c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80058c4:	e7f0      	b.n	80058a8 <_vfiprintf_r+0x1bc>
 80058c6:	ab03      	add	r3, sp, #12
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	462a      	mov	r2, r5
 80058cc:	4630      	mov	r0, r6
 80058ce:	4b13      	ldr	r3, [pc, #76]	; (800591c <_vfiprintf_r+0x230>)
 80058d0:	a904      	add	r1, sp, #16
 80058d2:	f7fd fbc3 	bl	800305c <_printf_float>
 80058d6:	4607      	mov	r7, r0
 80058d8:	1c78      	adds	r0, r7, #1
 80058da:	d1d6      	bne.n	800588a <_vfiprintf_r+0x19e>
 80058dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058de:	07d9      	lsls	r1, r3, #31
 80058e0:	d405      	bmi.n	80058ee <_vfiprintf_r+0x202>
 80058e2:	89ab      	ldrh	r3, [r5, #12]
 80058e4:	059a      	lsls	r2, r3, #22
 80058e6:	d402      	bmi.n	80058ee <_vfiprintf_r+0x202>
 80058e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058ea:	f7fe f90a 	bl	8003b02 <__retarget_lock_release_recursive>
 80058ee:	89ab      	ldrh	r3, [r5, #12]
 80058f0:	065b      	lsls	r3, r3, #25
 80058f2:	f53f af1d 	bmi.w	8005730 <_vfiprintf_r+0x44>
 80058f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058f8:	e71c      	b.n	8005734 <_vfiprintf_r+0x48>
 80058fa:	ab03      	add	r3, sp, #12
 80058fc:	9300      	str	r3, [sp, #0]
 80058fe:	462a      	mov	r2, r5
 8005900:	4630      	mov	r0, r6
 8005902:	4b06      	ldr	r3, [pc, #24]	; (800591c <_vfiprintf_r+0x230>)
 8005904:	a904      	add	r1, sp, #16
 8005906:	f7fd fe49 	bl	800359c <_printf_i>
 800590a:	e7e4      	b.n	80058d6 <_vfiprintf_r+0x1ea>
 800590c:	08005e54 	.word	0x08005e54
 8005910:	08005e5a 	.word	0x08005e5a
 8005914:	08005e5e 	.word	0x08005e5e
 8005918:	0800305d 	.word	0x0800305d
 800591c:	080056c9 	.word	0x080056c9

08005920 <__swbuf_r>:
 8005920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005922:	460e      	mov	r6, r1
 8005924:	4614      	mov	r4, r2
 8005926:	4605      	mov	r5, r0
 8005928:	b118      	cbz	r0, 8005932 <__swbuf_r+0x12>
 800592a:	6a03      	ldr	r3, [r0, #32]
 800592c:	b90b      	cbnz	r3, 8005932 <__swbuf_r+0x12>
 800592e:	f7fd ffd1 	bl	80038d4 <__sinit>
 8005932:	69a3      	ldr	r3, [r4, #24]
 8005934:	60a3      	str	r3, [r4, #8]
 8005936:	89a3      	ldrh	r3, [r4, #12]
 8005938:	071a      	lsls	r2, r3, #28
 800593a:	d525      	bpl.n	8005988 <__swbuf_r+0x68>
 800593c:	6923      	ldr	r3, [r4, #16]
 800593e:	b31b      	cbz	r3, 8005988 <__swbuf_r+0x68>
 8005940:	6823      	ldr	r3, [r4, #0]
 8005942:	6922      	ldr	r2, [r4, #16]
 8005944:	b2f6      	uxtb	r6, r6
 8005946:	1a98      	subs	r0, r3, r2
 8005948:	6963      	ldr	r3, [r4, #20]
 800594a:	4637      	mov	r7, r6
 800594c:	4283      	cmp	r3, r0
 800594e:	dc04      	bgt.n	800595a <__swbuf_r+0x3a>
 8005950:	4621      	mov	r1, r4
 8005952:	4628      	mov	r0, r5
 8005954:	f7ff fda2 	bl	800549c <_fflush_r>
 8005958:	b9e0      	cbnz	r0, 8005994 <__swbuf_r+0x74>
 800595a:	68a3      	ldr	r3, [r4, #8]
 800595c:	3b01      	subs	r3, #1
 800595e:	60a3      	str	r3, [r4, #8]
 8005960:	6823      	ldr	r3, [r4, #0]
 8005962:	1c5a      	adds	r2, r3, #1
 8005964:	6022      	str	r2, [r4, #0]
 8005966:	701e      	strb	r6, [r3, #0]
 8005968:	6962      	ldr	r2, [r4, #20]
 800596a:	1c43      	adds	r3, r0, #1
 800596c:	429a      	cmp	r2, r3
 800596e:	d004      	beq.n	800597a <__swbuf_r+0x5a>
 8005970:	89a3      	ldrh	r3, [r4, #12]
 8005972:	07db      	lsls	r3, r3, #31
 8005974:	d506      	bpl.n	8005984 <__swbuf_r+0x64>
 8005976:	2e0a      	cmp	r6, #10
 8005978:	d104      	bne.n	8005984 <__swbuf_r+0x64>
 800597a:	4621      	mov	r1, r4
 800597c:	4628      	mov	r0, r5
 800597e:	f7ff fd8d 	bl	800549c <_fflush_r>
 8005982:	b938      	cbnz	r0, 8005994 <__swbuf_r+0x74>
 8005984:	4638      	mov	r0, r7
 8005986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005988:	4621      	mov	r1, r4
 800598a:	4628      	mov	r0, r5
 800598c:	f000 f806 	bl	800599c <__swsetup_r>
 8005990:	2800      	cmp	r0, #0
 8005992:	d0d5      	beq.n	8005940 <__swbuf_r+0x20>
 8005994:	f04f 37ff 	mov.w	r7, #4294967295
 8005998:	e7f4      	b.n	8005984 <__swbuf_r+0x64>
	...

0800599c <__swsetup_r>:
 800599c:	b538      	push	{r3, r4, r5, lr}
 800599e:	4b2a      	ldr	r3, [pc, #168]	; (8005a48 <__swsetup_r+0xac>)
 80059a0:	4605      	mov	r5, r0
 80059a2:	6818      	ldr	r0, [r3, #0]
 80059a4:	460c      	mov	r4, r1
 80059a6:	b118      	cbz	r0, 80059b0 <__swsetup_r+0x14>
 80059a8:	6a03      	ldr	r3, [r0, #32]
 80059aa:	b90b      	cbnz	r3, 80059b0 <__swsetup_r+0x14>
 80059ac:	f7fd ff92 	bl	80038d4 <__sinit>
 80059b0:	89a3      	ldrh	r3, [r4, #12]
 80059b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80059b6:	0718      	lsls	r0, r3, #28
 80059b8:	d422      	bmi.n	8005a00 <__swsetup_r+0x64>
 80059ba:	06d9      	lsls	r1, r3, #27
 80059bc:	d407      	bmi.n	80059ce <__swsetup_r+0x32>
 80059be:	2309      	movs	r3, #9
 80059c0:	602b      	str	r3, [r5, #0]
 80059c2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80059c6:	f04f 30ff 	mov.w	r0, #4294967295
 80059ca:	81a3      	strh	r3, [r4, #12]
 80059cc:	e034      	b.n	8005a38 <__swsetup_r+0x9c>
 80059ce:	0758      	lsls	r0, r3, #29
 80059d0:	d512      	bpl.n	80059f8 <__swsetup_r+0x5c>
 80059d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059d4:	b141      	cbz	r1, 80059e8 <__swsetup_r+0x4c>
 80059d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80059da:	4299      	cmp	r1, r3
 80059dc:	d002      	beq.n	80059e4 <__swsetup_r+0x48>
 80059de:	4628      	mov	r0, r5
 80059e0:	f7fe ff0e 	bl	8004800 <_free_r>
 80059e4:	2300      	movs	r3, #0
 80059e6:	6363      	str	r3, [r4, #52]	; 0x34
 80059e8:	89a3      	ldrh	r3, [r4, #12]
 80059ea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80059ee:	81a3      	strh	r3, [r4, #12]
 80059f0:	2300      	movs	r3, #0
 80059f2:	6063      	str	r3, [r4, #4]
 80059f4:	6923      	ldr	r3, [r4, #16]
 80059f6:	6023      	str	r3, [r4, #0]
 80059f8:	89a3      	ldrh	r3, [r4, #12]
 80059fa:	f043 0308 	orr.w	r3, r3, #8
 80059fe:	81a3      	strh	r3, [r4, #12]
 8005a00:	6923      	ldr	r3, [r4, #16]
 8005a02:	b94b      	cbnz	r3, 8005a18 <__swsetup_r+0x7c>
 8005a04:	89a3      	ldrh	r3, [r4, #12]
 8005a06:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005a0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a0e:	d003      	beq.n	8005a18 <__swsetup_r+0x7c>
 8005a10:	4621      	mov	r1, r4
 8005a12:	4628      	mov	r0, r5
 8005a14:	f000 f883 	bl	8005b1e <__smakebuf_r>
 8005a18:	89a0      	ldrh	r0, [r4, #12]
 8005a1a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a1e:	f010 0301 	ands.w	r3, r0, #1
 8005a22:	d00a      	beq.n	8005a3a <__swsetup_r+0x9e>
 8005a24:	2300      	movs	r3, #0
 8005a26:	60a3      	str	r3, [r4, #8]
 8005a28:	6963      	ldr	r3, [r4, #20]
 8005a2a:	425b      	negs	r3, r3
 8005a2c:	61a3      	str	r3, [r4, #24]
 8005a2e:	6923      	ldr	r3, [r4, #16]
 8005a30:	b943      	cbnz	r3, 8005a44 <__swsetup_r+0xa8>
 8005a32:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005a36:	d1c4      	bne.n	80059c2 <__swsetup_r+0x26>
 8005a38:	bd38      	pop	{r3, r4, r5, pc}
 8005a3a:	0781      	lsls	r1, r0, #30
 8005a3c:	bf58      	it	pl
 8005a3e:	6963      	ldrpl	r3, [r4, #20]
 8005a40:	60a3      	str	r3, [r4, #8]
 8005a42:	e7f4      	b.n	8005a2e <__swsetup_r+0x92>
 8005a44:	2000      	movs	r0, #0
 8005a46:	e7f7      	b.n	8005a38 <__swsetup_r+0x9c>
 8005a48:	20000064 	.word	0x20000064

08005a4c <_raise_r>:
 8005a4c:	291f      	cmp	r1, #31
 8005a4e:	b538      	push	{r3, r4, r5, lr}
 8005a50:	4604      	mov	r4, r0
 8005a52:	460d      	mov	r5, r1
 8005a54:	d904      	bls.n	8005a60 <_raise_r+0x14>
 8005a56:	2316      	movs	r3, #22
 8005a58:	6003      	str	r3, [r0, #0]
 8005a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a5e:	bd38      	pop	{r3, r4, r5, pc}
 8005a60:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005a62:	b112      	cbz	r2, 8005a6a <_raise_r+0x1e>
 8005a64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005a68:	b94b      	cbnz	r3, 8005a7e <_raise_r+0x32>
 8005a6a:	4620      	mov	r0, r4
 8005a6c:	f000 f830 	bl	8005ad0 <_getpid_r>
 8005a70:	462a      	mov	r2, r5
 8005a72:	4601      	mov	r1, r0
 8005a74:	4620      	mov	r0, r4
 8005a76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a7a:	f000 b817 	b.w	8005aac <_kill_r>
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d00a      	beq.n	8005a98 <_raise_r+0x4c>
 8005a82:	1c59      	adds	r1, r3, #1
 8005a84:	d103      	bne.n	8005a8e <_raise_r+0x42>
 8005a86:	2316      	movs	r3, #22
 8005a88:	6003      	str	r3, [r0, #0]
 8005a8a:	2001      	movs	r0, #1
 8005a8c:	e7e7      	b.n	8005a5e <_raise_r+0x12>
 8005a8e:	2400      	movs	r4, #0
 8005a90:	4628      	mov	r0, r5
 8005a92:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005a96:	4798      	blx	r3
 8005a98:	2000      	movs	r0, #0
 8005a9a:	e7e0      	b.n	8005a5e <_raise_r+0x12>

08005a9c <raise>:
 8005a9c:	4b02      	ldr	r3, [pc, #8]	; (8005aa8 <raise+0xc>)
 8005a9e:	4601      	mov	r1, r0
 8005aa0:	6818      	ldr	r0, [r3, #0]
 8005aa2:	f7ff bfd3 	b.w	8005a4c <_raise_r>
 8005aa6:	bf00      	nop
 8005aa8:	20000064 	.word	0x20000064

08005aac <_kill_r>:
 8005aac:	b538      	push	{r3, r4, r5, lr}
 8005aae:	2300      	movs	r3, #0
 8005ab0:	4d06      	ldr	r5, [pc, #24]	; (8005acc <_kill_r+0x20>)
 8005ab2:	4604      	mov	r4, r0
 8005ab4:	4608      	mov	r0, r1
 8005ab6:	4611      	mov	r1, r2
 8005ab8:	602b      	str	r3, [r5, #0]
 8005aba:	f7fb faa5 	bl	8001008 <_kill>
 8005abe:	1c43      	adds	r3, r0, #1
 8005ac0:	d102      	bne.n	8005ac8 <_kill_r+0x1c>
 8005ac2:	682b      	ldr	r3, [r5, #0]
 8005ac4:	b103      	cbz	r3, 8005ac8 <_kill_r+0x1c>
 8005ac6:	6023      	str	r3, [r4, #0]
 8005ac8:	bd38      	pop	{r3, r4, r5, pc}
 8005aca:	bf00      	nop
 8005acc:	200003a8 	.word	0x200003a8

08005ad0 <_getpid_r>:
 8005ad0:	f7fb ba93 	b.w	8000ffa <_getpid>

08005ad4 <__swhatbuf_r>:
 8005ad4:	b570      	push	{r4, r5, r6, lr}
 8005ad6:	460c      	mov	r4, r1
 8005ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005adc:	4615      	mov	r5, r2
 8005ade:	2900      	cmp	r1, #0
 8005ae0:	461e      	mov	r6, r3
 8005ae2:	b096      	sub	sp, #88	; 0x58
 8005ae4:	da0c      	bge.n	8005b00 <__swhatbuf_r+0x2c>
 8005ae6:	89a3      	ldrh	r3, [r4, #12]
 8005ae8:	2100      	movs	r1, #0
 8005aea:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005aee:	bf0c      	ite	eq
 8005af0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005af4:	2340      	movne	r3, #64	; 0x40
 8005af6:	2000      	movs	r0, #0
 8005af8:	6031      	str	r1, [r6, #0]
 8005afa:	602b      	str	r3, [r5, #0]
 8005afc:	b016      	add	sp, #88	; 0x58
 8005afe:	bd70      	pop	{r4, r5, r6, pc}
 8005b00:	466a      	mov	r2, sp
 8005b02:	f000 f849 	bl	8005b98 <_fstat_r>
 8005b06:	2800      	cmp	r0, #0
 8005b08:	dbed      	blt.n	8005ae6 <__swhatbuf_r+0x12>
 8005b0a:	9901      	ldr	r1, [sp, #4]
 8005b0c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005b10:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005b14:	4259      	negs	r1, r3
 8005b16:	4159      	adcs	r1, r3
 8005b18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b1c:	e7eb      	b.n	8005af6 <__swhatbuf_r+0x22>

08005b1e <__smakebuf_r>:
 8005b1e:	898b      	ldrh	r3, [r1, #12]
 8005b20:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b22:	079d      	lsls	r5, r3, #30
 8005b24:	4606      	mov	r6, r0
 8005b26:	460c      	mov	r4, r1
 8005b28:	d507      	bpl.n	8005b3a <__smakebuf_r+0x1c>
 8005b2a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005b2e:	6023      	str	r3, [r4, #0]
 8005b30:	6123      	str	r3, [r4, #16]
 8005b32:	2301      	movs	r3, #1
 8005b34:	6163      	str	r3, [r4, #20]
 8005b36:	b002      	add	sp, #8
 8005b38:	bd70      	pop	{r4, r5, r6, pc}
 8005b3a:	466a      	mov	r2, sp
 8005b3c:	ab01      	add	r3, sp, #4
 8005b3e:	f7ff ffc9 	bl	8005ad4 <__swhatbuf_r>
 8005b42:	9900      	ldr	r1, [sp, #0]
 8005b44:	4605      	mov	r5, r0
 8005b46:	4630      	mov	r0, r6
 8005b48:	f7fe feca 	bl	80048e0 <_malloc_r>
 8005b4c:	b948      	cbnz	r0, 8005b62 <__smakebuf_r+0x44>
 8005b4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b52:	059a      	lsls	r2, r3, #22
 8005b54:	d4ef      	bmi.n	8005b36 <__smakebuf_r+0x18>
 8005b56:	f023 0303 	bic.w	r3, r3, #3
 8005b5a:	f043 0302 	orr.w	r3, r3, #2
 8005b5e:	81a3      	strh	r3, [r4, #12]
 8005b60:	e7e3      	b.n	8005b2a <__smakebuf_r+0xc>
 8005b62:	89a3      	ldrh	r3, [r4, #12]
 8005b64:	6020      	str	r0, [r4, #0]
 8005b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b6a:	81a3      	strh	r3, [r4, #12]
 8005b6c:	9b00      	ldr	r3, [sp, #0]
 8005b6e:	6120      	str	r0, [r4, #16]
 8005b70:	6163      	str	r3, [r4, #20]
 8005b72:	9b01      	ldr	r3, [sp, #4]
 8005b74:	b15b      	cbz	r3, 8005b8e <__smakebuf_r+0x70>
 8005b76:	4630      	mov	r0, r6
 8005b78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b7c:	f000 f81e 	bl	8005bbc <_isatty_r>
 8005b80:	b128      	cbz	r0, 8005b8e <__smakebuf_r+0x70>
 8005b82:	89a3      	ldrh	r3, [r4, #12]
 8005b84:	f023 0303 	bic.w	r3, r3, #3
 8005b88:	f043 0301 	orr.w	r3, r3, #1
 8005b8c:	81a3      	strh	r3, [r4, #12]
 8005b8e:	89a3      	ldrh	r3, [r4, #12]
 8005b90:	431d      	orrs	r5, r3
 8005b92:	81a5      	strh	r5, [r4, #12]
 8005b94:	e7cf      	b.n	8005b36 <__smakebuf_r+0x18>
	...

08005b98 <_fstat_r>:
 8005b98:	b538      	push	{r3, r4, r5, lr}
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	4d06      	ldr	r5, [pc, #24]	; (8005bb8 <_fstat_r+0x20>)
 8005b9e:	4604      	mov	r4, r0
 8005ba0:	4608      	mov	r0, r1
 8005ba2:	4611      	mov	r1, r2
 8005ba4:	602b      	str	r3, [r5, #0]
 8005ba6:	f7fb fa8d 	bl	80010c4 <_fstat>
 8005baa:	1c43      	adds	r3, r0, #1
 8005bac:	d102      	bne.n	8005bb4 <_fstat_r+0x1c>
 8005bae:	682b      	ldr	r3, [r5, #0]
 8005bb0:	b103      	cbz	r3, 8005bb4 <_fstat_r+0x1c>
 8005bb2:	6023      	str	r3, [r4, #0]
 8005bb4:	bd38      	pop	{r3, r4, r5, pc}
 8005bb6:	bf00      	nop
 8005bb8:	200003a8 	.word	0x200003a8

08005bbc <_isatty_r>:
 8005bbc:	b538      	push	{r3, r4, r5, lr}
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	4d05      	ldr	r5, [pc, #20]	; (8005bd8 <_isatty_r+0x1c>)
 8005bc2:	4604      	mov	r4, r0
 8005bc4:	4608      	mov	r0, r1
 8005bc6:	602b      	str	r3, [r5, #0]
 8005bc8:	f7fb fa8b 	bl	80010e2 <_isatty>
 8005bcc:	1c43      	adds	r3, r0, #1
 8005bce:	d102      	bne.n	8005bd6 <_isatty_r+0x1a>
 8005bd0:	682b      	ldr	r3, [r5, #0]
 8005bd2:	b103      	cbz	r3, 8005bd6 <_isatty_r+0x1a>
 8005bd4:	6023      	str	r3, [r4, #0]
 8005bd6:	bd38      	pop	{r3, r4, r5, pc}
 8005bd8:	200003a8 	.word	0x200003a8

08005bdc <_init>:
 8005bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bde:	bf00      	nop
 8005be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005be2:	bc08      	pop	{r3}
 8005be4:	469e      	mov	lr, r3
 8005be6:	4770      	bx	lr

08005be8 <_fini>:
 8005be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bea:	bf00      	nop
 8005bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bee:	bc08      	pop	{r3}
 8005bf0:	469e      	mov	lr, r3
 8005bf2:	4770      	bx	lr
