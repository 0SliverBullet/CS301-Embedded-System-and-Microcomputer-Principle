
Lab8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a84  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08002c68  08002c68  00012c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cdc  08002cdc  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08002cdc  08002cdc  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cdc  08002cdc  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cdc  08002cdc  00012cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ce0  08002ce0  00012ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002ce4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  2000005c  08002d40  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08002d40  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009bd9  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001af4  00000000  00000000  00029ca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bc8  00000000  00000000  0002b798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000934  00000000  00000000  0002c360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018fd5  00000000  00000000  0002cc94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c440  00000000  00000000  00045c69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00096c58  00000000  00000000  000520a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003624  00000000  00000000  000e8d04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000ec328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000005c 	.word	0x2000005c
 8000200:	00000000 	.word	0x00000000
 8000204:	08002c50 	.word	0x08002c50

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000060 	.word	0x20000060
 8000220:	08002c50 	.word	0x08002c50

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b09a      	sub	sp, #104	; 0x68
 8000238:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023a:	f000 fad3 	bl	80007e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023e:	f000 f83b 	bl	80002b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000242:	f000 f917 	bl	8000474 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000246:	f000 f8cb 	bl	80003e0 <MX_USART1_UART_Init>
  MX_WWDG_Init();
 800024a:	f000 f8f3 	bl	8000434 <MX_WWDG_Init>
  MX_TIM3_Init();
 800024e:	f000 f879 	bl	8000344 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  __HAL_TIM_CLEAR_IT(&htim3,TIM_IT_UPDATE);
 8000252:	4b15      	ldr	r3, [pc, #84]	; (80002a8 <main+0x74>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f06f 0201 	mvn.w	r2, #1
 800025a:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim3);
 800025c:	4812      	ldr	r0, [pc, #72]	; (80002a8 <main+0x74>)
 800025e:	f001 fa53 	bl	8001708 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int i = 0;
 8000262:	2300      	movs	r3, #0
 8000264:	667b      	str	r3, [r7, #100]	; 0x64
  unsigned char msg[100];
  HAL_UART_Transmit(&huart1, "Restart\r\n", 9, HAL_MAX_DELAY);
 8000266:	f04f 33ff 	mov.w	r3, #4294967295
 800026a:	2209      	movs	r2, #9
 800026c:	490f      	ldr	r1, [pc, #60]	; (80002ac <main+0x78>)
 800026e:	4810      	ldr	r0, [pc, #64]	; (80002b0 <main+0x7c>)
 8000270:	f001 fe75 	bl	8001f5e <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  i++;
 8000274:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000276:	3301      	adds	r3, #1
 8000278:	667b      	str	r3, [r7, #100]	; 0x64
  sprintf(msg, "i = %d\r\n", i);
 800027a:	463b      	mov	r3, r7
 800027c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800027e:	490d      	ldr	r1, [pc, #52]	; (80002b4 <main+0x80>)
 8000280:	4618      	mov	r0, r3
 8000282:	f002 f833 	bl	80022ec <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000286:	463b      	mov	r3, r7
 8000288:	4618      	mov	r0, r3
 800028a:	f7ff ffcb 	bl	8000224 <strlen>
 800028e:	4603      	mov	r3, r0
 8000290:	b29a      	uxth	r2, r3
 8000292:	4639      	mov	r1, r7
 8000294:	f04f 33ff 	mov.w	r3, #4294967295
 8000298:	4805      	ldr	r0, [pc, #20]	; (80002b0 <main+0x7c>)
 800029a:	f001 fe60 	bl	8001f5e <HAL_UART_Transmit>
  HAL_Delay(1000);
 800029e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002a2:	f000 fb01 	bl	80008a8 <HAL_Delay>
  {
 80002a6:	e7e5      	b.n	8000274 <main+0x40>
 80002a8:	20000078 	.word	0x20000078
 80002ac:	08002c68 	.word	0x08002c68
 80002b0:	200000c0 	.word	0x200000c0
 80002b4:	08002c74 	.word	0x08002c74

080002b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b090      	sub	sp, #64	; 0x40
 80002bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002be:	f107 0318 	add.w	r3, r7, #24
 80002c2:	2228      	movs	r2, #40	; 0x28
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f002 f830 	bl	800232c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]
 80002d4:	609a      	str	r2, [r3, #8]
 80002d6:	60da      	str	r2, [r3, #12]
 80002d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002da:	2301      	movs	r3, #1
 80002dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002e4:	2300      	movs	r3, #0
 80002e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e8:	2301      	movs	r3, #1
 80002ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ec:	2302      	movs	r3, #2
 80002ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002f6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fc:	f107 0318 	add.w	r3, r7, #24
 8000300:	4618      	mov	r0, r3
 8000302:	f000 fd97 	bl	8000e34 <HAL_RCC_OscConfig>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800030c:	f000 f8fa 	bl	8000504 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000310:	230f      	movs	r3, #15
 8000312:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000314:	2302      	movs	r3, #2
 8000316:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000318:	2300      	movs	r3, #0
 800031a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800031c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000320:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000322:	2300      	movs	r3, #0
 8000324:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	2102      	movs	r1, #2
 800032a:	4618      	mov	r0, r3
 800032c:	f001 f804 	bl	8001338 <HAL_RCC_ClockConfig>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000336:	f000 f8e5 	bl	8000504 <Error_Handler>
  }
}
 800033a:	bf00      	nop
 800033c:	3740      	adds	r7, #64	; 0x40
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
	...

08000344 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b086      	sub	sp, #24
 8000348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800034a:	f107 0308 	add.w	r3, r7, #8
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000358:	463b      	mov	r3, r7
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
 800035e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000360:	4b1d      	ldr	r3, [pc, #116]	; (80003d8 <MX_TIM3_Init+0x94>)
 8000362:	4a1e      	ldr	r2, [pc, #120]	; (80003dc <MX_TIM3_Init+0x98>)
 8000364:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 359;
 8000366:	4b1c      	ldr	r3, [pc, #112]	; (80003d8 <MX_TIM3_Init+0x94>)
 8000368:	f240 1267 	movw	r2, #359	; 0x167
 800036c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800036e:	4b1a      	ldr	r3, [pc, #104]	; (80003d8 <MX_TIM3_Init+0x94>)
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000374:	4b18      	ldr	r3, [pc, #96]	; (80003d8 <MX_TIM3_Init+0x94>)
 8000376:	f242 720f 	movw	r2, #9999	; 0x270f
 800037a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800037c:	4b16      	ldr	r3, [pc, #88]	; (80003d8 <MX_TIM3_Init+0x94>)
 800037e:	2200      	movs	r2, #0
 8000380:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000382:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <MX_TIM3_Init+0x94>)
 8000384:	2200      	movs	r2, #0
 8000386:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000388:	4813      	ldr	r0, [pc, #76]	; (80003d8 <MX_TIM3_Init+0x94>)
 800038a:	f001 f96d 	bl	8001668 <HAL_TIM_Base_Init>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000394:	f000 f8b6 	bl	8000504 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000398:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800039c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800039e:	f107 0308 	add.w	r3, r7, #8
 80003a2:	4619      	mov	r1, r3
 80003a4:	480c      	ldr	r0, [pc, #48]	; (80003d8 <MX_TIM3_Init+0x94>)
 80003a6:	f001 fb17 	bl	80019d8 <HAL_TIM_ConfigClockSource>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80003b0:	f000 f8a8 	bl	8000504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003b4:	2300      	movs	r3, #0
 80003b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003b8:	2300      	movs	r3, #0
 80003ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80003bc:	463b      	mov	r3, r7
 80003be:	4619      	mov	r1, r3
 80003c0:	4805      	ldr	r0, [pc, #20]	; (80003d8 <MX_TIM3_Init+0x94>)
 80003c2:	f001 fd01 	bl	8001dc8 <HAL_TIMEx_MasterConfigSynchronization>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80003cc:	f000 f89a 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80003d0:	bf00      	nop
 80003d2:	3718      	adds	r7, #24
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	20000078 	.word	0x20000078
 80003dc:	40000400 	.word	0x40000400

080003e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003e4:	4b11      	ldr	r3, [pc, #68]	; (800042c <MX_USART1_UART_Init+0x4c>)
 80003e6:	4a12      	ldr	r2, [pc, #72]	; (8000430 <MX_USART1_UART_Init+0x50>)
 80003e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003ea:	4b10      	ldr	r3, [pc, #64]	; (800042c <MX_USART1_UART_Init+0x4c>)
 80003ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003f2:	4b0e      	ldr	r3, [pc, #56]	; (800042c <MX_USART1_UART_Init+0x4c>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003f8:	4b0c      	ldr	r3, [pc, #48]	; (800042c <MX_USART1_UART_Init+0x4c>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003fe:	4b0b      	ldr	r3, [pc, #44]	; (800042c <MX_USART1_UART_Init+0x4c>)
 8000400:	2200      	movs	r2, #0
 8000402:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000404:	4b09      	ldr	r3, [pc, #36]	; (800042c <MX_USART1_UART_Init+0x4c>)
 8000406:	220c      	movs	r2, #12
 8000408:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800040a:	4b08      	ldr	r3, [pc, #32]	; (800042c <MX_USART1_UART_Init+0x4c>)
 800040c:	2200      	movs	r2, #0
 800040e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000410:	4b06      	ldr	r3, [pc, #24]	; (800042c <MX_USART1_UART_Init+0x4c>)
 8000412:	2200      	movs	r2, #0
 8000414:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000416:	4805      	ldr	r0, [pc, #20]	; (800042c <MX_USART1_UART_Init+0x4c>)
 8000418:	f001 fd54 	bl	8001ec4 <HAL_UART_Init>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000422:	f000 f86f 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000426:	bf00      	nop
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	200000c0 	.word	0x200000c0
 8000430:	40013800 	.word	0x40013800

08000434 <MX_WWDG_Init>:
  * @brief WWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_WWDG_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE END WWDG_Init 0 */

  /* USER CODE BEGIN WWDG_Init 1 */

  /* USER CODE END WWDG_Init 1 */
  hwwdg.Instance = WWDG;
 8000438:	4b0c      	ldr	r3, [pc, #48]	; (800046c <MX_WWDG_Init+0x38>)
 800043a:	4a0d      	ldr	r2, [pc, #52]	; (8000470 <MX_WWDG_Init+0x3c>)
 800043c:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_8;
 800043e:	4b0b      	ldr	r3, [pc, #44]	; (800046c <MX_WWDG_Init+0x38>)
 8000440:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000444:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 95;
 8000446:	4b09      	ldr	r3, [pc, #36]	; (800046c <MX_WWDG_Init+0x38>)
 8000448:	225f      	movs	r2, #95	; 0x5f
 800044a:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 127;
 800044c:	4b07      	ldr	r3, [pc, #28]	; (800046c <MX_WWDG_Init+0x38>)
 800044e:	227f      	movs	r2, #127	; 0x7f
 8000450:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 8000452:	4b06      	ldr	r3, [pc, #24]	; (800046c <MX_WWDG_Init+0x38>)
 8000454:	2200      	movs	r2, #0
 8000456:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 8000458:	4804      	ldr	r0, [pc, #16]	; (800046c <MX_WWDG_Init+0x38>)
 800045a:	f001 feeb 	bl	8002234 <HAL_WWDG_Init>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <MX_WWDG_Init+0x34>
  {
    Error_Handler();
 8000464:	f000 f84e 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN WWDG_Init 2 */

  /* USER CODE END WWDG_Init 2 */

}
 8000468:	bf00      	nop
 800046a:	bd80      	pop	{r7, pc}
 800046c:	20000104 	.word	0x20000104
 8000470:	40002c00 	.word	0x40002c00

08000474 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b086      	sub	sp, #24
 8000478:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047a:	f107 0308 	add.w	r3, r7, #8
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	605a      	str	r2, [r3, #4]
 8000484:	609a      	str	r2, [r3, #8]
 8000486:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000488:	4b14      	ldr	r3, [pc, #80]	; (80004dc <MX_GPIO_Init+0x68>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	4a13      	ldr	r2, [pc, #76]	; (80004dc <MX_GPIO_Init+0x68>)
 800048e:	f043 0320 	orr.w	r3, r3, #32
 8000492:	6193      	str	r3, [r2, #24]
 8000494:	4b11      	ldr	r3, [pc, #68]	; (80004dc <MX_GPIO_Init+0x68>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	f003 0320 	and.w	r3, r3, #32
 800049c:	607b      	str	r3, [r7, #4]
 800049e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a0:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <MX_GPIO_Init+0x68>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	4a0d      	ldr	r2, [pc, #52]	; (80004dc <MX_GPIO_Init+0x68>)
 80004a6:	f043 0304 	orr.w	r3, r3, #4
 80004aa:	6193      	str	r3, [r2, #24]
 80004ac:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <MX_GPIO_Init+0x68>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	f003 0304 	and.w	r3, r3, #4
 80004b4:	603b      	str	r3, [r7, #0]
 80004b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : KEY1_Pin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 80004b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004be:	4b08      	ldr	r3, [pc, #32]	; (80004e0 <MX_GPIO_Init+0x6c>)
 80004c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004c2:	2301      	movs	r3, #1
 80004c4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 80004c6:	f107 0308 	add.w	r3, r7, #8
 80004ca:	4619      	mov	r1, r3
 80004cc:	4805      	ldr	r0, [pc, #20]	; (80004e4 <MX_GPIO_Init+0x70>)
 80004ce:	f000 fb1d 	bl	8000b0c <HAL_GPIO_Init>

}
 80004d2:	bf00      	nop
 80004d4:	3718      	adds	r7, #24
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	40021000 	.word	0x40021000
 80004e0:	10110000 	.word	0x10110000
 80004e4:	40010800 	.word	0x40010800

080004e8 <HAL_TIM_PeriodElapsedCallback>:
break;
default:
break;
}
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	HAL_WWDG_Refresh(&hwwdg);
 80004f0:	4803      	ldr	r0, [pc, #12]	; (8000500 <HAL_TIM_PeriodElapsedCallback+0x18>)
 80004f2:	f001 fec3 	bl	800227c <HAL_WWDG_Refresh>

}
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	20000104 	.word	0x20000104

08000504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000508:	b672      	cpsid	i
}
 800050a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800050c:	e7fe      	b.n	800050c <Error_Handler+0x8>
	...

08000510 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000516:	4b16      	ldr	r3, [pc, #88]	; (8000570 <HAL_MspInit+0x60>)
 8000518:	699b      	ldr	r3, [r3, #24]
 800051a:	4a15      	ldr	r2, [pc, #84]	; (8000570 <HAL_MspInit+0x60>)
 800051c:	f043 0301 	orr.w	r3, r3, #1
 8000520:	6193      	str	r3, [r2, #24]
 8000522:	4b13      	ldr	r3, [pc, #76]	; (8000570 <HAL_MspInit+0x60>)
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800052e:	4b10      	ldr	r3, [pc, #64]	; (8000570 <HAL_MspInit+0x60>)
 8000530:	69db      	ldr	r3, [r3, #28]
 8000532:	4a0f      	ldr	r2, [pc, #60]	; (8000570 <HAL_MspInit+0x60>)
 8000534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000538:	61d3      	str	r3, [r2, #28]
 800053a:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <HAL_MspInit+0x60>)
 800053c:	69db      	ldr	r3, [r3, #28]
 800053e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000546:	2005      	movs	r0, #5
 8000548:	f000 fa9e 	bl	8000a88 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800054c:	4b09      	ldr	r3, [pc, #36]	; (8000574 <HAL_MspInit+0x64>)
 800054e:	685b      	ldr	r3, [r3, #4]
 8000550:	60fb      	str	r3, [r7, #12]
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000560:	60fb      	str	r3, [r7, #12]
 8000562:	4a04      	ldr	r2, [pc, #16]	; (8000574 <HAL_MspInit+0x64>)
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000568:	bf00      	nop
 800056a:	3710      	adds	r7, #16
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40021000 	.word	0x40021000
 8000574:	40010000 	.word	0x40010000

08000578 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a0d      	ldr	r2, [pc, #52]	; (80005bc <HAL_TIM_Base_MspInit+0x44>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d113      	bne.n	80005b2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800058a:	4b0d      	ldr	r3, [pc, #52]	; (80005c0 <HAL_TIM_Base_MspInit+0x48>)
 800058c:	69db      	ldr	r3, [r3, #28]
 800058e:	4a0c      	ldr	r2, [pc, #48]	; (80005c0 <HAL_TIM_Base_MspInit+0x48>)
 8000590:	f043 0302 	orr.w	r3, r3, #2
 8000594:	61d3      	str	r3, [r2, #28]
 8000596:	4b0a      	ldr	r3, [pc, #40]	; (80005c0 <HAL_TIM_Base_MspInit+0x48>)
 8000598:	69db      	ldr	r3, [r3, #28]
 800059a:	f003 0302 	and.w	r3, r3, #2
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2101      	movs	r1, #1
 80005a6:	201d      	movs	r0, #29
 80005a8:	f000 fa79 	bl	8000a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80005ac:	201d      	movs	r0, #29
 80005ae:	f000 fa92 	bl	8000ad6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80005b2:	bf00      	nop
 80005b4:	3710      	adds	r7, #16
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40000400 	.word	0x40000400
 80005c0:	40021000 	.word	0x40021000

080005c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b088      	sub	sp, #32
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005cc:	f107 0310 	add.w	r3, r7, #16
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a1c      	ldr	r2, [pc, #112]	; (8000650 <HAL_UART_MspInit+0x8c>)
 80005e0:	4293      	cmp	r3, r2
 80005e2:	d131      	bne.n	8000648 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005e4:	4b1b      	ldr	r3, [pc, #108]	; (8000654 <HAL_UART_MspInit+0x90>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	4a1a      	ldr	r2, [pc, #104]	; (8000654 <HAL_UART_MspInit+0x90>)
 80005ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ee:	6193      	str	r3, [r2, #24]
 80005f0:	4b18      	ldr	r3, [pc, #96]	; (8000654 <HAL_UART_MspInit+0x90>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fc:	4b15      	ldr	r3, [pc, #84]	; (8000654 <HAL_UART_MspInit+0x90>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	4a14      	ldr	r2, [pc, #80]	; (8000654 <HAL_UART_MspInit+0x90>)
 8000602:	f043 0304 	orr.w	r3, r3, #4
 8000606:	6193      	str	r3, [r2, #24]
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <HAL_UART_MspInit+0x90>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	f003 0304 	and.w	r3, r3, #4
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000614:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000618:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800061a:	2302      	movs	r3, #2
 800061c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800061e:	2303      	movs	r3, #3
 8000620:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000622:	f107 0310 	add.w	r3, r7, #16
 8000626:	4619      	mov	r1, r3
 8000628:	480b      	ldr	r0, [pc, #44]	; (8000658 <HAL_UART_MspInit+0x94>)
 800062a:	f000 fa6f 	bl	8000b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800062e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000632:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000634:	2300      	movs	r3, #0
 8000636:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	2300      	movs	r3, #0
 800063a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063c:	f107 0310 	add.w	r3, r7, #16
 8000640:	4619      	mov	r1, r3
 8000642:	4805      	ldr	r0, [pc, #20]	; (8000658 <HAL_UART_MspInit+0x94>)
 8000644:	f000 fa62 	bl	8000b0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000648:	bf00      	nop
 800064a:	3720      	adds	r7, #32
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40013800 	.word	0x40013800
 8000654:	40021000 	.word	0x40021000
 8000658:	40010800 	.word	0x40010800

0800065c <HAL_WWDG_MspInit>:
* This function configures the hardware resources used in this example
* @param hwwdg: WWDG handle pointer
* @retval None
*/
void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  if(hwwdg->Instance==WWDG)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a0d      	ldr	r2, [pc, #52]	; (80006a0 <HAL_WWDG_MspInit+0x44>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d113      	bne.n	8000696 <HAL_WWDG_MspInit+0x3a>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 800066e:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <HAL_WWDG_MspInit+0x48>)
 8000670:	69db      	ldr	r3, [r3, #28]
 8000672:	4a0c      	ldr	r2, [pc, #48]	; (80006a4 <HAL_WWDG_MspInit+0x48>)
 8000674:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000678:	61d3      	str	r3, [r2, #28]
 800067a:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <HAL_WWDG_MspInit+0x48>)
 800067c:	69db      	ldr	r3, [r3, #28]
 800067e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
    /* WWDG interrupt Init */
    HAL_NVIC_SetPriority(WWDG_IRQn, 1, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	2101      	movs	r1, #1
 800068a:	2000      	movs	r0, #0
 800068c:	f000 fa07 	bl	8000a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(WWDG_IRQn);
 8000690:	2000      	movs	r0, #0
 8000692:	f000 fa20 	bl	8000ad6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }

}
 8000696:	bf00      	nop
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40002c00 	.word	0x40002c00
 80006a4:	40021000 	.word	0x40021000

080006a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006ac:	e7fe      	b.n	80006ac <NMI_Handler+0x4>

080006ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ae:	b480      	push	{r7}
 80006b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006b2:	e7fe      	b.n	80006b2 <HardFault_Handler+0x4>

080006b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <MemManage_Handler+0x4>

080006ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ba:	b480      	push	{r7}
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006be:	e7fe      	b.n	80006be <BusFault_Handler+0x4>

080006c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <UsageFault_Handler+0x4>

080006c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006c6:	b480      	push	{r7}
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bc80      	pop	{r7}
 80006d0:	4770      	bx	lr

080006d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006d6:	bf00      	nop
 80006d8:	46bd      	mov	sp, r7
 80006da:	bc80      	pop	{r7}
 80006dc:	4770      	bx	lr

080006de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006e2:	bf00      	nop
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bc80      	pop	{r7}
 80006e8:	4770      	bx	lr

080006ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006ea:	b580      	push	{r7, lr}
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ee:	f000 f8bf 	bl	8000870 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */

  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg);
 80006fc:	4802      	ldr	r0, [pc, #8]	; (8000708 <WWDG_IRQHandler+0x10>)
 80006fe:	f001 fdcc 	bl	800229a <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */

  /* USER CODE END WWDG_IRQn 1 */
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000104 	.word	0x20000104

0800070c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000710:	4802      	ldr	r0, [pc, #8]	; (800071c <TIM3_IRQHandler+0x10>)
 8000712:	f001 f859 	bl	80017c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000078 	.word	0x20000078

08000720 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000728:	4a14      	ldr	r2, [pc, #80]	; (800077c <_sbrk+0x5c>)
 800072a:	4b15      	ldr	r3, [pc, #84]	; (8000780 <_sbrk+0x60>)
 800072c:	1ad3      	subs	r3, r2, r3
 800072e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000734:	4b13      	ldr	r3, [pc, #76]	; (8000784 <_sbrk+0x64>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d102      	bne.n	8000742 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <_sbrk+0x64>)
 800073e:	4a12      	ldr	r2, [pc, #72]	; (8000788 <_sbrk+0x68>)
 8000740:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000742:	4b10      	ldr	r3, [pc, #64]	; (8000784 <_sbrk+0x64>)
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4413      	add	r3, r2
 800074a:	693a      	ldr	r2, [r7, #16]
 800074c:	429a      	cmp	r2, r3
 800074e:	d207      	bcs.n	8000760 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000750:	f001 fdf4 	bl	800233c <__errno>
 8000754:	4603      	mov	r3, r0
 8000756:	220c      	movs	r2, #12
 8000758:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800075a:	f04f 33ff 	mov.w	r3, #4294967295
 800075e:	e009      	b.n	8000774 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <_sbrk+0x64>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000766:	4b07      	ldr	r3, [pc, #28]	; (8000784 <_sbrk+0x64>)
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4413      	add	r3, r2
 800076e:	4a05      	ldr	r2, [pc, #20]	; (8000784 <_sbrk+0x64>)
 8000770:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000772:	68fb      	ldr	r3, [r7, #12]
}
 8000774:	4618      	mov	r0, r3
 8000776:	3718      	adds	r7, #24
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	2000c000 	.word	0x2000c000
 8000780:	00000400 	.word	0x00000400
 8000784:	20000118 	.word	0x20000118
 8000788:	20000268 	.word	0x20000268

0800078c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr

08000798 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000798:	480c      	ldr	r0, [pc, #48]	; (80007cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800079a:	490d      	ldr	r1, [pc, #52]	; (80007d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800079c:	4a0d      	ldr	r2, [pc, #52]	; (80007d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800079e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007a0:	e002      	b.n	80007a8 <LoopCopyDataInit>

080007a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007a6:	3304      	adds	r3, #4

080007a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007ac:	d3f9      	bcc.n	80007a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ae:	4a0a      	ldr	r2, [pc, #40]	; (80007d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007b0:	4c0a      	ldr	r4, [pc, #40]	; (80007dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80007b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007b4:	e001      	b.n	80007ba <LoopFillZerobss>

080007b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007b8:	3204      	adds	r2, #4

080007ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007bc:	d3fb      	bcc.n	80007b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007be:	f7ff ffe5 	bl	800078c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007c2:	f001 fdc1 	bl	8002348 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007c6:	f7ff fd35 	bl	8000234 <main>
  bx lr
 80007ca:	4770      	bx	lr
  ldr r0, =_sdata
 80007cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007d0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80007d4:	08002ce4 	.word	0x08002ce4
  ldr r2, =_sbss
 80007d8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80007dc:	20000268 	.word	0x20000268

080007e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007e0:	e7fe      	b.n	80007e0 <ADC1_2_IRQHandler>
	...

080007e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007e8:	4b08      	ldr	r3, [pc, #32]	; (800080c <HAL_Init+0x28>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a07      	ldr	r2, [pc, #28]	; (800080c <HAL_Init+0x28>)
 80007ee:	f043 0310 	orr.w	r3, r3, #16
 80007f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007f4:	2003      	movs	r0, #3
 80007f6:	f000 f947 	bl	8000a88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007fa:	2000      	movs	r0, #0
 80007fc:	f000 f808 	bl	8000810 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000800:	f7ff fe86 	bl	8000510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000804:	2300      	movs	r3, #0
}
 8000806:	4618      	mov	r0, r3
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40022000 	.word	0x40022000

08000810 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <HAL_InitTick+0x54>)
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <HAL_InitTick+0x58>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	4619      	mov	r1, r3
 8000822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000826:	fbb3 f3f1 	udiv	r3, r3, r1
 800082a:	fbb2 f3f3 	udiv	r3, r2, r3
 800082e:	4618      	mov	r0, r3
 8000830:	f000 f95f 	bl	8000af2 <HAL_SYSTICK_Config>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800083a:	2301      	movs	r3, #1
 800083c:	e00e      	b.n	800085c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2b0f      	cmp	r3, #15
 8000842:	d80a      	bhi.n	800085a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000844:	2200      	movs	r2, #0
 8000846:	6879      	ldr	r1, [r7, #4]
 8000848:	f04f 30ff 	mov.w	r0, #4294967295
 800084c:	f000 f927 	bl	8000a9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000850:	4a06      	ldr	r2, [pc, #24]	; (800086c <HAL_InitTick+0x5c>)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000856:	2300      	movs	r3, #0
 8000858:	e000      	b.n	800085c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800085a:	2301      	movs	r3, #1
}
 800085c:	4618      	mov	r0, r3
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20000000 	.word	0x20000000
 8000868:	20000008 	.word	0x20000008
 800086c:	20000004 	.word	0x20000004

08000870 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000874:	4b05      	ldr	r3, [pc, #20]	; (800088c <HAL_IncTick+0x1c>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	461a      	mov	r2, r3
 800087a:	4b05      	ldr	r3, [pc, #20]	; (8000890 <HAL_IncTick+0x20>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4413      	add	r3, r2
 8000880:	4a03      	ldr	r2, [pc, #12]	; (8000890 <HAL_IncTick+0x20>)
 8000882:	6013      	str	r3, [r2, #0]
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr
 800088c:	20000008 	.word	0x20000008
 8000890:	2000011c 	.word	0x2000011c

08000894 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  return uwTick;
 8000898:	4b02      	ldr	r3, [pc, #8]	; (80008a4 <HAL_GetTick+0x10>)
 800089a:	681b      	ldr	r3, [r3, #0]
}
 800089c:	4618      	mov	r0, r3
 800089e:	46bd      	mov	sp, r7
 80008a0:	bc80      	pop	{r7}
 80008a2:	4770      	bx	lr
 80008a4:	2000011c 	.word	0x2000011c

080008a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008b0:	f7ff fff0 	bl	8000894 <HAL_GetTick>
 80008b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008c0:	d005      	beq.n	80008ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008c2:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <HAL_Delay+0x44>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	461a      	mov	r2, r3
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	4413      	add	r3, r2
 80008cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008ce:	bf00      	nop
 80008d0:	f7ff ffe0 	bl	8000894 <HAL_GetTick>
 80008d4:	4602      	mov	r2, r0
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	1ad3      	subs	r3, r2, r3
 80008da:	68fa      	ldr	r2, [r7, #12]
 80008dc:	429a      	cmp	r2, r3
 80008de:	d8f7      	bhi.n	80008d0 <HAL_Delay+0x28>
  {
  }
}
 80008e0:	bf00      	nop
 80008e2:	bf00      	nop
 80008e4:	3710      	adds	r7, #16
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000008 	.word	0x20000008

080008f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	f003 0307 	and.w	r3, r3, #7
 80008fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000900:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <__NVIC_SetPriorityGrouping+0x44>)
 8000902:	68db      	ldr	r3, [r3, #12]
 8000904:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000906:	68ba      	ldr	r2, [r7, #8]
 8000908:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800090c:	4013      	ands	r3, r2
 800090e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000918:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800091c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000922:	4a04      	ldr	r2, [pc, #16]	; (8000934 <__NVIC_SetPriorityGrouping+0x44>)
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	60d3      	str	r3, [r2, #12]
}
 8000928:	bf00      	nop
 800092a:	3714      	adds	r7, #20
 800092c:	46bd      	mov	sp, r7
 800092e:	bc80      	pop	{r7}
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	e000ed00 	.word	0xe000ed00

08000938 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800093c:	4b04      	ldr	r3, [pc, #16]	; (8000950 <__NVIC_GetPriorityGrouping+0x18>)
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	0a1b      	lsrs	r3, r3, #8
 8000942:	f003 0307 	and.w	r3, r3, #7
}
 8000946:	4618      	mov	r0, r3
 8000948:	46bd      	mov	sp, r7
 800094a:	bc80      	pop	{r7}
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800095e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000962:	2b00      	cmp	r3, #0
 8000964:	db0b      	blt.n	800097e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	f003 021f 	and.w	r2, r3, #31
 800096c:	4906      	ldr	r1, [pc, #24]	; (8000988 <__NVIC_EnableIRQ+0x34>)
 800096e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000972:	095b      	lsrs	r3, r3, #5
 8000974:	2001      	movs	r0, #1
 8000976:	fa00 f202 	lsl.w	r2, r0, r2
 800097a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr
 8000988:	e000e100 	.word	0xe000e100

0800098c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	6039      	str	r1, [r7, #0]
 8000996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099c:	2b00      	cmp	r3, #0
 800099e:	db0a      	blt.n	80009b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	b2da      	uxtb	r2, r3
 80009a4:	490c      	ldr	r1, [pc, #48]	; (80009d8 <__NVIC_SetPriority+0x4c>)
 80009a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009aa:	0112      	lsls	r2, r2, #4
 80009ac:	b2d2      	uxtb	r2, r2
 80009ae:	440b      	add	r3, r1
 80009b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009b4:	e00a      	b.n	80009cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	4908      	ldr	r1, [pc, #32]	; (80009dc <__NVIC_SetPriority+0x50>)
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	f003 030f 	and.w	r3, r3, #15
 80009c2:	3b04      	subs	r3, #4
 80009c4:	0112      	lsls	r2, r2, #4
 80009c6:	b2d2      	uxtb	r2, r2
 80009c8:	440b      	add	r3, r1
 80009ca:	761a      	strb	r2, [r3, #24]
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc80      	pop	{r7}
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	e000e100 	.word	0xe000e100
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b089      	sub	sp, #36	; 0x24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	f003 0307 	and.w	r3, r3, #7
 80009f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009f4:	69fb      	ldr	r3, [r7, #28]
 80009f6:	f1c3 0307 	rsb	r3, r3, #7
 80009fa:	2b04      	cmp	r3, #4
 80009fc:	bf28      	it	cs
 80009fe:	2304      	movcs	r3, #4
 8000a00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	3304      	adds	r3, #4
 8000a06:	2b06      	cmp	r3, #6
 8000a08:	d902      	bls.n	8000a10 <NVIC_EncodePriority+0x30>
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	3b03      	subs	r3, #3
 8000a0e:	e000      	b.n	8000a12 <NVIC_EncodePriority+0x32>
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a14:	f04f 32ff 	mov.w	r2, #4294967295
 8000a18:	69bb      	ldr	r3, [r7, #24]
 8000a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1e:	43da      	mvns	r2, r3
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	401a      	ands	r2, r3
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a28:	f04f 31ff 	mov.w	r1, #4294967295
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a32:	43d9      	mvns	r1, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a38:	4313      	orrs	r3, r2
         );
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3724      	adds	r7, #36	; 0x24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr

08000a44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a54:	d301      	bcc.n	8000a5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a56:	2301      	movs	r3, #1
 8000a58:	e00f      	b.n	8000a7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a5a:	4a0a      	ldr	r2, [pc, #40]	; (8000a84 <SysTick_Config+0x40>)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	3b01      	subs	r3, #1
 8000a60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a62:	210f      	movs	r1, #15
 8000a64:	f04f 30ff 	mov.w	r0, #4294967295
 8000a68:	f7ff ff90 	bl	800098c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a6c:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <SysTick_Config+0x40>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a72:	4b04      	ldr	r3, [pc, #16]	; (8000a84 <SysTick_Config+0x40>)
 8000a74:	2207      	movs	r2, #7
 8000a76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a78:	2300      	movs	r3, #0
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	e000e010 	.word	0xe000e010

08000a88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a90:	6878      	ldr	r0, [r7, #4]
 8000a92:	f7ff ff2d 	bl	80008f0 <__NVIC_SetPriorityGrouping>
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b086      	sub	sp, #24
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	60b9      	str	r1, [r7, #8]
 8000aa8:	607a      	str	r2, [r7, #4]
 8000aaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ab0:	f7ff ff42 	bl	8000938 <__NVIC_GetPriorityGrouping>
 8000ab4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	68b9      	ldr	r1, [r7, #8]
 8000aba:	6978      	ldr	r0, [r7, #20]
 8000abc:	f7ff ff90 	bl	80009e0 <NVIC_EncodePriority>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ac6:	4611      	mov	r1, r2
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff ff5f 	bl	800098c <__NVIC_SetPriority>
}
 8000ace:	bf00      	nop
 8000ad0:	3718      	adds	r7, #24
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b082      	sub	sp, #8
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	4603      	mov	r3, r0
 8000ade:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff ff35 	bl	8000954 <__NVIC_EnableIRQ>
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b082      	sub	sp, #8
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f7ff ffa2 	bl	8000a44 <SysTick_Config>
 8000b00:	4603      	mov	r3, r0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
	...

08000b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b08b      	sub	sp, #44	; 0x2c
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b16:	2300      	movs	r3, #0
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b1e:	e179      	b.n	8000e14 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b20:	2201      	movs	r2, #1
 8000b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	69fa      	ldr	r2, [r7, #28]
 8000b30:	4013      	ands	r3, r2
 8000b32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b34:	69ba      	ldr	r2, [r7, #24]
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	f040 8168 	bne.w	8000e0e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	4a96      	ldr	r2, [pc, #600]	; (8000d9c <HAL_GPIO_Init+0x290>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d05e      	beq.n	8000c06 <HAL_GPIO_Init+0xfa>
 8000b48:	4a94      	ldr	r2, [pc, #592]	; (8000d9c <HAL_GPIO_Init+0x290>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d875      	bhi.n	8000c3a <HAL_GPIO_Init+0x12e>
 8000b4e:	4a94      	ldr	r2, [pc, #592]	; (8000da0 <HAL_GPIO_Init+0x294>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d058      	beq.n	8000c06 <HAL_GPIO_Init+0xfa>
 8000b54:	4a92      	ldr	r2, [pc, #584]	; (8000da0 <HAL_GPIO_Init+0x294>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d86f      	bhi.n	8000c3a <HAL_GPIO_Init+0x12e>
 8000b5a:	4a92      	ldr	r2, [pc, #584]	; (8000da4 <HAL_GPIO_Init+0x298>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d052      	beq.n	8000c06 <HAL_GPIO_Init+0xfa>
 8000b60:	4a90      	ldr	r2, [pc, #576]	; (8000da4 <HAL_GPIO_Init+0x298>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d869      	bhi.n	8000c3a <HAL_GPIO_Init+0x12e>
 8000b66:	4a90      	ldr	r2, [pc, #576]	; (8000da8 <HAL_GPIO_Init+0x29c>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d04c      	beq.n	8000c06 <HAL_GPIO_Init+0xfa>
 8000b6c:	4a8e      	ldr	r2, [pc, #568]	; (8000da8 <HAL_GPIO_Init+0x29c>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d863      	bhi.n	8000c3a <HAL_GPIO_Init+0x12e>
 8000b72:	4a8e      	ldr	r2, [pc, #568]	; (8000dac <HAL_GPIO_Init+0x2a0>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d046      	beq.n	8000c06 <HAL_GPIO_Init+0xfa>
 8000b78:	4a8c      	ldr	r2, [pc, #560]	; (8000dac <HAL_GPIO_Init+0x2a0>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d85d      	bhi.n	8000c3a <HAL_GPIO_Init+0x12e>
 8000b7e:	2b12      	cmp	r3, #18
 8000b80:	d82a      	bhi.n	8000bd8 <HAL_GPIO_Init+0xcc>
 8000b82:	2b12      	cmp	r3, #18
 8000b84:	d859      	bhi.n	8000c3a <HAL_GPIO_Init+0x12e>
 8000b86:	a201      	add	r2, pc, #4	; (adr r2, 8000b8c <HAL_GPIO_Init+0x80>)
 8000b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b8c:	08000c07 	.word	0x08000c07
 8000b90:	08000be1 	.word	0x08000be1
 8000b94:	08000bf3 	.word	0x08000bf3
 8000b98:	08000c35 	.word	0x08000c35
 8000b9c:	08000c3b 	.word	0x08000c3b
 8000ba0:	08000c3b 	.word	0x08000c3b
 8000ba4:	08000c3b 	.word	0x08000c3b
 8000ba8:	08000c3b 	.word	0x08000c3b
 8000bac:	08000c3b 	.word	0x08000c3b
 8000bb0:	08000c3b 	.word	0x08000c3b
 8000bb4:	08000c3b 	.word	0x08000c3b
 8000bb8:	08000c3b 	.word	0x08000c3b
 8000bbc:	08000c3b 	.word	0x08000c3b
 8000bc0:	08000c3b 	.word	0x08000c3b
 8000bc4:	08000c3b 	.word	0x08000c3b
 8000bc8:	08000c3b 	.word	0x08000c3b
 8000bcc:	08000c3b 	.word	0x08000c3b
 8000bd0:	08000be9 	.word	0x08000be9
 8000bd4:	08000bfd 	.word	0x08000bfd
 8000bd8:	4a75      	ldr	r2, [pc, #468]	; (8000db0 <HAL_GPIO_Init+0x2a4>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d013      	beq.n	8000c06 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bde:	e02c      	b.n	8000c3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	623b      	str	r3, [r7, #32]
          break;
 8000be6:	e029      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	3304      	adds	r3, #4
 8000bee:	623b      	str	r3, [r7, #32]
          break;
 8000bf0:	e024      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	68db      	ldr	r3, [r3, #12]
 8000bf6:	3308      	adds	r3, #8
 8000bf8:	623b      	str	r3, [r7, #32]
          break;
 8000bfa:	e01f      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	330c      	adds	r3, #12
 8000c02:	623b      	str	r3, [r7, #32]
          break;
 8000c04:	e01a      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d102      	bne.n	8000c14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c0e:	2304      	movs	r3, #4
 8000c10:	623b      	str	r3, [r7, #32]
          break;
 8000c12:	e013      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d105      	bne.n	8000c28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c1c:	2308      	movs	r3, #8
 8000c1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	69fa      	ldr	r2, [r7, #28]
 8000c24:	611a      	str	r2, [r3, #16]
          break;
 8000c26:	e009      	b.n	8000c3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c28:	2308      	movs	r3, #8
 8000c2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	69fa      	ldr	r2, [r7, #28]
 8000c30:	615a      	str	r2, [r3, #20]
          break;
 8000c32:	e003      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c34:	2300      	movs	r3, #0
 8000c36:	623b      	str	r3, [r7, #32]
          break;
 8000c38:	e000      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          break;
 8000c3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	2bff      	cmp	r3, #255	; 0xff
 8000c40:	d801      	bhi.n	8000c46 <HAL_GPIO_Init+0x13a>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	e001      	b.n	8000c4a <HAL_GPIO_Init+0x13e>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	2bff      	cmp	r3, #255	; 0xff
 8000c50:	d802      	bhi.n	8000c58 <HAL_GPIO_Init+0x14c>
 8000c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	e002      	b.n	8000c5e <HAL_GPIO_Init+0x152>
 8000c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5a:	3b08      	subs	r3, #8
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	210f      	movs	r1, #15
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	401a      	ands	r2, r3
 8000c70:	6a39      	ldr	r1, [r7, #32]
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	fa01 f303 	lsl.w	r3, r1, r3
 8000c78:	431a      	orrs	r2, r3
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f000 80c1 	beq.w	8000e0e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c8c:	4b49      	ldr	r3, [pc, #292]	; (8000db4 <HAL_GPIO_Init+0x2a8>)
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	4a48      	ldr	r2, [pc, #288]	; (8000db4 <HAL_GPIO_Init+0x2a8>)
 8000c92:	f043 0301 	orr.w	r3, r3, #1
 8000c96:	6193      	str	r3, [r2, #24]
 8000c98:	4b46      	ldr	r3, [pc, #280]	; (8000db4 <HAL_GPIO_Init+0x2a8>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	f003 0301 	and.w	r3, r3, #1
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ca4:	4a44      	ldr	r2, [pc, #272]	; (8000db8 <HAL_GPIO_Init+0x2ac>)
 8000ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca8:	089b      	lsrs	r3, r3, #2
 8000caa:	3302      	adds	r3, #2
 8000cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb4:	f003 0303 	and.w	r3, r3, #3
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	220f      	movs	r2, #15
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a3c      	ldr	r2, [pc, #240]	; (8000dbc <HAL_GPIO_Init+0x2b0>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d01f      	beq.n	8000d10 <HAL_GPIO_Init+0x204>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a3b      	ldr	r2, [pc, #236]	; (8000dc0 <HAL_GPIO_Init+0x2b4>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d019      	beq.n	8000d0c <HAL_GPIO_Init+0x200>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a3a      	ldr	r2, [pc, #232]	; (8000dc4 <HAL_GPIO_Init+0x2b8>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d013      	beq.n	8000d08 <HAL_GPIO_Init+0x1fc>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a39      	ldr	r2, [pc, #228]	; (8000dc8 <HAL_GPIO_Init+0x2bc>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d00d      	beq.n	8000d04 <HAL_GPIO_Init+0x1f8>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a38      	ldr	r2, [pc, #224]	; (8000dcc <HAL_GPIO_Init+0x2c0>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d007      	beq.n	8000d00 <HAL_GPIO_Init+0x1f4>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4a37      	ldr	r2, [pc, #220]	; (8000dd0 <HAL_GPIO_Init+0x2c4>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d101      	bne.n	8000cfc <HAL_GPIO_Init+0x1f0>
 8000cf8:	2305      	movs	r3, #5
 8000cfa:	e00a      	b.n	8000d12 <HAL_GPIO_Init+0x206>
 8000cfc:	2306      	movs	r3, #6
 8000cfe:	e008      	b.n	8000d12 <HAL_GPIO_Init+0x206>
 8000d00:	2304      	movs	r3, #4
 8000d02:	e006      	b.n	8000d12 <HAL_GPIO_Init+0x206>
 8000d04:	2303      	movs	r3, #3
 8000d06:	e004      	b.n	8000d12 <HAL_GPIO_Init+0x206>
 8000d08:	2302      	movs	r3, #2
 8000d0a:	e002      	b.n	8000d12 <HAL_GPIO_Init+0x206>
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	e000      	b.n	8000d12 <HAL_GPIO_Init+0x206>
 8000d10:	2300      	movs	r3, #0
 8000d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d14:	f002 0203 	and.w	r2, r2, #3
 8000d18:	0092      	lsls	r2, r2, #2
 8000d1a:	4093      	lsls	r3, r2
 8000d1c:	68fa      	ldr	r2, [r7, #12]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d22:	4925      	ldr	r1, [pc, #148]	; (8000db8 <HAL_GPIO_Init+0x2ac>)
 8000d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d26:	089b      	lsrs	r3, r3, #2
 8000d28:	3302      	adds	r3, #2
 8000d2a:	68fa      	ldr	r2, [r7, #12]
 8000d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d006      	beq.n	8000d4a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d3c:	4b25      	ldr	r3, [pc, #148]	; (8000dd4 <HAL_GPIO_Init+0x2c8>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	4924      	ldr	r1, [pc, #144]	; (8000dd4 <HAL_GPIO_Init+0x2c8>)
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	600b      	str	r3, [r1, #0]
 8000d48:	e006      	b.n	8000d58 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d4a:	4b22      	ldr	r3, [pc, #136]	; (8000dd4 <HAL_GPIO_Init+0x2c8>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	69bb      	ldr	r3, [r7, #24]
 8000d50:	43db      	mvns	r3, r3
 8000d52:	4920      	ldr	r1, [pc, #128]	; (8000dd4 <HAL_GPIO_Init+0x2c8>)
 8000d54:	4013      	ands	r3, r2
 8000d56:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d006      	beq.n	8000d72 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d64:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <HAL_GPIO_Init+0x2c8>)
 8000d66:	685a      	ldr	r2, [r3, #4]
 8000d68:	491a      	ldr	r1, [pc, #104]	; (8000dd4 <HAL_GPIO_Init+0x2c8>)
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	604b      	str	r3, [r1, #4]
 8000d70:	e006      	b.n	8000d80 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d72:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <HAL_GPIO_Init+0x2c8>)
 8000d74:	685a      	ldr	r2, [r3, #4]
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	4916      	ldr	r1, [pc, #88]	; (8000dd4 <HAL_GPIO_Init+0x2c8>)
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d025      	beq.n	8000dd8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d8c:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <HAL_GPIO_Init+0x2c8>)
 8000d8e:	689a      	ldr	r2, [r3, #8]
 8000d90:	4910      	ldr	r1, [pc, #64]	; (8000dd4 <HAL_GPIO_Init+0x2c8>)
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	608b      	str	r3, [r1, #8]
 8000d98:	e025      	b.n	8000de6 <HAL_GPIO_Init+0x2da>
 8000d9a:	bf00      	nop
 8000d9c:	10320000 	.word	0x10320000
 8000da0:	10310000 	.word	0x10310000
 8000da4:	10220000 	.word	0x10220000
 8000da8:	10210000 	.word	0x10210000
 8000dac:	10120000 	.word	0x10120000
 8000db0:	10110000 	.word	0x10110000
 8000db4:	40021000 	.word	0x40021000
 8000db8:	40010000 	.word	0x40010000
 8000dbc:	40010800 	.word	0x40010800
 8000dc0:	40010c00 	.word	0x40010c00
 8000dc4:	40011000 	.word	0x40011000
 8000dc8:	40011400 	.word	0x40011400
 8000dcc:	40011800 	.word	0x40011800
 8000dd0:	40011c00 	.word	0x40011c00
 8000dd4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000dd8:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <HAL_GPIO_Init+0x324>)
 8000dda:	689a      	ldr	r2, [r3, #8]
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	43db      	mvns	r3, r3
 8000de0:	4913      	ldr	r1, [pc, #76]	; (8000e30 <HAL_GPIO_Init+0x324>)
 8000de2:	4013      	ands	r3, r2
 8000de4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d006      	beq.n	8000e00 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000df2:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <HAL_GPIO_Init+0x324>)
 8000df4:	68da      	ldr	r2, [r3, #12]
 8000df6:	490e      	ldr	r1, [pc, #56]	; (8000e30 <HAL_GPIO_Init+0x324>)
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	60cb      	str	r3, [r1, #12]
 8000dfe:	e006      	b.n	8000e0e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e00:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <HAL_GPIO_Init+0x324>)
 8000e02:	68da      	ldr	r2, [r3, #12]
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	43db      	mvns	r3, r3
 8000e08:	4909      	ldr	r1, [pc, #36]	; (8000e30 <HAL_GPIO_Init+0x324>)
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e10:	3301      	adds	r3, #1
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f47f ae7e 	bne.w	8000b20 <HAL_GPIO_Init+0x14>
  }
}
 8000e24:	bf00      	nop
 8000e26:	bf00      	nop
 8000e28:	372c      	adds	r7, #44	; 0x2c
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr
 8000e30:	40010400 	.word	0x40010400

08000e34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d101      	bne.n	8000e46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e272      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f000 8087 	beq.w	8000f62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e54:	4b92      	ldr	r3, [pc, #584]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f003 030c 	and.w	r3, r3, #12
 8000e5c:	2b04      	cmp	r3, #4
 8000e5e:	d00c      	beq.n	8000e7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e60:	4b8f      	ldr	r3, [pc, #572]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 030c 	and.w	r3, r3, #12
 8000e68:	2b08      	cmp	r3, #8
 8000e6a:	d112      	bne.n	8000e92 <HAL_RCC_OscConfig+0x5e>
 8000e6c:	4b8c      	ldr	r3, [pc, #560]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e78:	d10b      	bne.n	8000e92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e7a:	4b89      	ldr	r3, [pc, #548]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d06c      	beq.n	8000f60 <HAL_RCC_OscConfig+0x12c>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d168      	bne.n	8000f60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e24c      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e9a:	d106      	bne.n	8000eaa <HAL_RCC_OscConfig+0x76>
 8000e9c:	4b80      	ldr	r3, [pc, #512]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a7f      	ldr	r2, [pc, #508]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000ea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ea6:	6013      	str	r3, [r2, #0]
 8000ea8:	e02e      	b.n	8000f08 <HAL_RCC_OscConfig+0xd4>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d10c      	bne.n	8000ecc <HAL_RCC_OscConfig+0x98>
 8000eb2:	4b7b      	ldr	r3, [pc, #492]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a7a      	ldr	r2, [pc, #488]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ebc:	6013      	str	r3, [r2, #0]
 8000ebe:	4b78      	ldr	r3, [pc, #480]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a77      	ldr	r2, [pc, #476]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000ec4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ec8:	6013      	str	r3, [r2, #0]
 8000eca:	e01d      	b.n	8000f08 <HAL_RCC_OscConfig+0xd4>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ed4:	d10c      	bne.n	8000ef0 <HAL_RCC_OscConfig+0xbc>
 8000ed6:	4b72      	ldr	r3, [pc, #456]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a71      	ldr	r2, [pc, #452]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ee0:	6013      	str	r3, [r2, #0]
 8000ee2:	4b6f      	ldr	r3, [pc, #444]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a6e      	ldr	r2, [pc, #440]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eec:	6013      	str	r3, [r2, #0]
 8000eee:	e00b      	b.n	8000f08 <HAL_RCC_OscConfig+0xd4>
 8000ef0:	4b6b      	ldr	r3, [pc, #428]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a6a      	ldr	r2, [pc, #424]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000efa:	6013      	str	r3, [r2, #0]
 8000efc:	4b68      	ldr	r3, [pc, #416]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a67      	ldr	r2, [pc, #412]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000f02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d013      	beq.n	8000f38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f10:	f7ff fcc0 	bl	8000894 <HAL_GetTick>
 8000f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f16:	e008      	b.n	8000f2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f18:	f7ff fcbc 	bl	8000894 <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	2b64      	cmp	r3, #100	; 0x64
 8000f24:	d901      	bls.n	8000f2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f26:	2303      	movs	r3, #3
 8000f28:	e200      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f2a:	4b5d      	ldr	r3, [pc, #372]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d0f0      	beq.n	8000f18 <HAL_RCC_OscConfig+0xe4>
 8000f36:	e014      	b.n	8000f62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f38:	f7ff fcac 	bl	8000894 <HAL_GetTick>
 8000f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f3e:	e008      	b.n	8000f52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f40:	f7ff fca8 	bl	8000894 <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b64      	cmp	r3, #100	; 0x64
 8000f4c:	d901      	bls.n	8000f52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e1ec      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f52:	4b53      	ldr	r3, [pc, #332]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d1f0      	bne.n	8000f40 <HAL_RCC_OscConfig+0x10c>
 8000f5e:	e000      	b.n	8000f62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d063      	beq.n	8001036 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f6e:	4b4c      	ldr	r3, [pc, #304]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f003 030c 	and.w	r3, r3, #12
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d00b      	beq.n	8000f92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f7a:	4b49      	ldr	r3, [pc, #292]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f003 030c 	and.w	r3, r3, #12
 8000f82:	2b08      	cmp	r3, #8
 8000f84:	d11c      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x18c>
 8000f86:	4b46      	ldr	r3, [pc, #280]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d116      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f92:	4b43      	ldr	r3, [pc, #268]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d005      	beq.n	8000faa <HAL_RCC_OscConfig+0x176>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	691b      	ldr	r3, [r3, #16]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d001      	beq.n	8000faa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e1c0      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000faa:	4b3d      	ldr	r3, [pc, #244]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	4939      	ldr	r1, [pc, #228]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fbe:	e03a      	b.n	8001036 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	691b      	ldr	r3, [r3, #16]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d020      	beq.n	800100a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fc8:	4b36      	ldr	r3, [pc, #216]	; (80010a4 <HAL_RCC_OscConfig+0x270>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fce:	f7ff fc61 	bl	8000894 <HAL_GetTick>
 8000fd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fd4:	e008      	b.n	8000fe8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fd6:	f7ff fc5d 	bl	8000894 <HAL_GetTick>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d901      	bls.n	8000fe8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	e1a1      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fe8:	4b2d      	ldr	r3, [pc, #180]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f003 0302 	and.w	r3, r3, #2
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d0f0      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ff4:	4b2a      	ldr	r3, [pc, #168]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	695b      	ldr	r3, [r3, #20]
 8001000:	00db      	lsls	r3, r3, #3
 8001002:	4927      	ldr	r1, [pc, #156]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8001004:	4313      	orrs	r3, r2
 8001006:	600b      	str	r3, [r1, #0]
 8001008:	e015      	b.n	8001036 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800100a:	4b26      	ldr	r3, [pc, #152]	; (80010a4 <HAL_RCC_OscConfig+0x270>)
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001010:	f7ff fc40 	bl	8000894 <HAL_GetTick>
 8001014:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001016:	e008      	b.n	800102a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001018:	f7ff fc3c 	bl	8000894 <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	2b02      	cmp	r3, #2
 8001024:	d901      	bls.n	800102a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001026:	2303      	movs	r3, #3
 8001028:	e180      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800102a:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	2b00      	cmp	r3, #0
 8001034:	d1f0      	bne.n	8001018 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f003 0308 	and.w	r3, r3, #8
 800103e:	2b00      	cmp	r3, #0
 8001040:	d03a      	beq.n	80010b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d019      	beq.n	800107e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800104a:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <HAL_RCC_OscConfig+0x274>)
 800104c:	2201      	movs	r2, #1
 800104e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001050:	f7ff fc20 	bl	8000894 <HAL_GetTick>
 8001054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001058:	f7ff fc1c 	bl	8000894 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b02      	cmp	r3, #2
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e160      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800106a:	4b0d      	ldr	r3, [pc, #52]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 800106c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	2b00      	cmp	r3, #0
 8001074:	d0f0      	beq.n	8001058 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001076:	2001      	movs	r0, #1
 8001078:	f000 fad8 	bl	800162c <RCC_Delay>
 800107c:	e01c      	b.n	80010b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800107e:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <HAL_RCC_OscConfig+0x274>)
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001084:	f7ff fc06 	bl	8000894 <HAL_GetTick>
 8001088:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800108a:	e00f      	b.n	80010ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800108c:	f7ff fc02 	bl	8000894 <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	2b02      	cmp	r3, #2
 8001098:	d908      	bls.n	80010ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	e146      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>
 800109e:	bf00      	nop
 80010a0:	40021000 	.word	0x40021000
 80010a4:	42420000 	.word	0x42420000
 80010a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010ac:	4b92      	ldr	r3, [pc, #584]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 80010ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b0:	f003 0302 	and.w	r3, r3, #2
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1e9      	bne.n	800108c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 0304 	and.w	r3, r3, #4
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	f000 80a6 	beq.w	8001212 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010c6:	2300      	movs	r3, #0
 80010c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010ca:	4b8b      	ldr	r3, [pc, #556]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 80010cc:	69db      	ldr	r3, [r3, #28]
 80010ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d10d      	bne.n	80010f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010d6:	4b88      	ldr	r3, [pc, #544]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	4a87      	ldr	r2, [pc, #540]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 80010dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e0:	61d3      	str	r3, [r2, #28]
 80010e2:	4b85      	ldr	r3, [pc, #532]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010ee:	2301      	movs	r3, #1
 80010f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010f2:	4b82      	ldr	r3, [pc, #520]	; (80012fc <HAL_RCC_OscConfig+0x4c8>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d118      	bne.n	8001130 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010fe:	4b7f      	ldr	r3, [pc, #508]	; (80012fc <HAL_RCC_OscConfig+0x4c8>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a7e      	ldr	r2, [pc, #504]	; (80012fc <HAL_RCC_OscConfig+0x4c8>)
 8001104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001108:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800110a:	f7ff fbc3 	bl	8000894 <HAL_GetTick>
 800110e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001110:	e008      	b.n	8001124 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001112:	f7ff fbbf 	bl	8000894 <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b64      	cmp	r3, #100	; 0x64
 800111e:	d901      	bls.n	8001124 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e103      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001124:	4b75      	ldr	r3, [pc, #468]	; (80012fc <HAL_RCC_OscConfig+0x4c8>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800112c:	2b00      	cmp	r3, #0
 800112e:	d0f0      	beq.n	8001112 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d106      	bne.n	8001146 <HAL_RCC_OscConfig+0x312>
 8001138:	4b6f      	ldr	r3, [pc, #444]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 800113a:	6a1b      	ldr	r3, [r3, #32]
 800113c:	4a6e      	ldr	r2, [pc, #440]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 800113e:	f043 0301 	orr.w	r3, r3, #1
 8001142:	6213      	str	r3, [r2, #32]
 8001144:	e02d      	b.n	80011a2 <HAL_RCC_OscConfig+0x36e>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d10c      	bne.n	8001168 <HAL_RCC_OscConfig+0x334>
 800114e:	4b6a      	ldr	r3, [pc, #424]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 8001150:	6a1b      	ldr	r3, [r3, #32]
 8001152:	4a69      	ldr	r2, [pc, #420]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 8001154:	f023 0301 	bic.w	r3, r3, #1
 8001158:	6213      	str	r3, [r2, #32]
 800115a:	4b67      	ldr	r3, [pc, #412]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 800115c:	6a1b      	ldr	r3, [r3, #32]
 800115e:	4a66      	ldr	r2, [pc, #408]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 8001160:	f023 0304 	bic.w	r3, r3, #4
 8001164:	6213      	str	r3, [r2, #32]
 8001166:	e01c      	b.n	80011a2 <HAL_RCC_OscConfig+0x36e>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	2b05      	cmp	r3, #5
 800116e:	d10c      	bne.n	800118a <HAL_RCC_OscConfig+0x356>
 8001170:	4b61      	ldr	r3, [pc, #388]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 8001172:	6a1b      	ldr	r3, [r3, #32]
 8001174:	4a60      	ldr	r2, [pc, #384]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 8001176:	f043 0304 	orr.w	r3, r3, #4
 800117a:	6213      	str	r3, [r2, #32]
 800117c:	4b5e      	ldr	r3, [pc, #376]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	4a5d      	ldr	r2, [pc, #372]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	6213      	str	r3, [r2, #32]
 8001188:	e00b      	b.n	80011a2 <HAL_RCC_OscConfig+0x36e>
 800118a:	4b5b      	ldr	r3, [pc, #364]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 800118c:	6a1b      	ldr	r3, [r3, #32]
 800118e:	4a5a      	ldr	r2, [pc, #360]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 8001190:	f023 0301 	bic.w	r3, r3, #1
 8001194:	6213      	str	r3, [r2, #32]
 8001196:	4b58      	ldr	r3, [pc, #352]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 8001198:	6a1b      	ldr	r3, [r3, #32]
 800119a:	4a57      	ldr	r2, [pc, #348]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 800119c:	f023 0304 	bic.w	r3, r3, #4
 80011a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d015      	beq.n	80011d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011aa:	f7ff fb73 	bl	8000894 <HAL_GetTick>
 80011ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011b0:	e00a      	b.n	80011c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011b2:	f7ff fb6f 	bl	8000894 <HAL_GetTick>
 80011b6:	4602      	mov	r2, r0
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d901      	bls.n	80011c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e0b1      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011c8:	4b4b      	ldr	r3, [pc, #300]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 80011ca:	6a1b      	ldr	r3, [r3, #32]
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0ee      	beq.n	80011b2 <HAL_RCC_OscConfig+0x37e>
 80011d4:	e014      	b.n	8001200 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011d6:	f7ff fb5d 	bl	8000894 <HAL_GetTick>
 80011da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011dc:	e00a      	b.n	80011f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011de:	f7ff fb59 	bl	8000894 <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d901      	bls.n	80011f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e09b      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011f4:	4b40      	ldr	r3, [pc, #256]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 80011f6:	6a1b      	ldr	r3, [r3, #32]
 80011f8:	f003 0302 	and.w	r3, r3, #2
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d1ee      	bne.n	80011de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001200:	7dfb      	ldrb	r3, [r7, #23]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d105      	bne.n	8001212 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001206:	4b3c      	ldr	r3, [pc, #240]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	4a3b      	ldr	r2, [pc, #236]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 800120c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001210:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	2b00      	cmp	r3, #0
 8001218:	f000 8087 	beq.w	800132a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800121c:	4b36      	ldr	r3, [pc, #216]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 030c 	and.w	r3, r3, #12
 8001224:	2b08      	cmp	r3, #8
 8001226:	d061      	beq.n	80012ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	69db      	ldr	r3, [r3, #28]
 800122c:	2b02      	cmp	r3, #2
 800122e:	d146      	bne.n	80012be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001230:	4b33      	ldr	r3, [pc, #204]	; (8001300 <HAL_RCC_OscConfig+0x4cc>)
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001236:	f7ff fb2d 	bl	8000894 <HAL_GetTick>
 800123a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800123c:	e008      	b.n	8001250 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800123e:	f7ff fb29 	bl	8000894 <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d901      	bls.n	8001250 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800124c:	2303      	movs	r3, #3
 800124e:	e06d      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001250:	4b29      	ldr	r3, [pc, #164]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d1f0      	bne.n	800123e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001264:	d108      	bne.n	8001278 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001266:	4b24      	ldr	r3, [pc, #144]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	4921      	ldr	r1, [pc, #132]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 8001274:	4313      	orrs	r3, r2
 8001276:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001278:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6a19      	ldr	r1, [r3, #32]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001288:	430b      	orrs	r3, r1
 800128a:	491b      	ldr	r1, [pc, #108]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 800128c:	4313      	orrs	r3, r2
 800128e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001290:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <HAL_RCC_OscConfig+0x4cc>)
 8001292:	2201      	movs	r2, #1
 8001294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001296:	f7ff fafd 	bl	8000894 <HAL_GetTick>
 800129a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800129c:	e008      	b.n	80012b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800129e:	f7ff faf9 	bl	8000894 <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d901      	bls.n	80012b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e03d      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012b0:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d0f0      	beq.n	800129e <HAL_RCC_OscConfig+0x46a>
 80012bc:	e035      	b.n	800132a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012be:	4b10      	ldr	r3, [pc, #64]	; (8001300 <HAL_RCC_OscConfig+0x4cc>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c4:	f7ff fae6 	bl	8000894 <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012cc:	f7ff fae2 	bl	8000894 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e026      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012de:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1f0      	bne.n	80012cc <HAL_RCC_OscConfig+0x498>
 80012ea:	e01e      	b.n	800132a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	69db      	ldr	r3, [r3, #28]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d107      	bne.n	8001304 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e019      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>
 80012f8:	40021000 	.word	0x40021000
 80012fc:	40007000 	.word	0x40007000
 8001300:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001304:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <HAL_RCC_OscConfig+0x500>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a1b      	ldr	r3, [r3, #32]
 8001314:	429a      	cmp	r2, r3
 8001316:	d106      	bne.n	8001326 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001322:	429a      	cmp	r2, r3
 8001324:	d001      	beq.n	800132a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e000      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40021000 	.word	0x40021000

08001338 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d101      	bne.n	800134c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e0d0      	b.n	80014ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800134c:	4b6a      	ldr	r3, [pc, #424]	; (80014f8 <HAL_RCC_ClockConfig+0x1c0>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 0307 	and.w	r3, r3, #7
 8001354:	683a      	ldr	r2, [r7, #0]
 8001356:	429a      	cmp	r2, r3
 8001358:	d910      	bls.n	800137c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800135a:	4b67      	ldr	r3, [pc, #412]	; (80014f8 <HAL_RCC_ClockConfig+0x1c0>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f023 0207 	bic.w	r2, r3, #7
 8001362:	4965      	ldr	r1, [pc, #404]	; (80014f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	4313      	orrs	r3, r2
 8001368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800136a:	4b63      	ldr	r3, [pc, #396]	; (80014f8 <HAL_RCC_ClockConfig+0x1c0>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	683a      	ldr	r2, [r7, #0]
 8001374:	429a      	cmp	r2, r3
 8001376:	d001      	beq.n	800137c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e0b8      	b.n	80014ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b00      	cmp	r3, #0
 8001386:	d020      	beq.n	80013ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0304 	and.w	r3, r3, #4
 8001390:	2b00      	cmp	r3, #0
 8001392:	d005      	beq.n	80013a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001394:	4b59      	ldr	r3, [pc, #356]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	4a58      	ldr	r2, [pc, #352]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 800139a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800139e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0308 	and.w	r3, r3, #8
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d005      	beq.n	80013b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013ac:	4b53      	ldr	r3, [pc, #332]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	4a52      	ldr	r2, [pc, #328]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 80013b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80013b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013b8:	4b50      	ldr	r3, [pc, #320]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	494d      	ldr	r1, [pc, #308]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 80013c6:	4313      	orrs	r3, r2
 80013c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d040      	beq.n	8001458 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d107      	bne.n	80013ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013de:	4b47      	ldr	r3, [pc, #284]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d115      	bne.n	8001416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e07f      	b.n	80014ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d107      	bne.n	8001406 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013f6:	4b41      	ldr	r3, [pc, #260]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d109      	bne.n	8001416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e073      	b.n	80014ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001406:	4b3d      	ldr	r3, [pc, #244]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e06b      	b.n	80014ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001416:	4b39      	ldr	r3, [pc, #228]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f023 0203 	bic.w	r2, r3, #3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	4936      	ldr	r1, [pc, #216]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 8001424:	4313      	orrs	r3, r2
 8001426:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001428:	f7ff fa34 	bl	8000894 <HAL_GetTick>
 800142c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800142e:	e00a      	b.n	8001446 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001430:	f7ff fa30 	bl	8000894 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	f241 3288 	movw	r2, #5000	; 0x1388
 800143e:	4293      	cmp	r3, r2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e053      	b.n	80014ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001446:	4b2d      	ldr	r3, [pc, #180]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f003 020c 	and.w	r2, r3, #12
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	429a      	cmp	r2, r3
 8001456:	d1eb      	bne.n	8001430 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001458:	4b27      	ldr	r3, [pc, #156]	; (80014f8 <HAL_RCC_ClockConfig+0x1c0>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0307 	and.w	r3, r3, #7
 8001460:	683a      	ldr	r2, [r7, #0]
 8001462:	429a      	cmp	r2, r3
 8001464:	d210      	bcs.n	8001488 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001466:	4b24      	ldr	r3, [pc, #144]	; (80014f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f023 0207 	bic.w	r2, r3, #7
 800146e:	4922      	ldr	r1, [pc, #136]	; (80014f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	4313      	orrs	r3, r2
 8001474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001476:	4b20      	ldr	r3, [pc, #128]	; (80014f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	429a      	cmp	r2, r3
 8001482:	d001      	beq.n	8001488 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e032      	b.n	80014ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0304 	and.w	r3, r3, #4
 8001490:	2b00      	cmp	r3, #0
 8001492:	d008      	beq.n	80014a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001494:	4b19      	ldr	r3, [pc, #100]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	4916      	ldr	r1, [pc, #88]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 80014a2:	4313      	orrs	r3, r2
 80014a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d009      	beq.n	80014c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014b2:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	490e      	ldr	r1, [pc, #56]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 80014c2:	4313      	orrs	r3, r2
 80014c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014c6:	f000 f821 	bl	800150c <HAL_RCC_GetSysClockFreq>
 80014ca:	4602      	mov	r2, r0
 80014cc:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	091b      	lsrs	r3, r3, #4
 80014d2:	f003 030f 	and.w	r3, r3, #15
 80014d6:	490a      	ldr	r1, [pc, #40]	; (8001500 <HAL_RCC_ClockConfig+0x1c8>)
 80014d8:	5ccb      	ldrb	r3, [r1, r3]
 80014da:	fa22 f303 	lsr.w	r3, r2, r3
 80014de:	4a09      	ldr	r2, [pc, #36]	; (8001504 <HAL_RCC_ClockConfig+0x1cc>)
 80014e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80014e2:	4b09      	ldr	r3, [pc, #36]	; (8001508 <HAL_RCC_ClockConfig+0x1d0>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff f992 	bl	8000810 <HAL_InitTick>

  return HAL_OK;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40022000 	.word	0x40022000
 80014fc:	40021000 	.word	0x40021000
 8001500:	08002c90 	.word	0x08002c90
 8001504:	20000000 	.word	0x20000000
 8001508:	20000004 	.word	0x20000004

0800150c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800150c:	b490      	push	{r4, r7}
 800150e:	b08a      	sub	sp, #40	; 0x28
 8001510:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001512:	4b29      	ldr	r3, [pc, #164]	; (80015b8 <HAL_RCC_GetSysClockFreq+0xac>)
 8001514:	1d3c      	adds	r4, r7, #4
 8001516:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001518:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800151c:	f240 2301 	movw	r3, #513	; 0x201
 8001520:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001522:	2300      	movs	r3, #0
 8001524:	61fb      	str	r3, [r7, #28]
 8001526:	2300      	movs	r3, #0
 8001528:	61bb      	str	r3, [r7, #24]
 800152a:	2300      	movs	r3, #0
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001532:	2300      	movs	r3, #0
 8001534:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001536:	4b21      	ldr	r3, [pc, #132]	; (80015bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f003 030c 	and.w	r3, r3, #12
 8001542:	2b04      	cmp	r3, #4
 8001544:	d002      	beq.n	800154c <HAL_RCC_GetSysClockFreq+0x40>
 8001546:	2b08      	cmp	r3, #8
 8001548:	d003      	beq.n	8001552 <HAL_RCC_GetSysClockFreq+0x46>
 800154a:	e02b      	b.n	80015a4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800154c:	4b1c      	ldr	r3, [pc, #112]	; (80015c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800154e:	623b      	str	r3, [r7, #32]
      break;
 8001550:	e02b      	b.n	80015aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	0c9b      	lsrs	r3, r3, #18
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	3328      	adds	r3, #40	; 0x28
 800155c:	443b      	add	r3, r7
 800155e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001562:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d012      	beq.n	8001594 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800156e:	4b13      	ldr	r3, [pc, #76]	; (80015bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	0c5b      	lsrs	r3, r3, #17
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	3328      	adds	r3, #40	; 0x28
 800157a:	443b      	add	r3, r7
 800157c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001580:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	4a0e      	ldr	r2, [pc, #56]	; (80015c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001586:	fb03 f202 	mul.w	r2, r3, r2
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
 8001592:	e004      	b.n	800159e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	4a0b      	ldr	r2, [pc, #44]	; (80015c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001598:	fb02 f303 	mul.w	r3, r2, r3
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	623b      	str	r3, [r7, #32]
      break;
 80015a2:	e002      	b.n	80015aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015a6:	623b      	str	r3, [r7, #32]
      break;
 80015a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015aa:	6a3b      	ldr	r3, [r7, #32]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3728      	adds	r7, #40	; 0x28
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc90      	pop	{r4, r7}
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	08002c80 	.word	0x08002c80
 80015bc:	40021000 	.word	0x40021000
 80015c0:	007a1200 	.word	0x007a1200
 80015c4:	003d0900 	.word	0x003d0900

080015c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015cc:	4b02      	ldr	r3, [pc, #8]	; (80015d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80015ce:	681b      	ldr	r3, [r3, #0]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr
 80015d8:	20000000 	.word	0x20000000

080015dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015e0:	f7ff fff2 	bl	80015c8 <HAL_RCC_GetHCLKFreq>
 80015e4:	4602      	mov	r2, r0
 80015e6:	4b05      	ldr	r3, [pc, #20]	; (80015fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	0a1b      	lsrs	r3, r3, #8
 80015ec:	f003 0307 	and.w	r3, r3, #7
 80015f0:	4903      	ldr	r1, [pc, #12]	; (8001600 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015f2:	5ccb      	ldrb	r3, [r1, r3]
 80015f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40021000 	.word	0x40021000
 8001600:	08002ca0 	.word	0x08002ca0

08001604 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001608:	f7ff ffde 	bl	80015c8 <HAL_RCC_GetHCLKFreq>
 800160c:	4602      	mov	r2, r0
 800160e:	4b05      	ldr	r3, [pc, #20]	; (8001624 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	0adb      	lsrs	r3, r3, #11
 8001614:	f003 0307 	and.w	r3, r3, #7
 8001618:	4903      	ldr	r1, [pc, #12]	; (8001628 <HAL_RCC_GetPCLK2Freq+0x24>)
 800161a:	5ccb      	ldrb	r3, [r1, r3]
 800161c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001620:	4618      	mov	r0, r3
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40021000 	.word	0x40021000
 8001628:	08002ca0 	.word	0x08002ca0

0800162c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001634:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <RCC_Delay+0x34>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a0a      	ldr	r2, [pc, #40]	; (8001664 <RCC_Delay+0x38>)
 800163a:	fba2 2303 	umull	r2, r3, r2, r3
 800163e:	0a5b      	lsrs	r3, r3, #9
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	fb02 f303 	mul.w	r3, r2, r3
 8001646:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001648:	bf00      	nop
  }
  while (Delay --);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	1e5a      	subs	r2, r3, #1
 800164e:	60fa      	str	r2, [r7, #12]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d1f9      	bne.n	8001648 <RCC_Delay+0x1c>
}
 8001654:	bf00      	nop
 8001656:	bf00      	nop
 8001658:	3714      	adds	r7, #20
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr
 8001660:	20000000 	.word	0x20000000
 8001664:	10624dd3 	.word	0x10624dd3

08001668 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e041      	b.n	80016fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	d106      	bne.n	8001694 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7fe ff72 	bl	8000578 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2202      	movs	r2, #2
 8001698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3304      	adds	r3, #4
 80016a4:	4619      	mov	r1, r3
 80016a6:	4610      	mov	r0, r2
 80016a8:	f000 fa7e 	bl	8001ba8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2201      	movs	r2, #1
 80016b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2201      	movs	r2, #1
 80016c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2201      	movs	r2, #1
 80016c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2201      	movs	r2, #1
 80016d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2201      	movs	r2, #1
 80016d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2201      	movs	r2, #1
 80016e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2201      	movs	r2, #1
 80016e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2201      	movs	r2, #1
 80016f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2201      	movs	r2, #1
 80016f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
	...

08001708 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001716:	b2db      	uxtb	r3, r3
 8001718:	2b01      	cmp	r3, #1
 800171a:	d001      	beq.n	8001720 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e044      	b.n	80017aa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2202      	movs	r2, #2
 8001724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	68da      	ldr	r2, [r3, #12]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f042 0201 	orr.w	r2, r2, #1
 8001736:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a1d      	ldr	r2, [pc, #116]	; (80017b4 <HAL_TIM_Base_Start_IT+0xac>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d018      	beq.n	8001774 <HAL_TIM_Base_Start_IT+0x6c>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a1c      	ldr	r2, [pc, #112]	; (80017b8 <HAL_TIM_Base_Start_IT+0xb0>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d013      	beq.n	8001774 <HAL_TIM_Base_Start_IT+0x6c>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001754:	d00e      	beq.n	8001774 <HAL_TIM_Base_Start_IT+0x6c>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a18      	ldr	r2, [pc, #96]	; (80017bc <HAL_TIM_Base_Start_IT+0xb4>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d009      	beq.n	8001774 <HAL_TIM_Base_Start_IT+0x6c>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a16      	ldr	r2, [pc, #88]	; (80017c0 <HAL_TIM_Base_Start_IT+0xb8>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d004      	beq.n	8001774 <HAL_TIM_Base_Start_IT+0x6c>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a15      	ldr	r2, [pc, #84]	; (80017c4 <HAL_TIM_Base_Start_IT+0xbc>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d111      	bne.n	8001798 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2b06      	cmp	r3, #6
 8001784:	d010      	beq.n	80017a8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f042 0201 	orr.w	r2, r2, #1
 8001794:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001796:	e007      	b.n	80017a8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f042 0201 	orr.w	r2, r2, #1
 80017a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3714      	adds	r7, #20
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr
 80017b4:	40012c00 	.word	0x40012c00
 80017b8:	40013400 	.word	0x40013400
 80017bc:	40000400 	.word	0x40000400
 80017c0:	40000800 	.word	0x40000800
 80017c4:	40000c00 	.word	0x40000c00

080017c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d122      	bne.n	8001824 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d11b      	bne.n	8001824 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f06f 0202 	mvn.w	r2, #2
 80017f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2201      	movs	r2, #1
 80017fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	f003 0303 	and.w	r3, r3, #3
 8001806:	2b00      	cmp	r3, #0
 8001808:	d003      	beq.n	8001812 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 f9b1 	bl	8001b72 <HAL_TIM_IC_CaptureCallback>
 8001810:	e005      	b.n	800181e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f000 f9a4 	bl	8001b60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 f9b3 	bl	8001b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	f003 0304 	and.w	r3, r3, #4
 800182e:	2b04      	cmp	r3, #4
 8001830:	d122      	bne.n	8001878 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	f003 0304 	and.w	r3, r3, #4
 800183c:	2b04      	cmp	r3, #4
 800183e:	d11b      	bne.n	8001878 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f06f 0204 	mvn.w	r2, #4
 8001848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2202      	movs	r2, #2
 800184e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 f987 	bl	8001b72 <HAL_TIM_IC_CaptureCallback>
 8001864:	e005      	b.n	8001872 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f000 f97a 	bl	8001b60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f000 f989 	bl	8001b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	f003 0308 	and.w	r3, r3, #8
 8001882:	2b08      	cmp	r3, #8
 8001884:	d122      	bne.n	80018cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	f003 0308 	and.w	r3, r3, #8
 8001890:	2b08      	cmp	r3, #8
 8001892:	d11b      	bne.n	80018cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f06f 0208 	mvn.w	r2, #8
 800189c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2204      	movs	r2, #4
 80018a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	f003 0303 	and.w	r3, r3, #3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f000 f95d 	bl	8001b72 <HAL_TIM_IC_CaptureCallback>
 80018b8:	e005      	b.n	80018c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 f950 	bl	8001b60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f000 f95f 	bl	8001b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	f003 0310 	and.w	r3, r3, #16
 80018d6:	2b10      	cmp	r3, #16
 80018d8:	d122      	bne.n	8001920 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	f003 0310 	and.w	r3, r3, #16
 80018e4:	2b10      	cmp	r3, #16
 80018e6:	d11b      	bne.n	8001920 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f06f 0210 	mvn.w	r2, #16
 80018f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2208      	movs	r2, #8
 80018f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001902:	2b00      	cmp	r3, #0
 8001904:	d003      	beq.n	800190e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f000 f933 	bl	8001b72 <HAL_TIM_IC_CaptureCallback>
 800190c:	e005      	b.n	800191a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 f926 	bl	8001b60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f000 f935 	bl	8001b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b01      	cmp	r3, #1
 800192c:	d10e      	bne.n	800194c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	2b01      	cmp	r3, #1
 800193a:	d107      	bne.n	800194c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f06f 0201 	mvn.w	r2, #1
 8001944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7fe fdce 	bl	80004e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001956:	2b80      	cmp	r3, #128	; 0x80
 8001958:	d10e      	bne.n	8001978 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001964:	2b80      	cmp	r3, #128	; 0x80
 8001966:	d107      	bne.n	8001978 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f000 fa9d 	bl	8001eb2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001982:	2b40      	cmp	r3, #64	; 0x40
 8001984:	d10e      	bne.n	80019a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001990:	2b40      	cmp	r3, #64	; 0x40
 8001992:	d107      	bne.n	80019a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800199c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f000 f8f9 	bl	8001b96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	f003 0320 	and.w	r3, r3, #32
 80019ae:	2b20      	cmp	r3, #32
 80019b0:	d10e      	bne.n	80019d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	f003 0320 	and.w	r3, r3, #32
 80019bc:	2b20      	cmp	r3, #32
 80019be:	d107      	bne.n	80019d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f06f 0220 	mvn.w	r2, #32
 80019c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 fa68 	bl	8001ea0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80019d0:	bf00      	nop
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d101      	bne.n	80019f0 <HAL_TIM_ConfigClockSource+0x18>
 80019ec:	2302      	movs	r3, #2
 80019ee:	e0b3      	b.n	8001b58 <HAL_TIM_ConfigClockSource+0x180>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2202      	movs	r2, #2
 80019fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001a0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a16:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a28:	d03e      	beq.n	8001aa8 <HAL_TIM_ConfigClockSource+0xd0>
 8001a2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a2e:	f200 8087 	bhi.w	8001b40 <HAL_TIM_ConfigClockSource+0x168>
 8001a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a36:	f000 8085 	beq.w	8001b44 <HAL_TIM_ConfigClockSource+0x16c>
 8001a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a3e:	d87f      	bhi.n	8001b40 <HAL_TIM_ConfigClockSource+0x168>
 8001a40:	2b70      	cmp	r3, #112	; 0x70
 8001a42:	d01a      	beq.n	8001a7a <HAL_TIM_ConfigClockSource+0xa2>
 8001a44:	2b70      	cmp	r3, #112	; 0x70
 8001a46:	d87b      	bhi.n	8001b40 <HAL_TIM_ConfigClockSource+0x168>
 8001a48:	2b60      	cmp	r3, #96	; 0x60
 8001a4a:	d050      	beq.n	8001aee <HAL_TIM_ConfigClockSource+0x116>
 8001a4c:	2b60      	cmp	r3, #96	; 0x60
 8001a4e:	d877      	bhi.n	8001b40 <HAL_TIM_ConfigClockSource+0x168>
 8001a50:	2b50      	cmp	r3, #80	; 0x50
 8001a52:	d03c      	beq.n	8001ace <HAL_TIM_ConfigClockSource+0xf6>
 8001a54:	2b50      	cmp	r3, #80	; 0x50
 8001a56:	d873      	bhi.n	8001b40 <HAL_TIM_ConfigClockSource+0x168>
 8001a58:	2b40      	cmp	r3, #64	; 0x40
 8001a5a:	d058      	beq.n	8001b0e <HAL_TIM_ConfigClockSource+0x136>
 8001a5c:	2b40      	cmp	r3, #64	; 0x40
 8001a5e:	d86f      	bhi.n	8001b40 <HAL_TIM_ConfigClockSource+0x168>
 8001a60:	2b30      	cmp	r3, #48	; 0x30
 8001a62:	d064      	beq.n	8001b2e <HAL_TIM_ConfigClockSource+0x156>
 8001a64:	2b30      	cmp	r3, #48	; 0x30
 8001a66:	d86b      	bhi.n	8001b40 <HAL_TIM_ConfigClockSource+0x168>
 8001a68:	2b20      	cmp	r3, #32
 8001a6a:	d060      	beq.n	8001b2e <HAL_TIM_ConfigClockSource+0x156>
 8001a6c:	2b20      	cmp	r3, #32
 8001a6e:	d867      	bhi.n	8001b40 <HAL_TIM_ConfigClockSource+0x168>
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d05c      	beq.n	8001b2e <HAL_TIM_ConfigClockSource+0x156>
 8001a74:	2b10      	cmp	r3, #16
 8001a76:	d05a      	beq.n	8001b2e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001a78:	e062      	b.n	8001b40 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6818      	ldr	r0, [r3, #0]
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	6899      	ldr	r1, [r3, #8]
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	f000 f97e 	bl	8001d8a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001a9c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	609a      	str	r2, [r3, #8]
      break;
 8001aa6:	e04e      	b.n	8001b46 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6818      	ldr	r0, [r3, #0]
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	6899      	ldr	r1, [r3, #8]
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	f000 f967 	bl	8001d8a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	689a      	ldr	r2, [r3, #8]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001aca:	609a      	str	r2, [r3, #8]
      break;
 8001acc:	e03b      	b.n	8001b46 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6818      	ldr	r0, [r3, #0]
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	6859      	ldr	r1, [r3, #4]
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	461a      	mov	r2, r3
 8001adc:	f000 f8de 	bl	8001c9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2150      	movs	r1, #80	; 0x50
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f000 f935 	bl	8001d56 <TIM_ITRx_SetConfig>
      break;
 8001aec:	e02b      	b.n	8001b46 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6818      	ldr	r0, [r3, #0]
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	6859      	ldr	r1, [r3, #4]
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	461a      	mov	r2, r3
 8001afc:	f000 f8fc 	bl	8001cf8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2160      	movs	r1, #96	; 0x60
 8001b06:	4618      	mov	r0, r3
 8001b08:	f000 f925 	bl	8001d56 <TIM_ITRx_SetConfig>
      break;
 8001b0c:	e01b      	b.n	8001b46 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6818      	ldr	r0, [r3, #0]
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	6859      	ldr	r1, [r3, #4]
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	f000 f8be 	bl	8001c9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2140      	movs	r1, #64	; 0x40
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 f915 	bl	8001d56 <TIM_ITRx_SetConfig>
      break;
 8001b2c:	e00b      	b.n	8001b46 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4619      	mov	r1, r3
 8001b38:	4610      	mov	r0, r2
 8001b3a:	f000 f90c 	bl	8001d56 <TIM_ITRx_SetConfig>
        break;
 8001b3e:	e002      	b.n	8001b46 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001b40:	bf00      	nop
 8001b42:	e000      	b.n	8001b46 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001b44:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bc80      	pop	{r7}
 8001b70:	4770      	bx	lr

08001b72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr

08001b84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr

08001b96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr

08001ba8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a33      	ldr	r2, [pc, #204]	; (8001c88 <TIM_Base_SetConfig+0xe0>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d013      	beq.n	8001be8 <TIM_Base_SetConfig+0x40>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a32      	ldr	r2, [pc, #200]	; (8001c8c <TIM_Base_SetConfig+0xe4>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d00f      	beq.n	8001be8 <TIM_Base_SetConfig+0x40>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bce:	d00b      	beq.n	8001be8 <TIM_Base_SetConfig+0x40>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4a2f      	ldr	r2, [pc, #188]	; (8001c90 <TIM_Base_SetConfig+0xe8>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d007      	beq.n	8001be8 <TIM_Base_SetConfig+0x40>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4a2e      	ldr	r2, [pc, #184]	; (8001c94 <TIM_Base_SetConfig+0xec>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d003      	beq.n	8001be8 <TIM_Base_SetConfig+0x40>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a2d      	ldr	r2, [pc, #180]	; (8001c98 <TIM_Base_SetConfig+0xf0>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d108      	bne.n	8001bfa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a22      	ldr	r2, [pc, #136]	; (8001c88 <TIM_Base_SetConfig+0xe0>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d013      	beq.n	8001c2a <TIM_Base_SetConfig+0x82>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a21      	ldr	r2, [pc, #132]	; (8001c8c <TIM_Base_SetConfig+0xe4>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d00f      	beq.n	8001c2a <TIM_Base_SetConfig+0x82>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c10:	d00b      	beq.n	8001c2a <TIM_Base_SetConfig+0x82>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a1e      	ldr	r2, [pc, #120]	; (8001c90 <TIM_Base_SetConfig+0xe8>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d007      	beq.n	8001c2a <TIM_Base_SetConfig+0x82>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a1d      	ldr	r2, [pc, #116]	; (8001c94 <TIM_Base_SetConfig+0xec>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d003      	beq.n	8001c2a <TIM_Base_SetConfig+0x82>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a1c      	ldr	r2, [pc, #112]	; (8001c98 <TIM_Base_SetConfig+0xf0>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d108      	bne.n	8001c3c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4a09      	ldr	r2, [pc, #36]	; (8001c88 <TIM_Base_SetConfig+0xe0>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d003      	beq.n	8001c70 <TIM_Base_SetConfig+0xc8>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a08      	ldr	r2, [pc, #32]	; (8001c8c <TIM_Base_SetConfig+0xe4>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d103      	bne.n	8001c78 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	691a      	ldr	r2, [r3, #16]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	615a      	str	r2, [r3, #20]
}
 8001c7e:	bf00      	nop
 8001c80:	3714      	adds	r7, #20
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr
 8001c88:	40012c00 	.word	0x40012c00
 8001c8c:	40013400 	.word	0x40013400
 8001c90:	40000400 	.word	0x40000400
 8001c94:	40000800 	.word	0x40000800
 8001c98:	40000c00 	.word	0x40000c00

08001c9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b087      	sub	sp, #28
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	f023 0201 	bic.w	r2, r3, #1
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	011b      	lsls	r3, r3, #4
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	f023 030a 	bic.w	r3, r3, #10
 8001cd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	621a      	str	r2, [r3, #32]
}
 8001cee:	bf00      	nop
 8001cf0:	371c      	adds	r7, #28
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr

08001cf8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b087      	sub	sp, #28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	f023 0210 	bic.w	r2, r3, #16
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6a1b      	ldr	r3, [r3, #32]
 8001d1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001d22:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	031b      	lsls	r3, r3, #12
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001d34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	011b      	lsls	r3, r3, #4
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	621a      	str	r2, [r3, #32]
}
 8001d4c:	bf00      	nop
 8001d4e:	371c      	adds	r7, #28
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bc80      	pop	{r7}
 8001d54:	4770      	bx	lr

08001d56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b085      	sub	sp, #20
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
 8001d5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	f043 0307 	orr.w	r3, r3, #7
 8001d78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	609a      	str	r2, [r3, #8]
}
 8001d80:	bf00      	nop
 8001d82:	3714      	adds	r7, #20
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr

08001d8a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b087      	sub	sp, #28
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	60f8      	str	r0, [r7, #12]
 8001d92:	60b9      	str	r1, [r7, #8]
 8001d94:	607a      	str	r2, [r7, #4]
 8001d96:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001da4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	021a      	lsls	r2, r3, #8
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	431a      	orrs	r2, r3
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	609a      	str	r2, [r3, #8]
}
 8001dbe:	bf00      	nop
 8001dc0:	371c      	adds	r7, #28
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr

08001dc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d101      	bne.n	8001de0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001ddc:	2302      	movs	r3, #2
 8001dde:	e050      	b.n	8001e82 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2202      	movs	r2, #2
 8001dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a1b      	ldr	r2, [pc, #108]	; (8001e8c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d018      	beq.n	8001e56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a19      	ldr	r2, [pc, #100]	; (8001e90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d013      	beq.n	8001e56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e36:	d00e      	beq.n	8001e56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a15      	ldr	r2, [pc, #84]	; (8001e94 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d009      	beq.n	8001e56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a14      	ldr	r2, [pc, #80]	; (8001e98 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d004      	beq.n	8001e56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a12      	ldr	r2, [pc, #72]	; (8001e9c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d10c      	bne.n	8001e70 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	68ba      	ldr	r2, [r7, #8]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68ba      	ldr	r2, [r7, #8]
 8001e6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr
 8001e8c:	40012c00 	.word	0x40012c00
 8001e90:	40013400 	.word	0x40013400
 8001e94:	40000400 	.word	0x40000400
 8001e98:	40000800 	.word	0x40000800
 8001e9c:	40000c00 	.word	0x40000c00

08001ea0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc80      	pop	{r7}
 8001eb0:	4770      	bx	lr

08001eb2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e03f      	b.n	8001f56 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d106      	bne.n	8001ef0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7fe fb6a 	bl	80005c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2224      	movs	r2, #36	; 0x24
 8001ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68da      	ldr	r2, [r3, #12]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 f905 	bl	8002118 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	691a      	ldr	r2, [r3, #16]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	695a      	ldr	r2, [r3, #20]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68da      	ldr	r2, [r3, #12]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2220      	movs	r2, #32
 8001f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2220      	movs	r2, #32
 8001f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b08a      	sub	sp, #40	; 0x28
 8001f62:	af02      	add	r7, sp, #8
 8001f64:	60f8      	str	r0, [r7, #12]
 8001f66:	60b9      	str	r1, [r7, #8]
 8001f68:	603b      	str	r3, [r7, #0]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b20      	cmp	r3, #32
 8001f7c:	d17c      	bne.n	8002078 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d002      	beq.n	8001f8a <HAL_UART_Transmit+0x2c>
 8001f84:	88fb      	ldrh	r3, [r7, #6]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e075      	b.n	800207a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d101      	bne.n	8001f9c <HAL_UART_Transmit+0x3e>
 8001f98:	2302      	movs	r3, #2
 8001f9a:	e06e      	b.n	800207a <HAL_UART_Transmit+0x11c>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2221      	movs	r2, #33	; 0x21
 8001fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001fb2:	f7fe fc6f 	bl	8000894 <HAL_GetTick>
 8001fb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	88fa      	ldrh	r2, [r7, #6]
 8001fbc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	88fa      	ldrh	r2, [r7, #6]
 8001fc2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fcc:	d108      	bne.n	8001fe0 <HAL_UART_Transmit+0x82>
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d104      	bne.n	8001fe0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	61bb      	str	r3, [r7, #24]
 8001fde:	e003      	b.n	8001fe8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001ff0:	e02a      	b.n	8002048 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	2180      	movs	r1, #128	; 0x80
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	f000 f840 	bl	8002082 <UART_WaitOnFlagUntilTimeout>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e036      	b.n	800207a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10b      	bne.n	800202a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	881b      	ldrh	r3, [r3, #0]
 8002016:	461a      	mov	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002020:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	3302      	adds	r3, #2
 8002026:	61bb      	str	r3, [r7, #24]
 8002028:	e007      	b.n	800203a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	781a      	ldrb	r2, [r3, #0]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	3301      	adds	r3, #1
 8002038:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800203e:	b29b      	uxth	r3, r3
 8002040:	3b01      	subs	r3, #1
 8002042:	b29a      	uxth	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800204c:	b29b      	uxth	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1cf      	bne.n	8001ff2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	2200      	movs	r2, #0
 800205a:	2140      	movs	r1, #64	; 0x40
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f000 f810 	bl	8002082 <UART_WaitOnFlagUntilTimeout>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e006      	b.n	800207a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2220      	movs	r2, #32
 8002070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002074:	2300      	movs	r3, #0
 8002076:	e000      	b.n	800207a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002078:	2302      	movs	r3, #2
  }
}
 800207a:	4618      	mov	r0, r3
 800207c:	3720      	adds	r7, #32
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b084      	sub	sp, #16
 8002086:	af00      	add	r7, sp, #0
 8002088:	60f8      	str	r0, [r7, #12]
 800208a:	60b9      	str	r1, [r7, #8]
 800208c:	603b      	str	r3, [r7, #0]
 800208e:	4613      	mov	r3, r2
 8002090:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002092:	e02c      	b.n	80020ee <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800209a:	d028      	beq.n	80020ee <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d007      	beq.n	80020b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80020a2:	f7fe fbf7 	bl	8000894 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d21d      	bcs.n	80020ee <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68da      	ldr	r2, [r3, #12]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80020c0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	695a      	ldr	r2, [r3, #20]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 0201 	bic.w	r2, r2, #1
 80020d0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2220      	movs	r2, #32
 80020d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2220      	movs	r2, #32
 80020de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e00f      	b.n	800210e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	4013      	ands	r3, r2
 80020f8:	68ba      	ldr	r2, [r7, #8]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	bf0c      	ite	eq
 80020fe:	2301      	moveq	r3, #1
 8002100:	2300      	movne	r3, #0
 8002102:	b2db      	uxtb	r3, r3
 8002104:	461a      	mov	r2, r3
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	429a      	cmp	r2, r3
 800210a:	d0c3      	beq.n	8002094 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
	...

08002118 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	430a      	orrs	r2, r1
 8002134:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689a      	ldr	r2, [r3, #8]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	4313      	orrs	r3, r2
 8002146:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002152:	f023 030c 	bic.w	r3, r3, #12
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6812      	ldr	r2, [r2, #0]
 800215a:	68b9      	ldr	r1, [r7, #8]
 800215c:	430b      	orrs	r3, r1
 800215e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	699a      	ldr	r2, [r3, #24]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	430a      	orrs	r2, r1
 8002174:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a2c      	ldr	r2, [pc, #176]	; (800222c <UART_SetConfig+0x114>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d103      	bne.n	8002188 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002180:	f7ff fa40 	bl	8001604 <HAL_RCC_GetPCLK2Freq>
 8002184:	60f8      	str	r0, [r7, #12]
 8002186:	e002      	b.n	800218e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002188:	f7ff fa28 	bl	80015dc <HAL_RCC_GetPCLK1Freq>
 800218c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	4613      	mov	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	009a      	lsls	r2, r3, #2
 8002198:	441a      	add	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a4:	4a22      	ldr	r2, [pc, #136]	; (8002230 <UART_SetConfig+0x118>)
 80021a6:	fba2 2303 	umull	r2, r3, r2, r3
 80021aa:	095b      	lsrs	r3, r3, #5
 80021ac:	0119      	lsls	r1, r3, #4
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	4613      	mov	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	009a      	lsls	r2, r3, #2
 80021b8:	441a      	add	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80021c4:	4b1a      	ldr	r3, [pc, #104]	; (8002230 <UART_SetConfig+0x118>)
 80021c6:	fba3 0302 	umull	r0, r3, r3, r2
 80021ca:	095b      	lsrs	r3, r3, #5
 80021cc:	2064      	movs	r0, #100	; 0x64
 80021ce:	fb00 f303 	mul.w	r3, r0, r3
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	011b      	lsls	r3, r3, #4
 80021d6:	3332      	adds	r3, #50	; 0x32
 80021d8:	4a15      	ldr	r2, [pc, #84]	; (8002230 <UART_SetConfig+0x118>)
 80021da:	fba2 2303 	umull	r2, r3, r2, r3
 80021de:	095b      	lsrs	r3, r3, #5
 80021e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021e4:	4419      	add	r1, r3
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	4613      	mov	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	009a      	lsls	r2, r3, #2
 80021f0:	441a      	add	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80021fc:	4b0c      	ldr	r3, [pc, #48]	; (8002230 <UART_SetConfig+0x118>)
 80021fe:	fba3 0302 	umull	r0, r3, r3, r2
 8002202:	095b      	lsrs	r3, r3, #5
 8002204:	2064      	movs	r0, #100	; 0x64
 8002206:	fb00 f303 	mul.w	r3, r0, r3
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	011b      	lsls	r3, r3, #4
 800220e:	3332      	adds	r3, #50	; 0x32
 8002210:	4a07      	ldr	r2, [pc, #28]	; (8002230 <UART_SetConfig+0x118>)
 8002212:	fba2 2303 	umull	r2, r3, r2, r3
 8002216:	095b      	lsrs	r3, r3, #5
 8002218:	f003 020f 	and.w	r2, r3, #15
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	440a      	add	r2, r1
 8002222:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002224:	bf00      	nop
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40013800 	.word	0x40013800
 8002230:	51eb851f 	.word	0x51eb851f

08002234 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e016      	b.n	8002274 <HAL_WWDG_Init+0x40>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7fe fa08 	bl	800065c <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68da      	ldr	r2, [r3, #12]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002258:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691a      	ldr	r2, [r3, #16]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	ea42 0103 	orr.w	r1, r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	430a      	orrs	r2, r1
 8002270:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <HAL_WWDG_Refresh>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Write to WWDG CR the WWDG Counter value to refresh with */
  WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	68d2      	ldr	r2, [r2, #12]
 800228c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	bc80      	pop	{r7}
 8002298:	4770      	bx	lr

0800229a <HAL_WWDG_IRQHandler>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022b0:	d10e      	bne.n	80022d0 <HAL_WWDG_IRQHandler+0x36>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d107      	bne.n	80022d0 <HAL_WWDG_IRQHandler+0x36>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f06f 0201 	mvn.w	r2, #1
 80022c8:	609a      	str	r2, [r3, #8]
#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
#else
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 f804 	bl	80022d8 <HAL_WWDG_EarlyWakeupCallback>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
    }
  }
}
 80022d0:	bf00      	nop
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <HAL_WWDG_EarlyWakeupCallback>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
__weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  UNUSED(hwwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_WWDG_EarlyWakeupCallback could be implemented in the user file
   */
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bc80      	pop	{r7}
 80022e8:	4770      	bx	lr
	...

080022ec <siprintf>:
 80022ec:	b40e      	push	{r1, r2, r3}
 80022ee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80022f2:	b500      	push	{lr}
 80022f4:	b09c      	sub	sp, #112	; 0x70
 80022f6:	ab1d      	add	r3, sp, #116	; 0x74
 80022f8:	9002      	str	r0, [sp, #8]
 80022fa:	9006      	str	r0, [sp, #24]
 80022fc:	9107      	str	r1, [sp, #28]
 80022fe:	9104      	str	r1, [sp, #16]
 8002300:	4808      	ldr	r0, [pc, #32]	; (8002324 <siprintf+0x38>)
 8002302:	4909      	ldr	r1, [pc, #36]	; (8002328 <siprintf+0x3c>)
 8002304:	f853 2b04 	ldr.w	r2, [r3], #4
 8002308:	9105      	str	r1, [sp, #20]
 800230a:	6800      	ldr	r0, [r0, #0]
 800230c:	a902      	add	r1, sp, #8
 800230e:	9301      	str	r3, [sp, #4]
 8002310:	f000 f98e 	bl	8002630 <_svfiprintf_r>
 8002314:	2200      	movs	r2, #0
 8002316:	9b02      	ldr	r3, [sp, #8]
 8002318:	701a      	strb	r2, [r3, #0]
 800231a:	b01c      	add	sp, #112	; 0x70
 800231c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002320:	b003      	add	sp, #12
 8002322:	4770      	bx	lr
 8002324:	20000058 	.word	0x20000058
 8002328:	ffff0208 	.word	0xffff0208

0800232c <memset>:
 800232c:	4603      	mov	r3, r0
 800232e:	4402      	add	r2, r0
 8002330:	4293      	cmp	r3, r2
 8002332:	d100      	bne.n	8002336 <memset+0xa>
 8002334:	4770      	bx	lr
 8002336:	f803 1b01 	strb.w	r1, [r3], #1
 800233a:	e7f9      	b.n	8002330 <memset+0x4>

0800233c <__errno>:
 800233c:	4b01      	ldr	r3, [pc, #4]	; (8002344 <__errno+0x8>)
 800233e:	6818      	ldr	r0, [r3, #0]
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	20000058 	.word	0x20000058

08002348 <__libc_init_array>:
 8002348:	b570      	push	{r4, r5, r6, lr}
 800234a:	2600      	movs	r6, #0
 800234c:	4d0c      	ldr	r5, [pc, #48]	; (8002380 <__libc_init_array+0x38>)
 800234e:	4c0d      	ldr	r4, [pc, #52]	; (8002384 <__libc_init_array+0x3c>)
 8002350:	1b64      	subs	r4, r4, r5
 8002352:	10a4      	asrs	r4, r4, #2
 8002354:	42a6      	cmp	r6, r4
 8002356:	d109      	bne.n	800236c <__libc_init_array+0x24>
 8002358:	f000 fc7a 	bl	8002c50 <_init>
 800235c:	2600      	movs	r6, #0
 800235e:	4d0a      	ldr	r5, [pc, #40]	; (8002388 <__libc_init_array+0x40>)
 8002360:	4c0a      	ldr	r4, [pc, #40]	; (800238c <__libc_init_array+0x44>)
 8002362:	1b64      	subs	r4, r4, r5
 8002364:	10a4      	asrs	r4, r4, #2
 8002366:	42a6      	cmp	r6, r4
 8002368:	d105      	bne.n	8002376 <__libc_init_array+0x2e>
 800236a:	bd70      	pop	{r4, r5, r6, pc}
 800236c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002370:	4798      	blx	r3
 8002372:	3601      	adds	r6, #1
 8002374:	e7ee      	b.n	8002354 <__libc_init_array+0xc>
 8002376:	f855 3b04 	ldr.w	r3, [r5], #4
 800237a:	4798      	blx	r3
 800237c:	3601      	adds	r6, #1
 800237e:	e7f2      	b.n	8002366 <__libc_init_array+0x1e>
 8002380:	08002cdc 	.word	0x08002cdc
 8002384:	08002cdc 	.word	0x08002cdc
 8002388:	08002cdc 	.word	0x08002cdc
 800238c:	08002ce0 	.word	0x08002ce0

08002390 <__retarget_lock_acquire_recursive>:
 8002390:	4770      	bx	lr

08002392 <__retarget_lock_release_recursive>:
 8002392:	4770      	bx	lr

08002394 <_free_r>:
 8002394:	b538      	push	{r3, r4, r5, lr}
 8002396:	4605      	mov	r5, r0
 8002398:	2900      	cmp	r1, #0
 800239a:	d040      	beq.n	800241e <_free_r+0x8a>
 800239c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80023a0:	1f0c      	subs	r4, r1, #4
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	bfb8      	it	lt
 80023a6:	18e4      	addlt	r4, r4, r3
 80023a8:	f000 f8dc 	bl	8002564 <__malloc_lock>
 80023ac:	4a1c      	ldr	r2, [pc, #112]	; (8002420 <_free_r+0x8c>)
 80023ae:	6813      	ldr	r3, [r2, #0]
 80023b0:	b933      	cbnz	r3, 80023c0 <_free_r+0x2c>
 80023b2:	6063      	str	r3, [r4, #4]
 80023b4:	6014      	str	r4, [r2, #0]
 80023b6:	4628      	mov	r0, r5
 80023b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80023bc:	f000 b8d8 	b.w	8002570 <__malloc_unlock>
 80023c0:	42a3      	cmp	r3, r4
 80023c2:	d908      	bls.n	80023d6 <_free_r+0x42>
 80023c4:	6820      	ldr	r0, [r4, #0]
 80023c6:	1821      	adds	r1, r4, r0
 80023c8:	428b      	cmp	r3, r1
 80023ca:	bf01      	itttt	eq
 80023cc:	6819      	ldreq	r1, [r3, #0]
 80023ce:	685b      	ldreq	r3, [r3, #4]
 80023d0:	1809      	addeq	r1, r1, r0
 80023d2:	6021      	streq	r1, [r4, #0]
 80023d4:	e7ed      	b.n	80023b2 <_free_r+0x1e>
 80023d6:	461a      	mov	r2, r3
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	b10b      	cbz	r3, 80023e0 <_free_r+0x4c>
 80023dc:	42a3      	cmp	r3, r4
 80023de:	d9fa      	bls.n	80023d6 <_free_r+0x42>
 80023e0:	6811      	ldr	r1, [r2, #0]
 80023e2:	1850      	adds	r0, r2, r1
 80023e4:	42a0      	cmp	r0, r4
 80023e6:	d10b      	bne.n	8002400 <_free_r+0x6c>
 80023e8:	6820      	ldr	r0, [r4, #0]
 80023ea:	4401      	add	r1, r0
 80023ec:	1850      	adds	r0, r2, r1
 80023ee:	4283      	cmp	r3, r0
 80023f0:	6011      	str	r1, [r2, #0]
 80023f2:	d1e0      	bne.n	80023b6 <_free_r+0x22>
 80023f4:	6818      	ldr	r0, [r3, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	4408      	add	r0, r1
 80023fa:	6010      	str	r0, [r2, #0]
 80023fc:	6053      	str	r3, [r2, #4]
 80023fe:	e7da      	b.n	80023b6 <_free_r+0x22>
 8002400:	d902      	bls.n	8002408 <_free_r+0x74>
 8002402:	230c      	movs	r3, #12
 8002404:	602b      	str	r3, [r5, #0]
 8002406:	e7d6      	b.n	80023b6 <_free_r+0x22>
 8002408:	6820      	ldr	r0, [r4, #0]
 800240a:	1821      	adds	r1, r4, r0
 800240c:	428b      	cmp	r3, r1
 800240e:	bf01      	itttt	eq
 8002410:	6819      	ldreq	r1, [r3, #0]
 8002412:	685b      	ldreq	r3, [r3, #4]
 8002414:	1809      	addeq	r1, r1, r0
 8002416:	6021      	streq	r1, [r4, #0]
 8002418:	6063      	str	r3, [r4, #4]
 800241a:	6054      	str	r4, [r2, #4]
 800241c:	e7cb      	b.n	80023b6 <_free_r+0x22>
 800241e:	bd38      	pop	{r3, r4, r5, pc}
 8002420:	20000260 	.word	0x20000260

08002424 <sbrk_aligned>:
 8002424:	b570      	push	{r4, r5, r6, lr}
 8002426:	4e0e      	ldr	r6, [pc, #56]	; (8002460 <sbrk_aligned+0x3c>)
 8002428:	460c      	mov	r4, r1
 800242a:	6831      	ldr	r1, [r6, #0]
 800242c:	4605      	mov	r5, r0
 800242e:	b911      	cbnz	r1, 8002436 <sbrk_aligned+0x12>
 8002430:	f000 fbaa 	bl	8002b88 <_sbrk_r>
 8002434:	6030      	str	r0, [r6, #0]
 8002436:	4621      	mov	r1, r4
 8002438:	4628      	mov	r0, r5
 800243a:	f000 fba5 	bl	8002b88 <_sbrk_r>
 800243e:	1c43      	adds	r3, r0, #1
 8002440:	d00a      	beq.n	8002458 <sbrk_aligned+0x34>
 8002442:	1cc4      	adds	r4, r0, #3
 8002444:	f024 0403 	bic.w	r4, r4, #3
 8002448:	42a0      	cmp	r0, r4
 800244a:	d007      	beq.n	800245c <sbrk_aligned+0x38>
 800244c:	1a21      	subs	r1, r4, r0
 800244e:	4628      	mov	r0, r5
 8002450:	f000 fb9a 	bl	8002b88 <_sbrk_r>
 8002454:	3001      	adds	r0, #1
 8002456:	d101      	bne.n	800245c <sbrk_aligned+0x38>
 8002458:	f04f 34ff 	mov.w	r4, #4294967295
 800245c:	4620      	mov	r0, r4
 800245e:	bd70      	pop	{r4, r5, r6, pc}
 8002460:	20000264 	.word	0x20000264

08002464 <_malloc_r>:
 8002464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002468:	1ccd      	adds	r5, r1, #3
 800246a:	f025 0503 	bic.w	r5, r5, #3
 800246e:	3508      	adds	r5, #8
 8002470:	2d0c      	cmp	r5, #12
 8002472:	bf38      	it	cc
 8002474:	250c      	movcc	r5, #12
 8002476:	2d00      	cmp	r5, #0
 8002478:	4607      	mov	r7, r0
 800247a:	db01      	blt.n	8002480 <_malloc_r+0x1c>
 800247c:	42a9      	cmp	r1, r5
 800247e:	d905      	bls.n	800248c <_malloc_r+0x28>
 8002480:	230c      	movs	r3, #12
 8002482:	2600      	movs	r6, #0
 8002484:	603b      	str	r3, [r7, #0]
 8002486:	4630      	mov	r0, r6
 8002488:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800248c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002560 <_malloc_r+0xfc>
 8002490:	f000 f868 	bl	8002564 <__malloc_lock>
 8002494:	f8d8 3000 	ldr.w	r3, [r8]
 8002498:	461c      	mov	r4, r3
 800249a:	bb5c      	cbnz	r4, 80024f4 <_malloc_r+0x90>
 800249c:	4629      	mov	r1, r5
 800249e:	4638      	mov	r0, r7
 80024a0:	f7ff ffc0 	bl	8002424 <sbrk_aligned>
 80024a4:	1c43      	adds	r3, r0, #1
 80024a6:	4604      	mov	r4, r0
 80024a8:	d155      	bne.n	8002556 <_malloc_r+0xf2>
 80024aa:	f8d8 4000 	ldr.w	r4, [r8]
 80024ae:	4626      	mov	r6, r4
 80024b0:	2e00      	cmp	r6, #0
 80024b2:	d145      	bne.n	8002540 <_malloc_r+0xdc>
 80024b4:	2c00      	cmp	r4, #0
 80024b6:	d048      	beq.n	800254a <_malloc_r+0xe6>
 80024b8:	6823      	ldr	r3, [r4, #0]
 80024ba:	4631      	mov	r1, r6
 80024bc:	4638      	mov	r0, r7
 80024be:	eb04 0903 	add.w	r9, r4, r3
 80024c2:	f000 fb61 	bl	8002b88 <_sbrk_r>
 80024c6:	4581      	cmp	r9, r0
 80024c8:	d13f      	bne.n	800254a <_malloc_r+0xe6>
 80024ca:	6821      	ldr	r1, [r4, #0]
 80024cc:	4638      	mov	r0, r7
 80024ce:	1a6d      	subs	r5, r5, r1
 80024d0:	4629      	mov	r1, r5
 80024d2:	f7ff ffa7 	bl	8002424 <sbrk_aligned>
 80024d6:	3001      	adds	r0, #1
 80024d8:	d037      	beq.n	800254a <_malloc_r+0xe6>
 80024da:	6823      	ldr	r3, [r4, #0]
 80024dc:	442b      	add	r3, r5
 80024de:	6023      	str	r3, [r4, #0]
 80024e0:	f8d8 3000 	ldr.w	r3, [r8]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d038      	beq.n	800255a <_malloc_r+0xf6>
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	42a2      	cmp	r2, r4
 80024ec:	d12b      	bne.n	8002546 <_malloc_r+0xe2>
 80024ee:	2200      	movs	r2, #0
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	e00f      	b.n	8002514 <_malloc_r+0xb0>
 80024f4:	6822      	ldr	r2, [r4, #0]
 80024f6:	1b52      	subs	r2, r2, r5
 80024f8:	d41f      	bmi.n	800253a <_malloc_r+0xd6>
 80024fa:	2a0b      	cmp	r2, #11
 80024fc:	d917      	bls.n	800252e <_malloc_r+0xca>
 80024fe:	1961      	adds	r1, r4, r5
 8002500:	42a3      	cmp	r3, r4
 8002502:	6025      	str	r5, [r4, #0]
 8002504:	bf18      	it	ne
 8002506:	6059      	strne	r1, [r3, #4]
 8002508:	6863      	ldr	r3, [r4, #4]
 800250a:	bf08      	it	eq
 800250c:	f8c8 1000 	streq.w	r1, [r8]
 8002510:	5162      	str	r2, [r4, r5]
 8002512:	604b      	str	r3, [r1, #4]
 8002514:	4638      	mov	r0, r7
 8002516:	f104 060b 	add.w	r6, r4, #11
 800251a:	f000 f829 	bl	8002570 <__malloc_unlock>
 800251e:	f026 0607 	bic.w	r6, r6, #7
 8002522:	1d23      	adds	r3, r4, #4
 8002524:	1af2      	subs	r2, r6, r3
 8002526:	d0ae      	beq.n	8002486 <_malloc_r+0x22>
 8002528:	1b9b      	subs	r3, r3, r6
 800252a:	50a3      	str	r3, [r4, r2]
 800252c:	e7ab      	b.n	8002486 <_malloc_r+0x22>
 800252e:	42a3      	cmp	r3, r4
 8002530:	6862      	ldr	r2, [r4, #4]
 8002532:	d1dd      	bne.n	80024f0 <_malloc_r+0x8c>
 8002534:	f8c8 2000 	str.w	r2, [r8]
 8002538:	e7ec      	b.n	8002514 <_malloc_r+0xb0>
 800253a:	4623      	mov	r3, r4
 800253c:	6864      	ldr	r4, [r4, #4]
 800253e:	e7ac      	b.n	800249a <_malloc_r+0x36>
 8002540:	4634      	mov	r4, r6
 8002542:	6876      	ldr	r6, [r6, #4]
 8002544:	e7b4      	b.n	80024b0 <_malloc_r+0x4c>
 8002546:	4613      	mov	r3, r2
 8002548:	e7cc      	b.n	80024e4 <_malloc_r+0x80>
 800254a:	230c      	movs	r3, #12
 800254c:	4638      	mov	r0, r7
 800254e:	603b      	str	r3, [r7, #0]
 8002550:	f000 f80e 	bl	8002570 <__malloc_unlock>
 8002554:	e797      	b.n	8002486 <_malloc_r+0x22>
 8002556:	6025      	str	r5, [r4, #0]
 8002558:	e7dc      	b.n	8002514 <_malloc_r+0xb0>
 800255a:	605b      	str	r3, [r3, #4]
 800255c:	deff      	udf	#255	; 0xff
 800255e:	bf00      	nop
 8002560:	20000260 	.word	0x20000260

08002564 <__malloc_lock>:
 8002564:	4801      	ldr	r0, [pc, #4]	; (800256c <__malloc_lock+0x8>)
 8002566:	f7ff bf13 	b.w	8002390 <__retarget_lock_acquire_recursive>
 800256a:	bf00      	nop
 800256c:	2000025c 	.word	0x2000025c

08002570 <__malloc_unlock>:
 8002570:	4801      	ldr	r0, [pc, #4]	; (8002578 <__malloc_unlock+0x8>)
 8002572:	f7ff bf0e 	b.w	8002392 <__retarget_lock_release_recursive>
 8002576:	bf00      	nop
 8002578:	2000025c 	.word	0x2000025c

0800257c <__ssputs_r>:
 800257c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002580:	461f      	mov	r7, r3
 8002582:	688e      	ldr	r6, [r1, #8]
 8002584:	4682      	mov	sl, r0
 8002586:	42be      	cmp	r6, r7
 8002588:	460c      	mov	r4, r1
 800258a:	4690      	mov	r8, r2
 800258c:	680b      	ldr	r3, [r1, #0]
 800258e:	d82c      	bhi.n	80025ea <__ssputs_r+0x6e>
 8002590:	898a      	ldrh	r2, [r1, #12]
 8002592:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002596:	d026      	beq.n	80025e6 <__ssputs_r+0x6a>
 8002598:	6965      	ldr	r5, [r4, #20]
 800259a:	6909      	ldr	r1, [r1, #16]
 800259c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80025a0:	eba3 0901 	sub.w	r9, r3, r1
 80025a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80025a8:	1c7b      	adds	r3, r7, #1
 80025aa:	444b      	add	r3, r9
 80025ac:	106d      	asrs	r5, r5, #1
 80025ae:	429d      	cmp	r5, r3
 80025b0:	bf38      	it	cc
 80025b2:	461d      	movcc	r5, r3
 80025b4:	0553      	lsls	r3, r2, #21
 80025b6:	d527      	bpl.n	8002608 <__ssputs_r+0x8c>
 80025b8:	4629      	mov	r1, r5
 80025ba:	f7ff ff53 	bl	8002464 <_malloc_r>
 80025be:	4606      	mov	r6, r0
 80025c0:	b360      	cbz	r0, 800261c <__ssputs_r+0xa0>
 80025c2:	464a      	mov	r2, r9
 80025c4:	6921      	ldr	r1, [r4, #16]
 80025c6:	f000 fafd 	bl	8002bc4 <memcpy>
 80025ca:	89a3      	ldrh	r3, [r4, #12]
 80025cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80025d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025d4:	81a3      	strh	r3, [r4, #12]
 80025d6:	6126      	str	r6, [r4, #16]
 80025d8:	444e      	add	r6, r9
 80025da:	6026      	str	r6, [r4, #0]
 80025dc:	463e      	mov	r6, r7
 80025de:	6165      	str	r5, [r4, #20]
 80025e0:	eba5 0509 	sub.w	r5, r5, r9
 80025e4:	60a5      	str	r5, [r4, #8]
 80025e6:	42be      	cmp	r6, r7
 80025e8:	d900      	bls.n	80025ec <__ssputs_r+0x70>
 80025ea:	463e      	mov	r6, r7
 80025ec:	4632      	mov	r2, r6
 80025ee:	4641      	mov	r1, r8
 80025f0:	6820      	ldr	r0, [r4, #0]
 80025f2:	f000 faaf 	bl	8002b54 <memmove>
 80025f6:	2000      	movs	r0, #0
 80025f8:	68a3      	ldr	r3, [r4, #8]
 80025fa:	1b9b      	subs	r3, r3, r6
 80025fc:	60a3      	str	r3, [r4, #8]
 80025fe:	6823      	ldr	r3, [r4, #0]
 8002600:	4433      	add	r3, r6
 8002602:	6023      	str	r3, [r4, #0]
 8002604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002608:	462a      	mov	r2, r5
 800260a:	f000 fae9 	bl	8002be0 <_realloc_r>
 800260e:	4606      	mov	r6, r0
 8002610:	2800      	cmp	r0, #0
 8002612:	d1e0      	bne.n	80025d6 <__ssputs_r+0x5a>
 8002614:	4650      	mov	r0, sl
 8002616:	6921      	ldr	r1, [r4, #16]
 8002618:	f7ff febc 	bl	8002394 <_free_r>
 800261c:	230c      	movs	r3, #12
 800261e:	f8ca 3000 	str.w	r3, [sl]
 8002622:	89a3      	ldrh	r3, [r4, #12]
 8002624:	f04f 30ff 	mov.w	r0, #4294967295
 8002628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800262c:	81a3      	strh	r3, [r4, #12]
 800262e:	e7e9      	b.n	8002604 <__ssputs_r+0x88>

08002630 <_svfiprintf_r>:
 8002630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002634:	4698      	mov	r8, r3
 8002636:	898b      	ldrh	r3, [r1, #12]
 8002638:	4607      	mov	r7, r0
 800263a:	061b      	lsls	r3, r3, #24
 800263c:	460d      	mov	r5, r1
 800263e:	4614      	mov	r4, r2
 8002640:	b09d      	sub	sp, #116	; 0x74
 8002642:	d50e      	bpl.n	8002662 <_svfiprintf_r+0x32>
 8002644:	690b      	ldr	r3, [r1, #16]
 8002646:	b963      	cbnz	r3, 8002662 <_svfiprintf_r+0x32>
 8002648:	2140      	movs	r1, #64	; 0x40
 800264a:	f7ff ff0b 	bl	8002464 <_malloc_r>
 800264e:	6028      	str	r0, [r5, #0]
 8002650:	6128      	str	r0, [r5, #16]
 8002652:	b920      	cbnz	r0, 800265e <_svfiprintf_r+0x2e>
 8002654:	230c      	movs	r3, #12
 8002656:	603b      	str	r3, [r7, #0]
 8002658:	f04f 30ff 	mov.w	r0, #4294967295
 800265c:	e0d0      	b.n	8002800 <_svfiprintf_r+0x1d0>
 800265e:	2340      	movs	r3, #64	; 0x40
 8002660:	616b      	str	r3, [r5, #20]
 8002662:	2300      	movs	r3, #0
 8002664:	9309      	str	r3, [sp, #36]	; 0x24
 8002666:	2320      	movs	r3, #32
 8002668:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800266c:	2330      	movs	r3, #48	; 0x30
 800266e:	f04f 0901 	mov.w	r9, #1
 8002672:	f8cd 800c 	str.w	r8, [sp, #12]
 8002676:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8002818 <_svfiprintf_r+0x1e8>
 800267a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800267e:	4623      	mov	r3, r4
 8002680:	469a      	mov	sl, r3
 8002682:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002686:	b10a      	cbz	r2, 800268c <_svfiprintf_r+0x5c>
 8002688:	2a25      	cmp	r2, #37	; 0x25
 800268a:	d1f9      	bne.n	8002680 <_svfiprintf_r+0x50>
 800268c:	ebba 0b04 	subs.w	fp, sl, r4
 8002690:	d00b      	beq.n	80026aa <_svfiprintf_r+0x7a>
 8002692:	465b      	mov	r3, fp
 8002694:	4622      	mov	r2, r4
 8002696:	4629      	mov	r1, r5
 8002698:	4638      	mov	r0, r7
 800269a:	f7ff ff6f 	bl	800257c <__ssputs_r>
 800269e:	3001      	adds	r0, #1
 80026a0:	f000 80a9 	beq.w	80027f6 <_svfiprintf_r+0x1c6>
 80026a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80026a6:	445a      	add	r2, fp
 80026a8:	9209      	str	r2, [sp, #36]	; 0x24
 80026aa:	f89a 3000 	ldrb.w	r3, [sl]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f000 80a1 	beq.w	80027f6 <_svfiprintf_r+0x1c6>
 80026b4:	2300      	movs	r3, #0
 80026b6:	f04f 32ff 	mov.w	r2, #4294967295
 80026ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80026be:	f10a 0a01 	add.w	sl, sl, #1
 80026c2:	9304      	str	r3, [sp, #16]
 80026c4:	9307      	str	r3, [sp, #28]
 80026c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80026ca:	931a      	str	r3, [sp, #104]	; 0x68
 80026cc:	4654      	mov	r4, sl
 80026ce:	2205      	movs	r2, #5
 80026d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80026d4:	4850      	ldr	r0, [pc, #320]	; (8002818 <_svfiprintf_r+0x1e8>)
 80026d6:	f000 fa67 	bl	8002ba8 <memchr>
 80026da:	9a04      	ldr	r2, [sp, #16]
 80026dc:	b9d8      	cbnz	r0, 8002716 <_svfiprintf_r+0xe6>
 80026de:	06d0      	lsls	r0, r2, #27
 80026e0:	bf44      	itt	mi
 80026e2:	2320      	movmi	r3, #32
 80026e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80026e8:	0711      	lsls	r1, r2, #28
 80026ea:	bf44      	itt	mi
 80026ec:	232b      	movmi	r3, #43	; 0x2b
 80026ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80026f2:	f89a 3000 	ldrb.w	r3, [sl]
 80026f6:	2b2a      	cmp	r3, #42	; 0x2a
 80026f8:	d015      	beq.n	8002726 <_svfiprintf_r+0xf6>
 80026fa:	4654      	mov	r4, sl
 80026fc:	2000      	movs	r0, #0
 80026fe:	f04f 0c0a 	mov.w	ip, #10
 8002702:	9a07      	ldr	r2, [sp, #28]
 8002704:	4621      	mov	r1, r4
 8002706:	f811 3b01 	ldrb.w	r3, [r1], #1
 800270a:	3b30      	subs	r3, #48	; 0x30
 800270c:	2b09      	cmp	r3, #9
 800270e:	d94d      	bls.n	80027ac <_svfiprintf_r+0x17c>
 8002710:	b1b0      	cbz	r0, 8002740 <_svfiprintf_r+0x110>
 8002712:	9207      	str	r2, [sp, #28]
 8002714:	e014      	b.n	8002740 <_svfiprintf_r+0x110>
 8002716:	eba0 0308 	sub.w	r3, r0, r8
 800271a:	fa09 f303 	lsl.w	r3, r9, r3
 800271e:	4313      	orrs	r3, r2
 8002720:	46a2      	mov	sl, r4
 8002722:	9304      	str	r3, [sp, #16]
 8002724:	e7d2      	b.n	80026cc <_svfiprintf_r+0x9c>
 8002726:	9b03      	ldr	r3, [sp, #12]
 8002728:	1d19      	adds	r1, r3, #4
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	9103      	str	r1, [sp, #12]
 800272e:	2b00      	cmp	r3, #0
 8002730:	bfbb      	ittet	lt
 8002732:	425b      	neglt	r3, r3
 8002734:	f042 0202 	orrlt.w	r2, r2, #2
 8002738:	9307      	strge	r3, [sp, #28]
 800273a:	9307      	strlt	r3, [sp, #28]
 800273c:	bfb8      	it	lt
 800273e:	9204      	strlt	r2, [sp, #16]
 8002740:	7823      	ldrb	r3, [r4, #0]
 8002742:	2b2e      	cmp	r3, #46	; 0x2e
 8002744:	d10c      	bne.n	8002760 <_svfiprintf_r+0x130>
 8002746:	7863      	ldrb	r3, [r4, #1]
 8002748:	2b2a      	cmp	r3, #42	; 0x2a
 800274a:	d134      	bne.n	80027b6 <_svfiprintf_r+0x186>
 800274c:	9b03      	ldr	r3, [sp, #12]
 800274e:	3402      	adds	r4, #2
 8002750:	1d1a      	adds	r2, r3, #4
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	9203      	str	r2, [sp, #12]
 8002756:	2b00      	cmp	r3, #0
 8002758:	bfb8      	it	lt
 800275a:	f04f 33ff 	movlt.w	r3, #4294967295
 800275e:	9305      	str	r3, [sp, #20]
 8002760:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800281c <_svfiprintf_r+0x1ec>
 8002764:	2203      	movs	r2, #3
 8002766:	4650      	mov	r0, sl
 8002768:	7821      	ldrb	r1, [r4, #0]
 800276a:	f000 fa1d 	bl	8002ba8 <memchr>
 800276e:	b138      	cbz	r0, 8002780 <_svfiprintf_r+0x150>
 8002770:	2240      	movs	r2, #64	; 0x40
 8002772:	9b04      	ldr	r3, [sp, #16]
 8002774:	eba0 000a 	sub.w	r0, r0, sl
 8002778:	4082      	lsls	r2, r0
 800277a:	4313      	orrs	r3, r2
 800277c:	3401      	adds	r4, #1
 800277e:	9304      	str	r3, [sp, #16]
 8002780:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002784:	2206      	movs	r2, #6
 8002786:	4826      	ldr	r0, [pc, #152]	; (8002820 <_svfiprintf_r+0x1f0>)
 8002788:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800278c:	f000 fa0c 	bl	8002ba8 <memchr>
 8002790:	2800      	cmp	r0, #0
 8002792:	d038      	beq.n	8002806 <_svfiprintf_r+0x1d6>
 8002794:	4b23      	ldr	r3, [pc, #140]	; (8002824 <_svfiprintf_r+0x1f4>)
 8002796:	bb1b      	cbnz	r3, 80027e0 <_svfiprintf_r+0x1b0>
 8002798:	9b03      	ldr	r3, [sp, #12]
 800279a:	3307      	adds	r3, #7
 800279c:	f023 0307 	bic.w	r3, r3, #7
 80027a0:	3308      	adds	r3, #8
 80027a2:	9303      	str	r3, [sp, #12]
 80027a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80027a6:	4433      	add	r3, r6
 80027a8:	9309      	str	r3, [sp, #36]	; 0x24
 80027aa:	e768      	b.n	800267e <_svfiprintf_r+0x4e>
 80027ac:	460c      	mov	r4, r1
 80027ae:	2001      	movs	r0, #1
 80027b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80027b4:	e7a6      	b.n	8002704 <_svfiprintf_r+0xd4>
 80027b6:	2300      	movs	r3, #0
 80027b8:	f04f 0c0a 	mov.w	ip, #10
 80027bc:	4619      	mov	r1, r3
 80027be:	3401      	adds	r4, #1
 80027c0:	9305      	str	r3, [sp, #20]
 80027c2:	4620      	mov	r0, r4
 80027c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80027c8:	3a30      	subs	r2, #48	; 0x30
 80027ca:	2a09      	cmp	r2, #9
 80027cc:	d903      	bls.n	80027d6 <_svfiprintf_r+0x1a6>
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d0c6      	beq.n	8002760 <_svfiprintf_r+0x130>
 80027d2:	9105      	str	r1, [sp, #20]
 80027d4:	e7c4      	b.n	8002760 <_svfiprintf_r+0x130>
 80027d6:	4604      	mov	r4, r0
 80027d8:	2301      	movs	r3, #1
 80027da:	fb0c 2101 	mla	r1, ip, r1, r2
 80027de:	e7f0      	b.n	80027c2 <_svfiprintf_r+0x192>
 80027e0:	ab03      	add	r3, sp, #12
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	462a      	mov	r2, r5
 80027e6:	4638      	mov	r0, r7
 80027e8:	4b0f      	ldr	r3, [pc, #60]	; (8002828 <_svfiprintf_r+0x1f8>)
 80027ea:	a904      	add	r1, sp, #16
 80027ec:	f3af 8000 	nop.w
 80027f0:	1c42      	adds	r2, r0, #1
 80027f2:	4606      	mov	r6, r0
 80027f4:	d1d6      	bne.n	80027a4 <_svfiprintf_r+0x174>
 80027f6:	89ab      	ldrh	r3, [r5, #12]
 80027f8:	065b      	lsls	r3, r3, #25
 80027fa:	f53f af2d 	bmi.w	8002658 <_svfiprintf_r+0x28>
 80027fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002800:	b01d      	add	sp, #116	; 0x74
 8002802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002806:	ab03      	add	r3, sp, #12
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	462a      	mov	r2, r5
 800280c:	4638      	mov	r0, r7
 800280e:	4b06      	ldr	r3, [pc, #24]	; (8002828 <_svfiprintf_r+0x1f8>)
 8002810:	a904      	add	r1, sp, #16
 8002812:	f000 f87d 	bl	8002910 <_printf_i>
 8002816:	e7eb      	b.n	80027f0 <_svfiprintf_r+0x1c0>
 8002818:	08002ca8 	.word	0x08002ca8
 800281c:	08002cae 	.word	0x08002cae
 8002820:	08002cb2 	.word	0x08002cb2
 8002824:	00000000 	.word	0x00000000
 8002828:	0800257d 	.word	0x0800257d

0800282c <_printf_common>:
 800282c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002830:	4616      	mov	r6, r2
 8002832:	4699      	mov	r9, r3
 8002834:	688a      	ldr	r2, [r1, #8]
 8002836:	690b      	ldr	r3, [r1, #16]
 8002838:	4607      	mov	r7, r0
 800283a:	4293      	cmp	r3, r2
 800283c:	bfb8      	it	lt
 800283e:	4613      	movlt	r3, r2
 8002840:	6033      	str	r3, [r6, #0]
 8002842:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002846:	460c      	mov	r4, r1
 8002848:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800284c:	b10a      	cbz	r2, 8002852 <_printf_common+0x26>
 800284e:	3301      	adds	r3, #1
 8002850:	6033      	str	r3, [r6, #0]
 8002852:	6823      	ldr	r3, [r4, #0]
 8002854:	0699      	lsls	r1, r3, #26
 8002856:	bf42      	ittt	mi
 8002858:	6833      	ldrmi	r3, [r6, #0]
 800285a:	3302      	addmi	r3, #2
 800285c:	6033      	strmi	r3, [r6, #0]
 800285e:	6825      	ldr	r5, [r4, #0]
 8002860:	f015 0506 	ands.w	r5, r5, #6
 8002864:	d106      	bne.n	8002874 <_printf_common+0x48>
 8002866:	f104 0a19 	add.w	sl, r4, #25
 800286a:	68e3      	ldr	r3, [r4, #12]
 800286c:	6832      	ldr	r2, [r6, #0]
 800286e:	1a9b      	subs	r3, r3, r2
 8002870:	42ab      	cmp	r3, r5
 8002872:	dc2b      	bgt.n	80028cc <_printf_common+0xa0>
 8002874:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002878:	1e13      	subs	r3, r2, #0
 800287a:	6822      	ldr	r2, [r4, #0]
 800287c:	bf18      	it	ne
 800287e:	2301      	movne	r3, #1
 8002880:	0692      	lsls	r2, r2, #26
 8002882:	d430      	bmi.n	80028e6 <_printf_common+0xba>
 8002884:	4649      	mov	r1, r9
 8002886:	4638      	mov	r0, r7
 8002888:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800288c:	47c0      	blx	r8
 800288e:	3001      	adds	r0, #1
 8002890:	d023      	beq.n	80028da <_printf_common+0xae>
 8002892:	6823      	ldr	r3, [r4, #0]
 8002894:	6922      	ldr	r2, [r4, #16]
 8002896:	f003 0306 	and.w	r3, r3, #6
 800289a:	2b04      	cmp	r3, #4
 800289c:	bf14      	ite	ne
 800289e:	2500      	movne	r5, #0
 80028a0:	6833      	ldreq	r3, [r6, #0]
 80028a2:	f04f 0600 	mov.w	r6, #0
 80028a6:	bf08      	it	eq
 80028a8:	68e5      	ldreq	r5, [r4, #12]
 80028aa:	f104 041a 	add.w	r4, r4, #26
 80028ae:	bf08      	it	eq
 80028b0:	1aed      	subeq	r5, r5, r3
 80028b2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80028b6:	bf08      	it	eq
 80028b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80028bc:	4293      	cmp	r3, r2
 80028be:	bfc4      	itt	gt
 80028c0:	1a9b      	subgt	r3, r3, r2
 80028c2:	18ed      	addgt	r5, r5, r3
 80028c4:	42b5      	cmp	r5, r6
 80028c6:	d11a      	bne.n	80028fe <_printf_common+0xd2>
 80028c8:	2000      	movs	r0, #0
 80028ca:	e008      	b.n	80028de <_printf_common+0xb2>
 80028cc:	2301      	movs	r3, #1
 80028ce:	4652      	mov	r2, sl
 80028d0:	4649      	mov	r1, r9
 80028d2:	4638      	mov	r0, r7
 80028d4:	47c0      	blx	r8
 80028d6:	3001      	adds	r0, #1
 80028d8:	d103      	bne.n	80028e2 <_printf_common+0xb6>
 80028da:	f04f 30ff 	mov.w	r0, #4294967295
 80028de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028e2:	3501      	adds	r5, #1
 80028e4:	e7c1      	b.n	800286a <_printf_common+0x3e>
 80028e6:	2030      	movs	r0, #48	; 0x30
 80028e8:	18e1      	adds	r1, r4, r3
 80028ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80028ee:	1c5a      	adds	r2, r3, #1
 80028f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80028f4:	4422      	add	r2, r4
 80028f6:	3302      	adds	r3, #2
 80028f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80028fc:	e7c2      	b.n	8002884 <_printf_common+0x58>
 80028fe:	2301      	movs	r3, #1
 8002900:	4622      	mov	r2, r4
 8002902:	4649      	mov	r1, r9
 8002904:	4638      	mov	r0, r7
 8002906:	47c0      	blx	r8
 8002908:	3001      	adds	r0, #1
 800290a:	d0e6      	beq.n	80028da <_printf_common+0xae>
 800290c:	3601      	adds	r6, #1
 800290e:	e7d9      	b.n	80028c4 <_printf_common+0x98>

08002910 <_printf_i>:
 8002910:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002914:	7e0f      	ldrb	r7, [r1, #24]
 8002916:	4691      	mov	r9, r2
 8002918:	2f78      	cmp	r7, #120	; 0x78
 800291a:	4680      	mov	r8, r0
 800291c:	460c      	mov	r4, r1
 800291e:	469a      	mov	sl, r3
 8002920:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002922:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002926:	d807      	bhi.n	8002938 <_printf_i+0x28>
 8002928:	2f62      	cmp	r7, #98	; 0x62
 800292a:	d80a      	bhi.n	8002942 <_printf_i+0x32>
 800292c:	2f00      	cmp	r7, #0
 800292e:	f000 80d5 	beq.w	8002adc <_printf_i+0x1cc>
 8002932:	2f58      	cmp	r7, #88	; 0x58
 8002934:	f000 80c1 	beq.w	8002aba <_printf_i+0x1aa>
 8002938:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800293c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002940:	e03a      	b.n	80029b8 <_printf_i+0xa8>
 8002942:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002946:	2b15      	cmp	r3, #21
 8002948:	d8f6      	bhi.n	8002938 <_printf_i+0x28>
 800294a:	a101      	add	r1, pc, #4	; (adr r1, 8002950 <_printf_i+0x40>)
 800294c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002950:	080029a9 	.word	0x080029a9
 8002954:	080029bd 	.word	0x080029bd
 8002958:	08002939 	.word	0x08002939
 800295c:	08002939 	.word	0x08002939
 8002960:	08002939 	.word	0x08002939
 8002964:	08002939 	.word	0x08002939
 8002968:	080029bd 	.word	0x080029bd
 800296c:	08002939 	.word	0x08002939
 8002970:	08002939 	.word	0x08002939
 8002974:	08002939 	.word	0x08002939
 8002978:	08002939 	.word	0x08002939
 800297c:	08002ac3 	.word	0x08002ac3
 8002980:	080029e9 	.word	0x080029e9
 8002984:	08002a7d 	.word	0x08002a7d
 8002988:	08002939 	.word	0x08002939
 800298c:	08002939 	.word	0x08002939
 8002990:	08002ae5 	.word	0x08002ae5
 8002994:	08002939 	.word	0x08002939
 8002998:	080029e9 	.word	0x080029e9
 800299c:	08002939 	.word	0x08002939
 80029a0:	08002939 	.word	0x08002939
 80029a4:	08002a85 	.word	0x08002a85
 80029a8:	682b      	ldr	r3, [r5, #0]
 80029aa:	1d1a      	adds	r2, r3, #4
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	602a      	str	r2, [r5, #0]
 80029b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80029b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80029b8:	2301      	movs	r3, #1
 80029ba:	e0a0      	b.n	8002afe <_printf_i+0x1ee>
 80029bc:	6820      	ldr	r0, [r4, #0]
 80029be:	682b      	ldr	r3, [r5, #0]
 80029c0:	0607      	lsls	r7, r0, #24
 80029c2:	f103 0104 	add.w	r1, r3, #4
 80029c6:	6029      	str	r1, [r5, #0]
 80029c8:	d501      	bpl.n	80029ce <_printf_i+0xbe>
 80029ca:	681e      	ldr	r6, [r3, #0]
 80029cc:	e003      	b.n	80029d6 <_printf_i+0xc6>
 80029ce:	0646      	lsls	r6, r0, #25
 80029d0:	d5fb      	bpl.n	80029ca <_printf_i+0xba>
 80029d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80029d6:	2e00      	cmp	r6, #0
 80029d8:	da03      	bge.n	80029e2 <_printf_i+0xd2>
 80029da:	232d      	movs	r3, #45	; 0x2d
 80029dc:	4276      	negs	r6, r6
 80029de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029e2:	230a      	movs	r3, #10
 80029e4:	4859      	ldr	r0, [pc, #356]	; (8002b4c <_printf_i+0x23c>)
 80029e6:	e012      	b.n	8002a0e <_printf_i+0xfe>
 80029e8:	682b      	ldr	r3, [r5, #0]
 80029ea:	6820      	ldr	r0, [r4, #0]
 80029ec:	1d19      	adds	r1, r3, #4
 80029ee:	6029      	str	r1, [r5, #0]
 80029f0:	0605      	lsls	r5, r0, #24
 80029f2:	d501      	bpl.n	80029f8 <_printf_i+0xe8>
 80029f4:	681e      	ldr	r6, [r3, #0]
 80029f6:	e002      	b.n	80029fe <_printf_i+0xee>
 80029f8:	0641      	lsls	r1, r0, #25
 80029fa:	d5fb      	bpl.n	80029f4 <_printf_i+0xe4>
 80029fc:	881e      	ldrh	r6, [r3, #0]
 80029fe:	2f6f      	cmp	r7, #111	; 0x6f
 8002a00:	bf0c      	ite	eq
 8002a02:	2308      	moveq	r3, #8
 8002a04:	230a      	movne	r3, #10
 8002a06:	4851      	ldr	r0, [pc, #324]	; (8002b4c <_printf_i+0x23c>)
 8002a08:	2100      	movs	r1, #0
 8002a0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002a0e:	6865      	ldr	r5, [r4, #4]
 8002a10:	2d00      	cmp	r5, #0
 8002a12:	bfa8      	it	ge
 8002a14:	6821      	ldrge	r1, [r4, #0]
 8002a16:	60a5      	str	r5, [r4, #8]
 8002a18:	bfa4      	itt	ge
 8002a1a:	f021 0104 	bicge.w	r1, r1, #4
 8002a1e:	6021      	strge	r1, [r4, #0]
 8002a20:	b90e      	cbnz	r6, 8002a26 <_printf_i+0x116>
 8002a22:	2d00      	cmp	r5, #0
 8002a24:	d04b      	beq.n	8002abe <_printf_i+0x1ae>
 8002a26:	4615      	mov	r5, r2
 8002a28:	fbb6 f1f3 	udiv	r1, r6, r3
 8002a2c:	fb03 6711 	mls	r7, r3, r1, r6
 8002a30:	5dc7      	ldrb	r7, [r0, r7]
 8002a32:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002a36:	4637      	mov	r7, r6
 8002a38:	42bb      	cmp	r3, r7
 8002a3a:	460e      	mov	r6, r1
 8002a3c:	d9f4      	bls.n	8002a28 <_printf_i+0x118>
 8002a3e:	2b08      	cmp	r3, #8
 8002a40:	d10b      	bne.n	8002a5a <_printf_i+0x14a>
 8002a42:	6823      	ldr	r3, [r4, #0]
 8002a44:	07de      	lsls	r6, r3, #31
 8002a46:	d508      	bpl.n	8002a5a <_printf_i+0x14a>
 8002a48:	6923      	ldr	r3, [r4, #16]
 8002a4a:	6861      	ldr	r1, [r4, #4]
 8002a4c:	4299      	cmp	r1, r3
 8002a4e:	bfde      	ittt	le
 8002a50:	2330      	movle	r3, #48	; 0x30
 8002a52:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002a56:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002a5a:	1b52      	subs	r2, r2, r5
 8002a5c:	6122      	str	r2, [r4, #16]
 8002a5e:	464b      	mov	r3, r9
 8002a60:	4621      	mov	r1, r4
 8002a62:	4640      	mov	r0, r8
 8002a64:	f8cd a000 	str.w	sl, [sp]
 8002a68:	aa03      	add	r2, sp, #12
 8002a6a:	f7ff fedf 	bl	800282c <_printf_common>
 8002a6e:	3001      	adds	r0, #1
 8002a70:	d14a      	bne.n	8002b08 <_printf_i+0x1f8>
 8002a72:	f04f 30ff 	mov.w	r0, #4294967295
 8002a76:	b004      	add	sp, #16
 8002a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a7c:	6823      	ldr	r3, [r4, #0]
 8002a7e:	f043 0320 	orr.w	r3, r3, #32
 8002a82:	6023      	str	r3, [r4, #0]
 8002a84:	2778      	movs	r7, #120	; 0x78
 8002a86:	4832      	ldr	r0, [pc, #200]	; (8002b50 <_printf_i+0x240>)
 8002a88:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002a8c:	6823      	ldr	r3, [r4, #0]
 8002a8e:	6829      	ldr	r1, [r5, #0]
 8002a90:	061f      	lsls	r7, r3, #24
 8002a92:	f851 6b04 	ldr.w	r6, [r1], #4
 8002a96:	d402      	bmi.n	8002a9e <_printf_i+0x18e>
 8002a98:	065f      	lsls	r7, r3, #25
 8002a9a:	bf48      	it	mi
 8002a9c:	b2b6      	uxthmi	r6, r6
 8002a9e:	07df      	lsls	r7, r3, #31
 8002aa0:	bf48      	it	mi
 8002aa2:	f043 0320 	orrmi.w	r3, r3, #32
 8002aa6:	6029      	str	r1, [r5, #0]
 8002aa8:	bf48      	it	mi
 8002aaa:	6023      	strmi	r3, [r4, #0]
 8002aac:	b91e      	cbnz	r6, 8002ab6 <_printf_i+0x1a6>
 8002aae:	6823      	ldr	r3, [r4, #0]
 8002ab0:	f023 0320 	bic.w	r3, r3, #32
 8002ab4:	6023      	str	r3, [r4, #0]
 8002ab6:	2310      	movs	r3, #16
 8002ab8:	e7a6      	b.n	8002a08 <_printf_i+0xf8>
 8002aba:	4824      	ldr	r0, [pc, #144]	; (8002b4c <_printf_i+0x23c>)
 8002abc:	e7e4      	b.n	8002a88 <_printf_i+0x178>
 8002abe:	4615      	mov	r5, r2
 8002ac0:	e7bd      	b.n	8002a3e <_printf_i+0x12e>
 8002ac2:	682b      	ldr	r3, [r5, #0]
 8002ac4:	6826      	ldr	r6, [r4, #0]
 8002ac6:	1d18      	adds	r0, r3, #4
 8002ac8:	6961      	ldr	r1, [r4, #20]
 8002aca:	6028      	str	r0, [r5, #0]
 8002acc:	0635      	lsls	r5, r6, #24
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	d501      	bpl.n	8002ad6 <_printf_i+0x1c6>
 8002ad2:	6019      	str	r1, [r3, #0]
 8002ad4:	e002      	b.n	8002adc <_printf_i+0x1cc>
 8002ad6:	0670      	lsls	r0, r6, #25
 8002ad8:	d5fb      	bpl.n	8002ad2 <_printf_i+0x1c2>
 8002ada:	8019      	strh	r1, [r3, #0]
 8002adc:	2300      	movs	r3, #0
 8002ade:	4615      	mov	r5, r2
 8002ae0:	6123      	str	r3, [r4, #16]
 8002ae2:	e7bc      	b.n	8002a5e <_printf_i+0x14e>
 8002ae4:	682b      	ldr	r3, [r5, #0]
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	1d1a      	adds	r2, r3, #4
 8002aea:	602a      	str	r2, [r5, #0]
 8002aec:	681d      	ldr	r5, [r3, #0]
 8002aee:	6862      	ldr	r2, [r4, #4]
 8002af0:	4628      	mov	r0, r5
 8002af2:	f000 f859 	bl	8002ba8 <memchr>
 8002af6:	b108      	cbz	r0, 8002afc <_printf_i+0x1ec>
 8002af8:	1b40      	subs	r0, r0, r5
 8002afa:	6060      	str	r0, [r4, #4]
 8002afc:	6863      	ldr	r3, [r4, #4]
 8002afe:	6123      	str	r3, [r4, #16]
 8002b00:	2300      	movs	r3, #0
 8002b02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b06:	e7aa      	b.n	8002a5e <_printf_i+0x14e>
 8002b08:	462a      	mov	r2, r5
 8002b0a:	4649      	mov	r1, r9
 8002b0c:	4640      	mov	r0, r8
 8002b0e:	6923      	ldr	r3, [r4, #16]
 8002b10:	47d0      	blx	sl
 8002b12:	3001      	adds	r0, #1
 8002b14:	d0ad      	beq.n	8002a72 <_printf_i+0x162>
 8002b16:	6823      	ldr	r3, [r4, #0]
 8002b18:	079b      	lsls	r3, r3, #30
 8002b1a:	d413      	bmi.n	8002b44 <_printf_i+0x234>
 8002b1c:	68e0      	ldr	r0, [r4, #12]
 8002b1e:	9b03      	ldr	r3, [sp, #12]
 8002b20:	4298      	cmp	r0, r3
 8002b22:	bfb8      	it	lt
 8002b24:	4618      	movlt	r0, r3
 8002b26:	e7a6      	b.n	8002a76 <_printf_i+0x166>
 8002b28:	2301      	movs	r3, #1
 8002b2a:	4632      	mov	r2, r6
 8002b2c:	4649      	mov	r1, r9
 8002b2e:	4640      	mov	r0, r8
 8002b30:	47d0      	blx	sl
 8002b32:	3001      	adds	r0, #1
 8002b34:	d09d      	beq.n	8002a72 <_printf_i+0x162>
 8002b36:	3501      	adds	r5, #1
 8002b38:	68e3      	ldr	r3, [r4, #12]
 8002b3a:	9903      	ldr	r1, [sp, #12]
 8002b3c:	1a5b      	subs	r3, r3, r1
 8002b3e:	42ab      	cmp	r3, r5
 8002b40:	dcf2      	bgt.n	8002b28 <_printf_i+0x218>
 8002b42:	e7eb      	b.n	8002b1c <_printf_i+0x20c>
 8002b44:	2500      	movs	r5, #0
 8002b46:	f104 0619 	add.w	r6, r4, #25
 8002b4a:	e7f5      	b.n	8002b38 <_printf_i+0x228>
 8002b4c:	08002cb9 	.word	0x08002cb9
 8002b50:	08002cca 	.word	0x08002cca

08002b54 <memmove>:
 8002b54:	4288      	cmp	r0, r1
 8002b56:	b510      	push	{r4, lr}
 8002b58:	eb01 0402 	add.w	r4, r1, r2
 8002b5c:	d902      	bls.n	8002b64 <memmove+0x10>
 8002b5e:	4284      	cmp	r4, r0
 8002b60:	4623      	mov	r3, r4
 8002b62:	d807      	bhi.n	8002b74 <memmove+0x20>
 8002b64:	1e43      	subs	r3, r0, #1
 8002b66:	42a1      	cmp	r1, r4
 8002b68:	d008      	beq.n	8002b7c <memmove+0x28>
 8002b6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002b6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002b72:	e7f8      	b.n	8002b66 <memmove+0x12>
 8002b74:	4601      	mov	r1, r0
 8002b76:	4402      	add	r2, r0
 8002b78:	428a      	cmp	r2, r1
 8002b7a:	d100      	bne.n	8002b7e <memmove+0x2a>
 8002b7c:	bd10      	pop	{r4, pc}
 8002b7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002b82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002b86:	e7f7      	b.n	8002b78 <memmove+0x24>

08002b88 <_sbrk_r>:
 8002b88:	b538      	push	{r3, r4, r5, lr}
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	4d05      	ldr	r5, [pc, #20]	; (8002ba4 <_sbrk_r+0x1c>)
 8002b8e:	4604      	mov	r4, r0
 8002b90:	4608      	mov	r0, r1
 8002b92:	602b      	str	r3, [r5, #0]
 8002b94:	f7fd fdc4 	bl	8000720 <_sbrk>
 8002b98:	1c43      	adds	r3, r0, #1
 8002b9a:	d102      	bne.n	8002ba2 <_sbrk_r+0x1a>
 8002b9c:	682b      	ldr	r3, [r5, #0]
 8002b9e:	b103      	cbz	r3, 8002ba2 <_sbrk_r+0x1a>
 8002ba0:	6023      	str	r3, [r4, #0]
 8002ba2:	bd38      	pop	{r3, r4, r5, pc}
 8002ba4:	20000258 	.word	0x20000258

08002ba8 <memchr>:
 8002ba8:	4603      	mov	r3, r0
 8002baa:	b510      	push	{r4, lr}
 8002bac:	b2c9      	uxtb	r1, r1
 8002bae:	4402      	add	r2, r0
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	d101      	bne.n	8002bba <memchr+0x12>
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	e003      	b.n	8002bc2 <memchr+0x1a>
 8002bba:	7804      	ldrb	r4, [r0, #0]
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	428c      	cmp	r4, r1
 8002bc0:	d1f6      	bne.n	8002bb0 <memchr+0x8>
 8002bc2:	bd10      	pop	{r4, pc}

08002bc4 <memcpy>:
 8002bc4:	440a      	add	r2, r1
 8002bc6:	4291      	cmp	r1, r2
 8002bc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8002bcc:	d100      	bne.n	8002bd0 <memcpy+0xc>
 8002bce:	4770      	bx	lr
 8002bd0:	b510      	push	{r4, lr}
 8002bd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002bd6:	4291      	cmp	r1, r2
 8002bd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002bdc:	d1f9      	bne.n	8002bd2 <memcpy+0xe>
 8002bde:	bd10      	pop	{r4, pc}

08002be0 <_realloc_r>:
 8002be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002be4:	4680      	mov	r8, r0
 8002be6:	4614      	mov	r4, r2
 8002be8:	460e      	mov	r6, r1
 8002bea:	b921      	cbnz	r1, 8002bf6 <_realloc_r+0x16>
 8002bec:	4611      	mov	r1, r2
 8002bee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002bf2:	f7ff bc37 	b.w	8002464 <_malloc_r>
 8002bf6:	b92a      	cbnz	r2, 8002c04 <_realloc_r+0x24>
 8002bf8:	f7ff fbcc 	bl	8002394 <_free_r>
 8002bfc:	4625      	mov	r5, r4
 8002bfe:	4628      	mov	r0, r5
 8002c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c04:	f000 f81b 	bl	8002c3e <_malloc_usable_size_r>
 8002c08:	4284      	cmp	r4, r0
 8002c0a:	4607      	mov	r7, r0
 8002c0c:	d802      	bhi.n	8002c14 <_realloc_r+0x34>
 8002c0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002c12:	d812      	bhi.n	8002c3a <_realloc_r+0x5a>
 8002c14:	4621      	mov	r1, r4
 8002c16:	4640      	mov	r0, r8
 8002c18:	f7ff fc24 	bl	8002464 <_malloc_r>
 8002c1c:	4605      	mov	r5, r0
 8002c1e:	2800      	cmp	r0, #0
 8002c20:	d0ed      	beq.n	8002bfe <_realloc_r+0x1e>
 8002c22:	42bc      	cmp	r4, r7
 8002c24:	4622      	mov	r2, r4
 8002c26:	4631      	mov	r1, r6
 8002c28:	bf28      	it	cs
 8002c2a:	463a      	movcs	r2, r7
 8002c2c:	f7ff ffca 	bl	8002bc4 <memcpy>
 8002c30:	4631      	mov	r1, r6
 8002c32:	4640      	mov	r0, r8
 8002c34:	f7ff fbae 	bl	8002394 <_free_r>
 8002c38:	e7e1      	b.n	8002bfe <_realloc_r+0x1e>
 8002c3a:	4635      	mov	r5, r6
 8002c3c:	e7df      	b.n	8002bfe <_realloc_r+0x1e>

08002c3e <_malloc_usable_size_r>:
 8002c3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c42:	1f18      	subs	r0, r3, #4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	bfbc      	itt	lt
 8002c48:	580b      	ldrlt	r3, [r1, r0]
 8002c4a:	18c0      	addlt	r0, r0, r3
 8002c4c:	4770      	bx	lr
	...

08002c50 <_init>:
 8002c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c52:	bf00      	nop
 8002c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c56:	bc08      	pop	{r3}
 8002c58:	469e      	mov	lr, r3
 8002c5a:	4770      	bx	lr

08002c5c <_fini>:
 8002c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c5e:	bf00      	nop
 8002c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c62:	bc08      	pop	{r3}
 8002c64:	469e      	mov	lr, r3
 8002c66:	4770      	bx	lr
