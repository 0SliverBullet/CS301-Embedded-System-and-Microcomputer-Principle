
Assignment2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051d4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  080053b8  080053b8  000153b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058a0  080058a0  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080058a0  080058a0  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080058a0  080058a0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058a0  080058a0  000158a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058a4  080058a4  000158a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080058a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e38  20000078  08005920  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000eb0  08005920  00020eb0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b26e  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f7f  00000000  00000000  0002b352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cf0  00000000  00000000  0002d2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a24  00000000  00000000  0002dfc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aaad  00000000  00000000  0002e9ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ea39  00000000  00000000  00049499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a7c6  00000000  00000000  00057ed2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000040a0  00000000  00000000  000f2698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000f6738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000078 	.word	0x20000078
 8000200:	00000000 	.word	0x00000000
 8000204:	080053a0 	.word	0x080053a0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000007c 	.word	0x2000007c
 8000220:	080053a0 	.word	0x080053a0

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023a:	f001 fc07 	bl	8001a4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023e:	f000 fa05 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000242:	f000 fadd 	bl	8000800 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000246:	f000 fa63 	bl	8000710 <MX_TIM3_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  int s=0,j;
 800024a:	2300      	movs	r3, #0
 800024c:	607b      	str	r3, [r7, #4]


  while (1)
   {

	  if (mode==0){
 800024e:	4b91      	ldr	r3, [pc, #580]	; (8000494 <main+0x260>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	2b00      	cmp	r3, #0
 8000254:	d1fb      	bne.n	800024e <main+0x1a>
		   seed+=1314;
 8000256:	4b90      	ldr	r3, [pc, #576]	; (8000498 <main+0x264>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f203 5322 	addw	r3, r3, #1314	; 0x522
 800025e:	4a8e      	ldr	r2, [pc, #568]	; (8000498 <main+0x264>)
 8000260:	6013      	str	r3, [r2, #0]
     // *string="abcd";
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (i==lim){
 8000262:	4b8e      	ldr	r3, [pc, #568]	; (800049c <main+0x268>)
 8000264:	681a      	ldr	r2, [r3, #0]
 8000266:	4b8e      	ldr	r3, [pc, #568]	; (80004a0 <main+0x26c>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	429a      	cmp	r2, r3
 800026c:	d112      	bne.n	8000294 <main+0x60>
		 if (s==0) sprintf(msg, "You have %d Seconds in total, Let us Start Typing Exercise \r\n [WORD] %s \r\n", i,string);
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d107      	bne.n	8000284 <main+0x50>
 8000274:	4b89      	ldr	r3, [pc, #548]	; (800049c <main+0x268>)
 8000276:	681a      	ldr	r2, [r3, #0]
 8000278:	4b8a      	ldr	r3, [pc, #552]	; (80004a4 <main+0x270>)
 800027a:	498b      	ldr	r1, [pc, #556]	; (80004a8 <main+0x274>)
 800027c:	488b      	ldr	r0, [pc, #556]	; (80004ac <main+0x278>)
 800027e:	f003 ffcb 	bl	8004218 <siprintf>
 8000282:	e052      	b.n	800032a <main+0xf6>
		 else sprintf(msg, "You have %d Seconds in total, Let us Continue Typing Exercise \r\n [WORD] %s \r\n", i,string);
 8000284:	4b85      	ldr	r3, [pc, #532]	; (800049c <main+0x268>)
 8000286:	681a      	ldr	r2, [r3, #0]
 8000288:	4b86      	ldr	r3, [pc, #536]	; (80004a4 <main+0x270>)
 800028a:	4989      	ldr	r1, [pc, #548]	; (80004b0 <main+0x27c>)
 800028c:	4887      	ldr	r0, [pc, #540]	; (80004ac <main+0x278>)
 800028e:	f003 ffc3 	bl	8004218 <siprintf>
 8000292:	e04a      	b.n	800032a <main+0xf6>
	  }
   else if (i>=2&&i<=3) sprintf(msg, " [WARNING] %d seconds left! \r\n", i);
 8000294:	4b81      	ldr	r3, [pc, #516]	; (800049c <main+0x268>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	2b01      	cmp	r3, #1
 800029a:	dd0b      	ble.n	80002b4 <main+0x80>
 800029c:	4b7f      	ldr	r3, [pc, #508]	; (800049c <main+0x268>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	2b03      	cmp	r3, #3
 80002a2:	dc07      	bgt.n	80002b4 <main+0x80>
 80002a4:	4b7d      	ldr	r3, [pc, #500]	; (800049c <main+0x268>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	461a      	mov	r2, r3
 80002aa:	4982      	ldr	r1, [pc, #520]	; (80004b4 <main+0x280>)
 80002ac:	487f      	ldr	r0, [pc, #508]	; (80004ac <main+0x278>)
 80002ae:	f003 ffb3 	bl	8004218 <siprintf>
 80002b2:	e03a      	b.n	800032a <main+0xf6>
     else if (i==1)  sprintf(msg, " [WARNING] %d second left! \r\n", i);
 80002b4:	4b79      	ldr	r3, [pc, #484]	; (800049c <main+0x268>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	2b01      	cmp	r3, #1
 80002ba:	d107      	bne.n	80002cc <main+0x98>
 80002bc:	4b77      	ldr	r3, [pc, #476]	; (800049c <main+0x268>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	461a      	mov	r2, r3
 80002c2:	497d      	ldr	r1, [pc, #500]	; (80004b8 <main+0x284>)
 80002c4:	4879      	ldr	r0, [pc, #484]	; (80004ac <main+0x278>)
 80002c6:	f003 ffa7 	bl	8004218 <siprintf>
 80002ca:	e02e      	b.n	800032a <main+0xf6>
     else if (i==0) {
 80002cc:	4b73      	ldr	r3, [pc, #460]	; (800049c <main+0x268>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d12a      	bne.n	800032a <main+0xf6>
    	 if (s>=lim) sprintf(msg, "Game over! The Score you get is %d, Excellent!\r\n", s);
 80002d4:	4b72      	ldr	r3, [pc, #456]	; (80004a0 <main+0x26c>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	687a      	ldr	r2, [r7, #4]
 80002da:	429a      	cmp	r2, r3
 80002dc:	db05      	blt.n	80002ea <main+0xb6>
 80002de:	687a      	ldr	r2, [r7, #4]
 80002e0:	4976      	ldr	r1, [pc, #472]	; (80004bc <main+0x288>)
 80002e2:	4872      	ldr	r0, [pc, #456]	; (80004ac <main+0x278>)
 80002e4:	f003 ff98 	bl	8004218 <siprintf>
 80002e8:	e01f      	b.n	800032a <main+0xf6>
    	 else if (s>=lim/2) sprintf(msg, "Game over! The Score you get is %d, Good!\r\n", s);
 80002ea:	4b6d      	ldr	r3, [pc, #436]	; (80004a0 <main+0x26c>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	0fda      	lsrs	r2, r3, #31
 80002f0:	4413      	add	r3, r2
 80002f2:	105b      	asrs	r3, r3, #1
 80002f4:	461a      	mov	r2, r3
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	4293      	cmp	r3, r2
 80002fa:	db05      	blt.n	8000308 <main+0xd4>
 80002fc:	687a      	ldr	r2, [r7, #4]
 80002fe:	4970      	ldr	r1, [pc, #448]	; (80004c0 <main+0x28c>)
 8000300:	486a      	ldr	r0, [pc, #424]	; (80004ac <main+0x278>)
 8000302:	f003 ff89 	bl	8004218 <siprintf>
 8000306:	e010      	b.n	800032a <main+0xf6>
    	   else if (s>=1) sprintf(msg, "Game over! The Score you get is %d, Practice more!\r\n", s);
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	2b00      	cmp	r3, #0
 800030c:	dd05      	ble.n	800031a <main+0xe6>
 800030e:	687a      	ldr	r2, [r7, #4]
 8000310:	496c      	ldr	r1, [pc, #432]	; (80004c4 <main+0x290>)
 8000312:	4866      	ldr	r0, [pc, #408]	; (80004ac <main+0x278>)
 8000314:	f003 ff80 	bl	8004218 <siprintf>
 8000318:	e007      	b.n	800032a <main+0xf6>
    	      else if (s==0)  sprintf(msg, "Game over! The Score you get is %d, Rubbish!\r\n", s);
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d104      	bne.n	800032a <main+0xf6>
 8000320:	687a      	ldr	r2, [r7, #4]
 8000322:	4969      	ldr	r1, [pc, #420]	; (80004c8 <main+0x294>)
 8000324:	4861      	ldr	r0, [pc, #388]	; (80004ac <main+0x278>)
 8000326:	f003 ff77 	bl	8004218 <siprintf>
     }

  if (i==lim||i>=0&&i<=3) HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800032a:	4b5c      	ldr	r3, [pc, #368]	; (800049c <main+0x268>)
 800032c:	681a      	ldr	r2, [r3, #0]
 800032e:	4b5c      	ldr	r3, [pc, #368]	; (80004a0 <main+0x26c>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	429a      	cmp	r2, r3
 8000334:	d007      	beq.n	8000346 <main+0x112>
 8000336:	4b59      	ldr	r3, [pc, #356]	; (800049c <main+0x268>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	2b00      	cmp	r3, #0
 800033c:	db0e      	blt.n	800035c <main+0x128>
 800033e:	4b57      	ldr	r3, [pc, #348]	; (800049c <main+0x268>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	2b03      	cmp	r3, #3
 8000344:	dc0a      	bgt.n	800035c <main+0x128>
 8000346:	4859      	ldr	r0, [pc, #356]	; (80004ac <main+0x278>)
 8000348:	f7ff ff6c 	bl	8000224 <strlen>
 800034c:	4603      	mov	r3, r0
 800034e:	b29a      	uxth	r2, r3
 8000350:	f04f 33ff 	mov.w	r3, #4294967295
 8000354:	4955      	ldr	r1, [pc, #340]	; (80004ac <main+0x278>)
 8000356:	485d      	ldr	r0, [pc, #372]	; (80004cc <main+0x298>)
 8000358:	f003 f957 	bl	800360a <HAL_UART_Transmit>

   if (i>1||i==0){
 800035c:	4b4f      	ldr	r3, [pc, #316]	; (800049c <main+0x268>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	2b01      	cmp	r3, #1
 8000362:	dc04      	bgt.n	800036e <main+0x13a>
 8000364:	4b4d      	ldr	r3, [pc, #308]	; (800049c <main+0x268>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	2b00      	cmp	r3, #0
 800036a:	f040 80c1 	bne.w	80004f0 <main+0x2bc>
	   if (wrongORright==0) HAL_Delay(1000);
 800036e:	4b58      	ldr	r3, [pc, #352]	; (80004d0 <main+0x29c>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	2b00      	cmp	r3, #0
 8000374:	d104      	bne.n	8000380 <main+0x14c>
 8000376:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800037a:	f001 fbc9 	bl	8001b10 <HAL_Delay>
 800037e:	e07f      	b.n	8000480 <main+0x24c>
   else if (wrongORright==1) {
 8000380:	4b53      	ldr	r3, [pc, #332]	; (80004d0 <main+0x29c>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	2b01      	cmp	r3, #1
 8000386:	d11b      	bne.n	80003c0 <main+0x18c>
	   wrongORright=0;
 8000388:	4b51      	ldr	r3, [pc, #324]	; (80004d0 <main+0x29c>)
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,GPIO_PIN_SET);
 800038e:	2201      	movs	r2, #1
 8000390:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000394:	484f      	ldr	r0, [pc, #316]	; (80004d4 <main+0x2a0>)
 8000396:	f001 ffda 	bl	800234e <HAL_GPIO_WritePin>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 800039a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800039e:	484d      	ldr	r0, [pc, #308]	; (80004d4 <main+0x2a0>)
 80003a0:	f001 ffed 	bl	800237e <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 80003a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003a8:	f001 fbb2 	bl	8001b10 <HAL_Delay>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 80003ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003b0:	4848      	ldr	r0, [pc, #288]	; (80004d4 <main+0x2a0>)
 80003b2:	f001 ffe4 	bl	800237e <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 80003b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003ba:	f001 fba9 	bl	8001b10 <HAL_Delay>
 80003be:	e05f      	b.n	8000480 <main+0x24c>


   }
   else if(wrongORright==2){
 80003c0:	4b43      	ldr	r3, [pc, #268]	; (80004d0 <main+0x29c>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	2b02      	cmp	r3, #2
 80003c6:	d15b      	bne.n	8000480 <main+0x24c>
	   wrongORright=0;
 80003c8:	4b41      	ldr	r3, [pc, #260]	; (80004d0 <main+0x29c>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
	   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2,GPIO_PIN_SET);
 80003ce:	2201      	movs	r2, #1
 80003d0:	2104      	movs	r1, #4
 80003d2:	4841      	ldr	r0, [pc, #260]	; (80004d8 <main+0x2a4>)
 80003d4:	f001 ffbb 	bl	800234e <HAL_GPIO_WritePin>
	   HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 80003d8:	2104      	movs	r1, #4
 80003da:	483f      	ldr	r0, [pc, #252]	; (80004d8 <main+0x2a4>)
 80003dc:	f001 ffcf 	bl	800237e <HAL_GPIO_TogglePin>
	   HAL_Delay(500);
 80003e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003e4:	f001 fb94 	bl	8001b10 <HAL_Delay>
	   HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 80003e8:	2104      	movs	r1, #4
 80003ea:	483b      	ldr	r0, [pc, #236]	; (80004d8 <main+0x2a4>)
 80003ec:	f001 ffc7 	bl	800237e <HAL_GPIO_TogglePin>
	   HAL_Delay(500);
 80003f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003f4:	f001 fb8c 	bl	8001b10 <HAL_Delay>

	   s++;
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	3301      	adds	r3, #1
 80003fc:	607b      	str	r3, [r7, #4]
	   srand(seed);
 80003fe:	4b26      	ldr	r3, [pc, #152]	; (8000498 <main+0x264>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	4618      	mov	r0, r3
 8000404:	f003 fdec 	bl	8003fe0 <srand>
		  for (j=0;j<=(s+9)/3;j++){
 8000408:	2300      	movs	r3, #0
 800040a:	603b      	str	r3, [r7, #0]
 800040c:	e01b      	b.n	8000446 <main+0x212>
			 // srand((unsigned)time(NULL));
			      x=rand()%(25-0+1);
 800040e:	f003 fe15 	bl	800403c <rand>
 8000412:	4602      	mov	r2, r0
 8000414:	4b31      	ldr	r3, [pc, #196]	; (80004dc <main+0x2a8>)
 8000416:	fb83 1302 	smull	r1, r3, r3, r2
 800041a:	10d9      	asrs	r1, r3, #3
 800041c:	17d3      	asrs	r3, r2, #31
 800041e:	1acb      	subs	r3, r1, r3
 8000420:	211a      	movs	r1, #26
 8000422:	fb01 f303 	mul.w	r3, r1, r3
 8000426:	1ad3      	subs	r3, r2, r3
 8000428:	4a2d      	ldr	r2, [pc, #180]	; (80004e0 <main+0x2ac>)
 800042a:	6013      	str	r3, [r2, #0]
				  string[j]='a'+x;
 800042c:	4b2c      	ldr	r3, [pc, #176]	; (80004e0 <main+0x2ac>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	b2db      	uxtb	r3, r3
 8000432:	3361      	adds	r3, #97	; 0x61
 8000434:	b2d9      	uxtb	r1, r3
 8000436:	4a1b      	ldr	r2, [pc, #108]	; (80004a4 <main+0x270>)
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	4413      	add	r3, r2
 800043c:	460a      	mov	r2, r1
 800043e:	701a      	strb	r2, [r3, #0]
		  for (j=0;j<=(s+9)/3;j++){
 8000440:	683b      	ldr	r3, [r7, #0]
 8000442:	3301      	adds	r3, #1
 8000444:	603b      	str	r3, [r7, #0]
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	3309      	adds	r3, #9
 800044a:	4a26      	ldr	r2, [pc, #152]	; (80004e4 <main+0x2b0>)
 800044c:	fb82 1203 	smull	r1, r2, r2, r3
 8000450:	17db      	asrs	r3, r3, #31
 8000452:	1ad3      	subs	r3, r2, r3
 8000454:	683a      	ldr	r2, [r7, #0]
 8000456:	429a      	cmp	r2, r3
 8000458:	ddd9      	ble.n	800040e <main+0x1da>
			  }
			  string[(s+9)/3+1]='\0';
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	3309      	adds	r3, #9
 800045e:	4a21      	ldr	r2, [pc, #132]	; (80004e4 <main+0x2b0>)
 8000460:	fb82 1203 	smull	r1, r2, r2, r3
 8000464:	17db      	asrs	r3, r3, #31
 8000466:	1ad3      	subs	r3, r2, r3
 8000468:	3301      	adds	r3, #1
 800046a:	4a0e      	ldr	r2, [pc, #56]	; (80004a4 <main+0x270>)
 800046c:	2100      	movs	r1, #0
 800046e:	54d1      	strb	r1, [r2, r3]
	   HAL_IWDG_Refresh(&hiwdg);
 8000470:	481d      	ldr	r0, [pc, #116]	; (80004e8 <main+0x2b4>)
 8000472:	f001 fff7 	bl	8002464 <HAL_IWDG_Refresh>
	   i=lim+1;
 8000476:	4b0a      	ldr	r3, [pc, #40]	; (80004a0 <main+0x26c>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	3301      	adds	r3, #1
 800047c:	4a07      	ldr	r2, [pc, #28]	; (800049c <main+0x268>)
 800047e:	6013      	str	r3, [r2, #0]

   }
	   i--;
 8000480:	4b06      	ldr	r3, [pc, #24]	; (800049c <main+0x268>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	3b01      	subs	r3, #1
 8000486:	4a05      	ldr	r2, [pc, #20]	; (800049c <main+0x268>)
 8000488:	6013      	str	r3, [r2, #0]
	    initial=i;
 800048a:	4b04      	ldr	r3, [pc, #16]	; (800049c <main+0x268>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4a17      	ldr	r2, [pc, #92]	; (80004ec <main+0x2b8>)
 8000490:	6013      	str	r3, [r2, #0]
 8000492:	e0c1      	b.n	8000618 <main+0x3e4>
 8000494:	20000938 	.word	0x20000938
 8000498:	20000004 	.word	0x20000004
 800049c:	20000000 	.word	0x20000000
 80004a0:	20000008 	.word	0x20000008
 80004a4:	20000534 	.word	0x20000534
 80004a8:	080053b8 	.word	0x080053b8
 80004ac:	20000130 	.word	0x20000130
 80004b0:	08005404 	.word	0x08005404
 80004b4:	08005454 	.word	0x08005454
 80004b8:	08005474 	.word	0x08005474
 80004bc:	08005494 	.word	0x08005494
 80004c0:	080054c8 	.word	0x080054c8
 80004c4:	080054f4 	.word	0x080054f4
 80004c8:	0800552c 	.word	0x0800552c
 80004cc:	200000e8 	.word	0x200000e8
 80004d0:	20000d58 	.word	0x20000d58
 80004d4:	40010800 	.word	0x40010800
 80004d8:	40011400 	.word	0x40011400
 80004dc:	4ec4ec4f 	.word	0x4ec4ec4f
 80004e0:	20000934 	.word	0x20000934
 80004e4:	55555556 	.word	0x55555556
 80004e8:	20000094 	.word	0x20000094
 80004ec:	2000012c 	.word	0x2000012c
   }
   else if (i==1){
 80004f0:	4b4a      	ldr	r3, [pc, #296]	; (800061c <main+0x3e8>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	f47f aeaa 	bne.w	800024e <main+0x1a>
	   HAL_Delay(1000);
 80004fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004fe:	f001 fb07 	bl	8001b10 <HAL_Delay>
	   i--;
 8000502:	4b46      	ldr	r3, [pc, #280]	; (800061c <main+0x3e8>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	3b01      	subs	r3, #1
 8000508:	4a44      	ldr	r2, [pc, #272]	; (800061c <main+0x3e8>)
 800050a:	6013      	str	r3, [r2, #0]
	   initial=i;
 800050c:	4b43      	ldr	r3, [pc, #268]	; (800061c <main+0x3e8>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a43      	ldr	r2, [pc, #268]	; (8000620 <main+0x3ec>)
 8000512:	6013      	str	r3, [r2, #0]
	   if (wrongORright==1) {
 8000514:	4b43      	ldr	r3, [pc, #268]	; (8000624 <main+0x3f0>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2b01      	cmp	r3, #1
 800051a:	d117      	bne.n	800054c <main+0x318>
		    wrongORright=0;
 800051c:	4b41      	ldr	r3, [pc, #260]	; (8000624 <main+0x3f0>)
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
	   		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,GPIO_PIN_SET);
 8000522:	2201      	movs	r2, #1
 8000524:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000528:	483f      	ldr	r0, [pc, #252]	; (8000628 <main+0x3f4>)
 800052a:	f001 ff10 	bl	800234e <HAL_GPIO_WritePin>

	   		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 800052e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000532:	483d      	ldr	r0, [pc, #244]	; (8000628 <main+0x3f4>)
 8000534:	f001 ff23 	bl	800237e <HAL_GPIO_TogglePin>
	   		  HAL_Delay(500);
 8000538:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800053c:	f001 fae8 	bl	8001b10 <HAL_Delay>
	   		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8000540:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000544:	4838      	ldr	r0, [pc, #224]	; (8000628 <main+0x3f4>)
 8000546:	f001 ff1a 	bl	800237e <HAL_GPIO_TogglePin>
 800054a:	e680      	b.n	800024e <main+0x1a>


	      }
	      else if(wrongORright==2){
 800054c:	4b35      	ldr	r3, [pc, #212]	; (8000624 <main+0x3f0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2b02      	cmp	r3, #2
 8000552:	f47f ae7c 	bne.w	800024e <main+0x1a>
	       wrongORright=0;
 8000556:	4b33      	ldr	r3, [pc, #204]	; (8000624 <main+0x3f0>)
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
	   	   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2,GPIO_PIN_SET);
 800055c:	2201      	movs	r2, #1
 800055e:	2104      	movs	r1, #4
 8000560:	4832      	ldr	r0, [pc, #200]	; (800062c <main+0x3f8>)
 8000562:	f001 fef4 	bl	800234e <HAL_GPIO_WritePin>
	   	   HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8000566:	2104      	movs	r1, #4
 8000568:	4830      	ldr	r0, [pc, #192]	; (800062c <main+0x3f8>)
 800056a:	f001 ff08 	bl	800237e <HAL_GPIO_TogglePin>
	   	   HAL_Delay(500);
 800056e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000572:	f001 facd 	bl	8001b10 <HAL_Delay>
	   	   HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8000576:	2104      	movs	r1, #4
 8000578:	482c      	ldr	r0, [pc, #176]	; (800062c <main+0x3f8>)
 800057a:	f001 ff00 	bl	800237e <HAL_GPIO_TogglePin>

	   	   s++;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	3301      	adds	r3, #1
 8000582:	607b      	str	r3, [r7, #4]
	   	srand(seed);
 8000584:	4b2a      	ldr	r3, [pc, #168]	; (8000630 <main+0x3fc>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4618      	mov	r0, r3
 800058a:	f003 fd29 	bl	8003fe0 <srand>
	 	  for (j=0;j<=(s+9)/3;j++){
 800058e:	2300      	movs	r3, #0
 8000590:	603b      	str	r3, [r7, #0]
 8000592:	e01b      	b.n	80005cc <main+0x398>
	 		// srand((unsigned)time(NULL));
	 		      x=rand()%(25-0+1);
 8000594:	f003 fd52 	bl	800403c <rand>
 8000598:	4602      	mov	r2, r0
 800059a:	4b26      	ldr	r3, [pc, #152]	; (8000634 <main+0x400>)
 800059c:	fb83 1302 	smull	r1, r3, r3, r2
 80005a0:	10d9      	asrs	r1, r3, #3
 80005a2:	17d3      	asrs	r3, r2, #31
 80005a4:	1acb      	subs	r3, r1, r3
 80005a6:	211a      	movs	r1, #26
 80005a8:	fb01 f303 	mul.w	r3, r1, r3
 80005ac:	1ad3      	subs	r3, r2, r3
 80005ae:	4a22      	ldr	r2, [pc, #136]	; (8000638 <main+0x404>)
 80005b0:	6013      	str	r3, [r2, #0]
	 			  string[j]='a'+x;
 80005b2:	4b21      	ldr	r3, [pc, #132]	; (8000638 <main+0x404>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	3361      	adds	r3, #97	; 0x61
 80005ba:	b2d9      	uxtb	r1, r3
 80005bc:	4a1f      	ldr	r2, [pc, #124]	; (800063c <main+0x408>)
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	4413      	add	r3, r2
 80005c2:	460a      	mov	r2, r1
 80005c4:	701a      	strb	r2, [r3, #0]
	 	  for (j=0;j<=(s+9)/3;j++){
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	3301      	adds	r3, #1
 80005ca:	603b      	str	r3, [r7, #0]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	3309      	adds	r3, #9
 80005d0:	4a1b      	ldr	r2, [pc, #108]	; (8000640 <main+0x40c>)
 80005d2:	fb82 1203 	smull	r1, r2, r2, r3
 80005d6:	17db      	asrs	r3, r3, #31
 80005d8:	1ad3      	subs	r3, r2, r3
 80005da:	683a      	ldr	r2, [r7, #0]
 80005dc:	429a      	cmp	r2, r3
 80005de:	ddd9      	ble.n	8000594 <main+0x360>
	 		  }
	 		  string[(s+9)/3+1]='\0';
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	3309      	adds	r3, #9
 80005e4:	4a16      	ldr	r2, [pc, #88]	; (8000640 <main+0x40c>)
 80005e6:	fb82 1203 	smull	r1, r2, r2, r3
 80005ea:	17db      	asrs	r3, r3, #31
 80005ec:	1ad3      	subs	r3, r2, r3
 80005ee:	3301      	adds	r3, #1
 80005f0:	4a12      	ldr	r2, [pc, #72]	; (800063c <main+0x408>)
 80005f2:	2100      	movs	r1, #0
 80005f4:	54d1      	strb	r1, [r2, r3]
	   	   HAL_IWDG_Refresh(&hiwdg);
 80005f6:	4813      	ldr	r0, [pc, #76]	; (8000644 <main+0x410>)
 80005f8:	f001 ff34 	bl	8002464 <HAL_IWDG_Refresh>
	   	   i=lim+1;
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <main+0x414>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	3301      	adds	r3, #1
 8000602:	4a06      	ldr	r2, [pc, #24]	; (800061c <main+0x3e8>)
 8000604:	6013      	str	r3, [r2, #0]
	       i--;
 8000606:	4b05      	ldr	r3, [pc, #20]	; (800061c <main+0x3e8>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	3b01      	subs	r3, #1
 800060c:	4a03      	ldr	r2, [pc, #12]	; (800061c <main+0x3e8>)
 800060e:	6013      	str	r3, [r2, #0]
	   	   initial=i;
 8000610:	4b02      	ldr	r3, [pc, #8]	; (800061c <main+0x3e8>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a02      	ldr	r2, [pc, #8]	; (8000620 <main+0x3ec>)
 8000616:	6013      	str	r3, [r2, #0]
	  if (mode==0){
 8000618:	e619      	b.n	800024e <main+0x1a>
 800061a:	bf00      	nop
 800061c:	20000000 	.word	0x20000000
 8000620:	2000012c 	.word	0x2000012c
 8000624:	20000d58 	.word	0x20000d58
 8000628:	40010800 	.word	0x40010800
 800062c:	40011400 	.word	0x40011400
 8000630:	20000004 	.word	0x20000004
 8000634:	4ec4ec4f 	.word	0x4ec4ec4f
 8000638:	20000934 	.word	0x20000934
 800063c:	20000534 	.word	0x20000534
 8000640:	55555556 	.word	0x55555556
 8000644:	20000094 	.word	0x20000094
 8000648:	20000008 	.word	0x20000008

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b090      	sub	sp, #64	; 0x40
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 0318 	add.w	r3, r7, #24
 8000656:	2228      	movs	r2, #40	; 0x28
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f003 fe3f 	bl	80042de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800066e:	2309      	movs	r3, #9
 8000670:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000672:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000676:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	2301      	movs	r3, #1
 800067e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000680:	2301      	movs	r3, #1
 8000682:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000684:	2302      	movs	r3, #2
 8000686:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000688:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800068c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800068e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000692:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000694:	f107 0318 	add.w	r3, r7, #24
 8000698:	4618      	mov	r0, r3
 800069a:	f001 fef3 	bl	8002484 <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80006a4:	f000 fc92 	bl	8000fcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a8:	230f      	movs	r3, #15
 80006aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ac:	2302      	movs	r3, #2
 80006ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	2102      	movs	r1, #2
 80006c2:	4618      	mov	r0, r3
 80006c4:	f002 f960 	bl	8002988 <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80006ce:	f000 fc7d 	bl	8000fcc <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	3740      	adds	r7, #64	; 0x40
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
	...

080006dc <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_IWDG_Init+0x2c>)
 80006e2:	4a0a      	ldr	r2, [pc, #40]	; (800070c <MX_IWDG_Init+0x30>)
 80006e4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <MX_IWDG_Init+0x2c>)
 80006e8:	2206      	movs	r2, #6
 80006ea:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 3437;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_IWDG_Init+0x2c>)
 80006ee:	f640 526d 	movw	r2, #3437	; 0xd6d
 80006f2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80006f4:	4804      	ldr	r0, [pc, #16]	; (8000708 <MX_IWDG_Init+0x2c>)
 80006f6:	f001 fe73 	bl	80023e0 <HAL_IWDG_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8000700:	f000 fc64 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000094 	.word	0x20000094
 800070c:	40003000 	.word	0x40003000

08000710 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000716:	f107 0308 	add.w	r3, r7, #8
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000724:	463b      	mov	r3, r7
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800072c:	4b1d      	ldr	r3, [pc, #116]	; (80007a4 <MX_TIM3_Init+0x94>)
 800072e:	4a1e      	ldr	r2, [pc, #120]	; (80007a8 <MX_TIM3_Init+0x98>)
 8000730:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 8000732:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <MX_TIM3_Init+0x94>)
 8000734:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000738:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800073a:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <MX_TIM3_Init+0x94>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000740:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <MX_TIM3_Init+0x94>)
 8000742:	f242 720f 	movw	r2, #9999	; 0x270f
 8000746:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000748:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MX_TIM3_Init+0x94>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <MX_TIM3_Init+0x94>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000754:	4813      	ldr	r0, [pc, #76]	; (80007a4 <MX_TIM3_Init+0x94>)
 8000756:	f002 faaf 	bl	8002cb8 <HAL_TIM_Base_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000760:	f000 fc34 	bl	8000fcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000768:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800076a:	f107 0308 	add.w	r3, r7, #8
 800076e:	4619      	mov	r1, r3
 8000770:	480c      	ldr	r0, [pc, #48]	; (80007a4 <MX_TIM3_Init+0x94>)
 8000772:	f002 fc87 	bl	8003084 <HAL_TIM_ConfigClockSource>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800077c:	f000 fc26 	bl	8000fcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000780:	2300      	movs	r3, #0
 8000782:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000784:	2300      	movs	r3, #0
 8000786:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000788:	463b      	mov	r3, r7
 800078a:	4619      	mov	r1, r3
 800078c:	4805      	ldr	r0, [pc, #20]	; (80007a4 <MX_TIM3_Init+0x94>)
 800078e:	f002 fe71 	bl	8003474 <HAL_TIMEx_MasterConfigSynchronization>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000798:	f000 fc18 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	3718      	adds	r7, #24
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	200000a0 	.word	0x200000a0
 80007a8:	40000400 	.word	0x40000400

080007ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007b0:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_USART1_UART_Init+0x4c>)
 80007b2:	4a12      	ldr	r2, [pc, #72]	; (80007fc <MX_USART1_UART_Init+0x50>)
 80007b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007b6:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <MX_USART1_UART_Init+0x4c>)
 80007b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_USART1_UART_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_USART1_UART_Init+0x4c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <MX_USART1_UART_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_USART1_UART_Init+0x4c>)
 80007d2:	220c      	movs	r2, #12
 80007d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <MX_USART1_UART_Init+0x4c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_USART1_UART_Init+0x4c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_USART1_UART_Init+0x4c>)
 80007e4:	f002 fec4 	bl	8003570 <HAL_UART_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007ee:	f000 fbed 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	200000e8 	.word	0x200000e8
 80007fc:	40013800 	.word	0x40013800

08000800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	f107 0310 	add.w	r3, r7, #16
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000814:	4b46      	ldr	r3, [pc, #280]	; (8000930 <MX_GPIO_Init+0x130>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	4a45      	ldr	r2, [pc, #276]	; (8000930 <MX_GPIO_Init+0x130>)
 800081a:	f043 0320 	orr.w	r3, r3, #32
 800081e:	6193      	str	r3, [r2, #24]
 8000820:	4b43      	ldr	r3, [pc, #268]	; (8000930 <MX_GPIO_Init+0x130>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	f003 0320 	and.w	r3, r3, #32
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082c:	4b40      	ldr	r3, [pc, #256]	; (8000930 <MX_GPIO_Init+0x130>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	4a3f      	ldr	r2, [pc, #252]	; (8000930 <MX_GPIO_Init+0x130>)
 8000832:	f043 0304 	orr.w	r3, r3, #4
 8000836:	6193      	str	r3, [r2, #24]
 8000838:	4b3d      	ldr	r3, [pc, #244]	; (8000930 <MX_GPIO_Init+0x130>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	f003 0304 	and.w	r3, r3, #4
 8000840:	60bb      	str	r3, [r7, #8]
 8000842:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000844:	4b3a      	ldr	r3, [pc, #232]	; (8000930 <MX_GPIO_Init+0x130>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	4a39      	ldr	r2, [pc, #228]	; (8000930 <MX_GPIO_Init+0x130>)
 800084a:	f043 0310 	orr.w	r3, r3, #16
 800084e:	6193      	str	r3, [r2, #24]
 8000850:	4b37      	ldr	r3, [pc, #220]	; (8000930 <MX_GPIO_Init+0x130>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	f003 0310 	and.w	r3, r3, #16
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 800085c:	2201      	movs	r2, #1
 800085e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000862:	4834      	ldr	r0, [pc, #208]	; (8000934 <MX_GPIO_Init+0x134>)
 8000864:	f001 fd73 	bl	800234e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000868:	2201      	movs	r2, #1
 800086a:	2104      	movs	r1, #4
 800086c:	4832      	ldr	r0, [pc, #200]	; (8000938 <MX_GPIO_Init+0x138>)
 800086e:	f001 fd6e 	bl	800234e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : KEY_WK_Pin */
  GPIO_InitStruct.Pin = KEY_WK_Pin;
 8000872:	2301      	movs	r3, #1
 8000874:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000876:	4b31      	ldr	r3, [pc, #196]	; (800093c <MX_GPIO_Init+0x13c>)
 8000878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800087a:	2302      	movs	r3, #2
 800087c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY_WK_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 0310 	add.w	r3, r7, #16
 8000882:	4619      	mov	r1, r3
 8000884:	482b      	ldr	r0, [pc, #172]	; (8000934 <MX_GPIO_Init+0x134>)
 8000886:	f001 fbb7 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY0_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 800088a:	2320      	movs	r3, #32
 800088c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800088e:	4b2c      	ldr	r3, [pc, #176]	; (8000940 <MX_GPIO_Init+0x140>)
 8000890:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000892:	2301      	movs	r3, #1
 8000894:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 0310 	add.w	r3, r7, #16
 800089a:	4619      	mov	r1, r3
 800089c:	4829      	ldr	r0, [pc, #164]	; (8000944 <MX_GPIO_Init+0x144>)
 800089e:	f001 fbab 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 80008a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2302      	movs	r3, #2
 80008b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 0310 	add.w	r3, r7, #16
 80008b8:	4619      	mov	r1, r3
 80008ba:	481e      	ldr	r0, [pc, #120]	; (8000934 <MX_GPIO_Init+0x134>)
 80008bc:	f001 fb9c 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY1_Pin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 80008c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008c6:	4b1e      	ldr	r3, [pc, #120]	; (8000940 <MX_GPIO_Init+0x140>)
 80008c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008ca:	2301      	movs	r3, #1
 80008cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 0310 	add.w	r3, r7, #16
 80008d2:	4619      	mov	r1, r3
 80008d4:	4817      	ldr	r0, [pc, #92]	; (8000934 <MX_GPIO_Init+0x134>)
 80008d6:	f001 fb8f 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80008da:	2304      	movs	r3, #4
 80008dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008de:	2301      	movs	r3, #1
 80008e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2302      	movs	r3, #2
 80008e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 0310 	add.w	r3, r7, #16
 80008ee:	4619      	mov	r1, r3
 80008f0:	4811      	ldr	r0, [pc, #68]	; (8000938 <MX_GPIO_Init+0x138>)
 80008f2:	f001 fb81 	bl	8001ff8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2102      	movs	r1, #2
 80008fa:	2006      	movs	r0, #6
 80008fc:	f001 fa03 	bl	8001d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000900:	2006      	movs	r0, #6
 8000902:	f001 fa1c 	bl	8001d3e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 1);
 8000906:	2201      	movs	r2, #1
 8000908:	2102      	movs	r1, #2
 800090a:	2017      	movs	r0, #23
 800090c:	f001 f9fb 	bl	8001d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000910:	2017      	movs	r0, #23
 8000912:	f001 fa14 	bl	8001d3e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 2);
 8000916:	2202      	movs	r2, #2
 8000918:	2102      	movs	r1, #2
 800091a:	2028      	movs	r0, #40	; 0x28
 800091c:	f001 f9f3 	bl	8001d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000920:	2028      	movs	r0, #40	; 0x28
 8000922:	f001 fa0c 	bl	8001d3e <HAL_NVIC_EnableIRQ>

}
 8000926:	bf00      	nop
 8000928:	3720      	adds	r7, #32
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40021000 	.word	0x40021000
 8000934:	40010800 	.word	0x40010800
 8000938:	40011400 	.word	0x40011400
 800093c:	10110000 	.word	0x10110000
 8000940:	10210000 	.word	0x10210000
 8000944:	40011000 	.word	0x40011000

08000948 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000948:	b5b0      	push	{r4, r5, r7, lr}
 800094a:	b0b4      	sub	sp, #208	; 0xd0
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	80fb      	strh	r3, [r7, #6]
switch (GPIO_Pin) {
 8000952:	88fb      	ldrh	r3, [r7, #6]
 8000954:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000958:	f000 819c 	beq.w	8000c94 <HAL_GPIO_EXTI_Callback+0x34c>
 800095c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000960:	f300 82fd 	bgt.w	8000f5e <HAL_GPIO_EXTI_Callback+0x616>
 8000964:	2b01      	cmp	r3, #1
 8000966:	f000 80c9 	beq.w	8000afc <HAL_GPIO_EXTI_Callback+0x1b4>
 800096a:	2b20      	cmp	r3, #32
 800096c:	f040 82f7 	bne.w	8000f5e <HAL_GPIO_EXTI_Callback+0x616>
case KEY0_Pin:
if (HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_RESET){
 8000970:	2120      	movs	r1, #32
 8000972:	48b0      	ldr	r0, [pc, #704]	; (8000c34 <HAL_GPIO_EXTI_Callback+0x2ec>)
 8000974:	f001 fcd4 	bl	8002320 <HAL_GPIO_ReadPin>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	f040 82f1 	bne.w	8000f62 <HAL_GPIO_EXTI_Callback+0x61a>
	//HAL_IWDG_Refresh(&hiwdg);
	initial=i;
 8000980:	4bad      	ldr	r3, [pc, #692]	; (8000c38 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4aad      	ldr	r2, [pc, #692]	; (8000c3c <HAL_GPIO_EXTI_Callback+0x2f4>)
 8000986:	6013      	str	r3, [r2, #0]
	  	MX_USART1_UART_Init();
 8000988:	f7ff ff10 	bl	80007ac <MX_USART1_UART_Init>
	  	sprintf(msg, "\r\nGame Start! Are you Ready? [Y/N] \r\n(You should give me your choice with 'Y' or 'N' in 10 seconds)\r\n");
 800098c:	49ac      	ldr	r1, [pc, #688]	; (8000c40 <HAL_GPIO_EXTI_Callback+0x2f8>)
 800098e:	48ad      	ldr	r0, [pc, #692]	; (8000c44 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000990:	f003 fc42 	bl	8004218 <siprintf>
	  	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000994:	48ab      	ldr	r0, [pc, #684]	; (8000c44 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000996:	f7ff fc45 	bl	8000224 <strlen>
 800099a:	4603      	mov	r3, r0
 800099c:	b29a      	uxth	r2, r3
 800099e:	f04f 33ff 	mov.w	r3, #4294967295
 80009a2:	49a8      	ldr	r1, [pc, #672]	; (8000c44 <HAL_GPIO_EXTI_Callback+0x2fc>)
 80009a4:	48a8      	ldr	r0, [pc, #672]	; (8000c48 <HAL_GPIO_EXTI_Callback+0x300>)
 80009a6:	f002 fe30 	bl	800360a <HAL_UART_Transmit>
	  	HAL_UART_Receive_IT(&huart1,(uint8_t *)rxBuffer,1);
 80009aa:	2201      	movs	r2, #1
 80009ac:	49a7      	ldr	r1, [pc, #668]	; (8000c4c <HAL_GPIO_EXTI_Callback+0x304>)
 80009ae:	48a6      	ldr	r0, [pc, #664]	; (8000c48 <HAL_GPIO_EXTI_Callback+0x300>)
 80009b0:	f002 febd 	bl	800372e <HAL_UART_Receive_IT>
	  	int j=10;
 80009b4:	230a      	movs	r3, #10
 80009b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	  	f=0;
 80009ba:	4ba5      	ldr	r3, [pc, #660]	; (8000c50 <HAL_GPIO_EXTI_Callback+0x308>)
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
	  	while (j!=-1){
 80009c0:	e057      	b.n	8000a72 <HAL_GPIO_EXTI_Callback+0x12a>
	  		 if (j!=0){
 80009c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d006      	beq.n	80009d8 <HAL_GPIO_EXTI_Callback+0x90>
	  			 sprintf(msg, "%d--",j);
 80009ca:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80009ce:	49a1      	ldr	r1, [pc, #644]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x30c>)
 80009d0:	489c      	ldr	r0, [pc, #624]	; (8000c44 <HAL_GPIO_EXTI_Callback+0x2fc>)
 80009d2:	f003 fc21 	bl	8004218 <siprintf>
 80009d6:	e005      	b.n	80009e4 <HAL_GPIO_EXTI_Callback+0x9c>
	  		 }
	  		 else {
	  			sprintf(msg, "%d \r\nTime Over, Quit Game!\r\n",j);
 80009d8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80009dc:	499e      	ldr	r1, [pc, #632]	; (8000c58 <HAL_GPIO_EXTI_Callback+0x310>)
 80009de:	4899      	ldr	r0, [pc, #612]	; (8000c44 <HAL_GPIO_EXTI_Callback+0x2fc>)
 80009e0:	f003 fc1a 	bl	8004218 <siprintf>
	  		 }
	  		 j--;
 80009e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80009e8:	3b01      	subs	r3, #1
 80009ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	  		 HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80009ee:	4895      	ldr	r0, [pc, #596]	; (8000c44 <HAL_GPIO_EXTI_Callback+0x2fc>)
 80009f0:	f7ff fc18 	bl	8000224 <strlen>
 80009f4:	4603      	mov	r3, r0
 80009f6:	b29a      	uxth	r2, r3
 80009f8:	f04f 33ff 	mov.w	r3, #4294967295
 80009fc:	4991      	ldr	r1, [pc, #580]	; (8000c44 <HAL_GPIO_EXTI_Callback+0x2fc>)
 80009fe:	4892      	ldr	r0, [pc, #584]	; (8000c48 <HAL_GPIO_EXTI_Callback+0x300>)
 8000a00:	f002 fe03 	bl	800360a <HAL_UART_Transmit>
	  		 HAL_Delay(1000);
 8000a04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a08:	f001 f882 	bl	8001b10 <HAL_Delay>
	  		 if (Length ==1&&uRx_Data[0]=='Y') {
 8000a0c:	4b93      	ldr	r3, [pc, #588]	; (8000c5c <HAL_GPIO_EXTI_Callback+0x314>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d116      	bne.n	8000a42 <HAL_GPIO_EXTI_Callback+0xfa>
 8000a14:	4b92      	ldr	r3, [pc, #584]	; (8000c60 <HAL_GPIO_EXTI_Callback+0x318>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b59      	cmp	r3, #89	; 0x59
 8000a1a:	d112      	bne.n	8000a42 <HAL_GPIO_EXTI_Callback+0xfa>
	  			 f=1;
 8000a1c:	4b8c      	ldr	r3, [pc, #560]	; (8000c50 <HAL_GPIO_EXTI_Callback+0x308>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	601a      	str	r2, [r3, #0]
	  			 sprintf(msg, "\r\nReady...Go!\r\n\r\n");
 8000a22:	4990      	ldr	r1, [pc, #576]	; (8000c64 <HAL_GPIO_EXTI_Callback+0x31c>)
 8000a24:	4887      	ldr	r0, [pc, #540]	; (8000c44 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000a26:	f003 fbf7 	bl	8004218 <siprintf>
	  			 HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000a2a:	4886      	ldr	r0, [pc, #536]	; (8000c44 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000a2c:	f7ff fbfa 	bl	8000224 <strlen>
 8000a30:	4603      	mov	r3, r0
 8000a32:	b29a      	uxth	r2, r3
 8000a34:	f04f 33ff 	mov.w	r3, #4294967295
 8000a38:	4982      	ldr	r1, [pc, #520]	; (8000c44 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000a3a:	4883      	ldr	r0, [pc, #524]	; (8000c48 <HAL_GPIO_EXTI_Callback+0x300>)
 8000a3c:	f002 fde5 	bl	800360a <HAL_UART_Transmit>
	  			 break;
 8000a40:	e01c      	b.n	8000a7c <HAL_GPIO_EXTI_Callback+0x134>
	  		 }
	  		 else if (Length ==1&&uRx_Data[0]=='N'){
 8000a42:	4b86      	ldr	r3, [pc, #536]	; (8000c5c <HAL_GPIO_EXTI_Callback+0x314>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d113      	bne.n	8000a72 <HAL_GPIO_EXTI_Callback+0x12a>
 8000a4a:	4b85      	ldr	r3, [pc, #532]	; (8000c60 <HAL_GPIO_EXTI_Callback+0x318>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b4e      	cmp	r3, #78	; 0x4e
 8000a50:	d10f      	bne.n	8000a72 <HAL_GPIO_EXTI_Callback+0x12a>
	  			 sprintf(msg, "\r\nYou can play next time, Quit Game!\r\n");
 8000a52:	4985      	ldr	r1, [pc, #532]	; (8000c68 <HAL_GPIO_EXTI_Callback+0x320>)
 8000a54:	487b      	ldr	r0, [pc, #492]	; (8000c44 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000a56:	f003 fbdf 	bl	8004218 <siprintf>
	  			 HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000a5a:	487a      	ldr	r0, [pc, #488]	; (8000c44 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000a5c:	f7ff fbe2 	bl	8000224 <strlen>
 8000a60:	4603      	mov	r3, r0
 8000a62:	b29a      	uxth	r2, r3
 8000a64:	f04f 33ff 	mov.w	r3, #4294967295
 8000a68:	4976      	ldr	r1, [pc, #472]	; (8000c44 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000a6a:	4877      	ldr	r0, [pc, #476]	; (8000c48 <HAL_GPIO_EXTI_Callback+0x300>)
 8000a6c:	f002 fdcd 	bl	800360a <HAL_UART_Transmit>
	  			 break;
 8000a70:	e004      	b.n	8000a7c <HAL_GPIO_EXTI_Callback+0x134>
	  	while (j!=-1){
 8000a72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a7a:	d1a2      	bne.n	80009c2 <HAL_GPIO_EXTI_Callback+0x7a>
	  		 }

	  	}
	  	if (f==1){
 8000a7c:	4b74      	ldr	r3, [pc, #464]	; (8000c50 <HAL_GPIO_EXTI_Callback+0x308>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d13a      	bne.n	8000afa <HAL_GPIO_EXTI_Callback+0x1b2>
	  		HAL_Delay(1000);
 8000a84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a88:	f001 f842 	bl	8001b10 <HAL_Delay>
	  		 srand(seed);
 8000a8c:	4b77      	ldr	r3, [pc, #476]	; (8000c6c <HAL_GPIO_EXTI_Callback+0x324>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f003 faa5 	bl	8003fe0 <srand>
	  		for (int j=0;j<=(0+9)/3;j++){
 8000a96:	2300      	movs	r3, #0
 8000a98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000a9c:	e01e      	b.n	8000adc <HAL_GPIO_EXTI_Callback+0x194>
	  		  				  //x=(a*x+c)%m;
	  			  //srand((unsigned)time(NULL));
	  			           x=rand()%(25-0+1);
 8000a9e:	f003 facd 	bl	800403c <rand>
 8000aa2:	4602      	mov	r2, r0
 8000aa4:	4b72      	ldr	r3, [pc, #456]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x328>)
 8000aa6:	fb83 1302 	smull	r1, r3, r3, r2
 8000aaa:	10d9      	asrs	r1, r3, #3
 8000aac:	17d3      	asrs	r3, r2, #31
 8000aae:	1acb      	subs	r3, r1, r3
 8000ab0:	211a      	movs	r1, #26
 8000ab2:	fb01 f303 	mul.w	r3, r1, r3
 8000ab6:	1ad3      	subs	r3, r2, r3
 8000ab8:	4a6e      	ldr	r2, [pc, #440]	; (8000c74 <HAL_GPIO_EXTI_Callback+0x32c>)
 8000aba:	6013      	str	r3, [r2, #0]
	  		  				  string[j]='a'+x;
 8000abc:	4b6d      	ldr	r3, [pc, #436]	; (8000c74 <HAL_GPIO_EXTI_Callback+0x32c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	3361      	adds	r3, #97	; 0x61
 8000ac4:	b2d9      	uxtb	r1, r3
 8000ac6:	4a6c      	ldr	r2, [pc, #432]	; (8000c78 <HAL_GPIO_EXTI_Callback+0x330>)
 8000ac8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000acc:	4413      	add	r3, r2
 8000ace:	460a      	mov	r2, r1
 8000ad0:	701a      	strb	r2, [r3, #0]
	  		for (int j=0;j<=(0+9)/3;j++){
 8000ad2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000adc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000ae0:	2b03      	cmp	r3, #3
 8000ae2:	dddc      	ble.n	8000a9e <HAL_GPIO_EXTI_Callback+0x156>
	  		  			  }
	  		  			  string[(0+9)/3+1]='\0';
 8000ae4:	4b64      	ldr	r3, [pc, #400]	; (8000c78 <HAL_GPIO_EXTI_Callback+0x330>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	711a      	strb	r2, [r3, #4]
	  	 //x=rand()%(25-0+1);
	  	 MX_IWDG_Init();
 8000aea:	f7ff fdf7 	bl	80006dc <MX_IWDG_Init>
	  	 i=lim+1;
 8000aee:	4b63      	ldr	r3, [pc, #396]	; (8000c7c <HAL_GPIO_EXTI_Callback+0x334>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	3301      	adds	r3, #1
 8000af4:	4a50      	ldr	r2, [pc, #320]	; (8000c38 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8000af6:	6013      	str	r3, [r2, #0]
	  		}
	  	}

}

break;
 8000af8:	e233      	b.n	8000f62 <HAL_GPIO_EXTI_Callback+0x61a>
	  		while(1){
 8000afa:	e7fe      	b.n	8000afa <HAL_GPIO_EXTI_Callback+0x1b2>

case KEY_WK_Pin:
	if (HAL_GPIO_ReadPin(KEY_WK_GPIO_Port, KEY_WK_Pin) == GPIO_PIN_SET){
 8000afc:	2101      	movs	r1, #1
 8000afe:	4860      	ldr	r0, [pc, #384]	; (8000c80 <HAL_GPIO_EXTI_Callback+0x338>)
 8000b00:	f001 fc0e 	bl	8002320 <HAL_GPIO_ReadPin>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	f040 822d 	bne.w	8000f66 <HAL_GPIO_EXTI_Callback+0x61e>
         if (i>=0){
 8000b0c:	4b4a      	ldr	r3, [pc, #296]	; (8000c38 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	f2c0 8228 	blt.w	8000f66 <HAL_GPIO_EXTI_Callback+0x61e>
        	 if (mode==0){
 8000b16:	4b5b      	ldr	r3, [pc, #364]	; (8000c84 <HAL_GPIO_EXTI_Callback+0x33c>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d144      	bne.n	8000ba8 <HAL_GPIO_EXTI_Callback+0x260>
			mode=1;
 8000b1e:	4b59      	ldr	r3, [pc, #356]	; (8000c84 <HAL_GPIO_EXTI_Callback+0x33c>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	601a      	str	r2, [r3, #0]
			int ll=0,j;
 8000b24:	2300      	movs	r3, #0
 8000b26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			char str[]=" [Pause] Please press KEY_WK to continue!\r\n";
 8000b2a:	4b57      	ldr	r3, [pc, #348]	; (8000c88 <HAL_GPIO_EXTI_Callback+0x340>)
 8000b2c:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000b30:	461d      	mov	r5, r3
 8000b32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b3a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			for( j=0;str[j];j++ ){
 8000b42:	2300      	movs	r3, #0
 8000b44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8000b48:	e015      	b.n	8000b76 <HAL_GPIO_EXTI_Callback+0x22e>
								ll++;
 8000b4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000b4e:	3301      	adds	r3, #1
 8000b50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
								uRx_Data[j]=str[j];
 8000b54:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000b58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000b5c:	4413      	add	r3, r2
 8000b5e:	7819      	ldrb	r1, [r3, #0]
 8000b60:	4a3f      	ldr	r2, [pc, #252]	; (8000c60 <HAL_GPIO_EXTI_Callback+0x318>)
 8000b62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000b66:	4413      	add	r3, r2
 8000b68:	460a      	mov	r2, r1
 8000b6a:	701a      	strb	r2, [r3, #0]
			for( j=0;str[j];j++ ){
 8000b6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000b70:	3301      	adds	r3, #1
 8000b72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8000b76:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000b7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000b7e:	4413      	add	r3, r2
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d1e1      	bne.n	8000b4a <HAL_GPIO_EXTI_Callback+0x202>
							}
							HAL_UART_Transmit(&huart1, uRx_Data, ll, 0xffff);
 8000b86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000b8a:	b29a      	uxth	r2, r3
 8000b8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b90:	4933      	ldr	r1, [pc, #204]	; (8000c60 <HAL_GPIO_EXTI_Callback+0x318>)
 8000b92:	482d      	ldr	r0, [pc, #180]	; (8000c48 <HAL_GPIO_EXTI_Callback+0x300>)
 8000b94:	f002 fd39 	bl	800360a <HAL_UART_Transmit>
			HAL_TIM_Base_Start_IT(&htim3);
 8000b98:	483c      	ldr	r0, [pc, #240]	; (8000c8c <HAL_GPIO_EXTI_Callback+0x344>)
 8000b9a:	f002 f8dd 	bl	8002d58 <HAL_TIM_Base_Start_IT>
							HAL_Delay(1000);
 8000b9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ba2:	f000 ffb5 	bl	8001b10 <HAL_Delay>
							HAL_Delay(1000);
		}
         }

	}
	break;
 8000ba6:	e1de      	b.n	8000f66 <HAL_GPIO_EXTI_Callback+0x61e>
			mode=0;
 8000ba8:	4b36      	ldr	r3, [pc, #216]	; (8000c84 <HAL_GPIO_EXTI_Callback+0x33c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
			int ll=0,j;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			char str[]=" [continue] Welcome to come back again!\r\n";
 8000bb4:	4b36      	ldr	r3, [pc, #216]	; (8000c90 <HAL_GPIO_EXTI_Callback+0x348>)
 8000bb6:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000bba:	461d      	mov	r5, r3
 8000bbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bc8:	c403      	stmia	r4!, {r0, r1}
 8000bca:	8022      	strh	r2, [r4, #0]
			for( j=0;str[j];j++ ){
 8000bcc:	2300      	movs	r3, #0
 8000bce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000bd2:	e015      	b.n	8000c00 <HAL_GPIO_EXTI_Callback+0x2b8>
								ll++;
 8000bd4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000bd8:	3301      	adds	r3, #1
 8000bda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
								uRx_Data[j]=str[j];
 8000bde:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000be2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000be6:	4413      	add	r3, r2
 8000be8:	7819      	ldrb	r1, [r3, #0]
 8000bea:	4a1d      	ldr	r2, [pc, #116]	; (8000c60 <HAL_GPIO_EXTI_Callback+0x318>)
 8000bec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000bf0:	4413      	add	r3, r2
 8000bf2:	460a      	mov	r2, r1
 8000bf4:	701a      	strb	r2, [r3, #0]
			for( j=0;str[j];j++ ){
 8000bf6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000c00:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000c04:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000c08:	4413      	add	r3, r2
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d1e1      	bne.n	8000bd4 <HAL_GPIO_EXTI_Callback+0x28c>
							HAL_UART_Transmit(&huart1, uRx_Data, ll, 0xffff);
 8000c10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000c14:	b29a      	uxth	r2, r3
 8000c16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c1a:	4911      	ldr	r1, [pc, #68]	; (8000c60 <HAL_GPIO_EXTI_Callback+0x318>)
 8000c1c:	480a      	ldr	r0, [pc, #40]	; (8000c48 <HAL_GPIO_EXTI_Callback+0x300>)
 8000c1e:	f002 fcf4 	bl	800360a <HAL_UART_Transmit>
			HAL_TIM_Base_Stop_IT(&htim3);
 8000c22:	481a      	ldr	r0, [pc, #104]	; (8000c8c <HAL_GPIO_EXTI_Callback+0x344>)
 8000c24:	f002 f8f8 	bl	8002e18 <HAL_TIM_Base_Stop_IT>
							HAL_Delay(1000);
 8000c28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c2c:	f000 ff70 	bl	8001b10 <HAL_Delay>
	break;
 8000c30:	e199      	b.n	8000f66 <HAL_GPIO_EXTI_Callback+0x61e>
 8000c32:	bf00      	nop
 8000c34:	40011000 	.word	0x40011000
 8000c38:	20000000 	.word	0x20000000
 8000c3c:	2000012c 	.word	0x2000012c
 8000c40:	0800555c 	.word	0x0800555c
 8000c44:	20000130 	.word	0x20000130
 8000c48:	200000e8 	.word	0x200000e8
 8000c4c:	20000940 	.word	0x20000940
 8000c50:	20000530 	.word	0x20000530
 8000c54:	080055c4 	.word	0x080055c4
 8000c58:	080055cc 	.word	0x080055cc
 8000c5c:	20000d55 	.word	0x20000d55
 8000c60:	20000954 	.word	0x20000954
 8000c64:	080055ec 	.word	0x080055ec
 8000c68:	08005600 	.word	0x08005600
 8000c6c:	20000004 	.word	0x20000004
 8000c70:	4ec4ec4f 	.word	0x4ec4ec4f
 8000c74:	20000934 	.word	0x20000934
 8000c78:	20000534 	.word	0x20000534
 8000c7c:	20000008 	.word	0x20000008
 8000c80:	40010800 	.word	0x40010800
 8000c84:	20000938 	.word	0x20000938
 8000c88:	08005628 	.word	0x08005628
 8000c8c:	200000a0 	.word	0x200000a0
 8000c90:	08005654 	.word	0x08005654
case KEY1_Pin:
	if (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_RESET){
 8000c94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c98:	48b6      	ldr	r0, [pc, #728]	; (8000f74 <HAL_GPIO_EXTI_Callback+0x62c>)
 8000c9a:	f001 fb41 	bl	8002320 <HAL_GPIO_ReadPin>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	f040 8162 	bne.w	8000f6a <HAL_GPIO_EXTI_Callback+0x622>
		 if (i>=0){
 8000ca6:	4bb4      	ldr	r3, [pc, #720]	; (8000f78 <HAL_GPIO_EXTI_Callback+0x630>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	f2c0 815d 	blt.w	8000f6a <HAL_GPIO_EXTI_Callback+0x622>
			mode=1;
 8000cb0:	4bb2      	ldr	r3, [pc, #712]	; (8000f7c <HAL_GPIO_EXTI_Callback+0x634>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	601a      	str	r2, [r3, #0]
			int ll=0,j;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			char str[]=" [UPDATE] The current time limit is ";
 8000cbc:	4bb0      	ldr	r3, [pc, #704]	; (8000f80 <HAL_GPIO_EXTI_Callback+0x638>)
 8000cbe:	f107 040c 	add.w	r4, r7, #12
 8000cc2:	461d      	mov	r5, r3
 8000cc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ccc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000cd0:	6020      	str	r0, [r4, #0]
 8000cd2:	3404      	adds	r4, #4
 8000cd4:	7021      	strb	r1, [r4, #0]
			int k=lim,len=0;
 8000cd6:	4bab      	ldr	r3, [pc, #684]	; (8000f84 <HAL_GPIO_EXTI_Callback+0x63c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000cde:	2300      	movs	r3, #0
 8000ce0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			char add[]="new";
 8000ce4:	4ba8      	ldr	r3, [pc, #672]	; (8000f88 <HAL_GPIO_EXTI_Callback+0x640>)
 8000ce6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			char fin[]="friend";
 8000cea:	4aa8      	ldr	r2, [pc, #672]	; (8000f8c <HAL_GPIO_EXTI_Callback+0x644>)
 8000cec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cf0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cf4:	6018      	str	r0, [r3, #0]
 8000cf6:	3304      	adds	r3, #4
 8000cf8:	8019      	strh	r1, [r3, #0]
 8000cfa:	3302      	adds	r3, #2
 8000cfc:	0c0a      	lsrs	r2, r1, #16
 8000cfe:	701a      	strb	r2, [r3, #0]
			while(k!=0){
 8000d00:	e025      	b.n	8000d4e <HAL_GPIO_EXTI_Callback+0x406>
				add[len]=k%10+48;
 8000d02:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8000d06:	4ba2      	ldr	r3, [pc, #648]	; (8000f90 <HAL_GPIO_EXTI_Callback+0x648>)
 8000d08:	fb83 1302 	smull	r1, r3, r3, r2
 8000d0c:	1099      	asrs	r1, r3, #2
 8000d0e:	17d3      	asrs	r3, r2, #31
 8000d10:	1ac9      	subs	r1, r1, r3
 8000d12:	460b      	mov	r3, r1
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	440b      	add	r3, r1
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	1ad1      	subs	r1, r2, r3
 8000d1c:	b2cb      	uxtb	r3, r1
 8000d1e:	3330      	adds	r3, #48	; 0x30
 8000d20:	b2d9      	uxtb	r1, r3
 8000d22:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8000d26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000d2a:	4413      	add	r3, r2
 8000d2c:	460a      	mov	r2, r1
 8000d2e:	701a      	strb	r2, [r3, #0]
				len++;
 8000d30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000d34:	3301      	adds	r3, #1
 8000d36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				k=k/10;
 8000d3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000d3e:	4a94      	ldr	r2, [pc, #592]	; (8000f90 <HAL_GPIO_EXTI_Callback+0x648>)
 8000d40:	fb82 1203 	smull	r1, r2, r2, r3
 8000d44:	1092      	asrs	r2, r2, #2
 8000d46:	17db      	asrs	r3, r3, #31
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			while(k!=0){
 8000d4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d1d5      	bne.n	8000d02 <HAL_GPIO_EXTI_Callback+0x3ba>
				//Time limit changed: ? seconds.\r\n";
			}
			for (j=0;j<len;j++){
 8000d56:	2300      	movs	r3, #0
 8000d58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000d5c:	e015      	b.n	8000d8a <HAL_GPIO_EXTI_Callback+0x442>
				fin[j]=add[len-1-j];
 8000d5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000d62:	1e5a      	subs	r2, r3, #1
 8000d64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	33d0      	adds	r3, #208	; 0xd0
 8000d6c:	443b      	add	r3, r7
 8000d6e:	f813 1c2c 	ldrb.w	r1, [r3, #-44]
 8000d72:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8000d76:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000d7a:	4413      	add	r3, r2
 8000d7c:	460a      	mov	r2, r1
 8000d7e:	701a      	strb	r2, [r3, #0]
			for (j=0;j<len;j++){
 8000d80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000d84:	3301      	adds	r3, #1
 8000d86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000d8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8000d8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000d92:	429a      	cmp	r2, r3
 8000d94:	dbe3      	blt.n	8000d5e <HAL_GPIO_EXTI_Callback+0x416>
			}
			for( j=0;str[j];j++ ){
 8000d96:	2300      	movs	r3, #0
 8000d98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000d9c:	e015      	b.n	8000dca <HAL_GPIO_EXTI_Callback+0x482>
								ll++;
 8000d9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000da2:	3301      	adds	r3, #1
 8000da4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
								uRx_Data[j]=str[j];
 8000da8:	f107 020c 	add.w	r2, r7, #12
 8000dac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000db0:	4413      	add	r3, r2
 8000db2:	7819      	ldrb	r1, [r3, #0]
 8000db4:	4a77      	ldr	r2, [pc, #476]	; (8000f94 <HAL_GPIO_EXTI_Callback+0x64c>)
 8000db6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000dba:	4413      	add	r3, r2
 8000dbc:	460a      	mov	r2, r1
 8000dbe:	701a      	strb	r2, [r3, #0]
			for( j=0;str[j];j++ ){
 8000dc0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000dca:	f107 020c 	add.w	r2, r7, #12
 8000dce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000dd2:	4413      	add	r3, r2
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d1e1      	bne.n	8000d9e <HAL_GPIO_EXTI_Callback+0x456>
							}
			for (j=0;j<len;j++){
 8000dda:	2300      	movs	r3, #0
 8000ddc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000de0:	e015      	b.n	8000e0e <HAL_GPIO_EXTI_Callback+0x4c6>

			uRx_Data[ll]=fin[j];
 8000de2:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8000de6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000dea:	4413      	add	r3, r2
 8000dec:	7819      	ldrb	r1, [r3, #0]
 8000dee:	4a69      	ldr	r2, [pc, #420]	; (8000f94 <HAL_GPIO_EXTI_Callback+0x64c>)
 8000df0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000df4:	4413      	add	r3, r2
 8000df6:	460a      	mov	r2, r1
 8000df8:	701a      	strb	r2, [r3, #0]
			ll++;
 8000dfa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000dfe:	3301      	adds	r3, #1
 8000e00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			for (j=0;j<len;j++){
 8000e04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000e08:	3301      	adds	r3, #1
 8000e0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000e0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8000e12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000e16:	429a      	cmp	r2, r3
 8000e18:	dbe3      	blt.n	8000de2 <HAL_GPIO_EXTI_Callback+0x49a>
			}
			if (lim>1){
 8000e1a:	4b5a      	ldr	r3, [pc, #360]	; (8000f84 <HAL_GPIO_EXTI_Callback+0x63c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	dd28      	ble.n	8000e74 <HAL_GPIO_EXTI_Callback+0x52c>
				char str1[]=" seconds.\r\n";
 8000e22:	4a5d      	ldr	r2, [pc, #372]	; (8000f98 <HAL_GPIO_EXTI_Callback+0x650>)
 8000e24:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000e28:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e2a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			for( j=0;str1[j];j++ ){
 8000e2e:	2300      	movs	r3, #0
 8000e30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000e34:	e015      	b.n	8000e62 <HAL_GPIO_EXTI_Callback+0x51a>

											uRx_Data[ll]=str1[j];
 8000e36:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8000e3a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000e3e:	4413      	add	r3, r2
 8000e40:	7819      	ldrb	r1, [r3, #0]
 8000e42:	4a54      	ldr	r2, [pc, #336]	; (8000f94 <HAL_GPIO_EXTI_Callback+0x64c>)
 8000e44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000e48:	4413      	add	r3, r2
 8000e4a:	460a      	mov	r2, r1
 8000e4c:	701a      	strb	r2, [r3, #0]
											ll++;
 8000e4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000e52:	3301      	adds	r3, #1
 8000e54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			for( j=0;str1[j];j++ ){
 8000e58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000e62:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8000e66:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000e6a:	4413      	add	r3, r2
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d1e1      	bne.n	8000e36 <HAL_GPIO_EXTI_Callback+0x4ee>
 8000e72:	e02a      	b.n	8000eca <HAL_GPIO_EXTI_Callback+0x582>
										}
			}
			else {
				char str1[]=" second.\r\n";
 8000e74:	4a49      	ldr	r2, [pc, #292]	; (8000f9c <HAL_GPIO_EXTI_Callback+0x654>)
 8000e76:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000e7a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e7c:	c303      	stmia	r3!, {r0, r1}
 8000e7e:	801a      	strh	r2, [r3, #0]
 8000e80:	3302      	adds	r3, #2
 8000e82:	0c12      	lsrs	r2, r2, #16
 8000e84:	701a      	strb	r2, [r3, #0]
						for( j=0;str1[j];j++ ){
 8000e86:	2300      	movs	r3, #0
 8000e88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000e8c:	e015      	b.n	8000eba <HAL_GPIO_EXTI_Callback+0x572>

														uRx_Data[ll]=str1[j];
 8000e8e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8000e92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000e96:	4413      	add	r3, r2
 8000e98:	7819      	ldrb	r1, [r3, #0]
 8000e9a:	4a3e      	ldr	r2, [pc, #248]	; (8000f94 <HAL_GPIO_EXTI_Callback+0x64c>)
 8000e9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000ea0:	4413      	add	r3, r2
 8000ea2:	460a      	mov	r2, r1
 8000ea4:	701a      	strb	r2, [r3, #0]
														ll++;
 8000ea6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000eaa:	3301      	adds	r3, #1
 8000eac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
						for( j=0;str1[j];j++ ){
 8000eb0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000eba:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8000ebe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000ec2:	4413      	add	r3, r2
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d1e1      	bne.n	8000e8e <HAL_GPIO_EXTI_Callback+0x546>
													}
			}

							HAL_UART_Transmit(&huart1, uRx_Data, ll, 0xffff);
 8000eca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ed4:	492f      	ldr	r1, [pc, #188]	; (8000f94 <HAL_GPIO_EXTI_Callback+0x64c>)
 8000ed6:	4832      	ldr	r0, [pc, #200]	; (8000fa0 <HAL_GPIO_EXTI_Callback+0x658>)
 8000ed8:	f002 fb97 	bl	800360a <HAL_UART_Transmit>
							ll=0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
							char str2[]=" [UPDATE] Time limit changed: ? seconds(? can be [1, 20]). Please input ?.\r\n";
 8000ee2:	4a30      	ldr	r2, [pc, #192]	; (8000fa4 <HAL_GPIO_EXTI_Callback+0x65c>)
 8000ee4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ee8:	4611      	mov	r1, r2
 8000eea:	224d      	movs	r2, #77	; 0x4d
 8000eec:	4618      	mov	r0, r3
 8000eee:	f003 fa71 	bl	80043d4 <memcpy>
							for( j=0;str2[j];j++ ){
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000ef8:	e015      	b.n	8000f26 <HAL_GPIO_EXTI_Callback+0x5de>
												ll++;
 8000efa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000efe:	3301      	adds	r3, #1
 8000f00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
												uRx_Data[j]=str2[j];
 8000f04:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000f08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000f0c:	4413      	add	r3, r2
 8000f0e:	7819      	ldrb	r1, [r3, #0]
 8000f10:	4a20      	ldr	r2, [pc, #128]	; (8000f94 <HAL_GPIO_EXTI_Callback+0x64c>)
 8000f12:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000f16:	4413      	add	r3, r2
 8000f18:	460a      	mov	r2, r1
 8000f1a:	701a      	strb	r2, [r3, #0]
							for( j=0;str2[j];j++ ){
 8000f1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000f20:	3301      	adds	r3, #1
 8000f22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000f26:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000f2a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000f2e:	4413      	add	r3, r2
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d1e1      	bne.n	8000efa <HAL_GPIO_EXTI_Callback+0x5b2>
											}

											HAL_UART_Transmit(&huart1, uRx_Data, ll, 0xffff);
 8000f36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f40:	4914      	ldr	r1, [pc, #80]	; (8000f94 <HAL_GPIO_EXTI_Callback+0x64c>)
 8000f42:	4817      	ldr	r0, [pc, #92]	; (8000fa0 <HAL_GPIO_EXTI_Callback+0x658>)
 8000f44:	f002 fb61 	bl	800360a <HAL_UART_Transmit>
							updatevalue=1;
 8000f48:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <HAL_GPIO_EXTI_Callback+0x660>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim3);
 8000f4e:	4817      	ldr	r0, [pc, #92]	; (8000fac <HAL_GPIO_EXTI_Callback+0x664>)
 8000f50:	f001 ff02 	bl	8002d58 <HAL_TIM_Base_Start_IT>
							HAL_Delay(1000);
 8000f54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f58:	f000 fdda 	bl	8001b10 <HAL_Delay>


		 }
	}
	break;
 8000f5c:	e005      	b.n	8000f6a <HAL_GPIO_EXTI_Callback+0x622>
default:
break;
 8000f5e:	bf00      	nop
 8000f60:	e004      	b.n	8000f6c <HAL_GPIO_EXTI_Callback+0x624>
break;
 8000f62:	bf00      	nop
 8000f64:	e002      	b.n	8000f6c <HAL_GPIO_EXTI_Callback+0x624>
	break;
 8000f66:	bf00      	nop
 8000f68:	e000      	b.n	8000f6c <HAL_GPIO_EXTI_Callback+0x624>
	break;
 8000f6a:	bf00      	nop
}
}
 8000f6c:	bf00      	nop
 8000f6e:	37d0      	adds	r7, #208	; 0xd0
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bdb0      	pop	{r4, r5, r7, pc}
 8000f74:	40010800 	.word	0x40010800
 8000f78:	20000000 	.word	0x20000000
 8000f7c:	20000938 	.word	0x20000938
 8000f80:	08005680 	.word	0x08005680
 8000f84:	20000008 	.word	0x20000008
 8000f88:	0077656e 	.word	0x0077656e
 8000f8c:	080056a8 	.word	0x080056a8
 8000f90:	66666667 	.word	0x66666667
 8000f94:	20000954 	.word	0x20000954
 8000f98:	080056b0 	.word	0x080056b0
 8000f9c:	080056bc 	.word	0x080056bc
 8000fa0:	200000e8 	.word	0x200000e8
 8000fa4:	080056c8 	.word	0x080056c8
 8000fa8:	2000093c 	.word	0x2000093c
 8000fac:	200000a0 	.word	0x200000a0

08000fb0 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
	HAL_IWDG_Refresh(&hiwdg);
 8000fb8:	4803      	ldr	r0, [pc, #12]	; (8000fc8 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8000fba:	f001 fa53 	bl	8002464 <HAL_IWDG_Refresh>

}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000094 	.word	0x20000094

08000fcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd0:	b672      	cpsid	i
}
 8000fd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <Error_Handler+0x8>
	...

08000fd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fde:	4b16      	ldr	r3, [pc, #88]	; (8001038 <HAL_MspInit+0x60>)
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	4a15      	ldr	r2, [pc, #84]	; (8001038 <HAL_MspInit+0x60>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6193      	str	r3, [r2, #24]
 8000fea:	4b13      	ldr	r3, [pc, #76]	; (8001038 <HAL_MspInit+0x60>)
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	60bb      	str	r3, [r7, #8]
 8000ff4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff6:	4b10      	ldr	r3, [pc, #64]	; (8001038 <HAL_MspInit+0x60>)
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	4a0f      	ldr	r2, [pc, #60]	; (8001038 <HAL_MspInit+0x60>)
 8000ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001000:	61d3      	str	r3, [r2, #28]
 8001002:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <HAL_MspInit+0x60>)
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800100e:	2005      	movs	r0, #5
 8001010:	f000 fe6e 	bl	8001cf0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001014:	4b09      	ldr	r3, [pc, #36]	; (800103c <HAL_MspInit+0x64>)
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	4a04      	ldr	r2, [pc, #16]	; (800103c <HAL_MspInit+0x64>)
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40021000 	.word	0x40021000
 800103c:	40010000 	.word	0x40010000

08001040 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0d      	ldr	r2, [pc, #52]	; (8001084 <HAL_TIM_Base_MspInit+0x44>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d113      	bne.n	800107a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001052:	4b0d      	ldr	r3, [pc, #52]	; (8001088 <HAL_TIM_Base_MspInit+0x48>)
 8001054:	69db      	ldr	r3, [r3, #28]
 8001056:	4a0c      	ldr	r2, [pc, #48]	; (8001088 <HAL_TIM_Base_MspInit+0x48>)
 8001058:	f043 0302 	orr.w	r3, r3, #2
 800105c:	61d3      	str	r3, [r2, #28]
 800105e:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <HAL_TIM_Base_MspInit+0x48>)
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	2100      	movs	r1, #0
 800106e:	201d      	movs	r0, #29
 8001070:	f000 fe49 	bl	8001d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001074:	201d      	movs	r0, #29
 8001076:	f000 fe62 	bl	8001d3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800107a:	bf00      	nop
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40000400 	.word	0x40000400
 8001088:	40021000 	.word	0x40021000

0800108c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b088      	sub	sp, #32
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 0310 	add.w	r3, r7, #16
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a20      	ldr	r2, [pc, #128]	; (8001128 <HAL_UART_MspInit+0x9c>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d139      	bne.n	8001120 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010ac:	4b1f      	ldr	r3, [pc, #124]	; (800112c <HAL_UART_MspInit+0xa0>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	4a1e      	ldr	r2, [pc, #120]	; (800112c <HAL_UART_MspInit+0xa0>)
 80010b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b6:	6193      	str	r3, [r2, #24]
 80010b8:	4b1c      	ldr	r3, [pc, #112]	; (800112c <HAL_UART_MspInit+0xa0>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c4:	4b19      	ldr	r3, [pc, #100]	; (800112c <HAL_UART_MspInit+0xa0>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	4a18      	ldr	r2, [pc, #96]	; (800112c <HAL_UART_MspInit+0xa0>)
 80010ca:	f043 0304 	orr.w	r3, r3, #4
 80010ce:	6193      	str	r3, [r2, #24]
 80010d0:	4b16      	ldr	r3, [pc, #88]	; (800112c <HAL_UART_MspInit+0xa0>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	f003 0304 	and.w	r3, r3, #4
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e2:	2302      	movs	r3, #2
 80010e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010e6:	2303      	movs	r3, #3
 80010e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ea:	f107 0310 	add.w	r3, r7, #16
 80010ee:	4619      	mov	r1, r3
 80010f0:	480f      	ldr	r0, [pc, #60]	; (8001130 <HAL_UART_MspInit+0xa4>)
 80010f2:	f000 ff81 	bl	8001ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001104:	f107 0310 	add.w	r3, r7, #16
 8001108:	4619      	mov	r1, r3
 800110a:	4809      	ldr	r0, [pc, #36]	; (8001130 <HAL_UART_MspInit+0xa4>)
 800110c:	f000 ff74 	bl	8001ff8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001110:	2200      	movs	r2, #0
 8001112:	2101      	movs	r1, #1
 8001114:	2025      	movs	r0, #37	; 0x25
 8001116:	f000 fdf6 	bl	8001d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800111a:	2025      	movs	r0, #37	; 0x25
 800111c:	f000 fe0f 	bl	8001d3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001120:	bf00      	nop
 8001122:	3720      	adds	r7, #32
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40013800 	.word	0x40013800
 800112c:	40021000 	.word	0x40021000
 8001130:	40010800 	.word	0x40010800

08001134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001138:	e7fe      	b.n	8001138 <NMI_Handler+0x4>

0800113a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800113e:	e7fe      	b.n	800113e <HardFault_Handler+0x4>

08001140 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001144:	e7fe      	b.n	8001144 <MemManage_Handler+0x4>

08001146 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800114a:	e7fe      	b.n	800114a <BusFault_Handler+0x4>

0800114c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001150:	e7fe      	b.n	8001150 <UsageFault_Handler+0x4>

08001152 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr

0800115e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr

0800116a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr

08001176 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800117a:	f000 fcad 	bl	8001ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}

08001182 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_WK_Pin);
 8001186:	2001      	movs	r0, #1
 8001188:	f001 f912 	bl	80023b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}

08001190 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY0_Pin);
 8001194:	2020      	movs	r0, #32
 8001196:	f001 f90b 	bl	80023b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80011a4:	4802      	ldr	r0, [pc, #8]	; (80011b0 <TIM3_IRQHandler+0x10>)
 80011a6:	f001 fe65 	bl	8002e74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	200000a0 	.word	0x200000a0

080011b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011b8:	4804      	ldr	r0, [pc, #16]	; (80011cc <USART1_IRQHandler+0x18>)
 80011ba:	f002 fae9 	bl	8003790 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  HAL_UART_Receive_IT(&huart1,(uint8_t *)rxBuffer,1);
 80011be:	2201      	movs	r2, #1
 80011c0:	4903      	ldr	r1, [pc, #12]	; (80011d0 <USART1_IRQHandler+0x1c>)
 80011c2:	4802      	ldr	r0, [pc, #8]	; (80011cc <USART1_IRQHandler+0x18>)
 80011c4:	f002 fab3 	bl	800372e <HAL_UART_Receive_IT>
  /* USER CODE END USART1_IRQn 1 */
}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	200000e8 	.word	0x200000e8
 80011d0:	20000940 	.word	0x20000940

080011d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY1_Pin);
 80011d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80011dc:	f001 f8e8 	bl	80023b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011e4:	b5b0      	push	{r4, r5, r7, lr}
 80011e6:	f5ad 6d95 	sub.w	sp, sp, #1192	; 0x4a8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 80011f0:	f2a3 43a4 	subw	r3, r3, #1188	; 0x4a4
 80011f4:	6018      	str	r0, [r3, #0]
	if (initial>=1)
 80011f6:	4bac      	ldr	r3, [pc, #688]	; (80014a8 <HAL_UART_RxCpltCallback+0x2c4>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f340 832b 	ble.w	8001856 <HAL_UART_RxCpltCallback+0x672>
if(huart->Instance==USART1){
 8001200:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8001204:	f2a3 43a4 	subw	r3, r3, #1188	; 0x4a4
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4aa7      	ldr	r2, [pc, #668]	; (80014ac <HAL_UART_RxCpltCallback+0x2c8>)
 800120e:	4293      	cmp	r3, r2
 8001210:	f040 8321 	bne.w	8001856 <HAL_UART_RxCpltCallback+0x672>
if(rxBuffer[0] == '\n'){
 8001214:	4ba6      	ldr	r3, [pc, #664]	; (80014b0 <HAL_UART_RxCpltCallback+0x2cc>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b0a      	cmp	r3, #10
 800121a:	f040 830f 	bne.w	800183c <HAL_UART_RxCpltCallback+0x658>
	flag=uRx_Data[0];
 800121e:	4ba5      	ldr	r3, [pc, #660]	; (80014b4 <HAL_UART_RxCpltCallback+0x2d0>)
 8001220:	781a      	ldrb	r2, [r3, #0]
 8001222:	4ba5      	ldr	r3, [pc, #660]	; (80014b8 <HAL_UART_RxCpltCallback+0x2d4>)
 8001224:	701a      	strb	r2, [r3, #0]
	Length=uLength-1;
 8001226:	4ba5      	ldr	r3, [pc, #660]	; (80014bc <HAL_UART_RxCpltCallback+0x2d8>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	3b01      	subs	r3, #1
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4ba4      	ldr	r3, [pc, #656]	; (80014c0 <HAL_UART_RxCpltCallback+0x2dc>)
 8001230:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, uRx_Data, uLength, 0xffff);
 8001232:	4ba2      	ldr	r3, [pc, #648]	; (80014bc <HAL_UART_RxCpltCallback+0x2d8>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	b29a      	uxth	r2, r3
 8001238:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800123c:	499d      	ldr	r1, [pc, #628]	; (80014b4 <HAL_UART_RxCpltCallback+0x2d0>)
 800123e:	48a1      	ldr	r0, [pc, #644]	; (80014c4 <HAL_UART_RxCpltCallback+0x2e0>)
 8001240:	f002 f9e3 	bl	800360a <HAL_UART_Transmit>
	int j;
	if (f==1){
 8001244:	4ba0      	ldr	r3, [pc, #640]	; (80014c8 <HAL_UART_RxCpltCallback+0x2e4>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b01      	cmp	r3, #1
 800124a:	f040 82f3 	bne.w	8001834 <HAL_UART_RxCpltCallback+0x650>
		if (updatevalue==1){
 800124e:	4b9f      	ldr	r3, [pc, #636]	; (80014cc <HAL_UART_RxCpltCallback+0x2e8>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2b01      	cmp	r3, #1
 8001254:	f040 810d 	bne.w	8001472 <HAL_UART_RxCpltCallback+0x28e>
			updatevalue=0;
 8001258:	4b9c      	ldr	r3, [pc, #624]	; (80014cc <HAL_UART_RxCpltCallback+0x2e8>)
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
			lim=0;
 800125e:	4b9c      	ldr	r3, [pc, #624]	; (80014d0 <HAL_UART_RxCpltCallback+0x2ec>)
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
			for (j=0;j<Length;j++){
 8001264:	2300      	movs	r3, #0
 8001266:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
 800126a:	e014      	b.n	8001296 <HAL_UART_RxCpltCallback+0xb2>
						lim=lim*10+uRx_Data[j]-48;
 800126c:	4b98      	ldr	r3, [pc, #608]	; (80014d0 <HAL_UART_RxCpltCallback+0x2ec>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4613      	mov	r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	4413      	add	r3, r2
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	4619      	mov	r1, r3
 800127a:	4a8e      	ldr	r2, [pc, #568]	; (80014b4 <HAL_UART_RxCpltCallback+0x2d0>)
 800127c:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 8001280:	4413      	add	r3, r2
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	440b      	add	r3, r1
 8001286:	3b30      	subs	r3, #48	; 0x30
 8001288:	4a91      	ldr	r2, [pc, #580]	; (80014d0 <HAL_UART_RxCpltCallback+0x2ec>)
 800128a:	6013      	str	r3, [r2, #0]
			for (j=0;j<Length;j++){
 800128c:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 8001290:	3301      	adds	r3, #1
 8001292:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
 8001296:	4b8a      	ldr	r3, [pc, #552]	; (80014c0 <HAL_UART_RxCpltCallback+0x2dc>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	461a      	mov	r2, r3
 800129c:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 80012a0:	4293      	cmp	r3, r2
 80012a2:	dbe3      	blt.n	800126c <HAL_UART_RxCpltCallback+0x88>
				}
			int ll=0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
			char str3[]=" [UPDATE] Time limit changed: ";
 80012aa:	4b8a      	ldr	r3, [pc, #552]	; (80014d4 <HAL_UART_RxCpltCallback+0x2f0>)
 80012ac:	f507 648d 	add.w	r4, r7, #1128	; 0x468
 80012b0:	461d      	mov	r5, r3
 80012b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80012ba:	c407      	stmia	r4!, {r0, r1, r2}
 80012bc:	8023      	strh	r3, [r4, #0]
 80012be:	3402      	adds	r4, #2
 80012c0:	0c1b      	lsrs	r3, r3, #16
 80012c2:	7023      	strb	r3, [r4, #0]
			char fin[]="friend";
 80012c4:	4a84      	ldr	r2, [pc, #528]	; (80014d8 <HAL_UART_RxCpltCallback+0x2f4>)
 80012c6:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80012ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012ce:	6018      	str	r0, [r3, #0]
 80012d0:	3304      	adds	r3, #4
 80012d2:	8019      	strh	r1, [r3, #0]
 80012d4:	3302      	adds	r3, #2
 80012d6:	0c0a      	lsrs	r2, r1, #16
 80012d8:	701a      	strb	r2, [r3, #0]
			for (j=0;j<Length;j++){
 80012da:	2300      	movs	r3, #0
 80012dc:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
 80012e0:	e010      	b.n	8001304 <HAL_UART_RxCpltCallback+0x120>
									fin[j]=uRx_Data[j];
 80012e2:	4a74      	ldr	r2, [pc, #464]	; (80014b4 <HAL_UART_RxCpltCallback+0x2d0>)
 80012e4:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 80012e8:	4413      	add	r3, r2
 80012ea:	7819      	ldrb	r1, [r3, #0]
 80012ec:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 80012f0:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 80012f4:	4413      	add	r3, r2
 80012f6:	460a      	mov	r2, r1
 80012f8:	701a      	strb	r2, [r3, #0]
			for (j=0;j<Length;j++){
 80012fa:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 80012fe:	3301      	adds	r3, #1
 8001300:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
 8001304:	4b6e      	ldr	r3, [pc, #440]	; (80014c0 <HAL_UART_RxCpltCallback+0x2dc>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	461a      	mov	r2, r3
 800130a:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 800130e:	4293      	cmp	r3, r2
 8001310:	dbe7      	blt.n	80012e2 <HAL_UART_RxCpltCallback+0xfe>
							}
			for( j=0;str3[j];j++ ){
 8001312:	2300      	movs	r3, #0
 8001314:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
 8001318:	e015      	b.n	8001346 <HAL_UART_RxCpltCallback+0x162>
											ll++;
 800131a:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 800131e:	3301      	adds	r3, #1
 8001320:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
											uRx_Data[j]=str3[j];
 8001324:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 8001328:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 800132c:	4413      	add	r3, r2
 800132e:	7819      	ldrb	r1, [r3, #0]
 8001330:	4a60      	ldr	r2, [pc, #384]	; (80014b4 <HAL_UART_RxCpltCallback+0x2d0>)
 8001332:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 8001336:	4413      	add	r3, r2
 8001338:	460a      	mov	r2, r1
 800133a:	701a      	strb	r2, [r3, #0]
			for( j=0;str3[j];j++ ){
 800133c:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 8001340:	3301      	adds	r3, #1
 8001342:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
 8001346:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 800134a:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 800134e:	4413      	add	r3, r2
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1e1      	bne.n	800131a <HAL_UART_RxCpltCallback+0x136>
										}
			for (j=0;j<Length;j++){
 8001356:	2300      	movs	r3, #0
 8001358:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
 800135c:	e015      	b.n	800138a <HAL_UART_RxCpltCallback+0x1a6>

						uRx_Data[ll]=fin[j];
 800135e:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 8001362:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 8001366:	4413      	add	r3, r2
 8001368:	7819      	ldrb	r1, [r3, #0]
 800136a:	4a52      	ldr	r2, [pc, #328]	; (80014b4 <HAL_UART_RxCpltCallback+0x2d0>)
 800136c:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 8001370:	4413      	add	r3, r2
 8001372:	460a      	mov	r2, r1
 8001374:	701a      	strb	r2, [r3, #0]
						ll++;
 8001376:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 800137a:	3301      	adds	r3, #1
 800137c:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
			for (j=0;j<Length;j++){
 8001380:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 8001384:	3301      	adds	r3, #1
 8001386:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
 800138a:	4b4d      	ldr	r3, [pc, #308]	; (80014c0 <HAL_UART_RxCpltCallback+0x2dc>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	461a      	mov	r2, r3
 8001390:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 8001394:	4293      	cmp	r3, r2
 8001396:	dbe2      	blt.n	800135e <HAL_UART_RxCpltCallback+0x17a>
						}
			if (lim>1){
 8001398:	4b4d      	ldr	r3, [pc, #308]	; (80014d0 <HAL_UART_RxCpltCallback+0x2ec>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b01      	cmp	r3, #1
 800139e:	dd28      	ble.n	80013f2 <HAL_UART_RxCpltCallback+0x20e>
								char str1[]=" seconds.\r\n";
 80013a0:	4a4e      	ldr	r2, [pc, #312]	; (80014dc <HAL_UART_RxCpltCallback+0x2f8>)
 80013a2:	f207 4354 	addw	r3, r7, #1108	; 0x454
 80013a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80013a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
							for( j=0;str1[j];j++ ){
 80013ac:	2300      	movs	r3, #0
 80013ae:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
 80013b2:	e015      	b.n	80013e0 <HAL_UART_RxCpltCallback+0x1fc>

															uRx_Data[ll]=str1[j];
 80013b4:	f207 4254 	addw	r2, r7, #1108	; 0x454
 80013b8:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 80013bc:	4413      	add	r3, r2
 80013be:	7819      	ldrb	r1, [r3, #0]
 80013c0:	4a3c      	ldr	r2, [pc, #240]	; (80014b4 <HAL_UART_RxCpltCallback+0x2d0>)
 80013c2:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 80013c6:	4413      	add	r3, r2
 80013c8:	460a      	mov	r2, r1
 80013ca:	701a      	strb	r2, [r3, #0]
															ll++;
 80013cc:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 80013d0:	3301      	adds	r3, #1
 80013d2:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
							for( j=0;str1[j];j++ ){
 80013d6:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 80013da:	3301      	adds	r3, #1
 80013dc:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
 80013e0:	f207 4254 	addw	r2, r7, #1108	; 0x454
 80013e4:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 80013e8:	4413      	add	r3, r2
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1e1      	bne.n	80013b4 <HAL_UART_RxCpltCallback+0x1d0>
 80013f0:	e02a      	b.n	8001448 <HAL_UART_RxCpltCallback+0x264>
														}
							}
							else {
								char str1[]=" second.\r\n";
 80013f2:	4a3b      	ldr	r2, [pc, #236]	; (80014e0 <HAL_UART_RxCpltCallback+0x2fc>)
 80013f4:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80013f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80013fa:	c303      	stmia	r3!, {r0, r1}
 80013fc:	801a      	strh	r2, [r3, #0]
 80013fe:	3302      	adds	r3, #2
 8001400:	0c12      	lsrs	r2, r2, #16
 8001402:	701a      	strb	r2, [r3, #0]
										for( j=0;str1[j];j++ ){
 8001404:	2300      	movs	r3, #0
 8001406:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
 800140a:	e015      	b.n	8001438 <HAL_UART_RxCpltCallback+0x254>

																		uRx_Data[ll]=str1[j];
 800140c:	f507 6289 	add.w	r2, r7, #1096	; 0x448
 8001410:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 8001414:	4413      	add	r3, r2
 8001416:	7819      	ldrb	r1, [r3, #0]
 8001418:	4a26      	ldr	r2, [pc, #152]	; (80014b4 <HAL_UART_RxCpltCallback+0x2d0>)
 800141a:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 800141e:	4413      	add	r3, r2
 8001420:	460a      	mov	r2, r1
 8001422:	701a      	strb	r2, [r3, #0]
																		ll++;
 8001424:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 8001428:	3301      	adds	r3, #1
 800142a:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
										for( j=0;str1[j];j++ ){
 800142e:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 8001432:	3301      	adds	r3, #1
 8001434:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
 8001438:	f507 6289 	add.w	r2, r7, #1096	; 0x448
 800143c:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 8001440:	4413      	add	r3, r2
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1e1      	bne.n	800140c <HAL_UART_RxCpltCallback+0x228>
																	}
							}
			HAL_UART_Transmit(&huart1, uRx_Data, ll, 0xffff);
 8001448:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 800144c:	b29a      	uxth	r2, r3
 800144e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001452:	4918      	ldr	r1, [pc, #96]	; (80014b4 <HAL_UART_RxCpltCallback+0x2d0>)
 8001454:	481b      	ldr	r0, [pc, #108]	; (80014c4 <HAL_UART_RxCpltCallback+0x2e0>)
 8001456:	f002 f8d8 	bl	800360a <HAL_UART_Transmit>
			i=lim+1;
 800145a:	4b1d      	ldr	r3, [pc, #116]	; (80014d0 <HAL_UART_RxCpltCallback+0x2ec>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	3301      	adds	r3, #1
 8001460:	4a20      	ldr	r2, [pc, #128]	; (80014e4 <HAL_UART_RxCpltCallback+0x300>)
 8001462:	6013      	str	r3, [r2, #0]
			HAL_TIM_Base_Stop_IT(&htim3);
 8001464:	4820      	ldr	r0, [pc, #128]	; (80014e8 <HAL_UART_RxCpltCallback+0x304>)
 8001466:	f001 fcd7 	bl	8002e18 <HAL_TIM_Base_Stop_IT>
						mode=0;
 800146a:	4b20      	ldr	r3, [pc, #128]	; (80014ec <HAL_UART_RxCpltCallback+0x308>)
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	e1e0      	b.n	8001834 <HAL_UART_RxCpltCallback+0x650>

		}else{
			unsigned char uRx_Data1[1024] = {0};
 8001472:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8001476:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	3304      	adds	r3, #4
 8001480:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8001484:	2100      	movs	r1, #0
 8001486:	4618      	mov	r0, r3
 8001488:	f002 ff29 	bl	80042de <memset>
					int l=0,ll=0,check=0,j;
 800148c:	2300      	movs	r3, #0
 800148e:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
 8001492:	2300      	movs	r3, #0
 8001494:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
 8001498:	2300      	movs	r3, #0
 800149a:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
					for (j=0;j<Length;j++){
 800149e:	2300      	movs	r3, #0
 80014a0:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
 80014a4:	e043      	b.n	800152e <HAL_UART_RxCpltCallback+0x34a>
 80014a6:	bf00      	nop
 80014a8:	2000012c 	.word	0x2000012c
 80014ac:	40013800 	.word	0x40013800
 80014b0:	20000940 	.word	0x20000940
 80014b4:	20000954 	.word	0x20000954
 80014b8:	2000000c 	.word	0x2000000c
 80014bc:	20000d54 	.word	0x20000d54
 80014c0:	20000d55 	.word	0x20000d55
 80014c4:	200000e8 	.word	0x200000e8
 80014c8:	20000530 	.word	0x20000530
 80014cc:	2000093c 	.word	0x2000093c
 80014d0:	20000008 	.word	0x20000008
 80014d4:	08005718 	.word	0x08005718
 80014d8:	08005738 	.word	0x08005738
 80014dc:	08005740 	.word	0x08005740
 80014e0:	0800574c 	.word	0x0800574c
 80014e4:	20000000 	.word	0x20000000
 80014e8:	200000a0 	.word	0x200000a0
 80014ec:	20000938 	.word	0x20000938
						if (uRx_Data[j]!=' '){
 80014f0:	4ab4      	ldr	r2, [pc, #720]	; (80017c4 <HAL_UART_RxCpltCallback+0x5e0>)
 80014f2:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 80014f6:	4413      	add	r3, r2
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b20      	cmp	r3, #32
 80014fc:	d012      	beq.n	8001524 <HAL_UART_RxCpltCallback+0x340>
							uRx_Data1[l]=uRx_Data[j];
 80014fe:	4ab1      	ldr	r2, [pc, #708]	; (80017c4 <HAL_UART_RxCpltCallback+0x5e0>)
 8001500:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8001504:	4413      	add	r3, r2
 8001506:	7819      	ldrb	r1, [r3, #0]
 8001508:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 800150c:	f2a3 4274 	subw	r2, r3, #1140	; 0x474
 8001510:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8001514:	4413      	add	r3, r2
 8001516:	460a      	mov	r2, r1
 8001518:	701a      	strb	r2, [r3, #0]
							l++;
 800151a:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800151e:	3301      	adds	r3, #1
 8001520:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
					for (j=0;j<Length;j++){
 8001524:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8001528:	3301      	adds	r3, #1
 800152a:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
 800152e:	4ba6      	ldr	r3, [pc, #664]	; (80017c8 <HAL_UART_RxCpltCallback+0x5e4>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	461a      	mov	r2, r3
 8001534:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8001538:	4293      	cmp	r3, r2
 800153a:	dbd9      	blt.n	80014f0 <HAL_UART_RxCpltCallback+0x30c>
						}
					}
					Length=l;
 800153c:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8001540:	b2da      	uxtb	r2, r3
 8001542:	4ba1      	ldr	r3, [pc, #644]	; (80017c8 <HAL_UART_RxCpltCallback+0x5e4>)
 8001544:	701a      	strb	r2, [r3, #0]
					for (j=0;j<l;j++){
 8001546:	2300      	movs	r3, #0
 8001548:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
 800154c:	e012      	b.n	8001574 <HAL_UART_RxCpltCallback+0x390>
						uRx_Data[j]=uRx_Data1[j];
 800154e:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8001552:	f2a3 4274 	subw	r2, r3, #1140	; 0x474
 8001556:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 800155a:	4413      	add	r3, r2
 800155c:	7819      	ldrb	r1, [r3, #0]
 800155e:	4a99      	ldr	r2, [pc, #612]	; (80017c4 <HAL_UART_RxCpltCallback+0x5e0>)
 8001560:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8001564:	4413      	add	r3, r2
 8001566:	460a      	mov	r2, r1
 8001568:	701a      	strb	r2, [r3, #0]
					for (j=0;j<l;j++){
 800156a:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 800156e:	3301      	adds	r3, #1
 8001570:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
 8001574:	f8d7 2490 	ldr.w	r2, [r7, #1168]	; 0x490
 8001578:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800157c:	429a      	cmp	r2, r3
 800157e:	dbe6      	blt.n	800154e <HAL_UART_RxCpltCallback+0x36a>
						}
					l=0;
 8001580:	2300      	movs	r3, #0
 8001582:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
					for( j=0;string[j];j++ )
 8001586:	2300      	movs	r3, #0
 8001588:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
 800158c:	e009      	b.n	80015a2 <HAL_UART_RxCpltCallback+0x3be>
					    l++;
 800158e:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8001592:	3301      	adds	r3, #1
 8001594:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
					for( j=0;string[j];j++ )
 8001598:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 800159c:	3301      	adds	r3, #1
 800159e:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
 80015a2:	4a8a      	ldr	r2, [pc, #552]	; (80017cc <HAL_UART_RxCpltCallback+0x5e8>)
 80015a4:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 80015a8:	4413      	add	r3, r2
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1ee      	bne.n	800158e <HAL_UART_RxCpltCallback+0x3aa>
					if (Length!=l){
 80015b0:	4b85      	ldr	r3, [pc, #532]	; (80017c8 <HAL_UART_RxCpltCallback+0x5e4>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	461a      	mov	r2, r3
 80015b6:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d044      	beq.n	8001648 <HAL_UART_RxCpltCallback+0x464>
						ll=0;
 80015be:	2300      	movs	r3, #0
 80015c0:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
							char str[]=" [INFO] Wrong input! Please try again!\r\n";
 80015c4:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 80015c8:	f5a3 6394 	sub.w	r3, r3, #1184	; 0x4a0
 80015cc:	4a80      	ldr	r2, [pc, #512]	; (80017d0 <HAL_UART_RxCpltCallback+0x5ec>)
 80015ce:	461c      	mov	r4, r3
 80015d0:	4615      	mov	r5, r2
 80015d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015de:	c403      	stmia	r4!, {r0, r1}
 80015e0:	7022      	strb	r2, [r4, #0]
							for( j=0;str[j];j++ ){
 80015e2:	2300      	movs	r3, #0
 80015e4:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
 80015e8:	e017      	b.n	800161a <HAL_UART_RxCpltCallback+0x436>
								ll++;
 80015ea:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 80015ee:	3301      	adds	r3, #1
 80015f0:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
								uRx_Data[j]=str[j];
 80015f4:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 80015f8:	f5a3 6294 	sub.w	r2, r3, #1184	; 0x4a0
 80015fc:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8001600:	4413      	add	r3, r2
 8001602:	7819      	ldrb	r1, [r3, #0]
 8001604:	4a6f      	ldr	r2, [pc, #444]	; (80017c4 <HAL_UART_RxCpltCallback+0x5e0>)
 8001606:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 800160a:	4413      	add	r3, r2
 800160c:	460a      	mov	r2, r1
 800160e:	701a      	strb	r2, [r3, #0]
							for( j=0;str[j];j++ ){
 8001610:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8001614:	3301      	adds	r3, #1
 8001616:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
 800161a:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 800161e:	f5a3 6294 	sub.w	r2, r3, #1184	; 0x4a0
 8001622:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8001626:	4413      	add	r3, r2
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1dd      	bne.n	80015ea <HAL_UART_RxCpltCallback+0x406>
							}

							HAL_UART_Transmit(&huart1, uRx_Data, ll, 0xffff);
 800162e:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8001632:	b29a      	uxth	r2, r3
 8001634:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001638:	4962      	ldr	r1, [pc, #392]	; (80017c4 <HAL_UART_RxCpltCallback+0x5e0>)
 800163a:	4866      	ldr	r0, [pc, #408]	; (80017d4 <HAL_UART_RxCpltCallback+0x5f0>)
 800163c:	f001 ffe5 	bl	800360a <HAL_UART_Transmit>
							wrongORright=1;
 8001640:	4b65      	ldr	r3, [pc, #404]	; (80017d8 <HAL_UART_RxCpltCallback+0x5f4>)
 8001642:	2201      	movs	r2, #1
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	e0f5      	b.n	8001834 <HAL_UART_RxCpltCallback+0x650>

					}
					else {
						for (int j=0;j<Length;j++){
 8001648:	2300      	movs	r3, #0
 800164a:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
 800164e:	e03a      	b.n	80016c6 <HAL_UART_RxCpltCallback+0x4e2>
							if (uRx_Data[j]>='a'&&uRx_Data[j]<='z'){
 8001650:	4a5c      	ldr	r2, [pc, #368]	; (80017c4 <HAL_UART_RxCpltCallback+0x5e0>)
 8001652:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 8001656:	4413      	add	r3, r2
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b60      	cmp	r3, #96	; 0x60
 800165c:	d913      	bls.n	8001686 <HAL_UART_RxCpltCallback+0x4a2>
 800165e:	4a59      	ldr	r2, [pc, #356]	; (80017c4 <HAL_UART_RxCpltCallback+0x5e0>)
 8001660:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 8001664:	4413      	add	r3, r2
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b7a      	cmp	r3, #122	; 0x7a
 800166a:	d80c      	bhi.n	8001686 <HAL_UART_RxCpltCallback+0x4a2>
								uRx_Data[j]-=32;
 800166c:	4a55      	ldr	r2, [pc, #340]	; (80017c4 <HAL_UART_RxCpltCallback+0x5e0>)
 800166e:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 8001672:	4413      	add	r3, r2
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	3b20      	subs	r3, #32
 8001678:	b2d9      	uxtb	r1, r3
 800167a:	4a52      	ldr	r2, [pc, #328]	; (80017c4 <HAL_UART_RxCpltCallback+0x5e0>)
 800167c:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 8001680:	4413      	add	r3, r2
 8001682:	460a      	mov	r2, r1
 8001684:	701a      	strb	r2, [r3, #0]
							}
							if (string[j]>='a'&&string[j]<='z'){
 8001686:	4a51      	ldr	r2, [pc, #324]	; (80017cc <HAL_UART_RxCpltCallback+0x5e8>)
 8001688:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 800168c:	4413      	add	r3, r2
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b60      	cmp	r3, #96	; 0x60
 8001692:	d913      	bls.n	80016bc <HAL_UART_RxCpltCallback+0x4d8>
 8001694:	4a4d      	ldr	r2, [pc, #308]	; (80017cc <HAL_UART_RxCpltCallback+0x5e8>)
 8001696:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 800169a:	4413      	add	r3, r2
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b7a      	cmp	r3, #122	; 0x7a
 80016a0:	d80c      	bhi.n	80016bc <HAL_UART_RxCpltCallback+0x4d8>
								string[j]-=32;
 80016a2:	4a4a      	ldr	r2, [pc, #296]	; (80017cc <HAL_UART_RxCpltCallback+0x5e8>)
 80016a4:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 80016a8:	4413      	add	r3, r2
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	3b20      	subs	r3, #32
 80016ae:	b2d9      	uxtb	r1, r3
 80016b0:	4a46      	ldr	r2, [pc, #280]	; (80017cc <HAL_UART_RxCpltCallback+0x5e8>)
 80016b2:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 80016b6:	4413      	add	r3, r2
 80016b8:	460a      	mov	r2, r1
 80016ba:	701a      	strb	r2, [r3, #0]
						for (int j=0;j<Length;j++){
 80016bc:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 80016c0:	3301      	adds	r3, #1
 80016c2:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
 80016c6:	4b40      	ldr	r3, [pc, #256]	; (80017c8 <HAL_UART_RxCpltCallback+0x5e4>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	461a      	mov	r2, r3
 80016cc:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 80016d0:	4293      	cmp	r3, r2
 80016d2:	dbbd      	blt.n	8001650 <HAL_UART_RxCpltCallback+0x46c>
							}
						}

						for (int j=0;j<Length;j++){
 80016d4:	2300      	movs	r3, #0
 80016d6:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
 80016da:	e058      	b.n	800178e <HAL_UART_RxCpltCallback+0x5aa>
						   if (uRx_Data[j]!=string[j]){
 80016dc:	4a39      	ldr	r2, [pc, #228]	; (80017c4 <HAL_UART_RxCpltCallback+0x5e0>)
 80016de:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 80016e2:	4413      	add	r3, r2
 80016e4:	781a      	ldrb	r2, [r3, #0]
 80016e6:	4939      	ldr	r1, [pc, #228]	; (80017cc <HAL_UART_RxCpltCallback+0x5e8>)
 80016e8:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 80016ec:	440b      	add	r3, r1
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d047      	beq.n	8001784 <HAL_UART_RxCpltCallback+0x5a0>
							   ll=0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
							   				char str[]=" [INFO] Wrong input! Please try again!\r\n";
 80016fa:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 80016fe:	f5a3 6394 	sub.w	r3, r3, #1184	; 0x4a0
 8001702:	4a33      	ldr	r2, [pc, #204]	; (80017d0 <HAL_UART_RxCpltCallback+0x5ec>)
 8001704:	461c      	mov	r4, r3
 8001706:	4615      	mov	r5, r2
 8001708:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800170a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800170c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800170e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001710:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001714:	c403      	stmia	r4!, {r0, r1}
 8001716:	7022      	strb	r2, [r4, #0]
							   				for( j=0;str[j];j++ ){
 8001718:	2300      	movs	r3, #0
 800171a:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
 800171e:	e017      	b.n	8001750 <HAL_UART_RxCpltCallback+0x56c>
							   					ll++;
 8001720:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8001724:	3301      	adds	r3, #1
 8001726:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
							   					uRx_Data[j]=str[j];
 800172a:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 800172e:	f5a3 6294 	sub.w	r2, r3, #1184	; 0x4a0
 8001732:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8001736:	4413      	add	r3, r2
 8001738:	7819      	ldrb	r1, [r3, #0]
 800173a:	4a22      	ldr	r2, [pc, #136]	; (80017c4 <HAL_UART_RxCpltCallback+0x5e0>)
 800173c:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8001740:	4413      	add	r3, r2
 8001742:	460a      	mov	r2, r1
 8001744:	701a      	strb	r2, [r3, #0]
							   				for( j=0;str[j];j++ ){
 8001746:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 800174a:	3301      	adds	r3, #1
 800174c:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
 8001750:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8001754:	f5a3 6294 	sub.w	r2, r3, #1184	; 0x4a0
 8001758:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 800175c:	4413      	add	r3, r2
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1dd      	bne.n	8001720 <HAL_UART_RxCpltCallback+0x53c>
							   				}

							   				HAL_UART_Transmit(&huart1, uRx_Data, ll, 0xffff);
 8001764:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8001768:	b29a      	uxth	r2, r3
 800176a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800176e:	4915      	ldr	r1, [pc, #84]	; (80017c4 <HAL_UART_RxCpltCallback+0x5e0>)
 8001770:	4818      	ldr	r0, [pc, #96]	; (80017d4 <HAL_UART_RxCpltCallback+0x5f0>)
 8001772:	f001 ff4a 	bl	800360a <HAL_UART_Transmit>
							   				wrongORright=1;
 8001776:	4b18      	ldr	r3, [pc, #96]	; (80017d8 <HAL_UART_RxCpltCallback+0x5f4>)
 8001778:	2201      	movs	r2, #1
 800177a:	601a      	str	r2, [r3, #0]
							   		        check=1;
 800177c:	2301      	movs	r3, #1
 800177e:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
							   				break;
 8001782:	e00b      	b.n	800179c <HAL_UART_RxCpltCallback+0x5b8>
						for (int j=0;j<Length;j++){
 8001784:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8001788:	3301      	adds	r3, #1
 800178a:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
 800178e:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <HAL_UART_RxCpltCallback+0x5e4>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	461a      	mov	r2, r3
 8001794:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8001798:	4293      	cmp	r3, r2
 800179a:	db9f      	blt.n	80016dc <HAL_UART_RxCpltCallback+0x4f8>
						   }
					   }
						if (check==0){
 800179c:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d147      	bne.n	8001834 <HAL_UART_RxCpltCallback+0x650>
							ll=0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
							char str[]=" [INFO] Good job!\r\n";
 80017aa:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <HAL_UART_RxCpltCallback+0x5f8>)
 80017ac:	f207 4434 	addw	r4, r7, #1076	; 0x434
 80017b0:	461d      	mov	r5, r3
 80017b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017b6:	682b      	ldr	r3, [r5, #0]
 80017b8:	6023      	str	r3, [r4, #0]
							for( j=0;str[j];j++ ){
 80017ba:	2300      	movs	r3, #0
 80017bc:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
 80017c0:	e024      	b.n	800180c <HAL_UART_RxCpltCallback+0x628>
 80017c2:	bf00      	nop
 80017c4:	20000954 	.word	0x20000954
 80017c8:	20000d55 	.word	0x20000d55
 80017cc:	20000534 	.word	0x20000534
 80017d0:	08005758 	.word	0x08005758
 80017d4:	200000e8 	.word	0x200000e8
 80017d8:	20000d58 	.word	0x20000d58
 80017dc:	08005784 	.word	0x08005784
								ll++;
 80017e0:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 80017e4:	3301      	adds	r3, #1
 80017e6:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
								uRx_Data[j]=str[j];
 80017ea:	f207 4234 	addw	r2, r7, #1076	; 0x434
 80017ee:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 80017f2:	4413      	add	r3, r2
 80017f4:	7819      	ldrb	r1, [r3, #0]
 80017f6:	4a1a      	ldr	r2, [pc, #104]	; (8001860 <HAL_UART_RxCpltCallback+0x67c>)
 80017f8:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 80017fc:	4413      	add	r3, r2
 80017fe:	460a      	mov	r2, r1
 8001800:	701a      	strb	r2, [r3, #0]
							for( j=0;str[j];j++ ){
 8001802:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8001806:	3301      	adds	r3, #1
 8001808:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
 800180c:	f207 4234 	addw	r2, r7, #1076	; 0x434
 8001810:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8001814:	4413      	add	r3, r2
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1e1      	bne.n	80017e0 <HAL_UART_RxCpltCallback+0x5fc>
							}

							HAL_UART_Transmit(&huart1, uRx_Data, ll, 0xffff);
 800181c:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8001820:	b29a      	uxth	r2, r3
 8001822:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001826:	490e      	ldr	r1, [pc, #56]	; (8001860 <HAL_UART_RxCpltCallback+0x67c>)
 8001828:	480e      	ldr	r0, [pc, #56]	; (8001864 <HAL_UART_RxCpltCallback+0x680>)
 800182a:	f001 feee 	bl	800360a <HAL_UART_Transmit>
							wrongORright=2;
 800182e:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <HAL_UART_RxCpltCallback+0x684>)
 8001830:	2202      	movs	r2, #2
 8001832:	601a      	str	r2, [r3, #0]
		}


	}

uLength = 0;
 8001834:	4b0d      	ldr	r3, [pc, #52]	; (800186c <HAL_UART_RxCpltCallback+0x688>)
 8001836:	2200      	movs	r2, #0
 8001838:	701a      	strb	r2, [r3, #0]
}else{
uRx_Data[uLength] = rxBuffer[0];
uLength++;
}
}
}
 800183a:	e00c      	b.n	8001856 <HAL_UART_RxCpltCallback+0x672>
uRx_Data[uLength] = rxBuffer[0];
 800183c:	4b0b      	ldr	r3, [pc, #44]	; (800186c <HAL_UART_RxCpltCallback+0x688>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <HAL_UART_RxCpltCallback+0x68c>)
 8001844:	7819      	ldrb	r1, [r3, #0]
 8001846:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_UART_RxCpltCallback+0x67c>)
 8001848:	5499      	strb	r1, [r3, r2]
uLength++;
 800184a:	4b08      	ldr	r3, [pc, #32]	; (800186c <HAL_UART_RxCpltCallback+0x688>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	3301      	adds	r3, #1
 8001850:	b2da      	uxtb	r2, r3
 8001852:	4b06      	ldr	r3, [pc, #24]	; (800186c <HAL_UART_RxCpltCallback+0x688>)
 8001854:	701a      	strb	r2, [r3, #0]
}
 8001856:	bf00      	nop
 8001858:	f507 6795 	add.w	r7, r7, #1192	; 0x4a8
 800185c:	46bd      	mov	sp, r7
 800185e:	bdb0      	pop	{r4, r5, r7, pc}
 8001860:	20000954 	.word	0x20000954
 8001864:	200000e8 	.word	0x200000e8
 8001868:	20000d58 	.word	0x20000d58
 800186c:	20000d54 	.word	0x20000d54
 8001870:	20000940 	.word	0x20000940

08001874 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
	return 1;
 8001878:	2301      	movs	r3, #1
}
 800187a:	4618      	mov	r0, r3
 800187c:	46bd      	mov	sp, r7
 800187e:	bc80      	pop	{r7}
 8001880:	4770      	bx	lr

08001882 <_kill>:

int _kill(int pid, int sig)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
 800188a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800188c:	f002 fd76 	bl	800437c <__errno>
 8001890:	4603      	mov	r3, r0
 8001892:	2216      	movs	r2, #22
 8001894:	601a      	str	r2, [r3, #0]
	return -1;
 8001896:	f04f 33ff 	mov.w	r3, #4294967295
}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <_exit>:

void _exit (int status)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018aa:	f04f 31ff 	mov.w	r1, #4294967295
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff ffe7 	bl	8001882 <_kill>
	while (1) {}		/* Make sure we hang here */
 80018b4:	e7fe      	b.n	80018b4 <_exit+0x12>

080018b6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b086      	sub	sp, #24
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	60f8      	str	r0, [r7, #12]
 80018be:	60b9      	str	r1, [r7, #8]
 80018c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c2:	2300      	movs	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]
 80018c6:	e00a      	b.n	80018de <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018c8:	f3af 8000 	nop.w
 80018cc:	4601      	mov	r1, r0
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	1c5a      	adds	r2, r3, #1
 80018d2:	60ba      	str	r2, [r7, #8]
 80018d4:	b2ca      	uxtb	r2, r1
 80018d6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	3301      	adds	r3, #1
 80018dc:	617b      	str	r3, [r7, #20]
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	dbf0      	blt.n	80018c8 <_read+0x12>
	}

return len;
 80018e6:	687b      	ldr	r3, [r7, #4]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	e009      	b.n	8001916 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	1c5a      	adds	r2, r3, #1
 8001906:	60ba      	str	r2, [r7, #8]
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	3301      	adds	r3, #1
 8001914:	617b      	str	r3, [r7, #20]
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	429a      	cmp	r2, r3
 800191c:	dbf1      	blt.n	8001902 <_write+0x12>
	}
	return len;
 800191e:	687b      	ldr	r3, [r7, #4]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <_close>:

int _close(int file)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
	return -1;
 8001930:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001934:	4618      	mov	r0, r3
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr

0800193e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
 8001946:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800194e:	605a      	str	r2, [r3, #4]
	return 0;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr

0800195c <_isatty>:

int _isatty(int file)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
	return 1;
 8001964:	2301      	movs	r3, #1
}
 8001966:	4618      	mov	r0, r3
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr

08001970 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
	return 0;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr

08001988 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001990:	4a14      	ldr	r2, [pc, #80]	; (80019e4 <_sbrk+0x5c>)
 8001992:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <_sbrk+0x60>)
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800199c:	4b13      	ldr	r3, [pc, #76]	; (80019ec <_sbrk+0x64>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d102      	bne.n	80019aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019a4:	4b11      	ldr	r3, [pc, #68]	; (80019ec <_sbrk+0x64>)
 80019a6:	4a12      	ldr	r2, [pc, #72]	; (80019f0 <_sbrk+0x68>)
 80019a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019aa:	4b10      	ldr	r3, [pc, #64]	; (80019ec <_sbrk+0x64>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4413      	add	r3, r2
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d207      	bcs.n	80019c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019b8:	f002 fce0 	bl	800437c <__errno>
 80019bc:	4603      	mov	r3, r0
 80019be:	220c      	movs	r2, #12
 80019c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019c2:	f04f 33ff 	mov.w	r3, #4294967295
 80019c6:	e009      	b.n	80019dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019c8:	4b08      	ldr	r3, [pc, #32]	; (80019ec <_sbrk+0x64>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ce:	4b07      	ldr	r3, [pc, #28]	; (80019ec <_sbrk+0x64>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	4a05      	ldr	r2, [pc, #20]	; (80019ec <_sbrk+0x64>)
 80019d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019da:	68fb      	ldr	r3, [r7, #12]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3718      	adds	r7, #24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	2000c000 	.word	0x2000c000
 80019e8:	00000400 	.word	0x00000400
 80019ec:	20000d5c 	.word	0x20000d5c
 80019f0:	20000eb0 	.word	0x20000eb0

080019f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr

08001a00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a00:	480c      	ldr	r0, [pc, #48]	; (8001a34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a02:	490d      	ldr	r1, [pc, #52]	; (8001a38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a04:	4a0d      	ldr	r2, [pc, #52]	; (8001a3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a08:	e002      	b.n	8001a10 <LoopCopyDataInit>

08001a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a0e:	3304      	adds	r3, #4

08001a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a14:	d3f9      	bcc.n	8001a0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a16:	4a0a      	ldr	r2, [pc, #40]	; (8001a40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a18:	4c0a      	ldr	r4, [pc, #40]	; (8001a44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a1c:	e001      	b.n	8001a22 <LoopFillZerobss>

08001a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a20:	3204      	adds	r2, #4

08001a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a24:	d3fb      	bcc.n	8001a1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a26:	f7ff ffe5 	bl	80019f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a2a:	f002 fcad 	bl	8004388 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a2e:	f7fe fc01 	bl	8000234 <main>
  bx lr
 8001a32:	4770      	bx	lr
  ldr r0, =_sdata
 8001a34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a38:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001a3c:	080058a8 	.word	0x080058a8
  ldr r2, =_sbss
 8001a40:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001a44:	20000eb0 	.word	0x20000eb0

08001a48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a48:	e7fe      	b.n	8001a48 <ADC1_2_IRQHandler>
	...

08001a4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a50:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <HAL_Init+0x28>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a07      	ldr	r2, [pc, #28]	; (8001a74 <HAL_Init+0x28>)
 8001a56:	f043 0310 	orr.w	r3, r3, #16
 8001a5a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a5c:	2003      	movs	r0, #3
 8001a5e:	f000 f947 	bl	8001cf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a62:	2000      	movs	r0, #0
 8001a64:	f000 f808 	bl	8001a78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a68:	f7ff fab6 	bl	8000fd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40022000 	.word	0x40022000

08001a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a80:	4b12      	ldr	r3, [pc, #72]	; (8001acc <HAL_InitTick+0x54>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <HAL_InitTick+0x58>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a96:	4618      	mov	r0, r3
 8001a98:	f000 f95f 	bl	8001d5a <HAL_SYSTICK_Config>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e00e      	b.n	8001ac4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b0f      	cmp	r3, #15
 8001aaa:	d80a      	bhi.n	8001ac2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aac:	2200      	movs	r2, #0
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab4:	f000 f927 	bl	8001d06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ab8:	4a06      	ldr	r2, [pc, #24]	; (8001ad4 <HAL_InitTick+0x5c>)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	e000      	b.n	8001ac4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20000010 	.word	0x20000010
 8001ad0:	20000018 	.word	0x20000018
 8001ad4:	20000014 	.word	0x20000014

08001ad8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001adc:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <HAL_IncTick+0x1c>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <HAL_IncTick+0x20>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	4a03      	ldr	r2, [pc, #12]	; (8001af8 <HAL_IncTick+0x20>)
 8001aea:	6013      	str	r3, [r2, #0]
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr
 8001af4:	20000018 	.word	0x20000018
 8001af8:	20000d60 	.word	0x20000d60

08001afc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return uwTick;
 8001b00:	4b02      	ldr	r3, [pc, #8]	; (8001b0c <HAL_GetTick+0x10>)
 8001b02:	681b      	ldr	r3, [r3, #0]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr
 8001b0c:	20000d60 	.word	0x20000d60

08001b10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b18:	f7ff fff0 	bl	8001afc <HAL_GetTick>
 8001b1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b28:	d005      	beq.n	8001b36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b2a:	4b0a      	ldr	r3, [pc, #40]	; (8001b54 <HAL_Delay+0x44>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	4413      	add	r3, r2
 8001b34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b36:	bf00      	nop
 8001b38:	f7ff ffe0 	bl	8001afc <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d8f7      	bhi.n	8001b38 <HAL_Delay+0x28>
  {
  }
}
 8001b48:	bf00      	nop
 8001b4a:	bf00      	nop
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000018 	.word	0x20000018

08001b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b68:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <__NVIC_SetPriorityGrouping+0x44>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b74:	4013      	ands	r3, r2
 8001b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b8a:	4a04      	ldr	r2, [pc, #16]	; (8001b9c <__NVIC_SetPriorityGrouping+0x44>)
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	60d3      	str	r3, [r2, #12]
}
 8001b90:	bf00      	nop
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ba4:	4b04      	ldr	r3, [pc, #16]	; (8001bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	0a1b      	lsrs	r3, r3, #8
 8001baa:	f003 0307 	and.w	r3, r3, #7
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	db0b      	blt.n	8001be6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	f003 021f 	and.w	r2, r3, #31
 8001bd4:	4906      	ldr	r1, [pc, #24]	; (8001bf0 <__NVIC_EnableIRQ+0x34>)
 8001bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bda:	095b      	lsrs	r3, r3, #5
 8001bdc:	2001      	movs	r0, #1
 8001bde:	fa00 f202 	lsl.w	r2, r0, r2
 8001be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr
 8001bf0:	e000e100 	.word	0xe000e100

08001bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	6039      	str	r1, [r7, #0]
 8001bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	db0a      	blt.n	8001c1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	490c      	ldr	r1, [pc, #48]	; (8001c40 <__NVIC_SetPriority+0x4c>)
 8001c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c12:	0112      	lsls	r2, r2, #4
 8001c14:	b2d2      	uxtb	r2, r2
 8001c16:	440b      	add	r3, r1
 8001c18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c1c:	e00a      	b.n	8001c34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	4908      	ldr	r1, [pc, #32]	; (8001c44 <__NVIC_SetPriority+0x50>)
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	3b04      	subs	r3, #4
 8001c2c:	0112      	lsls	r2, r2, #4
 8001c2e:	b2d2      	uxtb	r2, r2
 8001c30:	440b      	add	r3, r1
 8001c32:	761a      	strb	r2, [r3, #24]
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	e000e100 	.word	0xe000e100
 8001c44:	e000ed00 	.word	0xe000ed00

08001c48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b089      	sub	sp, #36	; 0x24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	f1c3 0307 	rsb	r3, r3, #7
 8001c62:	2b04      	cmp	r3, #4
 8001c64:	bf28      	it	cs
 8001c66:	2304      	movcs	r3, #4
 8001c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	3304      	adds	r3, #4
 8001c6e:	2b06      	cmp	r3, #6
 8001c70:	d902      	bls.n	8001c78 <NVIC_EncodePriority+0x30>
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	3b03      	subs	r3, #3
 8001c76:	e000      	b.n	8001c7a <NVIC_EncodePriority+0x32>
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43da      	mvns	r2, r3
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	401a      	ands	r2, r3
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c90:	f04f 31ff 	mov.w	r1, #4294967295
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9a:	43d9      	mvns	r1, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca0:	4313      	orrs	r3, r2
         );
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3724      	adds	r7, #36	; 0x24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr

08001cac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cbc:	d301      	bcc.n	8001cc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e00f      	b.n	8001ce2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cc2:	4a0a      	ldr	r2, [pc, #40]	; (8001cec <SysTick_Config+0x40>)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cca:	210f      	movs	r1, #15
 8001ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd0:	f7ff ff90 	bl	8001bf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cd4:	4b05      	ldr	r3, [pc, #20]	; (8001cec <SysTick_Config+0x40>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cda:	4b04      	ldr	r3, [pc, #16]	; (8001cec <SysTick_Config+0x40>)
 8001cdc:	2207      	movs	r2, #7
 8001cde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	e000e010 	.word	0xe000e010

08001cf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7ff ff2d 	bl	8001b58 <__NVIC_SetPriorityGrouping>
}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b086      	sub	sp, #24
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	60b9      	str	r1, [r7, #8]
 8001d10:	607a      	str	r2, [r7, #4]
 8001d12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d18:	f7ff ff42 	bl	8001ba0 <__NVIC_GetPriorityGrouping>
 8001d1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	68b9      	ldr	r1, [r7, #8]
 8001d22:	6978      	ldr	r0, [r7, #20]
 8001d24:	f7ff ff90 	bl	8001c48 <NVIC_EncodePriority>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d2e:	4611      	mov	r1, r2
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff ff5f 	bl	8001bf4 <__NVIC_SetPriority>
}
 8001d36:	bf00      	nop
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b082      	sub	sp, #8
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	4603      	mov	r3, r0
 8001d46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ff35 	bl	8001bbc <__NVIC_EnableIRQ>
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7ff ffa2 	bl	8001cac <SysTick_Config>
 8001d68:	4603      	mov	r3, r0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b085      	sub	sp, #20
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d008      	beq.n	8001d9a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2204      	movs	r2, #4
 8001d8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e020      	b.n	8001ddc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 020e 	bic.w	r2, r2, #14
 8001da8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f022 0201 	bic.w	r2, r2, #1
 8001db8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr
	...

08001de8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001df0:	2300      	movs	r3, #0
 8001df2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d005      	beq.n	8001e0a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2204      	movs	r2, #4
 8001e02:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	73fb      	strb	r3, [r7, #15]
 8001e08:	e0d6      	b.n	8001fb8 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 020e 	bic.w	r2, r2, #14
 8001e18:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 0201 	bic.w	r2, r2, #1
 8001e28:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	4b64      	ldr	r3, [pc, #400]	; (8001fc4 <HAL_DMA_Abort_IT+0x1dc>)
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d958      	bls.n	8001ee8 <HAL_DMA_Abort_IT+0x100>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a63      	ldr	r2, [pc, #396]	; (8001fc8 <HAL_DMA_Abort_IT+0x1e0>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d04f      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0xf8>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a61      	ldr	r2, [pc, #388]	; (8001fcc <HAL_DMA_Abort_IT+0x1e4>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d048      	beq.n	8001edc <HAL_DMA_Abort_IT+0xf4>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a60      	ldr	r2, [pc, #384]	; (8001fd0 <HAL_DMA_Abort_IT+0x1e8>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d040      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0xee>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a5e      	ldr	r2, [pc, #376]	; (8001fd4 <HAL_DMA_Abort_IT+0x1ec>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d038      	beq.n	8001ed0 <HAL_DMA_Abort_IT+0xe8>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a5d      	ldr	r2, [pc, #372]	; (8001fd8 <HAL_DMA_Abort_IT+0x1f0>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d030      	beq.n	8001eca <HAL_DMA_Abort_IT+0xe2>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a5b      	ldr	r2, [pc, #364]	; (8001fdc <HAL_DMA_Abort_IT+0x1f4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d028      	beq.n	8001ec4 <HAL_DMA_Abort_IT+0xdc>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a53      	ldr	r2, [pc, #332]	; (8001fc4 <HAL_DMA_Abort_IT+0x1dc>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d020      	beq.n	8001ebe <HAL_DMA_Abort_IT+0xd6>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a57      	ldr	r2, [pc, #348]	; (8001fe0 <HAL_DMA_Abort_IT+0x1f8>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d019      	beq.n	8001eba <HAL_DMA_Abort_IT+0xd2>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a56      	ldr	r2, [pc, #344]	; (8001fe4 <HAL_DMA_Abort_IT+0x1fc>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d012      	beq.n	8001eb6 <HAL_DMA_Abort_IT+0xce>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a54      	ldr	r2, [pc, #336]	; (8001fe8 <HAL_DMA_Abort_IT+0x200>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d00a      	beq.n	8001eb0 <HAL_DMA_Abort_IT+0xc8>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a53      	ldr	r2, [pc, #332]	; (8001fec <HAL_DMA_Abort_IT+0x204>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d102      	bne.n	8001eaa <HAL_DMA_Abort_IT+0xc2>
 8001ea4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ea8:	e01b      	b.n	8001ee2 <HAL_DMA_Abort_IT+0xfa>
 8001eaa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001eae:	e018      	b.n	8001ee2 <HAL_DMA_Abort_IT+0xfa>
 8001eb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eb4:	e015      	b.n	8001ee2 <HAL_DMA_Abort_IT+0xfa>
 8001eb6:	2310      	movs	r3, #16
 8001eb8:	e013      	b.n	8001ee2 <HAL_DMA_Abort_IT+0xfa>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e011      	b.n	8001ee2 <HAL_DMA_Abort_IT+0xfa>
 8001ebe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ec2:	e00e      	b.n	8001ee2 <HAL_DMA_Abort_IT+0xfa>
 8001ec4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ec8:	e00b      	b.n	8001ee2 <HAL_DMA_Abort_IT+0xfa>
 8001eca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ece:	e008      	b.n	8001ee2 <HAL_DMA_Abort_IT+0xfa>
 8001ed0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ed4:	e005      	b.n	8001ee2 <HAL_DMA_Abort_IT+0xfa>
 8001ed6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eda:	e002      	b.n	8001ee2 <HAL_DMA_Abort_IT+0xfa>
 8001edc:	2310      	movs	r3, #16
 8001ede:	e000      	b.n	8001ee2 <HAL_DMA_Abort_IT+0xfa>
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	4a43      	ldr	r2, [pc, #268]	; (8001ff0 <HAL_DMA_Abort_IT+0x208>)
 8001ee4:	6053      	str	r3, [r2, #4]
 8001ee6:	e057      	b.n	8001f98 <HAL_DMA_Abort_IT+0x1b0>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a36      	ldr	r2, [pc, #216]	; (8001fc8 <HAL_DMA_Abort_IT+0x1e0>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d04f      	beq.n	8001f92 <HAL_DMA_Abort_IT+0x1aa>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a35      	ldr	r2, [pc, #212]	; (8001fcc <HAL_DMA_Abort_IT+0x1e4>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d048      	beq.n	8001f8e <HAL_DMA_Abort_IT+0x1a6>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a33      	ldr	r2, [pc, #204]	; (8001fd0 <HAL_DMA_Abort_IT+0x1e8>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d040      	beq.n	8001f88 <HAL_DMA_Abort_IT+0x1a0>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a32      	ldr	r2, [pc, #200]	; (8001fd4 <HAL_DMA_Abort_IT+0x1ec>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d038      	beq.n	8001f82 <HAL_DMA_Abort_IT+0x19a>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a30      	ldr	r2, [pc, #192]	; (8001fd8 <HAL_DMA_Abort_IT+0x1f0>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d030      	beq.n	8001f7c <HAL_DMA_Abort_IT+0x194>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a2f      	ldr	r2, [pc, #188]	; (8001fdc <HAL_DMA_Abort_IT+0x1f4>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d028      	beq.n	8001f76 <HAL_DMA_Abort_IT+0x18e>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a26      	ldr	r2, [pc, #152]	; (8001fc4 <HAL_DMA_Abort_IT+0x1dc>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d020      	beq.n	8001f70 <HAL_DMA_Abort_IT+0x188>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a2b      	ldr	r2, [pc, #172]	; (8001fe0 <HAL_DMA_Abort_IT+0x1f8>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d019      	beq.n	8001f6c <HAL_DMA_Abort_IT+0x184>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a29      	ldr	r2, [pc, #164]	; (8001fe4 <HAL_DMA_Abort_IT+0x1fc>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d012      	beq.n	8001f68 <HAL_DMA_Abort_IT+0x180>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a28      	ldr	r2, [pc, #160]	; (8001fe8 <HAL_DMA_Abort_IT+0x200>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d00a      	beq.n	8001f62 <HAL_DMA_Abort_IT+0x17a>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a26      	ldr	r2, [pc, #152]	; (8001fec <HAL_DMA_Abort_IT+0x204>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d102      	bne.n	8001f5c <HAL_DMA_Abort_IT+0x174>
 8001f56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f5a:	e01b      	b.n	8001f94 <HAL_DMA_Abort_IT+0x1ac>
 8001f5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f60:	e018      	b.n	8001f94 <HAL_DMA_Abort_IT+0x1ac>
 8001f62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f66:	e015      	b.n	8001f94 <HAL_DMA_Abort_IT+0x1ac>
 8001f68:	2310      	movs	r3, #16
 8001f6a:	e013      	b.n	8001f94 <HAL_DMA_Abort_IT+0x1ac>
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e011      	b.n	8001f94 <HAL_DMA_Abort_IT+0x1ac>
 8001f70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f74:	e00e      	b.n	8001f94 <HAL_DMA_Abort_IT+0x1ac>
 8001f76:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f7a:	e00b      	b.n	8001f94 <HAL_DMA_Abort_IT+0x1ac>
 8001f7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f80:	e008      	b.n	8001f94 <HAL_DMA_Abort_IT+0x1ac>
 8001f82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f86:	e005      	b.n	8001f94 <HAL_DMA_Abort_IT+0x1ac>
 8001f88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f8c:	e002      	b.n	8001f94 <HAL_DMA_Abort_IT+0x1ac>
 8001f8e:	2310      	movs	r3, #16
 8001f90:	e000      	b.n	8001f94 <HAL_DMA_Abort_IT+0x1ac>
 8001f92:	2301      	movs	r3, #1
 8001f94:	4a17      	ldr	r2, [pc, #92]	; (8001ff4 <HAL_DMA_Abort_IT+0x20c>)
 8001f96:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d003      	beq.n	8001fb8 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	4798      	blx	r3
    } 
  }
  return status;
 8001fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40020080 	.word	0x40020080
 8001fc8:	40020008 	.word	0x40020008
 8001fcc:	4002001c 	.word	0x4002001c
 8001fd0:	40020030 	.word	0x40020030
 8001fd4:	40020044 	.word	0x40020044
 8001fd8:	40020058 	.word	0x40020058
 8001fdc:	4002006c 	.word	0x4002006c
 8001fe0:	40020408 	.word	0x40020408
 8001fe4:	4002041c 	.word	0x4002041c
 8001fe8:	40020430 	.word	0x40020430
 8001fec:	40020444 	.word	0x40020444
 8001ff0:	40020400 	.word	0x40020400
 8001ff4:	40020000 	.word	0x40020000

08001ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b08b      	sub	sp, #44	; 0x2c
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002002:	2300      	movs	r3, #0
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002006:	2300      	movs	r3, #0
 8002008:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800200a:	e179      	b.n	8002300 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800200c:	2201      	movs	r2, #1
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	69fa      	ldr	r2, [r7, #28]
 800201c:	4013      	ands	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	429a      	cmp	r2, r3
 8002026:	f040 8168 	bne.w	80022fa <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	4a96      	ldr	r2, [pc, #600]	; (8002288 <HAL_GPIO_Init+0x290>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d05e      	beq.n	80020f2 <HAL_GPIO_Init+0xfa>
 8002034:	4a94      	ldr	r2, [pc, #592]	; (8002288 <HAL_GPIO_Init+0x290>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d875      	bhi.n	8002126 <HAL_GPIO_Init+0x12e>
 800203a:	4a94      	ldr	r2, [pc, #592]	; (800228c <HAL_GPIO_Init+0x294>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d058      	beq.n	80020f2 <HAL_GPIO_Init+0xfa>
 8002040:	4a92      	ldr	r2, [pc, #584]	; (800228c <HAL_GPIO_Init+0x294>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d86f      	bhi.n	8002126 <HAL_GPIO_Init+0x12e>
 8002046:	4a92      	ldr	r2, [pc, #584]	; (8002290 <HAL_GPIO_Init+0x298>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d052      	beq.n	80020f2 <HAL_GPIO_Init+0xfa>
 800204c:	4a90      	ldr	r2, [pc, #576]	; (8002290 <HAL_GPIO_Init+0x298>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d869      	bhi.n	8002126 <HAL_GPIO_Init+0x12e>
 8002052:	4a90      	ldr	r2, [pc, #576]	; (8002294 <HAL_GPIO_Init+0x29c>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d04c      	beq.n	80020f2 <HAL_GPIO_Init+0xfa>
 8002058:	4a8e      	ldr	r2, [pc, #568]	; (8002294 <HAL_GPIO_Init+0x29c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d863      	bhi.n	8002126 <HAL_GPIO_Init+0x12e>
 800205e:	4a8e      	ldr	r2, [pc, #568]	; (8002298 <HAL_GPIO_Init+0x2a0>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d046      	beq.n	80020f2 <HAL_GPIO_Init+0xfa>
 8002064:	4a8c      	ldr	r2, [pc, #560]	; (8002298 <HAL_GPIO_Init+0x2a0>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d85d      	bhi.n	8002126 <HAL_GPIO_Init+0x12e>
 800206a:	2b12      	cmp	r3, #18
 800206c:	d82a      	bhi.n	80020c4 <HAL_GPIO_Init+0xcc>
 800206e:	2b12      	cmp	r3, #18
 8002070:	d859      	bhi.n	8002126 <HAL_GPIO_Init+0x12e>
 8002072:	a201      	add	r2, pc, #4	; (adr r2, 8002078 <HAL_GPIO_Init+0x80>)
 8002074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002078:	080020f3 	.word	0x080020f3
 800207c:	080020cd 	.word	0x080020cd
 8002080:	080020df 	.word	0x080020df
 8002084:	08002121 	.word	0x08002121
 8002088:	08002127 	.word	0x08002127
 800208c:	08002127 	.word	0x08002127
 8002090:	08002127 	.word	0x08002127
 8002094:	08002127 	.word	0x08002127
 8002098:	08002127 	.word	0x08002127
 800209c:	08002127 	.word	0x08002127
 80020a0:	08002127 	.word	0x08002127
 80020a4:	08002127 	.word	0x08002127
 80020a8:	08002127 	.word	0x08002127
 80020ac:	08002127 	.word	0x08002127
 80020b0:	08002127 	.word	0x08002127
 80020b4:	08002127 	.word	0x08002127
 80020b8:	08002127 	.word	0x08002127
 80020bc:	080020d5 	.word	0x080020d5
 80020c0:	080020e9 	.word	0x080020e9
 80020c4:	4a75      	ldr	r2, [pc, #468]	; (800229c <HAL_GPIO_Init+0x2a4>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d013      	beq.n	80020f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020ca:	e02c      	b.n	8002126 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	623b      	str	r3, [r7, #32]
          break;
 80020d2:	e029      	b.n	8002128 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	3304      	adds	r3, #4
 80020da:	623b      	str	r3, [r7, #32]
          break;
 80020dc:	e024      	b.n	8002128 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	3308      	adds	r3, #8
 80020e4:	623b      	str	r3, [r7, #32]
          break;
 80020e6:	e01f      	b.n	8002128 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	330c      	adds	r3, #12
 80020ee:	623b      	str	r3, [r7, #32]
          break;
 80020f0:	e01a      	b.n	8002128 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d102      	bne.n	8002100 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020fa:	2304      	movs	r3, #4
 80020fc:	623b      	str	r3, [r7, #32]
          break;
 80020fe:	e013      	b.n	8002128 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d105      	bne.n	8002114 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002108:	2308      	movs	r3, #8
 800210a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69fa      	ldr	r2, [r7, #28]
 8002110:	611a      	str	r2, [r3, #16]
          break;
 8002112:	e009      	b.n	8002128 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002114:	2308      	movs	r3, #8
 8002116:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	69fa      	ldr	r2, [r7, #28]
 800211c:	615a      	str	r2, [r3, #20]
          break;
 800211e:	e003      	b.n	8002128 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002120:	2300      	movs	r3, #0
 8002122:	623b      	str	r3, [r7, #32]
          break;
 8002124:	e000      	b.n	8002128 <HAL_GPIO_Init+0x130>
          break;
 8002126:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	2bff      	cmp	r3, #255	; 0xff
 800212c:	d801      	bhi.n	8002132 <HAL_GPIO_Init+0x13a>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	e001      	b.n	8002136 <HAL_GPIO_Init+0x13e>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	3304      	adds	r3, #4
 8002136:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	2bff      	cmp	r3, #255	; 0xff
 800213c:	d802      	bhi.n	8002144 <HAL_GPIO_Init+0x14c>
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	e002      	b.n	800214a <HAL_GPIO_Init+0x152>
 8002144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002146:	3b08      	subs	r3, #8
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	210f      	movs	r1, #15
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	fa01 f303 	lsl.w	r3, r1, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	401a      	ands	r2, r3
 800215c:	6a39      	ldr	r1, [r7, #32]
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	fa01 f303 	lsl.w	r3, r1, r3
 8002164:	431a      	orrs	r2, r3
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	f000 80c1 	beq.w	80022fa <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002178:	4b49      	ldr	r3, [pc, #292]	; (80022a0 <HAL_GPIO_Init+0x2a8>)
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	4a48      	ldr	r2, [pc, #288]	; (80022a0 <HAL_GPIO_Init+0x2a8>)
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	6193      	str	r3, [r2, #24]
 8002184:	4b46      	ldr	r3, [pc, #280]	; (80022a0 <HAL_GPIO_Init+0x2a8>)
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002190:	4a44      	ldr	r2, [pc, #272]	; (80022a4 <HAL_GPIO_Init+0x2ac>)
 8002192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002194:	089b      	lsrs	r3, r3, #2
 8002196:	3302      	adds	r3, #2
 8002198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800219c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	f003 0303 	and.w	r3, r3, #3
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	220f      	movs	r2, #15
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	43db      	mvns	r3, r3
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	4013      	ands	r3, r2
 80021b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a3c      	ldr	r2, [pc, #240]	; (80022a8 <HAL_GPIO_Init+0x2b0>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d01f      	beq.n	80021fc <HAL_GPIO_Init+0x204>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a3b      	ldr	r2, [pc, #236]	; (80022ac <HAL_GPIO_Init+0x2b4>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d019      	beq.n	80021f8 <HAL_GPIO_Init+0x200>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a3a      	ldr	r2, [pc, #232]	; (80022b0 <HAL_GPIO_Init+0x2b8>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d013      	beq.n	80021f4 <HAL_GPIO_Init+0x1fc>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a39      	ldr	r2, [pc, #228]	; (80022b4 <HAL_GPIO_Init+0x2bc>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d00d      	beq.n	80021f0 <HAL_GPIO_Init+0x1f8>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a38      	ldr	r2, [pc, #224]	; (80022b8 <HAL_GPIO_Init+0x2c0>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d007      	beq.n	80021ec <HAL_GPIO_Init+0x1f4>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a37      	ldr	r2, [pc, #220]	; (80022bc <HAL_GPIO_Init+0x2c4>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d101      	bne.n	80021e8 <HAL_GPIO_Init+0x1f0>
 80021e4:	2305      	movs	r3, #5
 80021e6:	e00a      	b.n	80021fe <HAL_GPIO_Init+0x206>
 80021e8:	2306      	movs	r3, #6
 80021ea:	e008      	b.n	80021fe <HAL_GPIO_Init+0x206>
 80021ec:	2304      	movs	r3, #4
 80021ee:	e006      	b.n	80021fe <HAL_GPIO_Init+0x206>
 80021f0:	2303      	movs	r3, #3
 80021f2:	e004      	b.n	80021fe <HAL_GPIO_Init+0x206>
 80021f4:	2302      	movs	r3, #2
 80021f6:	e002      	b.n	80021fe <HAL_GPIO_Init+0x206>
 80021f8:	2301      	movs	r3, #1
 80021fa:	e000      	b.n	80021fe <HAL_GPIO_Init+0x206>
 80021fc:	2300      	movs	r3, #0
 80021fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002200:	f002 0203 	and.w	r2, r2, #3
 8002204:	0092      	lsls	r2, r2, #2
 8002206:	4093      	lsls	r3, r2
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	4313      	orrs	r3, r2
 800220c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800220e:	4925      	ldr	r1, [pc, #148]	; (80022a4 <HAL_GPIO_Init+0x2ac>)
 8002210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002212:	089b      	lsrs	r3, r3, #2
 8002214:	3302      	adds	r3, #2
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d006      	beq.n	8002236 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002228:	4b25      	ldr	r3, [pc, #148]	; (80022c0 <HAL_GPIO_Init+0x2c8>)
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	4924      	ldr	r1, [pc, #144]	; (80022c0 <HAL_GPIO_Init+0x2c8>)
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	4313      	orrs	r3, r2
 8002232:	600b      	str	r3, [r1, #0]
 8002234:	e006      	b.n	8002244 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002236:	4b22      	ldr	r3, [pc, #136]	; (80022c0 <HAL_GPIO_Init+0x2c8>)
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	43db      	mvns	r3, r3
 800223e:	4920      	ldr	r1, [pc, #128]	; (80022c0 <HAL_GPIO_Init+0x2c8>)
 8002240:	4013      	ands	r3, r2
 8002242:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d006      	beq.n	800225e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002250:	4b1b      	ldr	r3, [pc, #108]	; (80022c0 <HAL_GPIO_Init+0x2c8>)
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	491a      	ldr	r1, [pc, #104]	; (80022c0 <HAL_GPIO_Init+0x2c8>)
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	4313      	orrs	r3, r2
 800225a:	604b      	str	r3, [r1, #4]
 800225c:	e006      	b.n	800226c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800225e:	4b18      	ldr	r3, [pc, #96]	; (80022c0 <HAL_GPIO_Init+0x2c8>)
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	43db      	mvns	r3, r3
 8002266:	4916      	ldr	r1, [pc, #88]	; (80022c0 <HAL_GPIO_Init+0x2c8>)
 8002268:	4013      	ands	r3, r2
 800226a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d025      	beq.n	80022c4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002278:	4b11      	ldr	r3, [pc, #68]	; (80022c0 <HAL_GPIO_Init+0x2c8>)
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	4910      	ldr	r1, [pc, #64]	; (80022c0 <HAL_GPIO_Init+0x2c8>)
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	4313      	orrs	r3, r2
 8002282:	608b      	str	r3, [r1, #8]
 8002284:	e025      	b.n	80022d2 <HAL_GPIO_Init+0x2da>
 8002286:	bf00      	nop
 8002288:	10320000 	.word	0x10320000
 800228c:	10310000 	.word	0x10310000
 8002290:	10220000 	.word	0x10220000
 8002294:	10210000 	.word	0x10210000
 8002298:	10120000 	.word	0x10120000
 800229c:	10110000 	.word	0x10110000
 80022a0:	40021000 	.word	0x40021000
 80022a4:	40010000 	.word	0x40010000
 80022a8:	40010800 	.word	0x40010800
 80022ac:	40010c00 	.word	0x40010c00
 80022b0:	40011000 	.word	0x40011000
 80022b4:	40011400 	.word	0x40011400
 80022b8:	40011800 	.word	0x40011800
 80022bc:	40011c00 	.word	0x40011c00
 80022c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022c4:	4b15      	ldr	r3, [pc, #84]	; (800231c <HAL_GPIO_Init+0x324>)
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	43db      	mvns	r3, r3
 80022cc:	4913      	ldr	r1, [pc, #76]	; (800231c <HAL_GPIO_Init+0x324>)
 80022ce:	4013      	ands	r3, r2
 80022d0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d006      	beq.n	80022ec <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022de:	4b0f      	ldr	r3, [pc, #60]	; (800231c <HAL_GPIO_Init+0x324>)
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	490e      	ldr	r1, [pc, #56]	; (800231c <HAL_GPIO_Init+0x324>)
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	60cb      	str	r3, [r1, #12]
 80022ea:	e006      	b.n	80022fa <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022ec:	4b0b      	ldr	r3, [pc, #44]	; (800231c <HAL_GPIO_Init+0x324>)
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	43db      	mvns	r3, r3
 80022f4:	4909      	ldr	r1, [pc, #36]	; (800231c <HAL_GPIO_Init+0x324>)
 80022f6:	4013      	ands	r3, r2
 80022f8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	3301      	adds	r3, #1
 80022fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002306:	fa22 f303 	lsr.w	r3, r2, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	f47f ae7e 	bne.w	800200c <HAL_GPIO_Init+0x14>
  }
}
 8002310:	bf00      	nop
 8002312:	bf00      	nop
 8002314:	372c      	adds	r7, #44	; 0x2c
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr
 800231c:	40010400 	.word	0x40010400

08002320 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	460b      	mov	r3, r1
 800232a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	887b      	ldrh	r3, [r7, #2]
 8002332:	4013      	ands	r3, r2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d002      	beq.n	800233e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002338:	2301      	movs	r3, #1
 800233a:	73fb      	strb	r3, [r7, #15]
 800233c:	e001      	b.n	8002342 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800233e:	2300      	movs	r3, #0
 8002340:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002342:	7bfb      	ldrb	r3, [r7, #15]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3714      	adds	r7, #20
 8002348:	46bd      	mov	sp, r7
 800234a:	bc80      	pop	{r7}
 800234c:	4770      	bx	lr

0800234e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
 8002356:	460b      	mov	r3, r1
 8002358:	807b      	strh	r3, [r7, #2]
 800235a:	4613      	mov	r3, r2
 800235c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800235e:	787b      	ldrb	r3, [r7, #1]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002364:	887a      	ldrh	r2, [r7, #2]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800236a:	e003      	b.n	8002374 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800236c:	887b      	ldrh	r3, [r7, #2]
 800236e:	041a      	lsls	r2, r3, #16
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	611a      	str	r2, [r3, #16]
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr

0800237e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800237e:	b480      	push	{r7}
 8002380:	b085      	sub	sp, #20
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
 8002386:	460b      	mov	r3, r1
 8002388:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002390:	887a      	ldrh	r2, [r7, #2]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	4013      	ands	r3, r2
 8002396:	041a      	lsls	r2, r3, #16
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	43d9      	mvns	r1, r3
 800239c:	887b      	ldrh	r3, [r7, #2]
 800239e:	400b      	ands	r3, r1
 80023a0:	431a      	orrs	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	611a      	str	r2, [r3, #16]
}
 80023a6:	bf00      	nop
 80023a8:	3714      	adds	r7, #20
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bc80      	pop	{r7}
 80023ae:	4770      	bx	lr

080023b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80023ba:	4b08      	ldr	r3, [pc, #32]	; (80023dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023bc:	695a      	ldr	r2, [r3, #20]
 80023be:	88fb      	ldrh	r3, [r7, #6]
 80023c0:	4013      	ands	r3, r2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d006      	beq.n	80023d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023c6:	4a05      	ldr	r2, [pc, #20]	; (80023dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023c8:	88fb      	ldrh	r3, [r7, #6]
 80023ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023cc:	88fb      	ldrh	r3, [r7, #6]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7fe faba 	bl	8000948 <HAL_GPIO_EXTI_Callback>
  }
}
 80023d4:	bf00      	nop
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40010400 	.word	0x40010400

080023e0 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e034      	b.n	800245c <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80023fa:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f245 5255 	movw	r2, #21845	; 0x5555
 8002404:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6852      	ldr	r2, [r2, #4]
 800240e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	6892      	ldr	r2, [r2, #8]
 8002418:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800241a:	f7ff fb6f 	bl	8001afc <HAL_GetTick>
 800241e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002420:	e00f      	b.n	8002442 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002422:	f7ff fb6b 	bl	8001afc <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b27      	cmp	r3, #39	; 0x27
 800242e:	d908      	bls.n	8002442 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	f003 0303 	and.w	r3, r3, #3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e00c      	b.n	800245c <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1e8      	bne.n	8002422 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002458:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002474:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr
	...

08002484 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e272      	b.n	800297c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f000 8087 	beq.w	80025b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024a4:	4b92      	ldr	r3, [pc, #584]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f003 030c 	and.w	r3, r3, #12
 80024ac:	2b04      	cmp	r3, #4
 80024ae:	d00c      	beq.n	80024ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024b0:	4b8f      	ldr	r3, [pc, #572]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 030c 	and.w	r3, r3, #12
 80024b8:	2b08      	cmp	r3, #8
 80024ba:	d112      	bne.n	80024e2 <HAL_RCC_OscConfig+0x5e>
 80024bc:	4b8c      	ldr	r3, [pc, #560]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c8:	d10b      	bne.n	80024e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ca:	4b89      	ldr	r3, [pc, #548]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d06c      	beq.n	80025b0 <HAL_RCC_OscConfig+0x12c>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d168      	bne.n	80025b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e24c      	b.n	800297c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ea:	d106      	bne.n	80024fa <HAL_RCC_OscConfig+0x76>
 80024ec:	4b80      	ldr	r3, [pc, #512]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a7f      	ldr	r2, [pc, #508]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80024f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f6:	6013      	str	r3, [r2, #0]
 80024f8:	e02e      	b.n	8002558 <HAL_RCC_OscConfig+0xd4>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10c      	bne.n	800251c <HAL_RCC_OscConfig+0x98>
 8002502:	4b7b      	ldr	r3, [pc, #492]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a7a      	ldr	r2, [pc, #488]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 8002508:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800250c:	6013      	str	r3, [r2, #0]
 800250e:	4b78      	ldr	r3, [pc, #480]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a77      	ldr	r2, [pc, #476]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 8002514:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	e01d      	b.n	8002558 <HAL_RCC_OscConfig+0xd4>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002524:	d10c      	bne.n	8002540 <HAL_RCC_OscConfig+0xbc>
 8002526:	4b72      	ldr	r3, [pc, #456]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a71      	ldr	r2, [pc, #452]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 800252c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	4b6f      	ldr	r3, [pc, #444]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a6e      	ldr	r2, [pc, #440]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 8002538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	e00b      	b.n	8002558 <HAL_RCC_OscConfig+0xd4>
 8002540:	4b6b      	ldr	r3, [pc, #428]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a6a      	ldr	r2, [pc, #424]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 8002546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800254a:	6013      	str	r3, [r2, #0]
 800254c:	4b68      	ldr	r3, [pc, #416]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a67      	ldr	r2, [pc, #412]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 8002552:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002556:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d013      	beq.n	8002588 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002560:	f7ff facc 	bl	8001afc <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002568:	f7ff fac8 	bl	8001afc <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b64      	cmp	r3, #100	; 0x64
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e200      	b.n	800297c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257a:	4b5d      	ldr	r3, [pc, #372]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0f0      	beq.n	8002568 <HAL_RCC_OscConfig+0xe4>
 8002586:	e014      	b.n	80025b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002588:	f7ff fab8 	bl	8001afc <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002590:	f7ff fab4 	bl	8001afc <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b64      	cmp	r3, #100	; 0x64
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e1ec      	b.n	800297c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a2:	4b53      	ldr	r3, [pc, #332]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f0      	bne.n	8002590 <HAL_RCC_OscConfig+0x10c>
 80025ae:	e000      	b.n	80025b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d063      	beq.n	8002686 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025be:	4b4c      	ldr	r3, [pc, #304]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f003 030c 	and.w	r3, r3, #12
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00b      	beq.n	80025e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025ca:	4b49      	ldr	r3, [pc, #292]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f003 030c 	and.w	r3, r3, #12
 80025d2:	2b08      	cmp	r3, #8
 80025d4:	d11c      	bne.n	8002610 <HAL_RCC_OscConfig+0x18c>
 80025d6:	4b46      	ldr	r3, [pc, #280]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d116      	bne.n	8002610 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025e2:	4b43      	ldr	r3, [pc, #268]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d005      	beq.n	80025fa <HAL_RCC_OscConfig+0x176>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d001      	beq.n	80025fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e1c0      	b.n	800297c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025fa:	4b3d      	ldr	r3, [pc, #244]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	4939      	ldr	r1, [pc, #228]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 800260a:	4313      	orrs	r3, r2
 800260c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800260e:	e03a      	b.n	8002686 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d020      	beq.n	800265a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002618:	4b36      	ldr	r3, [pc, #216]	; (80026f4 <HAL_RCC_OscConfig+0x270>)
 800261a:	2201      	movs	r2, #1
 800261c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261e:	f7ff fa6d 	bl	8001afc <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002626:	f7ff fa69 	bl	8001afc <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e1a1      	b.n	800297c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002638:	4b2d      	ldr	r3, [pc, #180]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0f0      	beq.n	8002626 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002644:	4b2a      	ldr	r3, [pc, #168]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	4927      	ldr	r1, [pc, #156]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 8002654:	4313      	orrs	r3, r2
 8002656:	600b      	str	r3, [r1, #0]
 8002658:	e015      	b.n	8002686 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800265a:	4b26      	ldr	r3, [pc, #152]	; (80026f4 <HAL_RCC_OscConfig+0x270>)
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002660:	f7ff fa4c 	bl	8001afc <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002668:	f7ff fa48 	bl	8001afc <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e180      	b.n	800297c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800267a:	4b1d      	ldr	r3, [pc, #116]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1f0      	bne.n	8002668 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0308 	and.w	r3, r3, #8
 800268e:	2b00      	cmp	r3, #0
 8002690:	d03a      	beq.n	8002708 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d019      	beq.n	80026ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800269a:	4b17      	ldr	r3, [pc, #92]	; (80026f8 <HAL_RCC_OscConfig+0x274>)
 800269c:	2201      	movs	r2, #1
 800269e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a0:	f7ff fa2c 	bl	8001afc <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026a8:	f7ff fa28 	bl	8001afc <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e160      	b.n	800297c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ba:	4b0d      	ldr	r3, [pc, #52]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0f0      	beq.n	80026a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026c6:	2001      	movs	r0, #1
 80026c8:	f000 fad8 	bl	8002c7c <RCC_Delay>
 80026cc:	e01c      	b.n	8002708 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026ce:	4b0a      	ldr	r3, [pc, #40]	; (80026f8 <HAL_RCC_OscConfig+0x274>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d4:	f7ff fa12 	bl	8001afc <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026da:	e00f      	b.n	80026fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026dc:	f7ff fa0e 	bl	8001afc <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d908      	bls.n	80026fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e146      	b.n	800297c <HAL_RCC_OscConfig+0x4f8>
 80026ee:	bf00      	nop
 80026f0:	40021000 	.word	0x40021000
 80026f4:	42420000 	.word	0x42420000
 80026f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026fc:	4b92      	ldr	r3, [pc, #584]	; (8002948 <HAL_RCC_OscConfig+0x4c4>)
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1e9      	bne.n	80026dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0304 	and.w	r3, r3, #4
 8002710:	2b00      	cmp	r3, #0
 8002712:	f000 80a6 	beq.w	8002862 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002716:	2300      	movs	r3, #0
 8002718:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800271a:	4b8b      	ldr	r3, [pc, #556]	; (8002948 <HAL_RCC_OscConfig+0x4c4>)
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10d      	bne.n	8002742 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002726:	4b88      	ldr	r3, [pc, #544]	; (8002948 <HAL_RCC_OscConfig+0x4c4>)
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	4a87      	ldr	r2, [pc, #540]	; (8002948 <HAL_RCC_OscConfig+0x4c4>)
 800272c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002730:	61d3      	str	r3, [r2, #28]
 8002732:	4b85      	ldr	r3, [pc, #532]	; (8002948 <HAL_RCC_OscConfig+0x4c4>)
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273a:	60bb      	str	r3, [r7, #8]
 800273c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800273e:	2301      	movs	r3, #1
 8002740:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002742:	4b82      	ldr	r3, [pc, #520]	; (800294c <HAL_RCC_OscConfig+0x4c8>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274a:	2b00      	cmp	r3, #0
 800274c:	d118      	bne.n	8002780 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800274e:	4b7f      	ldr	r3, [pc, #508]	; (800294c <HAL_RCC_OscConfig+0x4c8>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a7e      	ldr	r2, [pc, #504]	; (800294c <HAL_RCC_OscConfig+0x4c8>)
 8002754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002758:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800275a:	f7ff f9cf 	bl	8001afc <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002760:	e008      	b.n	8002774 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002762:	f7ff f9cb 	bl	8001afc <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b64      	cmp	r3, #100	; 0x64
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e103      	b.n	800297c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002774:	4b75      	ldr	r3, [pc, #468]	; (800294c <HAL_RCC_OscConfig+0x4c8>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0f0      	beq.n	8002762 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d106      	bne.n	8002796 <HAL_RCC_OscConfig+0x312>
 8002788:	4b6f      	ldr	r3, [pc, #444]	; (8002948 <HAL_RCC_OscConfig+0x4c4>)
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	4a6e      	ldr	r2, [pc, #440]	; (8002948 <HAL_RCC_OscConfig+0x4c4>)
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	6213      	str	r3, [r2, #32]
 8002794:	e02d      	b.n	80027f2 <HAL_RCC_OscConfig+0x36e>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10c      	bne.n	80027b8 <HAL_RCC_OscConfig+0x334>
 800279e:	4b6a      	ldr	r3, [pc, #424]	; (8002948 <HAL_RCC_OscConfig+0x4c4>)
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	4a69      	ldr	r2, [pc, #420]	; (8002948 <HAL_RCC_OscConfig+0x4c4>)
 80027a4:	f023 0301 	bic.w	r3, r3, #1
 80027a8:	6213      	str	r3, [r2, #32]
 80027aa:	4b67      	ldr	r3, [pc, #412]	; (8002948 <HAL_RCC_OscConfig+0x4c4>)
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	4a66      	ldr	r2, [pc, #408]	; (8002948 <HAL_RCC_OscConfig+0x4c4>)
 80027b0:	f023 0304 	bic.w	r3, r3, #4
 80027b4:	6213      	str	r3, [r2, #32]
 80027b6:	e01c      	b.n	80027f2 <HAL_RCC_OscConfig+0x36e>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	2b05      	cmp	r3, #5
 80027be:	d10c      	bne.n	80027da <HAL_RCC_OscConfig+0x356>
 80027c0:	4b61      	ldr	r3, [pc, #388]	; (8002948 <HAL_RCC_OscConfig+0x4c4>)
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	4a60      	ldr	r2, [pc, #384]	; (8002948 <HAL_RCC_OscConfig+0x4c4>)
 80027c6:	f043 0304 	orr.w	r3, r3, #4
 80027ca:	6213      	str	r3, [r2, #32]
 80027cc:	4b5e      	ldr	r3, [pc, #376]	; (8002948 <HAL_RCC_OscConfig+0x4c4>)
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	4a5d      	ldr	r2, [pc, #372]	; (8002948 <HAL_RCC_OscConfig+0x4c4>)
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	6213      	str	r3, [r2, #32]
 80027d8:	e00b      	b.n	80027f2 <HAL_RCC_OscConfig+0x36e>
 80027da:	4b5b      	ldr	r3, [pc, #364]	; (8002948 <HAL_RCC_OscConfig+0x4c4>)
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	4a5a      	ldr	r2, [pc, #360]	; (8002948 <HAL_RCC_OscConfig+0x4c4>)
 80027e0:	f023 0301 	bic.w	r3, r3, #1
 80027e4:	6213      	str	r3, [r2, #32]
 80027e6:	4b58      	ldr	r3, [pc, #352]	; (8002948 <HAL_RCC_OscConfig+0x4c4>)
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	4a57      	ldr	r2, [pc, #348]	; (8002948 <HAL_RCC_OscConfig+0x4c4>)
 80027ec:	f023 0304 	bic.w	r3, r3, #4
 80027f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d015      	beq.n	8002826 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027fa:	f7ff f97f 	bl	8001afc <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002800:	e00a      	b.n	8002818 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002802:	f7ff f97b 	bl	8001afc <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002810:	4293      	cmp	r3, r2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e0b1      	b.n	800297c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002818:	4b4b      	ldr	r3, [pc, #300]	; (8002948 <HAL_RCC_OscConfig+0x4c4>)
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0ee      	beq.n	8002802 <HAL_RCC_OscConfig+0x37e>
 8002824:	e014      	b.n	8002850 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002826:	f7ff f969 	bl	8001afc <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800282c:	e00a      	b.n	8002844 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800282e:	f7ff f965 	bl	8001afc <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	f241 3288 	movw	r2, #5000	; 0x1388
 800283c:	4293      	cmp	r3, r2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e09b      	b.n	800297c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002844:	4b40      	ldr	r3, [pc, #256]	; (8002948 <HAL_RCC_OscConfig+0x4c4>)
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1ee      	bne.n	800282e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002850:	7dfb      	ldrb	r3, [r7, #23]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d105      	bne.n	8002862 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002856:	4b3c      	ldr	r3, [pc, #240]	; (8002948 <HAL_RCC_OscConfig+0x4c4>)
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	4a3b      	ldr	r2, [pc, #236]	; (8002948 <HAL_RCC_OscConfig+0x4c4>)
 800285c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002860:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	2b00      	cmp	r3, #0
 8002868:	f000 8087 	beq.w	800297a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800286c:	4b36      	ldr	r3, [pc, #216]	; (8002948 <HAL_RCC_OscConfig+0x4c4>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f003 030c 	and.w	r3, r3, #12
 8002874:	2b08      	cmp	r3, #8
 8002876:	d061      	beq.n	800293c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	69db      	ldr	r3, [r3, #28]
 800287c:	2b02      	cmp	r3, #2
 800287e:	d146      	bne.n	800290e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002880:	4b33      	ldr	r3, [pc, #204]	; (8002950 <HAL_RCC_OscConfig+0x4cc>)
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002886:	f7ff f939 	bl	8001afc <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800288e:	f7ff f935 	bl	8001afc <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e06d      	b.n	800297c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028a0:	4b29      	ldr	r3, [pc, #164]	; (8002948 <HAL_RCC_OscConfig+0x4c4>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1f0      	bne.n	800288e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028b4:	d108      	bne.n	80028c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028b6:	4b24      	ldr	r3, [pc, #144]	; (8002948 <HAL_RCC_OscConfig+0x4c4>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	4921      	ldr	r1, [pc, #132]	; (8002948 <HAL_RCC_OscConfig+0x4c4>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028c8:	4b1f      	ldr	r3, [pc, #124]	; (8002948 <HAL_RCC_OscConfig+0x4c4>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a19      	ldr	r1, [r3, #32]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d8:	430b      	orrs	r3, r1
 80028da:	491b      	ldr	r1, [pc, #108]	; (8002948 <HAL_RCC_OscConfig+0x4c4>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028e0:	4b1b      	ldr	r3, [pc, #108]	; (8002950 <HAL_RCC_OscConfig+0x4cc>)
 80028e2:	2201      	movs	r2, #1
 80028e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e6:	f7ff f909 	bl	8001afc <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028ec:	e008      	b.n	8002900 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ee:	f7ff f905 	bl	8001afc <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e03d      	b.n	800297c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002900:	4b11      	ldr	r3, [pc, #68]	; (8002948 <HAL_RCC_OscConfig+0x4c4>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0f0      	beq.n	80028ee <HAL_RCC_OscConfig+0x46a>
 800290c:	e035      	b.n	800297a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800290e:	4b10      	ldr	r3, [pc, #64]	; (8002950 <HAL_RCC_OscConfig+0x4cc>)
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002914:	f7ff f8f2 	bl	8001afc <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800291c:	f7ff f8ee 	bl	8001afc <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e026      	b.n	800297c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800292e:	4b06      	ldr	r3, [pc, #24]	; (8002948 <HAL_RCC_OscConfig+0x4c4>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1f0      	bne.n	800291c <HAL_RCC_OscConfig+0x498>
 800293a:	e01e      	b.n	800297a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	69db      	ldr	r3, [r3, #28]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d107      	bne.n	8002954 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e019      	b.n	800297c <HAL_RCC_OscConfig+0x4f8>
 8002948:	40021000 	.word	0x40021000
 800294c:	40007000 	.word	0x40007000
 8002950:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002954:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <HAL_RCC_OscConfig+0x500>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	429a      	cmp	r2, r3
 8002966:	d106      	bne.n	8002976 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002972:	429a      	cmp	r2, r3
 8002974:	d001      	beq.n	800297a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e000      	b.n	800297c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3718      	adds	r7, #24
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40021000 	.word	0x40021000

08002988 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e0d0      	b.n	8002b3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800299c:	4b6a      	ldr	r3, [pc, #424]	; (8002b48 <HAL_RCC_ClockConfig+0x1c0>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d910      	bls.n	80029cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029aa:	4b67      	ldr	r3, [pc, #412]	; (8002b48 <HAL_RCC_ClockConfig+0x1c0>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f023 0207 	bic.w	r2, r3, #7
 80029b2:	4965      	ldr	r1, [pc, #404]	; (8002b48 <HAL_RCC_ClockConfig+0x1c0>)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ba:	4b63      	ldr	r3, [pc, #396]	; (8002b48 <HAL_RCC_ClockConfig+0x1c0>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d001      	beq.n	80029cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e0b8      	b.n	8002b3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d020      	beq.n	8002a1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0304 	and.w	r3, r3, #4
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d005      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029e4:	4b59      	ldr	r3, [pc, #356]	; (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	4a58      	ldr	r2, [pc, #352]	; (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 80029ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0308 	and.w	r3, r3, #8
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d005      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029fc:	4b53      	ldr	r3, [pc, #332]	; (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	4a52      	ldr	r2, [pc, #328]	; (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 8002a02:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a08:	4b50      	ldr	r3, [pc, #320]	; (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	494d      	ldr	r1, [pc, #308]	; (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d040      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d107      	bne.n	8002a3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a2e:	4b47      	ldr	r3, [pc, #284]	; (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d115      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e07f      	b.n	8002b3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d107      	bne.n	8002a56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a46:	4b41      	ldr	r3, [pc, #260]	; (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d109      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e073      	b.n	8002b3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a56:	4b3d      	ldr	r3, [pc, #244]	; (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e06b      	b.n	8002b3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a66:	4b39      	ldr	r3, [pc, #228]	; (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f023 0203 	bic.w	r2, r3, #3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	4936      	ldr	r1, [pc, #216]	; (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a78:	f7ff f840 	bl	8001afc <HAL_GetTick>
 8002a7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a7e:	e00a      	b.n	8002a96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a80:	f7ff f83c 	bl	8001afc <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e053      	b.n	8002b3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a96:	4b2d      	ldr	r3, [pc, #180]	; (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f003 020c 	and.w	r2, r3, #12
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d1eb      	bne.n	8002a80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002aa8:	4b27      	ldr	r3, [pc, #156]	; (8002b48 <HAL_RCC_ClockConfig+0x1c0>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d210      	bcs.n	8002ad8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab6:	4b24      	ldr	r3, [pc, #144]	; (8002b48 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f023 0207 	bic.w	r2, r3, #7
 8002abe:	4922      	ldr	r1, [pc, #136]	; (8002b48 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ac6:	4b20      	ldr	r3, [pc, #128]	; (8002b48 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d001      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e032      	b.n	8002b3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0304 	and.w	r3, r3, #4
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d008      	beq.n	8002af6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ae4:	4b19      	ldr	r3, [pc, #100]	; (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	4916      	ldr	r1, [pc, #88]	; (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0308 	and.w	r3, r3, #8
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d009      	beq.n	8002b16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b02:	4b12      	ldr	r3, [pc, #72]	; (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	490e      	ldr	r1, [pc, #56]	; (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b16:	f000 f821 	bl	8002b5c <HAL_RCC_GetSysClockFreq>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	4b0b      	ldr	r3, [pc, #44]	; (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	091b      	lsrs	r3, r3, #4
 8002b22:	f003 030f 	and.w	r3, r3, #15
 8002b26:	490a      	ldr	r1, [pc, #40]	; (8002b50 <HAL_RCC_ClockConfig+0x1c8>)
 8002b28:	5ccb      	ldrb	r3, [r1, r3]
 8002b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b2e:	4a09      	ldr	r2, [pc, #36]	; (8002b54 <HAL_RCC_ClockConfig+0x1cc>)
 8002b30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b32:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <HAL_RCC_ClockConfig+0x1d0>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fe ff9e 	bl	8001a78 <HAL_InitTick>

  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40022000 	.word	0x40022000
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	080057a8 	.word	0x080057a8
 8002b54:	20000010 	.word	0x20000010
 8002b58:	20000014 	.word	0x20000014

08002b5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b5c:	b490      	push	{r4, r7}
 8002b5e:	b08a      	sub	sp, #40	; 0x28
 8002b60:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b62:	4b29      	ldr	r3, [pc, #164]	; (8002c08 <HAL_RCC_GetSysClockFreq+0xac>)
 8002b64:	1d3c      	adds	r4, r7, #4
 8002b66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b6c:	f240 2301 	movw	r3, #513	; 0x201
 8002b70:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b72:	2300      	movs	r3, #0
 8002b74:	61fb      	str	r3, [r7, #28]
 8002b76:	2300      	movs	r3, #0
 8002b78:	61bb      	str	r3, [r7, #24]
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b7e:	2300      	movs	r3, #0
 8002b80:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b82:	2300      	movs	r3, #0
 8002b84:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b86:	4b21      	ldr	r3, [pc, #132]	; (8002c0c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	f003 030c 	and.w	r3, r3, #12
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	d002      	beq.n	8002b9c <HAL_RCC_GetSysClockFreq+0x40>
 8002b96:	2b08      	cmp	r3, #8
 8002b98:	d003      	beq.n	8002ba2 <HAL_RCC_GetSysClockFreq+0x46>
 8002b9a:	e02b      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b9c:	4b1c      	ldr	r3, [pc, #112]	; (8002c10 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b9e:	623b      	str	r3, [r7, #32]
      break;
 8002ba0:	e02b      	b.n	8002bfa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	0c9b      	lsrs	r3, r3, #18
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	3328      	adds	r3, #40	; 0x28
 8002bac:	443b      	add	r3, r7
 8002bae:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002bb2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d012      	beq.n	8002be4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bbe:	4b13      	ldr	r3, [pc, #76]	; (8002c0c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	0c5b      	lsrs	r3, r3, #17
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	3328      	adds	r3, #40	; 0x28
 8002bca:	443b      	add	r3, r7
 8002bcc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002bd0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	4a0e      	ldr	r2, [pc, #56]	; (8002c10 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002bd6:	fb03 f202 	mul.w	r2, r3, r2
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be0:	627b      	str	r3, [r7, #36]	; 0x24
 8002be2:	e004      	b.n	8002bee <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	4a0b      	ldr	r2, [pc, #44]	; (8002c14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002be8:	fb02 f303 	mul.w	r3, r2, r3
 8002bec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	623b      	str	r3, [r7, #32]
      break;
 8002bf2:	e002      	b.n	8002bfa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bf4:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002bf6:	623b      	str	r3, [r7, #32]
      break;
 8002bf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bfa:	6a3b      	ldr	r3, [r7, #32]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3728      	adds	r7, #40	; 0x28
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc90      	pop	{r4, r7}
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	08005798 	.word	0x08005798
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	007a1200 	.word	0x007a1200
 8002c14:	003d0900 	.word	0x003d0900

08002c18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c1c:	4b02      	ldr	r3, [pc, #8]	; (8002c28 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bc80      	pop	{r7}
 8002c26:	4770      	bx	lr
 8002c28:	20000010 	.word	0x20000010

08002c2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c30:	f7ff fff2 	bl	8002c18 <HAL_RCC_GetHCLKFreq>
 8002c34:	4602      	mov	r2, r0
 8002c36:	4b05      	ldr	r3, [pc, #20]	; (8002c4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	0a1b      	lsrs	r3, r3, #8
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	4903      	ldr	r1, [pc, #12]	; (8002c50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c42:	5ccb      	ldrb	r3, [r1, r3]
 8002c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	080057b8 	.word	0x080057b8

08002c54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c58:	f7ff ffde 	bl	8002c18 <HAL_RCC_GetHCLKFreq>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	0adb      	lsrs	r3, r3, #11
 8002c64:	f003 0307 	and.w	r3, r3, #7
 8002c68:	4903      	ldr	r1, [pc, #12]	; (8002c78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c6a:	5ccb      	ldrb	r3, [r1, r3]
 8002c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	40021000 	.word	0x40021000
 8002c78:	080057b8 	.word	0x080057b8

08002c7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c84:	4b0a      	ldr	r3, [pc, #40]	; (8002cb0 <RCC_Delay+0x34>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a0a      	ldr	r2, [pc, #40]	; (8002cb4 <RCC_Delay+0x38>)
 8002c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8e:	0a5b      	lsrs	r3, r3, #9
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	fb02 f303 	mul.w	r3, r2, r3
 8002c96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c98:	bf00      	nop
  }
  while (Delay --);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	1e5a      	subs	r2, r3, #1
 8002c9e:	60fa      	str	r2, [r7, #12]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1f9      	bne.n	8002c98 <RCC_Delay+0x1c>
}
 8002ca4:	bf00      	nop
 8002ca6:	bf00      	nop
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bc80      	pop	{r7}
 8002cae:	4770      	bx	lr
 8002cb0:	20000010 	.word	0x20000010
 8002cb4:	10624dd3 	.word	0x10624dd3

08002cb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e041      	b.n	8002d4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d106      	bne.n	8002ce4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7fe f9ae 	bl	8001040 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	3304      	adds	r3, #4
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	4610      	mov	r0, r2
 8002cf8:	f000 faac 	bl	8003254 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
	...

08002d58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d001      	beq.n	8002d70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e044      	b.n	8002dfa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2202      	movs	r2, #2
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68da      	ldr	r2, [r3, #12]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f042 0201 	orr.w	r2, r2, #1
 8002d86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a1d      	ldr	r2, [pc, #116]	; (8002e04 <HAL_TIM_Base_Start_IT+0xac>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d018      	beq.n	8002dc4 <HAL_TIM_Base_Start_IT+0x6c>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a1c      	ldr	r2, [pc, #112]	; (8002e08 <HAL_TIM_Base_Start_IT+0xb0>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d013      	beq.n	8002dc4 <HAL_TIM_Base_Start_IT+0x6c>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da4:	d00e      	beq.n	8002dc4 <HAL_TIM_Base_Start_IT+0x6c>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a18      	ldr	r2, [pc, #96]	; (8002e0c <HAL_TIM_Base_Start_IT+0xb4>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d009      	beq.n	8002dc4 <HAL_TIM_Base_Start_IT+0x6c>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a16      	ldr	r2, [pc, #88]	; (8002e10 <HAL_TIM_Base_Start_IT+0xb8>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d004      	beq.n	8002dc4 <HAL_TIM_Base_Start_IT+0x6c>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a15      	ldr	r2, [pc, #84]	; (8002e14 <HAL_TIM_Base_Start_IT+0xbc>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d111      	bne.n	8002de8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2b06      	cmp	r3, #6
 8002dd4:	d010      	beq.n	8002df8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f042 0201 	orr.w	r2, r2, #1
 8002de4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002de6:	e007      	b.n	8002df8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f042 0201 	orr.w	r2, r2, #1
 8002df6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3714      	adds	r7, #20
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bc80      	pop	{r7}
 8002e02:	4770      	bx	lr
 8002e04:	40012c00 	.word	0x40012c00
 8002e08:	40013400 	.word	0x40013400
 8002e0c:	40000400 	.word	0x40000400
 8002e10:	40000800 	.word	0x40000800
 8002e14:	40000c00 	.word	0x40000c00

08002e18 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68da      	ldr	r2, [r3, #12]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 0201 	bic.w	r2, r2, #1
 8002e2e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6a1a      	ldr	r2, [r3, #32]
 8002e36:	f241 1311 	movw	r3, #4369	; 0x1111
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d10f      	bne.n	8002e60 <HAL_TIM_Base_Stop_IT+0x48>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6a1a      	ldr	r2, [r3, #32]
 8002e46:	f240 4344 	movw	r3, #1092	; 0x444
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d107      	bne.n	8002e60 <HAL_TIM_Base_Stop_IT+0x48>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 0201 	bic.w	r2, r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bc80      	pop	{r7}
 8002e72:	4770      	bx	lr

08002e74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d122      	bne.n	8002ed0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d11b      	bne.n	8002ed0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f06f 0202 	mvn.w	r2, #2
 8002ea0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f9b1 	bl	800321e <HAL_TIM_IC_CaptureCallback>
 8002ebc:	e005      	b.n	8002eca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f9a4 	bl	800320c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f9b3 	bl	8003230 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	f003 0304 	and.w	r3, r3, #4
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	d122      	bne.n	8002f24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b04      	cmp	r3, #4
 8002eea:	d11b      	bne.n	8002f24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f06f 0204 	mvn.w	r2, #4
 8002ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2202      	movs	r2, #2
 8002efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f987 	bl	800321e <HAL_TIM_IC_CaptureCallback>
 8002f10:	e005      	b.n	8002f1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f97a 	bl	800320c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 f989 	bl	8003230 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	f003 0308 	and.w	r3, r3, #8
 8002f2e:	2b08      	cmp	r3, #8
 8002f30:	d122      	bne.n	8002f78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f003 0308 	and.w	r3, r3, #8
 8002f3c:	2b08      	cmp	r3, #8
 8002f3e:	d11b      	bne.n	8002f78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f06f 0208 	mvn.w	r2, #8
 8002f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2204      	movs	r2, #4
 8002f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	f003 0303 	and.w	r3, r3, #3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f95d 	bl	800321e <HAL_TIM_IC_CaptureCallback>
 8002f64:	e005      	b.n	8002f72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f950 	bl	800320c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 f95f 	bl	8003230 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	f003 0310 	and.w	r3, r3, #16
 8002f82:	2b10      	cmp	r3, #16
 8002f84:	d122      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f003 0310 	and.w	r3, r3, #16
 8002f90:	2b10      	cmp	r3, #16
 8002f92:	d11b      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f06f 0210 	mvn.w	r2, #16
 8002f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2208      	movs	r2, #8
 8002fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f933 	bl	800321e <HAL_TIM_IC_CaptureCallback>
 8002fb8:	e005      	b.n	8002fc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f926 	bl	800320c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 f935 	bl	8003230 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d10e      	bne.n	8002ff8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d107      	bne.n	8002ff8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f06f 0201 	mvn.w	r2, #1
 8002ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7fd ffdc 	bl	8000fb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003002:	2b80      	cmp	r3, #128	; 0x80
 8003004:	d10e      	bne.n	8003024 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003010:	2b80      	cmp	r3, #128	; 0x80
 8003012:	d107      	bne.n	8003024 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800301c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 fa9d 	bl	800355e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302e:	2b40      	cmp	r3, #64	; 0x40
 8003030:	d10e      	bne.n	8003050 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800303c:	2b40      	cmp	r3, #64	; 0x40
 800303e:	d107      	bne.n	8003050 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 f8f9 	bl	8003242 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	f003 0320 	and.w	r3, r3, #32
 800305a:	2b20      	cmp	r3, #32
 800305c:	d10e      	bne.n	800307c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	f003 0320 	and.w	r3, r3, #32
 8003068:	2b20      	cmp	r3, #32
 800306a:	d107      	bne.n	800307c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f06f 0220 	mvn.w	r2, #32
 8003074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 fa68 	bl	800354c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800307c:	bf00      	nop
 800307e:	3708      	adds	r7, #8
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003094:	2b01      	cmp	r3, #1
 8003096:	d101      	bne.n	800309c <HAL_TIM_ConfigClockSource+0x18>
 8003098:	2302      	movs	r3, #2
 800309a:	e0b3      	b.n	8003204 <HAL_TIM_ConfigClockSource+0x180>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2202      	movs	r2, #2
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030c2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030d4:	d03e      	beq.n	8003154 <HAL_TIM_ConfigClockSource+0xd0>
 80030d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030da:	f200 8087 	bhi.w	80031ec <HAL_TIM_ConfigClockSource+0x168>
 80030de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030e2:	f000 8085 	beq.w	80031f0 <HAL_TIM_ConfigClockSource+0x16c>
 80030e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ea:	d87f      	bhi.n	80031ec <HAL_TIM_ConfigClockSource+0x168>
 80030ec:	2b70      	cmp	r3, #112	; 0x70
 80030ee:	d01a      	beq.n	8003126 <HAL_TIM_ConfigClockSource+0xa2>
 80030f0:	2b70      	cmp	r3, #112	; 0x70
 80030f2:	d87b      	bhi.n	80031ec <HAL_TIM_ConfigClockSource+0x168>
 80030f4:	2b60      	cmp	r3, #96	; 0x60
 80030f6:	d050      	beq.n	800319a <HAL_TIM_ConfigClockSource+0x116>
 80030f8:	2b60      	cmp	r3, #96	; 0x60
 80030fa:	d877      	bhi.n	80031ec <HAL_TIM_ConfigClockSource+0x168>
 80030fc:	2b50      	cmp	r3, #80	; 0x50
 80030fe:	d03c      	beq.n	800317a <HAL_TIM_ConfigClockSource+0xf6>
 8003100:	2b50      	cmp	r3, #80	; 0x50
 8003102:	d873      	bhi.n	80031ec <HAL_TIM_ConfigClockSource+0x168>
 8003104:	2b40      	cmp	r3, #64	; 0x40
 8003106:	d058      	beq.n	80031ba <HAL_TIM_ConfigClockSource+0x136>
 8003108:	2b40      	cmp	r3, #64	; 0x40
 800310a:	d86f      	bhi.n	80031ec <HAL_TIM_ConfigClockSource+0x168>
 800310c:	2b30      	cmp	r3, #48	; 0x30
 800310e:	d064      	beq.n	80031da <HAL_TIM_ConfigClockSource+0x156>
 8003110:	2b30      	cmp	r3, #48	; 0x30
 8003112:	d86b      	bhi.n	80031ec <HAL_TIM_ConfigClockSource+0x168>
 8003114:	2b20      	cmp	r3, #32
 8003116:	d060      	beq.n	80031da <HAL_TIM_ConfigClockSource+0x156>
 8003118:	2b20      	cmp	r3, #32
 800311a:	d867      	bhi.n	80031ec <HAL_TIM_ConfigClockSource+0x168>
 800311c:	2b00      	cmp	r3, #0
 800311e:	d05c      	beq.n	80031da <HAL_TIM_ConfigClockSource+0x156>
 8003120:	2b10      	cmp	r3, #16
 8003122:	d05a      	beq.n	80031da <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003124:	e062      	b.n	80031ec <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6818      	ldr	r0, [r3, #0]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	6899      	ldr	r1, [r3, #8]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	f000 f97e 	bl	8003436 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003148:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	609a      	str	r2, [r3, #8]
      break;
 8003152:	e04e      	b.n	80031f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6818      	ldr	r0, [r3, #0]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	6899      	ldr	r1, [r3, #8]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	f000 f967 	bl	8003436 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003176:	609a      	str	r2, [r3, #8]
      break;
 8003178:	e03b      	b.n	80031f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6818      	ldr	r0, [r3, #0]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	6859      	ldr	r1, [r3, #4]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	461a      	mov	r2, r3
 8003188:	f000 f8de 	bl	8003348 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2150      	movs	r1, #80	; 0x50
 8003192:	4618      	mov	r0, r3
 8003194:	f000 f935 	bl	8003402 <TIM_ITRx_SetConfig>
      break;
 8003198:	e02b      	b.n	80031f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6818      	ldr	r0, [r3, #0]
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	6859      	ldr	r1, [r3, #4]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	461a      	mov	r2, r3
 80031a8:	f000 f8fc 	bl	80033a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2160      	movs	r1, #96	; 0x60
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 f925 	bl	8003402 <TIM_ITRx_SetConfig>
      break;
 80031b8:	e01b      	b.n	80031f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6818      	ldr	r0, [r3, #0]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	6859      	ldr	r1, [r3, #4]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	461a      	mov	r2, r3
 80031c8:	f000 f8be 	bl	8003348 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2140      	movs	r1, #64	; 0x40
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 f915 	bl	8003402 <TIM_ITRx_SetConfig>
      break;
 80031d8:	e00b      	b.n	80031f2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4619      	mov	r1, r3
 80031e4:	4610      	mov	r0, r2
 80031e6:	f000 f90c 	bl	8003402 <TIM_ITRx_SetConfig>
        break;
 80031ea:	e002      	b.n	80031f2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80031ec:	bf00      	nop
 80031ee:	e000      	b.n	80031f2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80031f0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	bc80      	pop	{r7}
 800321c:	4770      	bx	lr

0800321e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800321e:	b480      	push	{r7}
 8003220:	b083      	sub	sp, #12
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	bc80      	pop	{r7}
 800322e:	4770      	bx	lr

08003230 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	bc80      	pop	{r7}
 8003240:	4770      	bx	lr

08003242 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003242:	b480      	push	{r7}
 8003244:	b083      	sub	sp, #12
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800324a:	bf00      	nop
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	bc80      	pop	{r7}
 8003252:	4770      	bx	lr

08003254 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a33      	ldr	r2, [pc, #204]	; (8003334 <TIM_Base_SetConfig+0xe0>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d013      	beq.n	8003294 <TIM_Base_SetConfig+0x40>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a32      	ldr	r2, [pc, #200]	; (8003338 <TIM_Base_SetConfig+0xe4>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d00f      	beq.n	8003294 <TIM_Base_SetConfig+0x40>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800327a:	d00b      	beq.n	8003294 <TIM_Base_SetConfig+0x40>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a2f      	ldr	r2, [pc, #188]	; (800333c <TIM_Base_SetConfig+0xe8>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d007      	beq.n	8003294 <TIM_Base_SetConfig+0x40>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a2e      	ldr	r2, [pc, #184]	; (8003340 <TIM_Base_SetConfig+0xec>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d003      	beq.n	8003294 <TIM_Base_SetConfig+0x40>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a2d      	ldr	r2, [pc, #180]	; (8003344 <TIM_Base_SetConfig+0xf0>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d108      	bne.n	80032a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800329a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a22      	ldr	r2, [pc, #136]	; (8003334 <TIM_Base_SetConfig+0xe0>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d013      	beq.n	80032d6 <TIM_Base_SetConfig+0x82>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a21      	ldr	r2, [pc, #132]	; (8003338 <TIM_Base_SetConfig+0xe4>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d00f      	beq.n	80032d6 <TIM_Base_SetConfig+0x82>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032bc:	d00b      	beq.n	80032d6 <TIM_Base_SetConfig+0x82>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a1e      	ldr	r2, [pc, #120]	; (800333c <TIM_Base_SetConfig+0xe8>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d007      	beq.n	80032d6 <TIM_Base_SetConfig+0x82>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a1d      	ldr	r2, [pc, #116]	; (8003340 <TIM_Base_SetConfig+0xec>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d003      	beq.n	80032d6 <TIM_Base_SetConfig+0x82>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a1c      	ldr	r2, [pc, #112]	; (8003344 <TIM_Base_SetConfig+0xf0>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d108      	bne.n	80032e8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a09      	ldr	r2, [pc, #36]	; (8003334 <TIM_Base_SetConfig+0xe0>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d003      	beq.n	800331c <TIM_Base_SetConfig+0xc8>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a08      	ldr	r2, [pc, #32]	; (8003338 <TIM_Base_SetConfig+0xe4>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d103      	bne.n	8003324 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	691a      	ldr	r2, [r3, #16]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	615a      	str	r2, [r3, #20]
}
 800332a:	bf00      	nop
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr
 8003334:	40012c00 	.word	0x40012c00
 8003338:	40013400 	.word	0x40013400
 800333c:	40000400 	.word	0x40000400
 8003340:	40000800 	.word	0x40000800
 8003344:	40000c00 	.word	0x40000c00

08003348 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003348:	b480      	push	{r7}
 800334a:	b087      	sub	sp, #28
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	f023 0201 	bic.w	r2, r3, #1
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003372:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	011b      	lsls	r3, r3, #4
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	4313      	orrs	r3, r2
 800337c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f023 030a 	bic.w	r3, r3, #10
 8003384:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	4313      	orrs	r3, r2
 800338c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	621a      	str	r2, [r3, #32]
}
 800339a:	bf00      	nop
 800339c:	371c      	adds	r7, #28
 800339e:	46bd      	mov	sp, r7
 80033a0:	bc80      	pop	{r7}
 80033a2:	4770      	bx	lr

080033a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b087      	sub	sp, #28
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	f023 0210 	bic.w	r2, r3, #16
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	031b      	lsls	r3, r3, #12
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	011b      	lsls	r3, r3, #4
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	621a      	str	r2, [r3, #32]
}
 80033f8:	bf00      	nop
 80033fa:	371c      	adds	r7, #28
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bc80      	pop	{r7}
 8003400:	4770      	bx	lr

08003402 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003402:	b480      	push	{r7}
 8003404:	b085      	sub	sp, #20
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
 800340a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003418:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	4313      	orrs	r3, r2
 8003420:	f043 0307 	orr.w	r3, r3, #7
 8003424:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	609a      	str	r2, [r3, #8]
}
 800342c:	bf00      	nop
 800342e:	3714      	adds	r7, #20
 8003430:	46bd      	mov	sp, r7
 8003432:	bc80      	pop	{r7}
 8003434:	4770      	bx	lr

08003436 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003436:	b480      	push	{r7}
 8003438:	b087      	sub	sp, #28
 800343a:	af00      	add	r7, sp, #0
 800343c:	60f8      	str	r0, [r7, #12]
 800343e:	60b9      	str	r1, [r7, #8]
 8003440:	607a      	str	r2, [r7, #4]
 8003442:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003450:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	021a      	lsls	r2, r3, #8
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	431a      	orrs	r2, r3
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	4313      	orrs	r3, r2
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	4313      	orrs	r3, r2
 8003462:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	609a      	str	r2, [r3, #8]
}
 800346a:	bf00      	nop
 800346c:	371c      	adds	r7, #28
 800346e:	46bd      	mov	sp, r7
 8003470:	bc80      	pop	{r7}
 8003472:	4770      	bx	lr

08003474 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003484:	2b01      	cmp	r3, #1
 8003486:	d101      	bne.n	800348c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003488:	2302      	movs	r3, #2
 800348a:	e050      	b.n	800352e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a1b      	ldr	r2, [pc, #108]	; (8003538 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d018      	beq.n	8003502 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a19      	ldr	r2, [pc, #100]	; (800353c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d013      	beq.n	8003502 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e2:	d00e      	beq.n	8003502 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a15      	ldr	r2, [pc, #84]	; (8003540 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d009      	beq.n	8003502 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a14      	ldr	r2, [pc, #80]	; (8003544 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d004      	beq.n	8003502 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a12      	ldr	r2, [pc, #72]	; (8003548 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d10c      	bne.n	800351c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003508:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	4313      	orrs	r3, r2
 8003512:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68ba      	ldr	r2, [r7, #8]
 800351a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3714      	adds	r7, #20
 8003532:	46bd      	mov	sp, r7
 8003534:	bc80      	pop	{r7}
 8003536:	4770      	bx	lr
 8003538:	40012c00 	.word	0x40012c00
 800353c:	40013400 	.word	0x40013400
 8003540:	40000400 	.word	0x40000400
 8003544:	40000800 	.word	0x40000800
 8003548:	40000c00 	.word	0x40000c00

0800354c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	bc80      	pop	{r7}
 800355c:	4770      	bx	lr

0800355e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003566:	bf00      	nop
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	bc80      	pop	{r7}
 800356e:	4770      	bx	lr

08003570 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e03f      	b.n	8003602 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d106      	bne.n	800359c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7fd fd78 	bl	800108c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2224      	movs	r2, #36	; 0x24
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68da      	ldr	r2, [r3, #12]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 fc85 	bl	8003ec4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	691a      	ldr	r2, [r3, #16]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	695a      	ldr	r2, [r3, #20]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68da      	ldr	r2, [r3, #12]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2220      	movs	r2, #32
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2220      	movs	r2, #32
 80035fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b08a      	sub	sp, #40	; 0x28
 800360e:	af02      	add	r7, sp, #8
 8003610:	60f8      	str	r0, [r7, #12]
 8003612:	60b9      	str	r1, [r7, #8]
 8003614:	603b      	str	r3, [r7, #0]
 8003616:	4613      	mov	r3, r2
 8003618:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800361a:	2300      	movs	r3, #0
 800361c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b20      	cmp	r3, #32
 8003628:	d17c      	bne.n	8003724 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d002      	beq.n	8003636 <HAL_UART_Transmit+0x2c>
 8003630:	88fb      	ldrh	r3, [r7, #6]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e075      	b.n	8003726 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003640:	2b01      	cmp	r3, #1
 8003642:	d101      	bne.n	8003648 <HAL_UART_Transmit+0x3e>
 8003644:	2302      	movs	r3, #2
 8003646:	e06e      	b.n	8003726 <HAL_UART_Transmit+0x11c>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2221      	movs	r2, #33	; 0x21
 800365a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800365e:	f7fe fa4d 	bl	8001afc <HAL_GetTick>
 8003662:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	88fa      	ldrh	r2, [r7, #6]
 8003668:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	88fa      	ldrh	r2, [r7, #6]
 800366e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003678:	d108      	bne.n	800368c <HAL_UART_Transmit+0x82>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d104      	bne.n	800368c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003682:	2300      	movs	r3, #0
 8003684:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	61bb      	str	r3, [r7, #24]
 800368a:	e003      	b.n	8003694 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003690:	2300      	movs	r3, #0
 8003692:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800369c:	e02a      	b.n	80036f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	2200      	movs	r2, #0
 80036a6:	2180      	movs	r1, #128	; 0x80
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f000 fa38 	bl	8003b1e <UART_WaitOnFlagUntilTimeout>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e036      	b.n	8003726 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10b      	bne.n	80036d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	881b      	ldrh	r3, [r3, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	3302      	adds	r3, #2
 80036d2:	61bb      	str	r3, [r7, #24]
 80036d4:	e007      	b.n	80036e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	781a      	ldrb	r2, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	3301      	adds	r3, #1
 80036e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	3b01      	subs	r3, #1
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1cf      	bne.n	800369e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	2200      	movs	r2, #0
 8003706:	2140      	movs	r1, #64	; 0x40
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f000 fa08 	bl	8003b1e <UART_WaitOnFlagUntilTimeout>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e006      	b.n	8003726 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2220      	movs	r2, #32
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003720:	2300      	movs	r3, #0
 8003722:	e000      	b.n	8003726 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003724:	2302      	movs	r3, #2
  }
}
 8003726:	4618      	mov	r0, r3
 8003728:	3720      	adds	r7, #32
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b084      	sub	sp, #16
 8003732:	af00      	add	r7, sp, #0
 8003734:	60f8      	str	r0, [r7, #12]
 8003736:	60b9      	str	r1, [r7, #8]
 8003738:	4613      	mov	r3, r2
 800373a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b20      	cmp	r3, #32
 8003746:	d11d      	bne.n	8003784 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d002      	beq.n	8003754 <HAL_UART_Receive_IT+0x26>
 800374e:	88fb      	ldrh	r3, [r7, #6]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e016      	b.n	8003786 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800375e:	2b01      	cmp	r3, #1
 8003760:	d101      	bne.n	8003766 <HAL_UART_Receive_IT+0x38>
 8003762:	2302      	movs	r3, #2
 8003764:	e00f      	b.n	8003786 <HAL_UART_Receive_IT+0x58>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003774:	88fb      	ldrh	r3, [r7, #6]
 8003776:	461a      	mov	r2, r3
 8003778:	68b9      	ldr	r1, [r7, #8]
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f000 fa19 	bl	8003bb2 <UART_Start_Receive_IT>
 8003780:	4603      	mov	r3, r0
 8003782:	e000      	b.n	8003786 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003784:	2302      	movs	r3, #2
  }
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
	...

08003790 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b08a      	sub	sp, #40	; 0x28
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80037b0:	2300      	movs	r3, #0
 80037b2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80037b4:	2300      	movs	r3, #0
 80037b6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80037b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10d      	bne.n	80037e2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c8:	f003 0320 	and.w	r3, r3, #32
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d008      	beq.n	80037e2 <HAL_UART_IRQHandler+0x52>
 80037d0:	6a3b      	ldr	r3, [r7, #32]
 80037d2:	f003 0320 	and.w	r3, r3, #32
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 fac9 	bl	8003d72 <UART_Receive_IT>
      return;
 80037e0:	e17b      	b.n	8003ada <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 80b1 	beq.w	800394c <HAL_UART_IRQHandler+0x1bc>
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d105      	bne.n	8003800 <HAL_UART_IRQHandler+0x70>
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 80a6 	beq.w	800394c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00a      	beq.n	8003820 <HAL_UART_IRQHandler+0x90>
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003810:	2b00      	cmp	r3, #0
 8003812:	d005      	beq.n	8003820 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003818:	f043 0201 	orr.w	r2, r3, #1
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003822:	f003 0304 	and.w	r3, r3, #4
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00a      	beq.n	8003840 <HAL_UART_IRQHandler+0xb0>
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b00      	cmp	r3, #0
 8003832:	d005      	beq.n	8003840 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003838:	f043 0202 	orr.w	r2, r3, #2
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00a      	beq.n	8003860 <HAL_UART_IRQHandler+0xd0>
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	2b00      	cmp	r3, #0
 8003852:	d005      	beq.n	8003860 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003858:	f043 0204 	orr.w	r2, r3, #4
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003862:	f003 0308 	and.w	r3, r3, #8
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00f      	beq.n	800388a <HAL_UART_IRQHandler+0xfa>
 800386a:	6a3b      	ldr	r3, [r7, #32]
 800386c:	f003 0320 	and.w	r3, r3, #32
 8003870:	2b00      	cmp	r3, #0
 8003872:	d104      	bne.n	800387e <HAL_UART_IRQHandler+0xee>
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b00      	cmp	r3, #0
 800387c:	d005      	beq.n	800388a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	f043 0208 	orr.w	r2, r3, #8
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 811e 	beq.w	8003ad0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003896:	f003 0320 	and.w	r3, r3, #32
 800389a:	2b00      	cmp	r3, #0
 800389c:	d007      	beq.n	80038ae <HAL_UART_IRQHandler+0x11e>
 800389e:	6a3b      	ldr	r3, [r7, #32]
 80038a0:	f003 0320 	and.w	r3, r3, #32
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d002      	beq.n	80038ae <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 fa62 	bl	8003d72 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	bf14      	ite	ne
 80038bc:	2301      	movne	r3, #1
 80038be:	2300      	moveq	r3, #0
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c8:	f003 0308 	and.w	r3, r3, #8
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d102      	bne.n	80038d6 <HAL_UART_IRQHandler+0x146>
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d031      	beq.n	800393a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f9a4 	bl	8003c24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d023      	beq.n	8003932 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	695a      	ldr	r2, [r3, #20]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038f8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d013      	beq.n	800392a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003906:	4a76      	ldr	r2, [pc, #472]	; (8003ae0 <HAL_UART_IRQHandler+0x350>)
 8003908:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390e:	4618      	mov	r0, r3
 8003910:	f7fe fa6a 	bl	8001de8 <HAL_DMA_Abort_IT>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d016      	beq.n	8003948 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003924:	4610      	mov	r0, r2
 8003926:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003928:	e00e      	b.n	8003948 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f8e3 	bl	8003af6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003930:	e00a      	b.n	8003948 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f8df 	bl	8003af6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003938:	e006      	b.n	8003948 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f8db 	bl	8003af6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003946:	e0c3      	b.n	8003ad0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003948:	bf00      	nop
    return;
 800394a:	e0c1      	b.n	8003ad0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003950:	2b01      	cmp	r3, #1
 8003952:	f040 80a1 	bne.w	8003a98 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	f003 0310 	and.w	r3, r3, #16
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 809b 	beq.w	8003a98 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003962:	6a3b      	ldr	r3, [r7, #32]
 8003964:	f003 0310 	and.w	r3, r3, #16
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 8095 	beq.w	8003a98 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800396e:	2300      	movs	r3, #0
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	60fb      	str	r3, [r7, #12]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	60fb      	str	r3, [r7, #12]
 8003982:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398e:	2b00      	cmp	r3, #0
 8003990:	d04e      	beq.n	8003a30 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800399c:	8a3b      	ldrh	r3, [r7, #16]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f000 8098 	beq.w	8003ad4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80039a8:	8a3a      	ldrh	r2, [r7, #16]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	f080 8092 	bcs.w	8003ad4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	8a3a      	ldrh	r2, [r7, #16]
 80039b4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	2b20      	cmp	r3, #32
 80039be:	d02b      	beq.n	8003a18 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68da      	ldr	r2, [r3, #12]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039ce:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	695a      	ldr	r2, [r3, #20]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f022 0201 	bic.w	r2, r2, #1
 80039de:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	695a      	ldr	r2, [r3, #20]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039ee:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2220      	movs	r2, #32
 80039f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68da      	ldr	r2, [r3, #12]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 0210 	bic.w	r2, r2, #16
 8003a0c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fe f9ad 	bl	8001d72 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	4619      	mov	r1, r3
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 f86d 	bl	8003b08 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003a2e:	e051      	b.n	8003ad4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d047      	beq.n	8003ad8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003a48:	8a7b      	ldrh	r3, [r7, #18]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d044      	beq.n	8003ad8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68da      	ldr	r2, [r3, #12]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003a5c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	695a      	ldr	r2, [r3, #20]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 0201 	bic.w	r2, r2, #1
 8003a6c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2220      	movs	r2, #32
 8003a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68da      	ldr	r2, [r3, #12]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 0210 	bic.w	r2, r2, #16
 8003a8a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a8c:	8a7b      	ldrh	r3, [r7, #18]
 8003a8e:	4619      	mov	r1, r3
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 f839 	bl	8003b08 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003a96:	e01f      	b.n	8003ad8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d008      	beq.n	8003ab4 <HAL_UART_IRQHandler+0x324>
 8003aa2:	6a3b      	ldr	r3, [r7, #32]
 8003aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d003      	beq.n	8003ab4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 f8f9 	bl	8003ca4 <UART_Transmit_IT>
    return;
 8003ab2:	e012      	b.n	8003ada <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00d      	beq.n	8003ada <HAL_UART_IRQHandler+0x34a>
 8003abe:	6a3b      	ldr	r3, [r7, #32]
 8003ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d008      	beq.n	8003ada <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 f93a 	bl	8003d42 <UART_EndTransmit_IT>
    return;
 8003ace:	e004      	b.n	8003ada <HAL_UART_IRQHandler+0x34a>
    return;
 8003ad0:	bf00      	nop
 8003ad2:	e002      	b.n	8003ada <HAL_UART_IRQHandler+0x34a>
      return;
 8003ad4:	bf00      	nop
 8003ad6:	e000      	b.n	8003ada <HAL_UART_IRQHandler+0x34a>
      return;
 8003ad8:	bf00      	nop
  }
}
 8003ada:	3728      	adds	r7, #40	; 0x28
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	08003c7d 	.word	0x08003c7d

08003ae4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bc80      	pop	{r7}
 8003af4:	4770      	bx	lr

08003af6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003af6:	b480      	push	{r7}
 8003af8:	b083      	sub	sp, #12
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003afe:	bf00      	nop
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bc80      	pop	{r7}
 8003b06:	4770      	bx	lr

08003b08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	460b      	mov	r3, r1
 8003b12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bc80      	pop	{r7}
 8003b1c:	4770      	bx	lr

08003b1e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b084      	sub	sp, #16
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	60f8      	str	r0, [r7, #12]
 8003b26:	60b9      	str	r1, [r7, #8]
 8003b28:	603b      	str	r3, [r7, #0]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b2e:	e02c      	b.n	8003b8a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b36:	d028      	beq.n	8003b8a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d007      	beq.n	8003b4e <UART_WaitOnFlagUntilTimeout+0x30>
 8003b3e:	f7fd ffdd 	bl	8001afc <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d21d      	bcs.n	8003b8a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68da      	ldr	r2, [r3, #12]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b5c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	695a      	ldr	r2, [r3, #20]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0201 	bic.w	r2, r2, #1
 8003b6c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2220      	movs	r2, #32
 8003b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e00f      	b.n	8003baa <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	4013      	ands	r3, r2
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	bf0c      	ite	eq
 8003b9a:	2301      	moveq	r3, #1
 8003b9c:	2300      	movne	r3, #0
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	79fb      	ldrb	r3, [r7, #7]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d0c3      	beq.n	8003b30 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b085      	sub	sp, #20
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	60f8      	str	r0, [r7, #12]
 8003bba:	60b9      	str	r1, [r7, #8]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	68ba      	ldr	r2, [r7, #8]
 8003bc4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	88fa      	ldrh	r2, [r7, #6]
 8003bca:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	88fa      	ldrh	r2, [r7, #6]
 8003bd0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2222      	movs	r2, #34	; 0x22
 8003bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68da      	ldr	r2, [r3, #12]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bf6:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	695a      	ldr	r2, [r3, #20]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f042 0201 	orr.w	r2, r2, #1
 8003c06:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68da      	ldr	r2, [r3, #12]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 0220 	orr.w	r2, r2, #32
 8003c16:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3714      	adds	r7, #20
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bc80      	pop	{r7}
 8003c22:	4770      	bx	lr

08003c24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c3a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	695a      	ldr	r2, [r3, #20]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0201 	bic.w	r2, r2, #1
 8003c4a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d107      	bne.n	8003c64 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68da      	ldr	r2, [r3, #12]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0210 	bic.w	r2, r2, #16
 8003c62:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2220      	movs	r2, #32
 8003c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003c72:	bf00      	nop
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bc80      	pop	{r7}
 8003c7a:	4770      	bx	lr

08003c7c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f7ff ff2d 	bl	8003af6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c9c:	bf00      	nop
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2b21      	cmp	r3, #33	; 0x21
 8003cb6:	d13e      	bne.n	8003d36 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cc0:	d114      	bne.n	8003cec <UART_Transmit_IT+0x48>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d110      	bne.n	8003cec <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	881b      	ldrh	r3, [r3, #0]
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cde:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	1c9a      	adds	r2, r3, #2
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	621a      	str	r2, [r3, #32]
 8003cea:	e008      	b.n	8003cfe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	1c59      	adds	r1, r3, #1
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	6211      	str	r1, [r2, #32]
 8003cf6:	781a      	ldrb	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	3b01      	subs	r3, #1
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10f      	bne.n	8003d32 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68da      	ldr	r2, [r3, #12]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d20:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68da      	ldr	r2, [r3, #12]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d30:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d32:	2300      	movs	r3, #0
 8003d34:	e000      	b.n	8003d38 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d36:	2302      	movs	r3, #2
  }
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3714      	adds	r7, #20
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bc80      	pop	{r7}
 8003d40:	4770      	bx	lr

08003d42 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b082      	sub	sp, #8
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68da      	ldr	r2, [r3, #12]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d58:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2220      	movs	r2, #32
 8003d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7ff febe 	bl	8003ae4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b086      	sub	sp, #24
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b22      	cmp	r3, #34	; 0x22
 8003d84:	f040 8099 	bne.w	8003eba <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d90:	d117      	bne.n	8003dc2 <UART_Receive_IT+0x50>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d113      	bne.n	8003dc2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dba:	1c9a      	adds	r2, r3, #2
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	629a      	str	r2, [r3, #40]	; 0x28
 8003dc0:	e026      	b.n	8003e10 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd4:	d007      	beq.n	8003de6 <UART_Receive_IT+0x74>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10a      	bne.n	8003df4 <UART_Receive_IT+0x82>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d106      	bne.n	8003df4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	b2da      	uxtb	r2, r3
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	701a      	strb	r2, [r3, #0]
 8003df2:	e008      	b.n	8003e06 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0a:	1c5a      	adds	r2, r3, #1
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	3b01      	subs	r3, #1
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d148      	bne.n	8003eb6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68da      	ldr	r2, [r3, #12]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 0220 	bic.w	r2, r2, #32
 8003e32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68da      	ldr	r2, [r3, #12]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	695a      	ldr	r2, [r3, #20]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f022 0201 	bic.w	r2, r2, #1
 8003e52:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2220      	movs	r2, #32
 8003e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d123      	bne.n	8003eac <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68da      	ldr	r2, [r3, #12]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f022 0210 	bic.w	r2, r2, #16
 8003e78:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0310 	and.w	r3, r3, #16
 8003e84:	2b10      	cmp	r3, #16
 8003e86:	d10a      	bne.n	8003e9e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e88:	2300      	movs	r3, #0
 8003e8a:	60fb      	str	r3, [r7, #12]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	60fb      	str	r3, [r7, #12]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f7ff fe2f 	bl	8003b08 <HAL_UARTEx_RxEventCallback>
 8003eaa:	e002      	b.n	8003eb2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f7fd f999 	bl	80011e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	e002      	b.n	8003ebc <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	e000      	b.n	8003ebc <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003eba:	2302      	movs	r3, #2
  }
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3718      	adds	r7, #24
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	68da      	ldr	r2, [r3, #12]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	689a      	ldr	r2, [r3, #8]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	431a      	orrs	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003efe:	f023 030c 	bic.w	r3, r3, #12
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	6812      	ldr	r2, [r2, #0]
 8003f06:	68b9      	ldr	r1, [r7, #8]
 8003f08:	430b      	orrs	r3, r1
 8003f0a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	699a      	ldr	r2, [r3, #24]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a2c      	ldr	r2, [pc, #176]	; (8003fd8 <UART_SetConfig+0x114>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d103      	bne.n	8003f34 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f2c:	f7fe fe92 	bl	8002c54 <HAL_RCC_GetPCLK2Freq>
 8003f30:	60f8      	str	r0, [r7, #12]
 8003f32:	e002      	b.n	8003f3a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f34:	f7fe fe7a 	bl	8002c2c <HAL_RCC_GetPCLK1Freq>
 8003f38:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	4413      	add	r3, r2
 8003f42:	009a      	lsls	r2, r3, #2
 8003f44:	441a      	add	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f50:	4a22      	ldr	r2, [pc, #136]	; (8003fdc <UART_SetConfig+0x118>)
 8003f52:	fba2 2303 	umull	r2, r3, r2, r3
 8003f56:	095b      	lsrs	r3, r3, #5
 8003f58:	0119      	lsls	r1, r3, #4
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	4413      	add	r3, r2
 8003f62:	009a      	lsls	r2, r3, #2
 8003f64:	441a      	add	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f70:	4b1a      	ldr	r3, [pc, #104]	; (8003fdc <UART_SetConfig+0x118>)
 8003f72:	fba3 0302 	umull	r0, r3, r3, r2
 8003f76:	095b      	lsrs	r3, r3, #5
 8003f78:	2064      	movs	r0, #100	; 0x64
 8003f7a:	fb00 f303 	mul.w	r3, r0, r3
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	011b      	lsls	r3, r3, #4
 8003f82:	3332      	adds	r3, #50	; 0x32
 8003f84:	4a15      	ldr	r2, [pc, #84]	; (8003fdc <UART_SetConfig+0x118>)
 8003f86:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8a:	095b      	lsrs	r3, r3, #5
 8003f8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f90:	4419      	add	r1, r3
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	4613      	mov	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4413      	add	r3, r2
 8003f9a:	009a      	lsls	r2, r3, #2
 8003f9c:	441a      	add	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fa8:	4b0c      	ldr	r3, [pc, #48]	; (8003fdc <UART_SetConfig+0x118>)
 8003faa:	fba3 0302 	umull	r0, r3, r3, r2
 8003fae:	095b      	lsrs	r3, r3, #5
 8003fb0:	2064      	movs	r0, #100	; 0x64
 8003fb2:	fb00 f303 	mul.w	r3, r0, r3
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	011b      	lsls	r3, r3, #4
 8003fba:	3332      	adds	r3, #50	; 0x32
 8003fbc:	4a07      	ldr	r2, [pc, #28]	; (8003fdc <UART_SetConfig+0x118>)
 8003fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc2:	095b      	lsrs	r3, r3, #5
 8003fc4:	f003 020f 	and.w	r2, r3, #15
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	440a      	add	r2, r1
 8003fce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003fd0:	bf00      	nop
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	40013800 	.word	0x40013800
 8003fdc:	51eb851f 	.word	0x51eb851f

08003fe0 <srand>:
 8003fe0:	b538      	push	{r3, r4, r5, lr}
 8003fe2:	4b10      	ldr	r3, [pc, #64]	; (8004024 <srand+0x44>)
 8003fe4:	4604      	mov	r4, r0
 8003fe6:	681d      	ldr	r5, [r3, #0]
 8003fe8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003fea:	b9b3      	cbnz	r3, 800401a <srand+0x3a>
 8003fec:	2018      	movs	r0, #24
 8003fee:	f000 fa65 	bl	80044bc <malloc>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	6328      	str	r0, [r5, #48]	; 0x30
 8003ff6:	b920      	cbnz	r0, 8004002 <srand+0x22>
 8003ff8:	2146      	movs	r1, #70	; 0x46
 8003ffa:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <srand+0x48>)
 8003ffc:	480b      	ldr	r0, [pc, #44]	; (800402c <srand+0x4c>)
 8003ffe:	f000 f9f7 	bl	80043f0 <__assert_func>
 8004002:	490b      	ldr	r1, [pc, #44]	; (8004030 <srand+0x50>)
 8004004:	4b0b      	ldr	r3, [pc, #44]	; (8004034 <srand+0x54>)
 8004006:	e9c0 1300 	strd	r1, r3, [r0]
 800400a:	4b0b      	ldr	r3, [pc, #44]	; (8004038 <srand+0x58>)
 800400c:	2100      	movs	r1, #0
 800400e:	6083      	str	r3, [r0, #8]
 8004010:	230b      	movs	r3, #11
 8004012:	8183      	strh	r3, [r0, #12]
 8004014:	2001      	movs	r0, #1
 8004016:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800401a:	2200      	movs	r2, #0
 800401c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800401e:	611c      	str	r4, [r3, #16]
 8004020:	615a      	str	r2, [r3, #20]
 8004022:	bd38      	pop	{r3, r4, r5, pc}
 8004024:	20000074 	.word	0x20000074
 8004028:	080057c0 	.word	0x080057c0
 800402c:	080057d7 	.word	0x080057d7
 8004030:	abcd330e 	.word	0xabcd330e
 8004034:	e66d1234 	.word	0xe66d1234
 8004038:	0005deec 	.word	0x0005deec

0800403c <rand>:
 800403c:	4b16      	ldr	r3, [pc, #88]	; (8004098 <rand+0x5c>)
 800403e:	b510      	push	{r4, lr}
 8004040:	681c      	ldr	r4, [r3, #0]
 8004042:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004044:	b9b3      	cbnz	r3, 8004074 <rand+0x38>
 8004046:	2018      	movs	r0, #24
 8004048:	f000 fa38 	bl	80044bc <malloc>
 800404c:	4602      	mov	r2, r0
 800404e:	6320      	str	r0, [r4, #48]	; 0x30
 8004050:	b920      	cbnz	r0, 800405c <rand+0x20>
 8004052:	2152      	movs	r1, #82	; 0x52
 8004054:	4b11      	ldr	r3, [pc, #68]	; (800409c <rand+0x60>)
 8004056:	4812      	ldr	r0, [pc, #72]	; (80040a0 <rand+0x64>)
 8004058:	f000 f9ca 	bl	80043f0 <__assert_func>
 800405c:	4911      	ldr	r1, [pc, #68]	; (80040a4 <rand+0x68>)
 800405e:	4b12      	ldr	r3, [pc, #72]	; (80040a8 <rand+0x6c>)
 8004060:	e9c0 1300 	strd	r1, r3, [r0]
 8004064:	4b11      	ldr	r3, [pc, #68]	; (80040ac <rand+0x70>)
 8004066:	2100      	movs	r1, #0
 8004068:	6083      	str	r3, [r0, #8]
 800406a:	230b      	movs	r3, #11
 800406c:	8183      	strh	r3, [r0, #12]
 800406e:	2001      	movs	r0, #1
 8004070:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004074:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004076:	480e      	ldr	r0, [pc, #56]	; (80040b0 <rand+0x74>)
 8004078:	690b      	ldr	r3, [r1, #16]
 800407a:	694c      	ldr	r4, [r1, #20]
 800407c:	4358      	muls	r0, r3
 800407e:	4a0d      	ldr	r2, [pc, #52]	; (80040b4 <rand+0x78>)
 8004080:	fb02 0004 	mla	r0, r2, r4, r0
 8004084:	fba3 3202 	umull	r3, r2, r3, r2
 8004088:	3301      	adds	r3, #1
 800408a:	eb40 0002 	adc.w	r0, r0, r2
 800408e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8004092:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004096:	bd10      	pop	{r4, pc}
 8004098:	20000074 	.word	0x20000074
 800409c:	080057c0 	.word	0x080057c0
 80040a0:	080057d7 	.word	0x080057d7
 80040a4:	abcd330e 	.word	0xabcd330e
 80040a8:	e66d1234 	.word	0xe66d1234
 80040ac:	0005deec 	.word	0x0005deec
 80040b0:	5851f42d 	.word	0x5851f42d
 80040b4:	4c957f2d 	.word	0x4c957f2d

080040b8 <std>:
 80040b8:	2300      	movs	r3, #0
 80040ba:	b510      	push	{r4, lr}
 80040bc:	4604      	mov	r4, r0
 80040be:	e9c0 3300 	strd	r3, r3, [r0]
 80040c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80040c6:	6083      	str	r3, [r0, #8]
 80040c8:	8181      	strh	r1, [r0, #12]
 80040ca:	6643      	str	r3, [r0, #100]	; 0x64
 80040cc:	81c2      	strh	r2, [r0, #14]
 80040ce:	6183      	str	r3, [r0, #24]
 80040d0:	4619      	mov	r1, r3
 80040d2:	2208      	movs	r2, #8
 80040d4:	305c      	adds	r0, #92	; 0x5c
 80040d6:	f000 f902 	bl	80042de <memset>
 80040da:	4b05      	ldr	r3, [pc, #20]	; (80040f0 <std+0x38>)
 80040dc:	6224      	str	r4, [r4, #32]
 80040de:	6263      	str	r3, [r4, #36]	; 0x24
 80040e0:	4b04      	ldr	r3, [pc, #16]	; (80040f4 <std+0x3c>)
 80040e2:	62a3      	str	r3, [r4, #40]	; 0x28
 80040e4:	4b04      	ldr	r3, [pc, #16]	; (80040f8 <std+0x40>)
 80040e6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80040e8:	4b04      	ldr	r3, [pc, #16]	; (80040fc <std+0x44>)
 80040ea:	6323      	str	r3, [r4, #48]	; 0x30
 80040ec:	bd10      	pop	{r4, pc}
 80040ee:	bf00      	nop
 80040f0:	08004259 	.word	0x08004259
 80040f4:	0800427b 	.word	0x0800427b
 80040f8:	080042b3 	.word	0x080042b3
 80040fc:	080042d7 	.word	0x080042d7

08004100 <stdio_exit_handler>:
 8004100:	4a02      	ldr	r2, [pc, #8]	; (800410c <stdio_exit_handler+0xc>)
 8004102:	4903      	ldr	r1, [pc, #12]	; (8004110 <stdio_exit_handler+0x10>)
 8004104:	4803      	ldr	r0, [pc, #12]	; (8004114 <stdio_exit_handler+0x14>)
 8004106:	f000 b869 	b.w	80041dc <_fwalk_sglue>
 800410a:	bf00      	nop
 800410c:	2000001c 	.word	0x2000001c
 8004110:	08004d01 	.word	0x08004d01
 8004114:	20000028 	.word	0x20000028

08004118 <cleanup_stdio>:
 8004118:	6841      	ldr	r1, [r0, #4]
 800411a:	4b0c      	ldr	r3, [pc, #48]	; (800414c <cleanup_stdio+0x34>)
 800411c:	b510      	push	{r4, lr}
 800411e:	4299      	cmp	r1, r3
 8004120:	4604      	mov	r4, r0
 8004122:	d001      	beq.n	8004128 <cleanup_stdio+0x10>
 8004124:	f000 fdec 	bl	8004d00 <_fflush_r>
 8004128:	68a1      	ldr	r1, [r4, #8]
 800412a:	4b09      	ldr	r3, [pc, #36]	; (8004150 <cleanup_stdio+0x38>)
 800412c:	4299      	cmp	r1, r3
 800412e:	d002      	beq.n	8004136 <cleanup_stdio+0x1e>
 8004130:	4620      	mov	r0, r4
 8004132:	f000 fde5 	bl	8004d00 <_fflush_r>
 8004136:	68e1      	ldr	r1, [r4, #12]
 8004138:	4b06      	ldr	r3, [pc, #24]	; (8004154 <cleanup_stdio+0x3c>)
 800413a:	4299      	cmp	r1, r3
 800413c:	d004      	beq.n	8004148 <cleanup_stdio+0x30>
 800413e:	4620      	mov	r0, r4
 8004140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004144:	f000 bddc 	b.w	8004d00 <_fflush_r>
 8004148:	bd10      	pop	{r4, pc}
 800414a:	bf00      	nop
 800414c:	20000d64 	.word	0x20000d64
 8004150:	20000dcc 	.word	0x20000dcc
 8004154:	20000e34 	.word	0x20000e34

08004158 <global_stdio_init.part.0>:
 8004158:	b510      	push	{r4, lr}
 800415a:	4b0b      	ldr	r3, [pc, #44]	; (8004188 <global_stdio_init.part.0+0x30>)
 800415c:	4c0b      	ldr	r4, [pc, #44]	; (800418c <global_stdio_init.part.0+0x34>)
 800415e:	4a0c      	ldr	r2, [pc, #48]	; (8004190 <global_stdio_init.part.0+0x38>)
 8004160:	4620      	mov	r0, r4
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	2104      	movs	r1, #4
 8004166:	2200      	movs	r2, #0
 8004168:	f7ff ffa6 	bl	80040b8 <std>
 800416c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004170:	2201      	movs	r2, #1
 8004172:	2109      	movs	r1, #9
 8004174:	f7ff ffa0 	bl	80040b8 <std>
 8004178:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800417c:	2202      	movs	r2, #2
 800417e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004182:	2112      	movs	r1, #18
 8004184:	f7ff bf98 	b.w	80040b8 <std>
 8004188:	20000e9c 	.word	0x20000e9c
 800418c:	20000d64 	.word	0x20000d64
 8004190:	08004101 	.word	0x08004101

08004194 <__sfp_lock_acquire>:
 8004194:	4801      	ldr	r0, [pc, #4]	; (800419c <__sfp_lock_acquire+0x8>)
 8004196:	f000 b91b 	b.w	80043d0 <__retarget_lock_acquire_recursive>
 800419a:	bf00      	nop
 800419c:	20000ea5 	.word	0x20000ea5

080041a0 <__sfp_lock_release>:
 80041a0:	4801      	ldr	r0, [pc, #4]	; (80041a8 <__sfp_lock_release+0x8>)
 80041a2:	f000 b916 	b.w	80043d2 <__retarget_lock_release_recursive>
 80041a6:	bf00      	nop
 80041a8:	20000ea5 	.word	0x20000ea5

080041ac <__sinit>:
 80041ac:	b510      	push	{r4, lr}
 80041ae:	4604      	mov	r4, r0
 80041b0:	f7ff fff0 	bl	8004194 <__sfp_lock_acquire>
 80041b4:	6a23      	ldr	r3, [r4, #32]
 80041b6:	b11b      	cbz	r3, 80041c0 <__sinit+0x14>
 80041b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041bc:	f7ff bff0 	b.w	80041a0 <__sfp_lock_release>
 80041c0:	4b04      	ldr	r3, [pc, #16]	; (80041d4 <__sinit+0x28>)
 80041c2:	6223      	str	r3, [r4, #32]
 80041c4:	4b04      	ldr	r3, [pc, #16]	; (80041d8 <__sinit+0x2c>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1f5      	bne.n	80041b8 <__sinit+0xc>
 80041cc:	f7ff ffc4 	bl	8004158 <global_stdio_init.part.0>
 80041d0:	e7f2      	b.n	80041b8 <__sinit+0xc>
 80041d2:	bf00      	nop
 80041d4:	08004119 	.word	0x08004119
 80041d8:	20000e9c 	.word	0x20000e9c

080041dc <_fwalk_sglue>:
 80041dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041e0:	4607      	mov	r7, r0
 80041e2:	4688      	mov	r8, r1
 80041e4:	4614      	mov	r4, r2
 80041e6:	2600      	movs	r6, #0
 80041e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80041ec:	f1b9 0901 	subs.w	r9, r9, #1
 80041f0:	d505      	bpl.n	80041fe <_fwalk_sglue+0x22>
 80041f2:	6824      	ldr	r4, [r4, #0]
 80041f4:	2c00      	cmp	r4, #0
 80041f6:	d1f7      	bne.n	80041e8 <_fwalk_sglue+0xc>
 80041f8:	4630      	mov	r0, r6
 80041fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041fe:	89ab      	ldrh	r3, [r5, #12]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d907      	bls.n	8004214 <_fwalk_sglue+0x38>
 8004204:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004208:	3301      	adds	r3, #1
 800420a:	d003      	beq.n	8004214 <_fwalk_sglue+0x38>
 800420c:	4629      	mov	r1, r5
 800420e:	4638      	mov	r0, r7
 8004210:	47c0      	blx	r8
 8004212:	4306      	orrs	r6, r0
 8004214:	3568      	adds	r5, #104	; 0x68
 8004216:	e7e9      	b.n	80041ec <_fwalk_sglue+0x10>

08004218 <siprintf>:
 8004218:	b40e      	push	{r1, r2, r3}
 800421a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800421e:	b500      	push	{lr}
 8004220:	b09c      	sub	sp, #112	; 0x70
 8004222:	ab1d      	add	r3, sp, #116	; 0x74
 8004224:	9002      	str	r0, [sp, #8]
 8004226:	9006      	str	r0, [sp, #24]
 8004228:	9107      	str	r1, [sp, #28]
 800422a:	9104      	str	r1, [sp, #16]
 800422c:	4808      	ldr	r0, [pc, #32]	; (8004250 <siprintf+0x38>)
 800422e:	4909      	ldr	r1, [pc, #36]	; (8004254 <siprintf+0x3c>)
 8004230:	f853 2b04 	ldr.w	r2, [r3], #4
 8004234:	9105      	str	r1, [sp, #20]
 8004236:	6800      	ldr	r0, [r0, #0]
 8004238:	a902      	add	r1, sp, #8
 800423a:	9301      	str	r3, [sp, #4]
 800423c:	f000 fa4c 	bl	80046d8 <_svfiprintf_r>
 8004240:	2200      	movs	r2, #0
 8004242:	9b02      	ldr	r3, [sp, #8]
 8004244:	701a      	strb	r2, [r3, #0]
 8004246:	b01c      	add	sp, #112	; 0x70
 8004248:	f85d eb04 	ldr.w	lr, [sp], #4
 800424c:	b003      	add	sp, #12
 800424e:	4770      	bx	lr
 8004250:	20000074 	.word	0x20000074
 8004254:	ffff0208 	.word	0xffff0208

08004258 <__sread>:
 8004258:	b510      	push	{r4, lr}
 800425a:	460c      	mov	r4, r1
 800425c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004260:	f000 f868 	bl	8004334 <_read_r>
 8004264:	2800      	cmp	r0, #0
 8004266:	bfab      	itete	ge
 8004268:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800426a:	89a3      	ldrhlt	r3, [r4, #12]
 800426c:	181b      	addge	r3, r3, r0
 800426e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004272:	bfac      	ite	ge
 8004274:	6563      	strge	r3, [r4, #84]	; 0x54
 8004276:	81a3      	strhlt	r3, [r4, #12]
 8004278:	bd10      	pop	{r4, pc}

0800427a <__swrite>:
 800427a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800427e:	461f      	mov	r7, r3
 8004280:	898b      	ldrh	r3, [r1, #12]
 8004282:	4605      	mov	r5, r0
 8004284:	05db      	lsls	r3, r3, #23
 8004286:	460c      	mov	r4, r1
 8004288:	4616      	mov	r6, r2
 800428a:	d505      	bpl.n	8004298 <__swrite+0x1e>
 800428c:	2302      	movs	r3, #2
 800428e:	2200      	movs	r2, #0
 8004290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004294:	f000 f83c 	bl	8004310 <_lseek_r>
 8004298:	89a3      	ldrh	r3, [r4, #12]
 800429a:	4632      	mov	r2, r6
 800429c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042a0:	81a3      	strh	r3, [r4, #12]
 80042a2:	4628      	mov	r0, r5
 80042a4:	463b      	mov	r3, r7
 80042a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042ae:	f000 b853 	b.w	8004358 <_write_r>

080042b2 <__sseek>:
 80042b2:	b510      	push	{r4, lr}
 80042b4:	460c      	mov	r4, r1
 80042b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042ba:	f000 f829 	bl	8004310 <_lseek_r>
 80042be:	1c43      	adds	r3, r0, #1
 80042c0:	89a3      	ldrh	r3, [r4, #12]
 80042c2:	bf15      	itete	ne
 80042c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80042c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80042ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80042ce:	81a3      	strheq	r3, [r4, #12]
 80042d0:	bf18      	it	ne
 80042d2:	81a3      	strhne	r3, [r4, #12]
 80042d4:	bd10      	pop	{r4, pc}

080042d6 <__sclose>:
 80042d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042da:	f000 b809 	b.w	80042f0 <_close_r>

080042de <memset>:
 80042de:	4603      	mov	r3, r0
 80042e0:	4402      	add	r2, r0
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d100      	bne.n	80042e8 <memset+0xa>
 80042e6:	4770      	bx	lr
 80042e8:	f803 1b01 	strb.w	r1, [r3], #1
 80042ec:	e7f9      	b.n	80042e2 <memset+0x4>
	...

080042f0 <_close_r>:
 80042f0:	b538      	push	{r3, r4, r5, lr}
 80042f2:	2300      	movs	r3, #0
 80042f4:	4d05      	ldr	r5, [pc, #20]	; (800430c <_close_r+0x1c>)
 80042f6:	4604      	mov	r4, r0
 80042f8:	4608      	mov	r0, r1
 80042fa:	602b      	str	r3, [r5, #0]
 80042fc:	f7fd fb14 	bl	8001928 <_close>
 8004300:	1c43      	adds	r3, r0, #1
 8004302:	d102      	bne.n	800430a <_close_r+0x1a>
 8004304:	682b      	ldr	r3, [r5, #0]
 8004306:	b103      	cbz	r3, 800430a <_close_r+0x1a>
 8004308:	6023      	str	r3, [r4, #0]
 800430a:	bd38      	pop	{r3, r4, r5, pc}
 800430c:	20000ea0 	.word	0x20000ea0

08004310 <_lseek_r>:
 8004310:	b538      	push	{r3, r4, r5, lr}
 8004312:	4604      	mov	r4, r0
 8004314:	4608      	mov	r0, r1
 8004316:	4611      	mov	r1, r2
 8004318:	2200      	movs	r2, #0
 800431a:	4d05      	ldr	r5, [pc, #20]	; (8004330 <_lseek_r+0x20>)
 800431c:	602a      	str	r2, [r5, #0]
 800431e:	461a      	mov	r2, r3
 8004320:	f7fd fb26 	bl	8001970 <_lseek>
 8004324:	1c43      	adds	r3, r0, #1
 8004326:	d102      	bne.n	800432e <_lseek_r+0x1e>
 8004328:	682b      	ldr	r3, [r5, #0]
 800432a:	b103      	cbz	r3, 800432e <_lseek_r+0x1e>
 800432c:	6023      	str	r3, [r4, #0]
 800432e:	bd38      	pop	{r3, r4, r5, pc}
 8004330:	20000ea0 	.word	0x20000ea0

08004334 <_read_r>:
 8004334:	b538      	push	{r3, r4, r5, lr}
 8004336:	4604      	mov	r4, r0
 8004338:	4608      	mov	r0, r1
 800433a:	4611      	mov	r1, r2
 800433c:	2200      	movs	r2, #0
 800433e:	4d05      	ldr	r5, [pc, #20]	; (8004354 <_read_r+0x20>)
 8004340:	602a      	str	r2, [r5, #0]
 8004342:	461a      	mov	r2, r3
 8004344:	f7fd fab7 	bl	80018b6 <_read>
 8004348:	1c43      	adds	r3, r0, #1
 800434a:	d102      	bne.n	8004352 <_read_r+0x1e>
 800434c:	682b      	ldr	r3, [r5, #0]
 800434e:	b103      	cbz	r3, 8004352 <_read_r+0x1e>
 8004350:	6023      	str	r3, [r4, #0]
 8004352:	bd38      	pop	{r3, r4, r5, pc}
 8004354:	20000ea0 	.word	0x20000ea0

08004358 <_write_r>:
 8004358:	b538      	push	{r3, r4, r5, lr}
 800435a:	4604      	mov	r4, r0
 800435c:	4608      	mov	r0, r1
 800435e:	4611      	mov	r1, r2
 8004360:	2200      	movs	r2, #0
 8004362:	4d05      	ldr	r5, [pc, #20]	; (8004378 <_write_r+0x20>)
 8004364:	602a      	str	r2, [r5, #0]
 8004366:	461a      	mov	r2, r3
 8004368:	f7fd fac2 	bl	80018f0 <_write>
 800436c:	1c43      	adds	r3, r0, #1
 800436e:	d102      	bne.n	8004376 <_write_r+0x1e>
 8004370:	682b      	ldr	r3, [r5, #0]
 8004372:	b103      	cbz	r3, 8004376 <_write_r+0x1e>
 8004374:	6023      	str	r3, [r4, #0]
 8004376:	bd38      	pop	{r3, r4, r5, pc}
 8004378:	20000ea0 	.word	0x20000ea0

0800437c <__errno>:
 800437c:	4b01      	ldr	r3, [pc, #4]	; (8004384 <__errno+0x8>)
 800437e:	6818      	ldr	r0, [r3, #0]
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	20000074 	.word	0x20000074

08004388 <__libc_init_array>:
 8004388:	b570      	push	{r4, r5, r6, lr}
 800438a:	2600      	movs	r6, #0
 800438c:	4d0c      	ldr	r5, [pc, #48]	; (80043c0 <__libc_init_array+0x38>)
 800438e:	4c0d      	ldr	r4, [pc, #52]	; (80043c4 <__libc_init_array+0x3c>)
 8004390:	1b64      	subs	r4, r4, r5
 8004392:	10a4      	asrs	r4, r4, #2
 8004394:	42a6      	cmp	r6, r4
 8004396:	d109      	bne.n	80043ac <__libc_init_array+0x24>
 8004398:	f001 f802 	bl	80053a0 <_init>
 800439c:	2600      	movs	r6, #0
 800439e:	4d0a      	ldr	r5, [pc, #40]	; (80043c8 <__libc_init_array+0x40>)
 80043a0:	4c0a      	ldr	r4, [pc, #40]	; (80043cc <__libc_init_array+0x44>)
 80043a2:	1b64      	subs	r4, r4, r5
 80043a4:	10a4      	asrs	r4, r4, #2
 80043a6:	42a6      	cmp	r6, r4
 80043a8:	d105      	bne.n	80043b6 <__libc_init_array+0x2e>
 80043aa:	bd70      	pop	{r4, r5, r6, pc}
 80043ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80043b0:	4798      	blx	r3
 80043b2:	3601      	adds	r6, #1
 80043b4:	e7ee      	b.n	8004394 <__libc_init_array+0xc>
 80043b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80043ba:	4798      	blx	r3
 80043bc:	3601      	adds	r6, #1
 80043be:	e7f2      	b.n	80043a6 <__libc_init_array+0x1e>
 80043c0:	080058a0 	.word	0x080058a0
 80043c4:	080058a0 	.word	0x080058a0
 80043c8:	080058a0 	.word	0x080058a0
 80043cc:	080058a4 	.word	0x080058a4

080043d0 <__retarget_lock_acquire_recursive>:
 80043d0:	4770      	bx	lr

080043d2 <__retarget_lock_release_recursive>:
 80043d2:	4770      	bx	lr

080043d4 <memcpy>:
 80043d4:	440a      	add	r2, r1
 80043d6:	4291      	cmp	r1, r2
 80043d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80043dc:	d100      	bne.n	80043e0 <memcpy+0xc>
 80043de:	4770      	bx	lr
 80043e0:	b510      	push	{r4, lr}
 80043e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043e6:	4291      	cmp	r1, r2
 80043e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043ec:	d1f9      	bne.n	80043e2 <memcpy+0xe>
 80043ee:	bd10      	pop	{r4, pc}

080043f0 <__assert_func>:
 80043f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80043f2:	4614      	mov	r4, r2
 80043f4:	461a      	mov	r2, r3
 80043f6:	4b09      	ldr	r3, [pc, #36]	; (800441c <__assert_func+0x2c>)
 80043f8:	4605      	mov	r5, r0
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68d8      	ldr	r0, [r3, #12]
 80043fe:	b14c      	cbz	r4, 8004414 <__assert_func+0x24>
 8004400:	4b07      	ldr	r3, [pc, #28]	; (8004420 <__assert_func+0x30>)
 8004402:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004406:	9100      	str	r1, [sp, #0]
 8004408:	462b      	mov	r3, r5
 800440a:	4906      	ldr	r1, [pc, #24]	; (8004424 <__assert_func+0x34>)
 800440c:	f000 fca0 	bl	8004d50 <fiprintf>
 8004410:	f000 fce8 	bl	8004de4 <abort>
 8004414:	4b04      	ldr	r3, [pc, #16]	; (8004428 <__assert_func+0x38>)
 8004416:	461c      	mov	r4, r3
 8004418:	e7f3      	b.n	8004402 <__assert_func+0x12>
 800441a:	bf00      	nop
 800441c:	20000074 	.word	0x20000074
 8004420:	0800582f 	.word	0x0800582f
 8004424:	0800583c 	.word	0x0800583c
 8004428:	0800586a 	.word	0x0800586a

0800442c <_free_r>:
 800442c:	b538      	push	{r3, r4, r5, lr}
 800442e:	4605      	mov	r5, r0
 8004430:	2900      	cmp	r1, #0
 8004432:	d040      	beq.n	80044b6 <_free_r+0x8a>
 8004434:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004438:	1f0c      	subs	r4, r1, #4
 800443a:	2b00      	cmp	r3, #0
 800443c:	bfb8      	it	lt
 800443e:	18e4      	addlt	r4, r4, r3
 8004440:	f000 f8e4 	bl	800460c <__malloc_lock>
 8004444:	4a1c      	ldr	r2, [pc, #112]	; (80044b8 <_free_r+0x8c>)
 8004446:	6813      	ldr	r3, [r2, #0]
 8004448:	b933      	cbnz	r3, 8004458 <_free_r+0x2c>
 800444a:	6063      	str	r3, [r4, #4]
 800444c:	6014      	str	r4, [r2, #0]
 800444e:	4628      	mov	r0, r5
 8004450:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004454:	f000 b8e0 	b.w	8004618 <__malloc_unlock>
 8004458:	42a3      	cmp	r3, r4
 800445a:	d908      	bls.n	800446e <_free_r+0x42>
 800445c:	6820      	ldr	r0, [r4, #0]
 800445e:	1821      	adds	r1, r4, r0
 8004460:	428b      	cmp	r3, r1
 8004462:	bf01      	itttt	eq
 8004464:	6819      	ldreq	r1, [r3, #0]
 8004466:	685b      	ldreq	r3, [r3, #4]
 8004468:	1809      	addeq	r1, r1, r0
 800446a:	6021      	streq	r1, [r4, #0]
 800446c:	e7ed      	b.n	800444a <_free_r+0x1e>
 800446e:	461a      	mov	r2, r3
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	b10b      	cbz	r3, 8004478 <_free_r+0x4c>
 8004474:	42a3      	cmp	r3, r4
 8004476:	d9fa      	bls.n	800446e <_free_r+0x42>
 8004478:	6811      	ldr	r1, [r2, #0]
 800447a:	1850      	adds	r0, r2, r1
 800447c:	42a0      	cmp	r0, r4
 800447e:	d10b      	bne.n	8004498 <_free_r+0x6c>
 8004480:	6820      	ldr	r0, [r4, #0]
 8004482:	4401      	add	r1, r0
 8004484:	1850      	adds	r0, r2, r1
 8004486:	4283      	cmp	r3, r0
 8004488:	6011      	str	r1, [r2, #0]
 800448a:	d1e0      	bne.n	800444e <_free_r+0x22>
 800448c:	6818      	ldr	r0, [r3, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	4408      	add	r0, r1
 8004492:	6010      	str	r0, [r2, #0]
 8004494:	6053      	str	r3, [r2, #4]
 8004496:	e7da      	b.n	800444e <_free_r+0x22>
 8004498:	d902      	bls.n	80044a0 <_free_r+0x74>
 800449a:	230c      	movs	r3, #12
 800449c:	602b      	str	r3, [r5, #0]
 800449e:	e7d6      	b.n	800444e <_free_r+0x22>
 80044a0:	6820      	ldr	r0, [r4, #0]
 80044a2:	1821      	adds	r1, r4, r0
 80044a4:	428b      	cmp	r3, r1
 80044a6:	bf01      	itttt	eq
 80044a8:	6819      	ldreq	r1, [r3, #0]
 80044aa:	685b      	ldreq	r3, [r3, #4]
 80044ac:	1809      	addeq	r1, r1, r0
 80044ae:	6021      	streq	r1, [r4, #0]
 80044b0:	6063      	str	r3, [r4, #4]
 80044b2:	6054      	str	r4, [r2, #4]
 80044b4:	e7cb      	b.n	800444e <_free_r+0x22>
 80044b6:	bd38      	pop	{r3, r4, r5, pc}
 80044b8:	20000ea8 	.word	0x20000ea8

080044bc <malloc>:
 80044bc:	4b02      	ldr	r3, [pc, #8]	; (80044c8 <malloc+0xc>)
 80044be:	4601      	mov	r1, r0
 80044c0:	6818      	ldr	r0, [r3, #0]
 80044c2:	f000 b823 	b.w	800450c <_malloc_r>
 80044c6:	bf00      	nop
 80044c8:	20000074 	.word	0x20000074

080044cc <sbrk_aligned>:
 80044cc:	b570      	push	{r4, r5, r6, lr}
 80044ce:	4e0e      	ldr	r6, [pc, #56]	; (8004508 <sbrk_aligned+0x3c>)
 80044d0:	460c      	mov	r4, r1
 80044d2:	6831      	ldr	r1, [r6, #0]
 80044d4:	4605      	mov	r5, r0
 80044d6:	b911      	cbnz	r1, 80044de <sbrk_aligned+0x12>
 80044d8:	f000 fc66 	bl	8004da8 <_sbrk_r>
 80044dc:	6030      	str	r0, [r6, #0]
 80044de:	4621      	mov	r1, r4
 80044e0:	4628      	mov	r0, r5
 80044e2:	f000 fc61 	bl	8004da8 <_sbrk_r>
 80044e6:	1c43      	adds	r3, r0, #1
 80044e8:	d00a      	beq.n	8004500 <sbrk_aligned+0x34>
 80044ea:	1cc4      	adds	r4, r0, #3
 80044ec:	f024 0403 	bic.w	r4, r4, #3
 80044f0:	42a0      	cmp	r0, r4
 80044f2:	d007      	beq.n	8004504 <sbrk_aligned+0x38>
 80044f4:	1a21      	subs	r1, r4, r0
 80044f6:	4628      	mov	r0, r5
 80044f8:	f000 fc56 	bl	8004da8 <_sbrk_r>
 80044fc:	3001      	adds	r0, #1
 80044fe:	d101      	bne.n	8004504 <sbrk_aligned+0x38>
 8004500:	f04f 34ff 	mov.w	r4, #4294967295
 8004504:	4620      	mov	r0, r4
 8004506:	bd70      	pop	{r4, r5, r6, pc}
 8004508:	20000eac 	.word	0x20000eac

0800450c <_malloc_r>:
 800450c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004510:	1ccd      	adds	r5, r1, #3
 8004512:	f025 0503 	bic.w	r5, r5, #3
 8004516:	3508      	adds	r5, #8
 8004518:	2d0c      	cmp	r5, #12
 800451a:	bf38      	it	cc
 800451c:	250c      	movcc	r5, #12
 800451e:	2d00      	cmp	r5, #0
 8004520:	4607      	mov	r7, r0
 8004522:	db01      	blt.n	8004528 <_malloc_r+0x1c>
 8004524:	42a9      	cmp	r1, r5
 8004526:	d905      	bls.n	8004534 <_malloc_r+0x28>
 8004528:	230c      	movs	r3, #12
 800452a:	2600      	movs	r6, #0
 800452c:	603b      	str	r3, [r7, #0]
 800452e:	4630      	mov	r0, r6
 8004530:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004534:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004608 <_malloc_r+0xfc>
 8004538:	f000 f868 	bl	800460c <__malloc_lock>
 800453c:	f8d8 3000 	ldr.w	r3, [r8]
 8004540:	461c      	mov	r4, r3
 8004542:	bb5c      	cbnz	r4, 800459c <_malloc_r+0x90>
 8004544:	4629      	mov	r1, r5
 8004546:	4638      	mov	r0, r7
 8004548:	f7ff ffc0 	bl	80044cc <sbrk_aligned>
 800454c:	1c43      	adds	r3, r0, #1
 800454e:	4604      	mov	r4, r0
 8004550:	d155      	bne.n	80045fe <_malloc_r+0xf2>
 8004552:	f8d8 4000 	ldr.w	r4, [r8]
 8004556:	4626      	mov	r6, r4
 8004558:	2e00      	cmp	r6, #0
 800455a:	d145      	bne.n	80045e8 <_malloc_r+0xdc>
 800455c:	2c00      	cmp	r4, #0
 800455e:	d048      	beq.n	80045f2 <_malloc_r+0xe6>
 8004560:	6823      	ldr	r3, [r4, #0]
 8004562:	4631      	mov	r1, r6
 8004564:	4638      	mov	r0, r7
 8004566:	eb04 0903 	add.w	r9, r4, r3
 800456a:	f000 fc1d 	bl	8004da8 <_sbrk_r>
 800456e:	4581      	cmp	r9, r0
 8004570:	d13f      	bne.n	80045f2 <_malloc_r+0xe6>
 8004572:	6821      	ldr	r1, [r4, #0]
 8004574:	4638      	mov	r0, r7
 8004576:	1a6d      	subs	r5, r5, r1
 8004578:	4629      	mov	r1, r5
 800457a:	f7ff ffa7 	bl	80044cc <sbrk_aligned>
 800457e:	3001      	adds	r0, #1
 8004580:	d037      	beq.n	80045f2 <_malloc_r+0xe6>
 8004582:	6823      	ldr	r3, [r4, #0]
 8004584:	442b      	add	r3, r5
 8004586:	6023      	str	r3, [r4, #0]
 8004588:	f8d8 3000 	ldr.w	r3, [r8]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d038      	beq.n	8004602 <_malloc_r+0xf6>
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	42a2      	cmp	r2, r4
 8004594:	d12b      	bne.n	80045ee <_malloc_r+0xe2>
 8004596:	2200      	movs	r2, #0
 8004598:	605a      	str	r2, [r3, #4]
 800459a:	e00f      	b.n	80045bc <_malloc_r+0xb0>
 800459c:	6822      	ldr	r2, [r4, #0]
 800459e:	1b52      	subs	r2, r2, r5
 80045a0:	d41f      	bmi.n	80045e2 <_malloc_r+0xd6>
 80045a2:	2a0b      	cmp	r2, #11
 80045a4:	d917      	bls.n	80045d6 <_malloc_r+0xca>
 80045a6:	1961      	adds	r1, r4, r5
 80045a8:	42a3      	cmp	r3, r4
 80045aa:	6025      	str	r5, [r4, #0]
 80045ac:	bf18      	it	ne
 80045ae:	6059      	strne	r1, [r3, #4]
 80045b0:	6863      	ldr	r3, [r4, #4]
 80045b2:	bf08      	it	eq
 80045b4:	f8c8 1000 	streq.w	r1, [r8]
 80045b8:	5162      	str	r2, [r4, r5]
 80045ba:	604b      	str	r3, [r1, #4]
 80045bc:	4638      	mov	r0, r7
 80045be:	f104 060b 	add.w	r6, r4, #11
 80045c2:	f000 f829 	bl	8004618 <__malloc_unlock>
 80045c6:	f026 0607 	bic.w	r6, r6, #7
 80045ca:	1d23      	adds	r3, r4, #4
 80045cc:	1af2      	subs	r2, r6, r3
 80045ce:	d0ae      	beq.n	800452e <_malloc_r+0x22>
 80045d0:	1b9b      	subs	r3, r3, r6
 80045d2:	50a3      	str	r3, [r4, r2]
 80045d4:	e7ab      	b.n	800452e <_malloc_r+0x22>
 80045d6:	42a3      	cmp	r3, r4
 80045d8:	6862      	ldr	r2, [r4, #4]
 80045da:	d1dd      	bne.n	8004598 <_malloc_r+0x8c>
 80045dc:	f8c8 2000 	str.w	r2, [r8]
 80045e0:	e7ec      	b.n	80045bc <_malloc_r+0xb0>
 80045e2:	4623      	mov	r3, r4
 80045e4:	6864      	ldr	r4, [r4, #4]
 80045e6:	e7ac      	b.n	8004542 <_malloc_r+0x36>
 80045e8:	4634      	mov	r4, r6
 80045ea:	6876      	ldr	r6, [r6, #4]
 80045ec:	e7b4      	b.n	8004558 <_malloc_r+0x4c>
 80045ee:	4613      	mov	r3, r2
 80045f0:	e7cc      	b.n	800458c <_malloc_r+0x80>
 80045f2:	230c      	movs	r3, #12
 80045f4:	4638      	mov	r0, r7
 80045f6:	603b      	str	r3, [r7, #0]
 80045f8:	f000 f80e 	bl	8004618 <__malloc_unlock>
 80045fc:	e797      	b.n	800452e <_malloc_r+0x22>
 80045fe:	6025      	str	r5, [r4, #0]
 8004600:	e7dc      	b.n	80045bc <_malloc_r+0xb0>
 8004602:	605b      	str	r3, [r3, #4]
 8004604:	deff      	udf	#255	; 0xff
 8004606:	bf00      	nop
 8004608:	20000ea8 	.word	0x20000ea8

0800460c <__malloc_lock>:
 800460c:	4801      	ldr	r0, [pc, #4]	; (8004614 <__malloc_lock+0x8>)
 800460e:	f7ff bedf 	b.w	80043d0 <__retarget_lock_acquire_recursive>
 8004612:	bf00      	nop
 8004614:	20000ea4 	.word	0x20000ea4

08004618 <__malloc_unlock>:
 8004618:	4801      	ldr	r0, [pc, #4]	; (8004620 <__malloc_unlock+0x8>)
 800461a:	f7ff beda 	b.w	80043d2 <__retarget_lock_release_recursive>
 800461e:	bf00      	nop
 8004620:	20000ea4 	.word	0x20000ea4

08004624 <__ssputs_r>:
 8004624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004628:	461f      	mov	r7, r3
 800462a:	688e      	ldr	r6, [r1, #8]
 800462c:	4682      	mov	sl, r0
 800462e:	42be      	cmp	r6, r7
 8004630:	460c      	mov	r4, r1
 8004632:	4690      	mov	r8, r2
 8004634:	680b      	ldr	r3, [r1, #0]
 8004636:	d82c      	bhi.n	8004692 <__ssputs_r+0x6e>
 8004638:	898a      	ldrh	r2, [r1, #12]
 800463a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800463e:	d026      	beq.n	800468e <__ssputs_r+0x6a>
 8004640:	6965      	ldr	r5, [r4, #20]
 8004642:	6909      	ldr	r1, [r1, #16]
 8004644:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004648:	eba3 0901 	sub.w	r9, r3, r1
 800464c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004650:	1c7b      	adds	r3, r7, #1
 8004652:	444b      	add	r3, r9
 8004654:	106d      	asrs	r5, r5, #1
 8004656:	429d      	cmp	r5, r3
 8004658:	bf38      	it	cc
 800465a:	461d      	movcc	r5, r3
 800465c:	0553      	lsls	r3, r2, #21
 800465e:	d527      	bpl.n	80046b0 <__ssputs_r+0x8c>
 8004660:	4629      	mov	r1, r5
 8004662:	f7ff ff53 	bl	800450c <_malloc_r>
 8004666:	4606      	mov	r6, r0
 8004668:	b360      	cbz	r0, 80046c4 <__ssputs_r+0xa0>
 800466a:	464a      	mov	r2, r9
 800466c:	6921      	ldr	r1, [r4, #16]
 800466e:	f7ff feb1 	bl	80043d4 <memcpy>
 8004672:	89a3      	ldrh	r3, [r4, #12]
 8004674:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800467c:	81a3      	strh	r3, [r4, #12]
 800467e:	6126      	str	r6, [r4, #16]
 8004680:	444e      	add	r6, r9
 8004682:	6026      	str	r6, [r4, #0]
 8004684:	463e      	mov	r6, r7
 8004686:	6165      	str	r5, [r4, #20]
 8004688:	eba5 0509 	sub.w	r5, r5, r9
 800468c:	60a5      	str	r5, [r4, #8]
 800468e:	42be      	cmp	r6, r7
 8004690:	d900      	bls.n	8004694 <__ssputs_r+0x70>
 8004692:	463e      	mov	r6, r7
 8004694:	4632      	mov	r2, r6
 8004696:	4641      	mov	r1, r8
 8004698:	6820      	ldr	r0, [r4, #0]
 800469a:	f000 fb6b 	bl	8004d74 <memmove>
 800469e:	2000      	movs	r0, #0
 80046a0:	68a3      	ldr	r3, [r4, #8]
 80046a2:	1b9b      	subs	r3, r3, r6
 80046a4:	60a3      	str	r3, [r4, #8]
 80046a6:	6823      	ldr	r3, [r4, #0]
 80046a8:	4433      	add	r3, r6
 80046aa:	6023      	str	r3, [r4, #0]
 80046ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046b0:	462a      	mov	r2, r5
 80046b2:	f000 fb9e 	bl	8004df2 <_realloc_r>
 80046b6:	4606      	mov	r6, r0
 80046b8:	2800      	cmp	r0, #0
 80046ba:	d1e0      	bne.n	800467e <__ssputs_r+0x5a>
 80046bc:	4650      	mov	r0, sl
 80046be:	6921      	ldr	r1, [r4, #16]
 80046c0:	f7ff feb4 	bl	800442c <_free_r>
 80046c4:	230c      	movs	r3, #12
 80046c6:	f8ca 3000 	str.w	r3, [sl]
 80046ca:	89a3      	ldrh	r3, [r4, #12]
 80046cc:	f04f 30ff 	mov.w	r0, #4294967295
 80046d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046d4:	81a3      	strh	r3, [r4, #12]
 80046d6:	e7e9      	b.n	80046ac <__ssputs_r+0x88>

080046d8 <_svfiprintf_r>:
 80046d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046dc:	4698      	mov	r8, r3
 80046de:	898b      	ldrh	r3, [r1, #12]
 80046e0:	4607      	mov	r7, r0
 80046e2:	061b      	lsls	r3, r3, #24
 80046e4:	460d      	mov	r5, r1
 80046e6:	4614      	mov	r4, r2
 80046e8:	b09d      	sub	sp, #116	; 0x74
 80046ea:	d50e      	bpl.n	800470a <_svfiprintf_r+0x32>
 80046ec:	690b      	ldr	r3, [r1, #16]
 80046ee:	b963      	cbnz	r3, 800470a <_svfiprintf_r+0x32>
 80046f0:	2140      	movs	r1, #64	; 0x40
 80046f2:	f7ff ff0b 	bl	800450c <_malloc_r>
 80046f6:	6028      	str	r0, [r5, #0]
 80046f8:	6128      	str	r0, [r5, #16]
 80046fa:	b920      	cbnz	r0, 8004706 <_svfiprintf_r+0x2e>
 80046fc:	230c      	movs	r3, #12
 80046fe:	603b      	str	r3, [r7, #0]
 8004700:	f04f 30ff 	mov.w	r0, #4294967295
 8004704:	e0d0      	b.n	80048a8 <_svfiprintf_r+0x1d0>
 8004706:	2340      	movs	r3, #64	; 0x40
 8004708:	616b      	str	r3, [r5, #20]
 800470a:	2300      	movs	r3, #0
 800470c:	9309      	str	r3, [sp, #36]	; 0x24
 800470e:	2320      	movs	r3, #32
 8004710:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004714:	2330      	movs	r3, #48	; 0x30
 8004716:	f04f 0901 	mov.w	r9, #1
 800471a:	f8cd 800c 	str.w	r8, [sp, #12]
 800471e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80048c0 <_svfiprintf_r+0x1e8>
 8004722:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004726:	4623      	mov	r3, r4
 8004728:	469a      	mov	sl, r3
 800472a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800472e:	b10a      	cbz	r2, 8004734 <_svfiprintf_r+0x5c>
 8004730:	2a25      	cmp	r2, #37	; 0x25
 8004732:	d1f9      	bne.n	8004728 <_svfiprintf_r+0x50>
 8004734:	ebba 0b04 	subs.w	fp, sl, r4
 8004738:	d00b      	beq.n	8004752 <_svfiprintf_r+0x7a>
 800473a:	465b      	mov	r3, fp
 800473c:	4622      	mov	r2, r4
 800473e:	4629      	mov	r1, r5
 8004740:	4638      	mov	r0, r7
 8004742:	f7ff ff6f 	bl	8004624 <__ssputs_r>
 8004746:	3001      	adds	r0, #1
 8004748:	f000 80a9 	beq.w	800489e <_svfiprintf_r+0x1c6>
 800474c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800474e:	445a      	add	r2, fp
 8004750:	9209      	str	r2, [sp, #36]	; 0x24
 8004752:	f89a 3000 	ldrb.w	r3, [sl]
 8004756:	2b00      	cmp	r3, #0
 8004758:	f000 80a1 	beq.w	800489e <_svfiprintf_r+0x1c6>
 800475c:	2300      	movs	r3, #0
 800475e:	f04f 32ff 	mov.w	r2, #4294967295
 8004762:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004766:	f10a 0a01 	add.w	sl, sl, #1
 800476a:	9304      	str	r3, [sp, #16]
 800476c:	9307      	str	r3, [sp, #28]
 800476e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004772:	931a      	str	r3, [sp, #104]	; 0x68
 8004774:	4654      	mov	r4, sl
 8004776:	2205      	movs	r2, #5
 8004778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800477c:	4850      	ldr	r0, [pc, #320]	; (80048c0 <_svfiprintf_r+0x1e8>)
 800477e:	f000 fb23 	bl	8004dc8 <memchr>
 8004782:	9a04      	ldr	r2, [sp, #16]
 8004784:	b9d8      	cbnz	r0, 80047be <_svfiprintf_r+0xe6>
 8004786:	06d0      	lsls	r0, r2, #27
 8004788:	bf44      	itt	mi
 800478a:	2320      	movmi	r3, #32
 800478c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004790:	0711      	lsls	r1, r2, #28
 8004792:	bf44      	itt	mi
 8004794:	232b      	movmi	r3, #43	; 0x2b
 8004796:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800479a:	f89a 3000 	ldrb.w	r3, [sl]
 800479e:	2b2a      	cmp	r3, #42	; 0x2a
 80047a0:	d015      	beq.n	80047ce <_svfiprintf_r+0xf6>
 80047a2:	4654      	mov	r4, sl
 80047a4:	2000      	movs	r0, #0
 80047a6:	f04f 0c0a 	mov.w	ip, #10
 80047aa:	9a07      	ldr	r2, [sp, #28]
 80047ac:	4621      	mov	r1, r4
 80047ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047b2:	3b30      	subs	r3, #48	; 0x30
 80047b4:	2b09      	cmp	r3, #9
 80047b6:	d94d      	bls.n	8004854 <_svfiprintf_r+0x17c>
 80047b8:	b1b0      	cbz	r0, 80047e8 <_svfiprintf_r+0x110>
 80047ba:	9207      	str	r2, [sp, #28]
 80047bc:	e014      	b.n	80047e8 <_svfiprintf_r+0x110>
 80047be:	eba0 0308 	sub.w	r3, r0, r8
 80047c2:	fa09 f303 	lsl.w	r3, r9, r3
 80047c6:	4313      	orrs	r3, r2
 80047c8:	46a2      	mov	sl, r4
 80047ca:	9304      	str	r3, [sp, #16]
 80047cc:	e7d2      	b.n	8004774 <_svfiprintf_r+0x9c>
 80047ce:	9b03      	ldr	r3, [sp, #12]
 80047d0:	1d19      	adds	r1, r3, #4
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	9103      	str	r1, [sp, #12]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	bfbb      	ittet	lt
 80047da:	425b      	neglt	r3, r3
 80047dc:	f042 0202 	orrlt.w	r2, r2, #2
 80047e0:	9307      	strge	r3, [sp, #28]
 80047e2:	9307      	strlt	r3, [sp, #28]
 80047e4:	bfb8      	it	lt
 80047e6:	9204      	strlt	r2, [sp, #16]
 80047e8:	7823      	ldrb	r3, [r4, #0]
 80047ea:	2b2e      	cmp	r3, #46	; 0x2e
 80047ec:	d10c      	bne.n	8004808 <_svfiprintf_r+0x130>
 80047ee:	7863      	ldrb	r3, [r4, #1]
 80047f0:	2b2a      	cmp	r3, #42	; 0x2a
 80047f2:	d134      	bne.n	800485e <_svfiprintf_r+0x186>
 80047f4:	9b03      	ldr	r3, [sp, #12]
 80047f6:	3402      	adds	r4, #2
 80047f8:	1d1a      	adds	r2, r3, #4
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	9203      	str	r2, [sp, #12]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	bfb8      	it	lt
 8004802:	f04f 33ff 	movlt.w	r3, #4294967295
 8004806:	9305      	str	r3, [sp, #20]
 8004808:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80048c4 <_svfiprintf_r+0x1ec>
 800480c:	2203      	movs	r2, #3
 800480e:	4650      	mov	r0, sl
 8004810:	7821      	ldrb	r1, [r4, #0]
 8004812:	f000 fad9 	bl	8004dc8 <memchr>
 8004816:	b138      	cbz	r0, 8004828 <_svfiprintf_r+0x150>
 8004818:	2240      	movs	r2, #64	; 0x40
 800481a:	9b04      	ldr	r3, [sp, #16]
 800481c:	eba0 000a 	sub.w	r0, r0, sl
 8004820:	4082      	lsls	r2, r0
 8004822:	4313      	orrs	r3, r2
 8004824:	3401      	adds	r4, #1
 8004826:	9304      	str	r3, [sp, #16]
 8004828:	f814 1b01 	ldrb.w	r1, [r4], #1
 800482c:	2206      	movs	r2, #6
 800482e:	4826      	ldr	r0, [pc, #152]	; (80048c8 <_svfiprintf_r+0x1f0>)
 8004830:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004834:	f000 fac8 	bl	8004dc8 <memchr>
 8004838:	2800      	cmp	r0, #0
 800483a:	d038      	beq.n	80048ae <_svfiprintf_r+0x1d6>
 800483c:	4b23      	ldr	r3, [pc, #140]	; (80048cc <_svfiprintf_r+0x1f4>)
 800483e:	bb1b      	cbnz	r3, 8004888 <_svfiprintf_r+0x1b0>
 8004840:	9b03      	ldr	r3, [sp, #12]
 8004842:	3307      	adds	r3, #7
 8004844:	f023 0307 	bic.w	r3, r3, #7
 8004848:	3308      	adds	r3, #8
 800484a:	9303      	str	r3, [sp, #12]
 800484c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800484e:	4433      	add	r3, r6
 8004850:	9309      	str	r3, [sp, #36]	; 0x24
 8004852:	e768      	b.n	8004726 <_svfiprintf_r+0x4e>
 8004854:	460c      	mov	r4, r1
 8004856:	2001      	movs	r0, #1
 8004858:	fb0c 3202 	mla	r2, ip, r2, r3
 800485c:	e7a6      	b.n	80047ac <_svfiprintf_r+0xd4>
 800485e:	2300      	movs	r3, #0
 8004860:	f04f 0c0a 	mov.w	ip, #10
 8004864:	4619      	mov	r1, r3
 8004866:	3401      	adds	r4, #1
 8004868:	9305      	str	r3, [sp, #20]
 800486a:	4620      	mov	r0, r4
 800486c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004870:	3a30      	subs	r2, #48	; 0x30
 8004872:	2a09      	cmp	r2, #9
 8004874:	d903      	bls.n	800487e <_svfiprintf_r+0x1a6>
 8004876:	2b00      	cmp	r3, #0
 8004878:	d0c6      	beq.n	8004808 <_svfiprintf_r+0x130>
 800487a:	9105      	str	r1, [sp, #20]
 800487c:	e7c4      	b.n	8004808 <_svfiprintf_r+0x130>
 800487e:	4604      	mov	r4, r0
 8004880:	2301      	movs	r3, #1
 8004882:	fb0c 2101 	mla	r1, ip, r1, r2
 8004886:	e7f0      	b.n	800486a <_svfiprintf_r+0x192>
 8004888:	ab03      	add	r3, sp, #12
 800488a:	9300      	str	r3, [sp, #0]
 800488c:	462a      	mov	r2, r5
 800488e:	4638      	mov	r0, r7
 8004890:	4b0f      	ldr	r3, [pc, #60]	; (80048d0 <_svfiprintf_r+0x1f8>)
 8004892:	a904      	add	r1, sp, #16
 8004894:	f3af 8000 	nop.w
 8004898:	1c42      	adds	r2, r0, #1
 800489a:	4606      	mov	r6, r0
 800489c:	d1d6      	bne.n	800484c <_svfiprintf_r+0x174>
 800489e:	89ab      	ldrh	r3, [r5, #12]
 80048a0:	065b      	lsls	r3, r3, #25
 80048a2:	f53f af2d 	bmi.w	8004700 <_svfiprintf_r+0x28>
 80048a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048a8:	b01d      	add	sp, #116	; 0x74
 80048aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048ae:	ab03      	add	r3, sp, #12
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	462a      	mov	r2, r5
 80048b4:	4638      	mov	r0, r7
 80048b6:	4b06      	ldr	r3, [pc, #24]	; (80048d0 <_svfiprintf_r+0x1f8>)
 80048b8:	a904      	add	r1, sp, #16
 80048ba:	f000 f87d 	bl	80049b8 <_printf_i>
 80048be:	e7eb      	b.n	8004898 <_svfiprintf_r+0x1c0>
 80048c0:	0800586b 	.word	0x0800586b
 80048c4:	08005871 	.word	0x08005871
 80048c8:	08005875 	.word	0x08005875
 80048cc:	00000000 	.word	0x00000000
 80048d0:	08004625 	.word	0x08004625

080048d4 <_printf_common>:
 80048d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048d8:	4616      	mov	r6, r2
 80048da:	4699      	mov	r9, r3
 80048dc:	688a      	ldr	r2, [r1, #8]
 80048de:	690b      	ldr	r3, [r1, #16]
 80048e0:	4607      	mov	r7, r0
 80048e2:	4293      	cmp	r3, r2
 80048e4:	bfb8      	it	lt
 80048e6:	4613      	movlt	r3, r2
 80048e8:	6033      	str	r3, [r6, #0]
 80048ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048ee:	460c      	mov	r4, r1
 80048f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048f4:	b10a      	cbz	r2, 80048fa <_printf_common+0x26>
 80048f6:	3301      	adds	r3, #1
 80048f8:	6033      	str	r3, [r6, #0]
 80048fa:	6823      	ldr	r3, [r4, #0]
 80048fc:	0699      	lsls	r1, r3, #26
 80048fe:	bf42      	ittt	mi
 8004900:	6833      	ldrmi	r3, [r6, #0]
 8004902:	3302      	addmi	r3, #2
 8004904:	6033      	strmi	r3, [r6, #0]
 8004906:	6825      	ldr	r5, [r4, #0]
 8004908:	f015 0506 	ands.w	r5, r5, #6
 800490c:	d106      	bne.n	800491c <_printf_common+0x48>
 800490e:	f104 0a19 	add.w	sl, r4, #25
 8004912:	68e3      	ldr	r3, [r4, #12]
 8004914:	6832      	ldr	r2, [r6, #0]
 8004916:	1a9b      	subs	r3, r3, r2
 8004918:	42ab      	cmp	r3, r5
 800491a:	dc2b      	bgt.n	8004974 <_printf_common+0xa0>
 800491c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004920:	1e13      	subs	r3, r2, #0
 8004922:	6822      	ldr	r2, [r4, #0]
 8004924:	bf18      	it	ne
 8004926:	2301      	movne	r3, #1
 8004928:	0692      	lsls	r2, r2, #26
 800492a:	d430      	bmi.n	800498e <_printf_common+0xba>
 800492c:	4649      	mov	r1, r9
 800492e:	4638      	mov	r0, r7
 8004930:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004934:	47c0      	blx	r8
 8004936:	3001      	adds	r0, #1
 8004938:	d023      	beq.n	8004982 <_printf_common+0xae>
 800493a:	6823      	ldr	r3, [r4, #0]
 800493c:	6922      	ldr	r2, [r4, #16]
 800493e:	f003 0306 	and.w	r3, r3, #6
 8004942:	2b04      	cmp	r3, #4
 8004944:	bf14      	ite	ne
 8004946:	2500      	movne	r5, #0
 8004948:	6833      	ldreq	r3, [r6, #0]
 800494a:	f04f 0600 	mov.w	r6, #0
 800494e:	bf08      	it	eq
 8004950:	68e5      	ldreq	r5, [r4, #12]
 8004952:	f104 041a 	add.w	r4, r4, #26
 8004956:	bf08      	it	eq
 8004958:	1aed      	subeq	r5, r5, r3
 800495a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800495e:	bf08      	it	eq
 8004960:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004964:	4293      	cmp	r3, r2
 8004966:	bfc4      	itt	gt
 8004968:	1a9b      	subgt	r3, r3, r2
 800496a:	18ed      	addgt	r5, r5, r3
 800496c:	42b5      	cmp	r5, r6
 800496e:	d11a      	bne.n	80049a6 <_printf_common+0xd2>
 8004970:	2000      	movs	r0, #0
 8004972:	e008      	b.n	8004986 <_printf_common+0xb2>
 8004974:	2301      	movs	r3, #1
 8004976:	4652      	mov	r2, sl
 8004978:	4649      	mov	r1, r9
 800497a:	4638      	mov	r0, r7
 800497c:	47c0      	blx	r8
 800497e:	3001      	adds	r0, #1
 8004980:	d103      	bne.n	800498a <_printf_common+0xb6>
 8004982:	f04f 30ff 	mov.w	r0, #4294967295
 8004986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800498a:	3501      	adds	r5, #1
 800498c:	e7c1      	b.n	8004912 <_printf_common+0x3e>
 800498e:	2030      	movs	r0, #48	; 0x30
 8004990:	18e1      	adds	r1, r4, r3
 8004992:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004996:	1c5a      	adds	r2, r3, #1
 8004998:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800499c:	4422      	add	r2, r4
 800499e:	3302      	adds	r3, #2
 80049a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049a4:	e7c2      	b.n	800492c <_printf_common+0x58>
 80049a6:	2301      	movs	r3, #1
 80049a8:	4622      	mov	r2, r4
 80049aa:	4649      	mov	r1, r9
 80049ac:	4638      	mov	r0, r7
 80049ae:	47c0      	blx	r8
 80049b0:	3001      	adds	r0, #1
 80049b2:	d0e6      	beq.n	8004982 <_printf_common+0xae>
 80049b4:	3601      	adds	r6, #1
 80049b6:	e7d9      	b.n	800496c <_printf_common+0x98>

080049b8 <_printf_i>:
 80049b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049bc:	7e0f      	ldrb	r7, [r1, #24]
 80049be:	4691      	mov	r9, r2
 80049c0:	2f78      	cmp	r7, #120	; 0x78
 80049c2:	4680      	mov	r8, r0
 80049c4:	460c      	mov	r4, r1
 80049c6:	469a      	mov	sl, r3
 80049c8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80049ce:	d807      	bhi.n	80049e0 <_printf_i+0x28>
 80049d0:	2f62      	cmp	r7, #98	; 0x62
 80049d2:	d80a      	bhi.n	80049ea <_printf_i+0x32>
 80049d4:	2f00      	cmp	r7, #0
 80049d6:	f000 80d5 	beq.w	8004b84 <_printf_i+0x1cc>
 80049da:	2f58      	cmp	r7, #88	; 0x58
 80049dc:	f000 80c1 	beq.w	8004b62 <_printf_i+0x1aa>
 80049e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80049e8:	e03a      	b.n	8004a60 <_printf_i+0xa8>
 80049ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80049ee:	2b15      	cmp	r3, #21
 80049f0:	d8f6      	bhi.n	80049e0 <_printf_i+0x28>
 80049f2:	a101      	add	r1, pc, #4	; (adr r1, 80049f8 <_printf_i+0x40>)
 80049f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049f8:	08004a51 	.word	0x08004a51
 80049fc:	08004a65 	.word	0x08004a65
 8004a00:	080049e1 	.word	0x080049e1
 8004a04:	080049e1 	.word	0x080049e1
 8004a08:	080049e1 	.word	0x080049e1
 8004a0c:	080049e1 	.word	0x080049e1
 8004a10:	08004a65 	.word	0x08004a65
 8004a14:	080049e1 	.word	0x080049e1
 8004a18:	080049e1 	.word	0x080049e1
 8004a1c:	080049e1 	.word	0x080049e1
 8004a20:	080049e1 	.word	0x080049e1
 8004a24:	08004b6b 	.word	0x08004b6b
 8004a28:	08004a91 	.word	0x08004a91
 8004a2c:	08004b25 	.word	0x08004b25
 8004a30:	080049e1 	.word	0x080049e1
 8004a34:	080049e1 	.word	0x080049e1
 8004a38:	08004b8d 	.word	0x08004b8d
 8004a3c:	080049e1 	.word	0x080049e1
 8004a40:	08004a91 	.word	0x08004a91
 8004a44:	080049e1 	.word	0x080049e1
 8004a48:	080049e1 	.word	0x080049e1
 8004a4c:	08004b2d 	.word	0x08004b2d
 8004a50:	682b      	ldr	r3, [r5, #0]
 8004a52:	1d1a      	adds	r2, r3, #4
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	602a      	str	r2, [r5, #0]
 8004a58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a60:	2301      	movs	r3, #1
 8004a62:	e0a0      	b.n	8004ba6 <_printf_i+0x1ee>
 8004a64:	6820      	ldr	r0, [r4, #0]
 8004a66:	682b      	ldr	r3, [r5, #0]
 8004a68:	0607      	lsls	r7, r0, #24
 8004a6a:	f103 0104 	add.w	r1, r3, #4
 8004a6e:	6029      	str	r1, [r5, #0]
 8004a70:	d501      	bpl.n	8004a76 <_printf_i+0xbe>
 8004a72:	681e      	ldr	r6, [r3, #0]
 8004a74:	e003      	b.n	8004a7e <_printf_i+0xc6>
 8004a76:	0646      	lsls	r6, r0, #25
 8004a78:	d5fb      	bpl.n	8004a72 <_printf_i+0xba>
 8004a7a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004a7e:	2e00      	cmp	r6, #0
 8004a80:	da03      	bge.n	8004a8a <_printf_i+0xd2>
 8004a82:	232d      	movs	r3, #45	; 0x2d
 8004a84:	4276      	negs	r6, r6
 8004a86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a8a:	230a      	movs	r3, #10
 8004a8c:	4859      	ldr	r0, [pc, #356]	; (8004bf4 <_printf_i+0x23c>)
 8004a8e:	e012      	b.n	8004ab6 <_printf_i+0xfe>
 8004a90:	682b      	ldr	r3, [r5, #0]
 8004a92:	6820      	ldr	r0, [r4, #0]
 8004a94:	1d19      	adds	r1, r3, #4
 8004a96:	6029      	str	r1, [r5, #0]
 8004a98:	0605      	lsls	r5, r0, #24
 8004a9a:	d501      	bpl.n	8004aa0 <_printf_i+0xe8>
 8004a9c:	681e      	ldr	r6, [r3, #0]
 8004a9e:	e002      	b.n	8004aa6 <_printf_i+0xee>
 8004aa0:	0641      	lsls	r1, r0, #25
 8004aa2:	d5fb      	bpl.n	8004a9c <_printf_i+0xe4>
 8004aa4:	881e      	ldrh	r6, [r3, #0]
 8004aa6:	2f6f      	cmp	r7, #111	; 0x6f
 8004aa8:	bf0c      	ite	eq
 8004aaa:	2308      	moveq	r3, #8
 8004aac:	230a      	movne	r3, #10
 8004aae:	4851      	ldr	r0, [pc, #324]	; (8004bf4 <_printf_i+0x23c>)
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ab6:	6865      	ldr	r5, [r4, #4]
 8004ab8:	2d00      	cmp	r5, #0
 8004aba:	bfa8      	it	ge
 8004abc:	6821      	ldrge	r1, [r4, #0]
 8004abe:	60a5      	str	r5, [r4, #8]
 8004ac0:	bfa4      	itt	ge
 8004ac2:	f021 0104 	bicge.w	r1, r1, #4
 8004ac6:	6021      	strge	r1, [r4, #0]
 8004ac8:	b90e      	cbnz	r6, 8004ace <_printf_i+0x116>
 8004aca:	2d00      	cmp	r5, #0
 8004acc:	d04b      	beq.n	8004b66 <_printf_i+0x1ae>
 8004ace:	4615      	mov	r5, r2
 8004ad0:	fbb6 f1f3 	udiv	r1, r6, r3
 8004ad4:	fb03 6711 	mls	r7, r3, r1, r6
 8004ad8:	5dc7      	ldrb	r7, [r0, r7]
 8004ada:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ade:	4637      	mov	r7, r6
 8004ae0:	42bb      	cmp	r3, r7
 8004ae2:	460e      	mov	r6, r1
 8004ae4:	d9f4      	bls.n	8004ad0 <_printf_i+0x118>
 8004ae6:	2b08      	cmp	r3, #8
 8004ae8:	d10b      	bne.n	8004b02 <_printf_i+0x14a>
 8004aea:	6823      	ldr	r3, [r4, #0]
 8004aec:	07de      	lsls	r6, r3, #31
 8004aee:	d508      	bpl.n	8004b02 <_printf_i+0x14a>
 8004af0:	6923      	ldr	r3, [r4, #16]
 8004af2:	6861      	ldr	r1, [r4, #4]
 8004af4:	4299      	cmp	r1, r3
 8004af6:	bfde      	ittt	le
 8004af8:	2330      	movle	r3, #48	; 0x30
 8004afa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004afe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b02:	1b52      	subs	r2, r2, r5
 8004b04:	6122      	str	r2, [r4, #16]
 8004b06:	464b      	mov	r3, r9
 8004b08:	4621      	mov	r1, r4
 8004b0a:	4640      	mov	r0, r8
 8004b0c:	f8cd a000 	str.w	sl, [sp]
 8004b10:	aa03      	add	r2, sp, #12
 8004b12:	f7ff fedf 	bl	80048d4 <_printf_common>
 8004b16:	3001      	adds	r0, #1
 8004b18:	d14a      	bne.n	8004bb0 <_printf_i+0x1f8>
 8004b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b1e:	b004      	add	sp, #16
 8004b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b24:	6823      	ldr	r3, [r4, #0]
 8004b26:	f043 0320 	orr.w	r3, r3, #32
 8004b2a:	6023      	str	r3, [r4, #0]
 8004b2c:	2778      	movs	r7, #120	; 0x78
 8004b2e:	4832      	ldr	r0, [pc, #200]	; (8004bf8 <_printf_i+0x240>)
 8004b30:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b34:	6823      	ldr	r3, [r4, #0]
 8004b36:	6829      	ldr	r1, [r5, #0]
 8004b38:	061f      	lsls	r7, r3, #24
 8004b3a:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b3e:	d402      	bmi.n	8004b46 <_printf_i+0x18e>
 8004b40:	065f      	lsls	r7, r3, #25
 8004b42:	bf48      	it	mi
 8004b44:	b2b6      	uxthmi	r6, r6
 8004b46:	07df      	lsls	r7, r3, #31
 8004b48:	bf48      	it	mi
 8004b4a:	f043 0320 	orrmi.w	r3, r3, #32
 8004b4e:	6029      	str	r1, [r5, #0]
 8004b50:	bf48      	it	mi
 8004b52:	6023      	strmi	r3, [r4, #0]
 8004b54:	b91e      	cbnz	r6, 8004b5e <_printf_i+0x1a6>
 8004b56:	6823      	ldr	r3, [r4, #0]
 8004b58:	f023 0320 	bic.w	r3, r3, #32
 8004b5c:	6023      	str	r3, [r4, #0]
 8004b5e:	2310      	movs	r3, #16
 8004b60:	e7a6      	b.n	8004ab0 <_printf_i+0xf8>
 8004b62:	4824      	ldr	r0, [pc, #144]	; (8004bf4 <_printf_i+0x23c>)
 8004b64:	e7e4      	b.n	8004b30 <_printf_i+0x178>
 8004b66:	4615      	mov	r5, r2
 8004b68:	e7bd      	b.n	8004ae6 <_printf_i+0x12e>
 8004b6a:	682b      	ldr	r3, [r5, #0]
 8004b6c:	6826      	ldr	r6, [r4, #0]
 8004b6e:	1d18      	adds	r0, r3, #4
 8004b70:	6961      	ldr	r1, [r4, #20]
 8004b72:	6028      	str	r0, [r5, #0]
 8004b74:	0635      	lsls	r5, r6, #24
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	d501      	bpl.n	8004b7e <_printf_i+0x1c6>
 8004b7a:	6019      	str	r1, [r3, #0]
 8004b7c:	e002      	b.n	8004b84 <_printf_i+0x1cc>
 8004b7e:	0670      	lsls	r0, r6, #25
 8004b80:	d5fb      	bpl.n	8004b7a <_printf_i+0x1c2>
 8004b82:	8019      	strh	r1, [r3, #0]
 8004b84:	2300      	movs	r3, #0
 8004b86:	4615      	mov	r5, r2
 8004b88:	6123      	str	r3, [r4, #16]
 8004b8a:	e7bc      	b.n	8004b06 <_printf_i+0x14e>
 8004b8c:	682b      	ldr	r3, [r5, #0]
 8004b8e:	2100      	movs	r1, #0
 8004b90:	1d1a      	adds	r2, r3, #4
 8004b92:	602a      	str	r2, [r5, #0]
 8004b94:	681d      	ldr	r5, [r3, #0]
 8004b96:	6862      	ldr	r2, [r4, #4]
 8004b98:	4628      	mov	r0, r5
 8004b9a:	f000 f915 	bl	8004dc8 <memchr>
 8004b9e:	b108      	cbz	r0, 8004ba4 <_printf_i+0x1ec>
 8004ba0:	1b40      	subs	r0, r0, r5
 8004ba2:	6060      	str	r0, [r4, #4]
 8004ba4:	6863      	ldr	r3, [r4, #4]
 8004ba6:	6123      	str	r3, [r4, #16]
 8004ba8:	2300      	movs	r3, #0
 8004baa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bae:	e7aa      	b.n	8004b06 <_printf_i+0x14e>
 8004bb0:	462a      	mov	r2, r5
 8004bb2:	4649      	mov	r1, r9
 8004bb4:	4640      	mov	r0, r8
 8004bb6:	6923      	ldr	r3, [r4, #16]
 8004bb8:	47d0      	blx	sl
 8004bba:	3001      	adds	r0, #1
 8004bbc:	d0ad      	beq.n	8004b1a <_printf_i+0x162>
 8004bbe:	6823      	ldr	r3, [r4, #0]
 8004bc0:	079b      	lsls	r3, r3, #30
 8004bc2:	d413      	bmi.n	8004bec <_printf_i+0x234>
 8004bc4:	68e0      	ldr	r0, [r4, #12]
 8004bc6:	9b03      	ldr	r3, [sp, #12]
 8004bc8:	4298      	cmp	r0, r3
 8004bca:	bfb8      	it	lt
 8004bcc:	4618      	movlt	r0, r3
 8004bce:	e7a6      	b.n	8004b1e <_printf_i+0x166>
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	4632      	mov	r2, r6
 8004bd4:	4649      	mov	r1, r9
 8004bd6:	4640      	mov	r0, r8
 8004bd8:	47d0      	blx	sl
 8004bda:	3001      	adds	r0, #1
 8004bdc:	d09d      	beq.n	8004b1a <_printf_i+0x162>
 8004bde:	3501      	adds	r5, #1
 8004be0:	68e3      	ldr	r3, [r4, #12]
 8004be2:	9903      	ldr	r1, [sp, #12]
 8004be4:	1a5b      	subs	r3, r3, r1
 8004be6:	42ab      	cmp	r3, r5
 8004be8:	dcf2      	bgt.n	8004bd0 <_printf_i+0x218>
 8004bea:	e7eb      	b.n	8004bc4 <_printf_i+0x20c>
 8004bec:	2500      	movs	r5, #0
 8004bee:	f104 0619 	add.w	r6, r4, #25
 8004bf2:	e7f5      	b.n	8004be0 <_printf_i+0x228>
 8004bf4:	0800587c 	.word	0x0800587c
 8004bf8:	0800588d 	.word	0x0800588d

08004bfc <__sflush_r>:
 8004bfc:	898a      	ldrh	r2, [r1, #12]
 8004bfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c00:	4605      	mov	r5, r0
 8004c02:	0710      	lsls	r0, r2, #28
 8004c04:	460c      	mov	r4, r1
 8004c06:	d457      	bmi.n	8004cb8 <__sflush_r+0xbc>
 8004c08:	684b      	ldr	r3, [r1, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	dc04      	bgt.n	8004c18 <__sflush_r+0x1c>
 8004c0e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	dc01      	bgt.n	8004c18 <__sflush_r+0x1c>
 8004c14:	2000      	movs	r0, #0
 8004c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c1a:	2e00      	cmp	r6, #0
 8004c1c:	d0fa      	beq.n	8004c14 <__sflush_r+0x18>
 8004c1e:	2300      	movs	r3, #0
 8004c20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004c24:	682f      	ldr	r7, [r5, #0]
 8004c26:	6a21      	ldr	r1, [r4, #32]
 8004c28:	602b      	str	r3, [r5, #0]
 8004c2a:	d032      	beq.n	8004c92 <__sflush_r+0x96>
 8004c2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004c2e:	89a3      	ldrh	r3, [r4, #12]
 8004c30:	075a      	lsls	r2, r3, #29
 8004c32:	d505      	bpl.n	8004c40 <__sflush_r+0x44>
 8004c34:	6863      	ldr	r3, [r4, #4]
 8004c36:	1ac0      	subs	r0, r0, r3
 8004c38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c3a:	b10b      	cbz	r3, 8004c40 <__sflush_r+0x44>
 8004c3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c3e:	1ac0      	subs	r0, r0, r3
 8004c40:	2300      	movs	r3, #0
 8004c42:	4602      	mov	r2, r0
 8004c44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c46:	4628      	mov	r0, r5
 8004c48:	6a21      	ldr	r1, [r4, #32]
 8004c4a:	47b0      	blx	r6
 8004c4c:	1c43      	adds	r3, r0, #1
 8004c4e:	89a3      	ldrh	r3, [r4, #12]
 8004c50:	d106      	bne.n	8004c60 <__sflush_r+0x64>
 8004c52:	6829      	ldr	r1, [r5, #0]
 8004c54:	291d      	cmp	r1, #29
 8004c56:	d82b      	bhi.n	8004cb0 <__sflush_r+0xb4>
 8004c58:	4a28      	ldr	r2, [pc, #160]	; (8004cfc <__sflush_r+0x100>)
 8004c5a:	410a      	asrs	r2, r1
 8004c5c:	07d6      	lsls	r6, r2, #31
 8004c5e:	d427      	bmi.n	8004cb0 <__sflush_r+0xb4>
 8004c60:	2200      	movs	r2, #0
 8004c62:	6062      	str	r2, [r4, #4]
 8004c64:	6922      	ldr	r2, [r4, #16]
 8004c66:	04d9      	lsls	r1, r3, #19
 8004c68:	6022      	str	r2, [r4, #0]
 8004c6a:	d504      	bpl.n	8004c76 <__sflush_r+0x7a>
 8004c6c:	1c42      	adds	r2, r0, #1
 8004c6e:	d101      	bne.n	8004c74 <__sflush_r+0x78>
 8004c70:	682b      	ldr	r3, [r5, #0]
 8004c72:	b903      	cbnz	r3, 8004c76 <__sflush_r+0x7a>
 8004c74:	6560      	str	r0, [r4, #84]	; 0x54
 8004c76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c78:	602f      	str	r7, [r5, #0]
 8004c7a:	2900      	cmp	r1, #0
 8004c7c:	d0ca      	beq.n	8004c14 <__sflush_r+0x18>
 8004c7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c82:	4299      	cmp	r1, r3
 8004c84:	d002      	beq.n	8004c8c <__sflush_r+0x90>
 8004c86:	4628      	mov	r0, r5
 8004c88:	f7ff fbd0 	bl	800442c <_free_r>
 8004c8c:	2000      	movs	r0, #0
 8004c8e:	6360      	str	r0, [r4, #52]	; 0x34
 8004c90:	e7c1      	b.n	8004c16 <__sflush_r+0x1a>
 8004c92:	2301      	movs	r3, #1
 8004c94:	4628      	mov	r0, r5
 8004c96:	47b0      	blx	r6
 8004c98:	1c41      	adds	r1, r0, #1
 8004c9a:	d1c8      	bne.n	8004c2e <__sflush_r+0x32>
 8004c9c:	682b      	ldr	r3, [r5, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d0c5      	beq.n	8004c2e <__sflush_r+0x32>
 8004ca2:	2b1d      	cmp	r3, #29
 8004ca4:	d001      	beq.n	8004caa <__sflush_r+0xae>
 8004ca6:	2b16      	cmp	r3, #22
 8004ca8:	d101      	bne.n	8004cae <__sflush_r+0xb2>
 8004caa:	602f      	str	r7, [r5, #0]
 8004cac:	e7b2      	b.n	8004c14 <__sflush_r+0x18>
 8004cae:	89a3      	ldrh	r3, [r4, #12]
 8004cb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cb4:	81a3      	strh	r3, [r4, #12]
 8004cb6:	e7ae      	b.n	8004c16 <__sflush_r+0x1a>
 8004cb8:	690f      	ldr	r7, [r1, #16]
 8004cba:	2f00      	cmp	r7, #0
 8004cbc:	d0aa      	beq.n	8004c14 <__sflush_r+0x18>
 8004cbe:	0793      	lsls	r3, r2, #30
 8004cc0:	bf18      	it	ne
 8004cc2:	2300      	movne	r3, #0
 8004cc4:	680e      	ldr	r6, [r1, #0]
 8004cc6:	bf08      	it	eq
 8004cc8:	694b      	ldreq	r3, [r1, #20]
 8004cca:	1bf6      	subs	r6, r6, r7
 8004ccc:	600f      	str	r7, [r1, #0]
 8004cce:	608b      	str	r3, [r1, #8]
 8004cd0:	2e00      	cmp	r6, #0
 8004cd2:	dd9f      	ble.n	8004c14 <__sflush_r+0x18>
 8004cd4:	4633      	mov	r3, r6
 8004cd6:	463a      	mov	r2, r7
 8004cd8:	4628      	mov	r0, r5
 8004cda:	6a21      	ldr	r1, [r4, #32]
 8004cdc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004ce0:	47e0      	blx	ip
 8004ce2:	2800      	cmp	r0, #0
 8004ce4:	dc06      	bgt.n	8004cf4 <__sflush_r+0xf8>
 8004ce6:	89a3      	ldrh	r3, [r4, #12]
 8004ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cf0:	81a3      	strh	r3, [r4, #12]
 8004cf2:	e790      	b.n	8004c16 <__sflush_r+0x1a>
 8004cf4:	4407      	add	r7, r0
 8004cf6:	1a36      	subs	r6, r6, r0
 8004cf8:	e7ea      	b.n	8004cd0 <__sflush_r+0xd4>
 8004cfa:	bf00      	nop
 8004cfc:	dfbffffe 	.word	0xdfbffffe

08004d00 <_fflush_r>:
 8004d00:	b538      	push	{r3, r4, r5, lr}
 8004d02:	690b      	ldr	r3, [r1, #16]
 8004d04:	4605      	mov	r5, r0
 8004d06:	460c      	mov	r4, r1
 8004d08:	b913      	cbnz	r3, 8004d10 <_fflush_r+0x10>
 8004d0a:	2500      	movs	r5, #0
 8004d0c:	4628      	mov	r0, r5
 8004d0e:	bd38      	pop	{r3, r4, r5, pc}
 8004d10:	b118      	cbz	r0, 8004d1a <_fflush_r+0x1a>
 8004d12:	6a03      	ldr	r3, [r0, #32]
 8004d14:	b90b      	cbnz	r3, 8004d1a <_fflush_r+0x1a>
 8004d16:	f7ff fa49 	bl	80041ac <__sinit>
 8004d1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d0f3      	beq.n	8004d0a <_fflush_r+0xa>
 8004d22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004d24:	07d0      	lsls	r0, r2, #31
 8004d26:	d404      	bmi.n	8004d32 <_fflush_r+0x32>
 8004d28:	0599      	lsls	r1, r3, #22
 8004d2a:	d402      	bmi.n	8004d32 <_fflush_r+0x32>
 8004d2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d2e:	f7ff fb4f 	bl	80043d0 <__retarget_lock_acquire_recursive>
 8004d32:	4628      	mov	r0, r5
 8004d34:	4621      	mov	r1, r4
 8004d36:	f7ff ff61 	bl	8004bfc <__sflush_r>
 8004d3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d3c:	4605      	mov	r5, r0
 8004d3e:	07da      	lsls	r2, r3, #31
 8004d40:	d4e4      	bmi.n	8004d0c <_fflush_r+0xc>
 8004d42:	89a3      	ldrh	r3, [r4, #12]
 8004d44:	059b      	lsls	r3, r3, #22
 8004d46:	d4e1      	bmi.n	8004d0c <_fflush_r+0xc>
 8004d48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d4a:	f7ff fb42 	bl	80043d2 <__retarget_lock_release_recursive>
 8004d4e:	e7dd      	b.n	8004d0c <_fflush_r+0xc>

08004d50 <fiprintf>:
 8004d50:	b40e      	push	{r1, r2, r3}
 8004d52:	b503      	push	{r0, r1, lr}
 8004d54:	4601      	mov	r1, r0
 8004d56:	ab03      	add	r3, sp, #12
 8004d58:	4805      	ldr	r0, [pc, #20]	; (8004d70 <fiprintf+0x20>)
 8004d5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d5e:	6800      	ldr	r0, [r0, #0]
 8004d60:	9301      	str	r3, [sp, #4]
 8004d62:	f000 f89d 	bl	8004ea0 <_vfiprintf_r>
 8004d66:	b002      	add	sp, #8
 8004d68:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d6c:	b003      	add	sp, #12
 8004d6e:	4770      	bx	lr
 8004d70:	20000074 	.word	0x20000074

08004d74 <memmove>:
 8004d74:	4288      	cmp	r0, r1
 8004d76:	b510      	push	{r4, lr}
 8004d78:	eb01 0402 	add.w	r4, r1, r2
 8004d7c:	d902      	bls.n	8004d84 <memmove+0x10>
 8004d7e:	4284      	cmp	r4, r0
 8004d80:	4623      	mov	r3, r4
 8004d82:	d807      	bhi.n	8004d94 <memmove+0x20>
 8004d84:	1e43      	subs	r3, r0, #1
 8004d86:	42a1      	cmp	r1, r4
 8004d88:	d008      	beq.n	8004d9c <memmove+0x28>
 8004d8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d92:	e7f8      	b.n	8004d86 <memmove+0x12>
 8004d94:	4601      	mov	r1, r0
 8004d96:	4402      	add	r2, r0
 8004d98:	428a      	cmp	r2, r1
 8004d9a:	d100      	bne.n	8004d9e <memmove+0x2a>
 8004d9c:	bd10      	pop	{r4, pc}
 8004d9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004da2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004da6:	e7f7      	b.n	8004d98 <memmove+0x24>

08004da8 <_sbrk_r>:
 8004da8:	b538      	push	{r3, r4, r5, lr}
 8004daa:	2300      	movs	r3, #0
 8004dac:	4d05      	ldr	r5, [pc, #20]	; (8004dc4 <_sbrk_r+0x1c>)
 8004dae:	4604      	mov	r4, r0
 8004db0:	4608      	mov	r0, r1
 8004db2:	602b      	str	r3, [r5, #0]
 8004db4:	f7fc fde8 	bl	8001988 <_sbrk>
 8004db8:	1c43      	adds	r3, r0, #1
 8004dba:	d102      	bne.n	8004dc2 <_sbrk_r+0x1a>
 8004dbc:	682b      	ldr	r3, [r5, #0]
 8004dbe:	b103      	cbz	r3, 8004dc2 <_sbrk_r+0x1a>
 8004dc0:	6023      	str	r3, [r4, #0]
 8004dc2:	bd38      	pop	{r3, r4, r5, pc}
 8004dc4:	20000ea0 	.word	0x20000ea0

08004dc8 <memchr>:
 8004dc8:	4603      	mov	r3, r0
 8004dca:	b510      	push	{r4, lr}
 8004dcc:	b2c9      	uxtb	r1, r1
 8004dce:	4402      	add	r2, r0
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	d101      	bne.n	8004dda <memchr+0x12>
 8004dd6:	2000      	movs	r0, #0
 8004dd8:	e003      	b.n	8004de2 <memchr+0x1a>
 8004dda:	7804      	ldrb	r4, [r0, #0]
 8004ddc:	3301      	adds	r3, #1
 8004dde:	428c      	cmp	r4, r1
 8004de0:	d1f6      	bne.n	8004dd0 <memchr+0x8>
 8004de2:	bd10      	pop	{r4, pc}

08004de4 <abort>:
 8004de4:	2006      	movs	r0, #6
 8004de6:	b508      	push	{r3, lr}
 8004de8:	f000 fa32 	bl	8005250 <raise>
 8004dec:	2001      	movs	r0, #1
 8004dee:	f7fc fd58 	bl	80018a2 <_exit>

08004df2 <_realloc_r>:
 8004df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004df6:	4680      	mov	r8, r0
 8004df8:	4614      	mov	r4, r2
 8004dfa:	460e      	mov	r6, r1
 8004dfc:	b921      	cbnz	r1, 8004e08 <_realloc_r+0x16>
 8004dfe:	4611      	mov	r1, r2
 8004e00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e04:	f7ff bb82 	b.w	800450c <_malloc_r>
 8004e08:	b92a      	cbnz	r2, 8004e16 <_realloc_r+0x24>
 8004e0a:	f7ff fb0f 	bl	800442c <_free_r>
 8004e0e:	4625      	mov	r5, r4
 8004e10:	4628      	mov	r0, r5
 8004e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e16:	f000 fa37 	bl	8005288 <_malloc_usable_size_r>
 8004e1a:	4284      	cmp	r4, r0
 8004e1c:	4607      	mov	r7, r0
 8004e1e:	d802      	bhi.n	8004e26 <_realloc_r+0x34>
 8004e20:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004e24:	d812      	bhi.n	8004e4c <_realloc_r+0x5a>
 8004e26:	4621      	mov	r1, r4
 8004e28:	4640      	mov	r0, r8
 8004e2a:	f7ff fb6f 	bl	800450c <_malloc_r>
 8004e2e:	4605      	mov	r5, r0
 8004e30:	2800      	cmp	r0, #0
 8004e32:	d0ed      	beq.n	8004e10 <_realloc_r+0x1e>
 8004e34:	42bc      	cmp	r4, r7
 8004e36:	4622      	mov	r2, r4
 8004e38:	4631      	mov	r1, r6
 8004e3a:	bf28      	it	cs
 8004e3c:	463a      	movcs	r2, r7
 8004e3e:	f7ff fac9 	bl	80043d4 <memcpy>
 8004e42:	4631      	mov	r1, r6
 8004e44:	4640      	mov	r0, r8
 8004e46:	f7ff faf1 	bl	800442c <_free_r>
 8004e4a:	e7e1      	b.n	8004e10 <_realloc_r+0x1e>
 8004e4c:	4635      	mov	r5, r6
 8004e4e:	e7df      	b.n	8004e10 <_realloc_r+0x1e>

08004e50 <__sfputc_r>:
 8004e50:	6893      	ldr	r3, [r2, #8]
 8004e52:	b410      	push	{r4}
 8004e54:	3b01      	subs	r3, #1
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	6093      	str	r3, [r2, #8]
 8004e5a:	da07      	bge.n	8004e6c <__sfputc_r+0x1c>
 8004e5c:	6994      	ldr	r4, [r2, #24]
 8004e5e:	42a3      	cmp	r3, r4
 8004e60:	db01      	blt.n	8004e66 <__sfputc_r+0x16>
 8004e62:	290a      	cmp	r1, #10
 8004e64:	d102      	bne.n	8004e6c <__sfputc_r+0x1c>
 8004e66:	bc10      	pop	{r4}
 8004e68:	f000 b934 	b.w	80050d4 <__swbuf_r>
 8004e6c:	6813      	ldr	r3, [r2, #0]
 8004e6e:	1c58      	adds	r0, r3, #1
 8004e70:	6010      	str	r0, [r2, #0]
 8004e72:	7019      	strb	r1, [r3, #0]
 8004e74:	4608      	mov	r0, r1
 8004e76:	bc10      	pop	{r4}
 8004e78:	4770      	bx	lr

08004e7a <__sfputs_r>:
 8004e7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e7c:	4606      	mov	r6, r0
 8004e7e:	460f      	mov	r7, r1
 8004e80:	4614      	mov	r4, r2
 8004e82:	18d5      	adds	r5, r2, r3
 8004e84:	42ac      	cmp	r4, r5
 8004e86:	d101      	bne.n	8004e8c <__sfputs_r+0x12>
 8004e88:	2000      	movs	r0, #0
 8004e8a:	e007      	b.n	8004e9c <__sfputs_r+0x22>
 8004e8c:	463a      	mov	r2, r7
 8004e8e:	4630      	mov	r0, r6
 8004e90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e94:	f7ff ffdc 	bl	8004e50 <__sfputc_r>
 8004e98:	1c43      	adds	r3, r0, #1
 8004e9a:	d1f3      	bne.n	8004e84 <__sfputs_r+0xa>
 8004e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ea0 <_vfiprintf_r>:
 8004ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ea4:	460d      	mov	r5, r1
 8004ea6:	4614      	mov	r4, r2
 8004ea8:	4698      	mov	r8, r3
 8004eaa:	4606      	mov	r6, r0
 8004eac:	b09d      	sub	sp, #116	; 0x74
 8004eae:	b118      	cbz	r0, 8004eb8 <_vfiprintf_r+0x18>
 8004eb0:	6a03      	ldr	r3, [r0, #32]
 8004eb2:	b90b      	cbnz	r3, 8004eb8 <_vfiprintf_r+0x18>
 8004eb4:	f7ff f97a 	bl	80041ac <__sinit>
 8004eb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004eba:	07d9      	lsls	r1, r3, #31
 8004ebc:	d405      	bmi.n	8004eca <_vfiprintf_r+0x2a>
 8004ebe:	89ab      	ldrh	r3, [r5, #12]
 8004ec0:	059a      	lsls	r2, r3, #22
 8004ec2:	d402      	bmi.n	8004eca <_vfiprintf_r+0x2a>
 8004ec4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ec6:	f7ff fa83 	bl	80043d0 <__retarget_lock_acquire_recursive>
 8004eca:	89ab      	ldrh	r3, [r5, #12]
 8004ecc:	071b      	lsls	r3, r3, #28
 8004ece:	d501      	bpl.n	8004ed4 <_vfiprintf_r+0x34>
 8004ed0:	692b      	ldr	r3, [r5, #16]
 8004ed2:	b99b      	cbnz	r3, 8004efc <_vfiprintf_r+0x5c>
 8004ed4:	4629      	mov	r1, r5
 8004ed6:	4630      	mov	r0, r6
 8004ed8:	f000 f93a 	bl	8005150 <__swsetup_r>
 8004edc:	b170      	cbz	r0, 8004efc <_vfiprintf_r+0x5c>
 8004ede:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ee0:	07dc      	lsls	r4, r3, #31
 8004ee2:	d504      	bpl.n	8004eee <_vfiprintf_r+0x4e>
 8004ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ee8:	b01d      	add	sp, #116	; 0x74
 8004eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eee:	89ab      	ldrh	r3, [r5, #12]
 8004ef0:	0598      	lsls	r0, r3, #22
 8004ef2:	d4f7      	bmi.n	8004ee4 <_vfiprintf_r+0x44>
 8004ef4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ef6:	f7ff fa6c 	bl	80043d2 <__retarget_lock_release_recursive>
 8004efa:	e7f3      	b.n	8004ee4 <_vfiprintf_r+0x44>
 8004efc:	2300      	movs	r3, #0
 8004efe:	9309      	str	r3, [sp, #36]	; 0x24
 8004f00:	2320      	movs	r3, #32
 8004f02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f06:	2330      	movs	r3, #48	; 0x30
 8004f08:	f04f 0901 	mov.w	r9, #1
 8004f0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f10:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80050c0 <_vfiprintf_r+0x220>
 8004f14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f18:	4623      	mov	r3, r4
 8004f1a:	469a      	mov	sl, r3
 8004f1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f20:	b10a      	cbz	r2, 8004f26 <_vfiprintf_r+0x86>
 8004f22:	2a25      	cmp	r2, #37	; 0x25
 8004f24:	d1f9      	bne.n	8004f1a <_vfiprintf_r+0x7a>
 8004f26:	ebba 0b04 	subs.w	fp, sl, r4
 8004f2a:	d00b      	beq.n	8004f44 <_vfiprintf_r+0xa4>
 8004f2c:	465b      	mov	r3, fp
 8004f2e:	4622      	mov	r2, r4
 8004f30:	4629      	mov	r1, r5
 8004f32:	4630      	mov	r0, r6
 8004f34:	f7ff ffa1 	bl	8004e7a <__sfputs_r>
 8004f38:	3001      	adds	r0, #1
 8004f3a:	f000 80a9 	beq.w	8005090 <_vfiprintf_r+0x1f0>
 8004f3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f40:	445a      	add	r2, fp
 8004f42:	9209      	str	r2, [sp, #36]	; 0x24
 8004f44:	f89a 3000 	ldrb.w	r3, [sl]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 80a1 	beq.w	8005090 <_vfiprintf_r+0x1f0>
 8004f4e:	2300      	movs	r3, #0
 8004f50:	f04f 32ff 	mov.w	r2, #4294967295
 8004f54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f58:	f10a 0a01 	add.w	sl, sl, #1
 8004f5c:	9304      	str	r3, [sp, #16]
 8004f5e:	9307      	str	r3, [sp, #28]
 8004f60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f64:	931a      	str	r3, [sp, #104]	; 0x68
 8004f66:	4654      	mov	r4, sl
 8004f68:	2205      	movs	r2, #5
 8004f6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f6e:	4854      	ldr	r0, [pc, #336]	; (80050c0 <_vfiprintf_r+0x220>)
 8004f70:	f7ff ff2a 	bl	8004dc8 <memchr>
 8004f74:	9a04      	ldr	r2, [sp, #16]
 8004f76:	b9d8      	cbnz	r0, 8004fb0 <_vfiprintf_r+0x110>
 8004f78:	06d1      	lsls	r1, r2, #27
 8004f7a:	bf44      	itt	mi
 8004f7c:	2320      	movmi	r3, #32
 8004f7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f82:	0713      	lsls	r3, r2, #28
 8004f84:	bf44      	itt	mi
 8004f86:	232b      	movmi	r3, #43	; 0x2b
 8004f88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f8c:	f89a 3000 	ldrb.w	r3, [sl]
 8004f90:	2b2a      	cmp	r3, #42	; 0x2a
 8004f92:	d015      	beq.n	8004fc0 <_vfiprintf_r+0x120>
 8004f94:	4654      	mov	r4, sl
 8004f96:	2000      	movs	r0, #0
 8004f98:	f04f 0c0a 	mov.w	ip, #10
 8004f9c:	9a07      	ldr	r2, [sp, #28]
 8004f9e:	4621      	mov	r1, r4
 8004fa0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fa4:	3b30      	subs	r3, #48	; 0x30
 8004fa6:	2b09      	cmp	r3, #9
 8004fa8:	d94d      	bls.n	8005046 <_vfiprintf_r+0x1a6>
 8004faa:	b1b0      	cbz	r0, 8004fda <_vfiprintf_r+0x13a>
 8004fac:	9207      	str	r2, [sp, #28]
 8004fae:	e014      	b.n	8004fda <_vfiprintf_r+0x13a>
 8004fb0:	eba0 0308 	sub.w	r3, r0, r8
 8004fb4:	fa09 f303 	lsl.w	r3, r9, r3
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	46a2      	mov	sl, r4
 8004fbc:	9304      	str	r3, [sp, #16]
 8004fbe:	e7d2      	b.n	8004f66 <_vfiprintf_r+0xc6>
 8004fc0:	9b03      	ldr	r3, [sp, #12]
 8004fc2:	1d19      	adds	r1, r3, #4
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	9103      	str	r1, [sp, #12]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	bfbb      	ittet	lt
 8004fcc:	425b      	neglt	r3, r3
 8004fce:	f042 0202 	orrlt.w	r2, r2, #2
 8004fd2:	9307      	strge	r3, [sp, #28]
 8004fd4:	9307      	strlt	r3, [sp, #28]
 8004fd6:	bfb8      	it	lt
 8004fd8:	9204      	strlt	r2, [sp, #16]
 8004fda:	7823      	ldrb	r3, [r4, #0]
 8004fdc:	2b2e      	cmp	r3, #46	; 0x2e
 8004fde:	d10c      	bne.n	8004ffa <_vfiprintf_r+0x15a>
 8004fe0:	7863      	ldrb	r3, [r4, #1]
 8004fe2:	2b2a      	cmp	r3, #42	; 0x2a
 8004fe4:	d134      	bne.n	8005050 <_vfiprintf_r+0x1b0>
 8004fe6:	9b03      	ldr	r3, [sp, #12]
 8004fe8:	3402      	adds	r4, #2
 8004fea:	1d1a      	adds	r2, r3, #4
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	9203      	str	r2, [sp, #12]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	bfb8      	it	lt
 8004ff4:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ff8:	9305      	str	r3, [sp, #20]
 8004ffa:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80050c4 <_vfiprintf_r+0x224>
 8004ffe:	2203      	movs	r2, #3
 8005000:	4650      	mov	r0, sl
 8005002:	7821      	ldrb	r1, [r4, #0]
 8005004:	f7ff fee0 	bl	8004dc8 <memchr>
 8005008:	b138      	cbz	r0, 800501a <_vfiprintf_r+0x17a>
 800500a:	2240      	movs	r2, #64	; 0x40
 800500c:	9b04      	ldr	r3, [sp, #16]
 800500e:	eba0 000a 	sub.w	r0, r0, sl
 8005012:	4082      	lsls	r2, r0
 8005014:	4313      	orrs	r3, r2
 8005016:	3401      	adds	r4, #1
 8005018:	9304      	str	r3, [sp, #16]
 800501a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800501e:	2206      	movs	r2, #6
 8005020:	4829      	ldr	r0, [pc, #164]	; (80050c8 <_vfiprintf_r+0x228>)
 8005022:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005026:	f7ff fecf 	bl	8004dc8 <memchr>
 800502a:	2800      	cmp	r0, #0
 800502c:	d03f      	beq.n	80050ae <_vfiprintf_r+0x20e>
 800502e:	4b27      	ldr	r3, [pc, #156]	; (80050cc <_vfiprintf_r+0x22c>)
 8005030:	bb1b      	cbnz	r3, 800507a <_vfiprintf_r+0x1da>
 8005032:	9b03      	ldr	r3, [sp, #12]
 8005034:	3307      	adds	r3, #7
 8005036:	f023 0307 	bic.w	r3, r3, #7
 800503a:	3308      	adds	r3, #8
 800503c:	9303      	str	r3, [sp, #12]
 800503e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005040:	443b      	add	r3, r7
 8005042:	9309      	str	r3, [sp, #36]	; 0x24
 8005044:	e768      	b.n	8004f18 <_vfiprintf_r+0x78>
 8005046:	460c      	mov	r4, r1
 8005048:	2001      	movs	r0, #1
 800504a:	fb0c 3202 	mla	r2, ip, r2, r3
 800504e:	e7a6      	b.n	8004f9e <_vfiprintf_r+0xfe>
 8005050:	2300      	movs	r3, #0
 8005052:	f04f 0c0a 	mov.w	ip, #10
 8005056:	4619      	mov	r1, r3
 8005058:	3401      	adds	r4, #1
 800505a:	9305      	str	r3, [sp, #20]
 800505c:	4620      	mov	r0, r4
 800505e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005062:	3a30      	subs	r2, #48	; 0x30
 8005064:	2a09      	cmp	r2, #9
 8005066:	d903      	bls.n	8005070 <_vfiprintf_r+0x1d0>
 8005068:	2b00      	cmp	r3, #0
 800506a:	d0c6      	beq.n	8004ffa <_vfiprintf_r+0x15a>
 800506c:	9105      	str	r1, [sp, #20]
 800506e:	e7c4      	b.n	8004ffa <_vfiprintf_r+0x15a>
 8005070:	4604      	mov	r4, r0
 8005072:	2301      	movs	r3, #1
 8005074:	fb0c 2101 	mla	r1, ip, r1, r2
 8005078:	e7f0      	b.n	800505c <_vfiprintf_r+0x1bc>
 800507a:	ab03      	add	r3, sp, #12
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	462a      	mov	r2, r5
 8005080:	4630      	mov	r0, r6
 8005082:	4b13      	ldr	r3, [pc, #76]	; (80050d0 <_vfiprintf_r+0x230>)
 8005084:	a904      	add	r1, sp, #16
 8005086:	f3af 8000 	nop.w
 800508a:	4607      	mov	r7, r0
 800508c:	1c78      	adds	r0, r7, #1
 800508e:	d1d6      	bne.n	800503e <_vfiprintf_r+0x19e>
 8005090:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005092:	07d9      	lsls	r1, r3, #31
 8005094:	d405      	bmi.n	80050a2 <_vfiprintf_r+0x202>
 8005096:	89ab      	ldrh	r3, [r5, #12]
 8005098:	059a      	lsls	r2, r3, #22
 800509a:	d402      	bmi.n	80050a2 <_vfiprintf_r+0x202>
 800509c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800509e:	f7ff f998 	bl	80043d2 <__retarget_lock_release_recursive>
 80050a2:	89ab      	ldrh	r3, [r5, #12]
 80050a4:	065b      	lsls	r3, r3, #25
 80050a6:	f53f af1d 	bmi.w	8004ee4 <_vfiprintf_r+0x44>
 80050aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050ac:	e71c      	b.n	8004ee8 <_vfiprintf_r+0x48>
 80050ae:	ab03      	add	r3, sp, #12
 80050b0:	9300      	str	r3, [sp, #0]
 80050b2:	462a      	mov	r2, r5
 80050b4:	4630      	mov	r0, r6
 80050b6:	4b06      	ldr	r3, [pc, #24]	; (80050d0 <_vfiprintf_r+0x230>)
 80050b8:	a904      	add	r1, sp, #16
 80050ba:	f7ff fc7d 	bl	80049b8 <_printf_i>
 80050be:	e7e4      	b.n	800508a <_vfiprintf_r+0x1ea>
 80050c0:	0800586b 	.word	0x0800586b
 80050c4:	08005871 	.word	0x08005871
 80050c8:	08005875 	.word	0x08005875
 80050cc:	00000000 	.word	0x00000000
 80050d0:	08004e7b 	.word	0x08004e7b

080050d4 <__swbuf_r>:
 80050d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050d6:	460e      	mov	r6, r1
 80050d8:	4614      	mov	r4, r2
 80050da:	4605      	mov	r5, r0
 80050dc:	b118      	cbz	r0, 80050e6 <__swbuf_r+0x12>
 80050de:	6a03      	ldr	r3, [r0, #32]
 80050e0:	b90b      	cbnz	r3, 80050e6 <__swbuf_r+0x12>
 80050e2:	f7ff f863 	bl	80041ac <__sinit>
 80050e6:	69a3      	ldr	r3, [r4, #24]
 80050e8:	60a3      	str	r3, [r4, #8]
 80050ea:	89a3      	ldrh	r3, [r4, #12]
 80050ec:	071a      	lsls	r2, r3, #28
 80050ee:	d525      	bpl.n	800513c <__swbuf_r+0x68>
 80050f0:	6923      	ldr	r3, [r4, #16]
 80050f2:	b31b      	cbz	r3, 800513c <__swbuf_r+0x68>
 80050f4:	6823      	ldr	r3, [r4, #0]
 80050f6:	6922      	ldr	r2, [r4, #16]
 80050f8:	b2f6      	uxtb	r6, r6
 80050fa:	1a98      	subs	r0, r3, r2
 80050fc:	6963      	ldr	r3, [r4, #20]
 80050fe:	4637      	mov	r7, r6
 8005100:	4283      	cmp	r3, r0
 8005102:	dc04      	bgt.n	800510e <__swbuf_r+0x3a>
 8005104:	4621      	mov	r1, r4
 8005106:	4628      	mov	r0, r5
 8005108:	f7ff fdfa 	bl	8004d00 <_fflush_r>
 800510c:	b9e0      	cbnz	r0, 8005148 <__swbuf_r+0x74>
 800510e:	68a3      	ldr	r3, [r4, #8]
 8005110:	3b01      	subs	r3, #1
 8005112:	60a3      	str	r3, [r4, #8]
 8005114:	6823      	ldr	r3, [r4, #0]
 8005116:	1c5a      	adds	r2, r3, #1
 8005118:	6022      	str	r2, [r4, #0]
 800511a:	701e      	strb	r6, [r3, #0]
 800511c:	6962      	ldr	r2, [r4, #20]
 800511e:	1c43      	adds	r3, r0, #1
 8005120:	429a      	cmp	r2, r3
 8005122:	d004      	beq.n	800512e <__swbuf_r+0x5a>
 8005124:	89a3      	ldrh	r3, [r4, #12]
 8005126:	07db      	lsls	r3, r3, #31
 8005128:	d506      	bpl.n	8005138 <__swbuf_r+0x64>
 800512a:	2e0a      	cmp	r6, #10
 800512c:	d104      	bne.n	8005138 <__swbuf_r+0x64>
 800512e:	4621      	mov	r1, r4
 8005130:	4628      	mov	r0, r5
 8005132:	f7ff fde5 	bl	8004d00 <_fflush_r>
 8005136:	b938      	cbnz	r0, 8005148 <__swbuf_r+0x74>
 8005138:	4638      	mov	r0, r7
 800513a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800513c:	4621      	mov	r1, r4
 800513e:	4628      	mov	r0, r5
 8005140:	f000 f806 	bl	8005150 <__swsetup_r>
 8005144:	2800      	cmp	r0, #0
 8005146:	d0d5      	beq.n	80050f4 <__swbuf_r+0x20>
 8005148:	f04f 37ff 	mov.w	r7, #4294967295
 800514c:	e7f4      	b.n	8005138 <__swbuf_r+0x64>
	...

08005150 <__swsetup_r>:
 8005150:	b538      	push	{r3, r4, r5, lr}
 8005152:	4b2a      	ldr	r3, [pc, #168]	; (80051fc <__swsetup_r+0xac>)
 8005154:	4605      	mov	r5, r0
 8005156:	6818      	ldr	r0, [r3, #0]
 8005158:	460c      	mov	r4, r1
 800515a:	b118      	cbz	r0, 8005164 <__swsetup_r+0x14>
 800515c:	6a03      	ldr	r3, [r0, #32]
 800515e:	b90b      	cbnz	r3, 8005164 <__swsetup_r+0x14>
 8005160:	f7ff f824 	bl	80041ac <__sinit>
 8005164:	89a3      	ldrh	r3, [r4, #12]
 8005166:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800516a:	0718      	lsls	r0, r3, #28
 800516c:	d422      	bmi.n	80051b4 <__swsetup_r+0x64>
 800516e:	06d9      	lsls	r1, r3, #27
 8005170:	d407      	bmi.n	8005182 <__swsetup_r+0x32>
 8005172:	2309      	movs	r3, #9
 8005174:	602b      	str	r3, [r5, #0]
 8005176:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800517a:	f04f 30ff 	mov.w	r0, #4294967295
 800517e:	81a3      	strh	r3, [r4, #12]
 8005180:	e034      	b.n	80051ec <__swsetup_r+0x9c>
 8005182:	0758      	lsls	r0, r3, #29
 8005184:	d512      	bpl.n	80051ac <__swsetup_r+0x5c>
 8005186:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005188:	b141      	cbz	r1, 800519c <__swsetup_r+0x4c>
 800518a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800518e:	4299      	cmp	r1, r3
 8005190:	d002      	beq.n	8005198 <__swsetup_r+0x48>
 8005192:	4628      	mov	r0, r5
 8005194:	f7ff f94a 	bl	800442c <_free_r>
 8005198:	2300      	movs	r3, #0
 800519a:	6363      	str	r3, [r4, #52]	; 0x34
 800519c:	89a3      	ldrh	r3, [r4, #12]
 800519e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80051a2:	81a3      	strh	r3, [r4, #12]
 80051a4:	2300      	movs	r3, #0
 80051a6:	6063      	str	r3, [r4, #4]
 80051a8:	6923      	ldr	r3, [r4, #16]
 80051aa:	6023      	str	r3, [r4, #0]
 80051ac:	89a3      	ldrh	r3, [r4, #12]
 80051ae:	f043 0308 	orr.w	r3, r3, #8
 80051b2:	81a3      	strh	r3, [r4, #12]
 80051b4:	6923      	ldr	r3, [r4, #16]
 80051b6:	b94b      	cbnz	r3, 80051cc <__swsetup_r+0x7c>
 80051b8:	89a3      	ldrh	r3, [r4, #12]
 80051ba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80051be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051c2:	d003      	beq.n	80051cc <__swsetup_r+0x7c>
 80051c4:	4621      	mov	r1, r4
 80051c6:	4628      	mov	r0, r5
 80051c8:	f000 f88b 	bl	80052e2 <__smakebuf_r>
 80051cc:	89a0      	ldrh	r0, [r4, #12]
 80051ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80051d2:	f010 0301 	ands.w	r3, r0, #1
 80051d6:	d00a      	beq.n	80051ee <__swsetup_r+0x9e>
 80051d8:	2300      	movs	r3, #0
 80051da:	60a3      	str	r3, [r4, #8]
 80051dc:	6963      	ldr	r3, [r4, #20]
 80051de:	425b      	negs	r3, r3
 80051e0:	61a3      	str	r3, [r4, #24]
 80051e2:	6923      	ldr	r3, [r4, #16]
 80051e4:	b943      	cbnz	r3, 80051f8 <__swsetup_r+0xa8>
 80051e6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80051ea:	d1c4      	bne.n	8005176 <__swsetup_r+0x26>
 80051ec:	bd38      	pop	{r3, r4, r5, pc}
 80051ee:	0781      	lsls	r1, r0, #30
 80051f0:	bf58      	it	pl
 80051f2:	6963      	ldrpl	r3, [r4, #20]
 80051f4:	60a3      	str	r3, [r4, #8]
 80051f6:	e7f4      	b.n	80051e2 <__swsetup_r+0x92>
 80051f8:	2000      	movs	r0, #0
 80051fa:	e7f7      	b.n	80051ec <__swsetup_r+0x9c>
 80051fc:	20000074 	.word	0x20000074

08005200 <_raise_r>:
 8005200:	291f      	cmp	r1, #31
 8005202:	b538      	push	{r3, r4, r5, lr}
 8005204:	4604      	mov	r4, r0
 8005206:	460d      	mov	r5, r1
 8005208:	d904      	bls.n	8005214 <_raise_r+0x14>
 800520a:	2316      	movs	r3, #22
 800520c:	6003      	str	r3, [r0, #0]
 800520e:	f04f 30ff 	mov.w	r0, #4294967295
 8005212:	bd38      	pop	{r3, r4, r5, pc}
 8005214:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005216:	b112      	cbz	r2, 800521e <_raise_r+0x1e>
 8005218:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800521c:	b94b      	cbnz	r3, 8005232 <_raise_r+0x32>
 800521e:	4620      	mov	r0, r4
 8005220:	f000 f830 	bl	8005284 <_getpid_r>
 8005224:	462a      	mov	r2, r5
 8005226:	4601      	mov	r1, r0
 8005228:	4620      	mov	r0, r4
 800522a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800522e:	f000 b817 	b.w	8005260 <_kill_r>
 8005232:	2b01      	cmp	r3, #1
 8005234:	d00a      	beq.n	800524c <_raise_r+0x4c>
 8005236:	1c59      	adds	r1, r3, #1
 8005238:	d103      	bne.n	8005242 <_raise_r+0x42>
 800523a:	2316      	movs	r3, #22
 800523c:	6003      	str	r3, [r0, #0]
 800523e:	2001      	movs	r0, #1
 8005240:	e7e7      	b.n	8005212 <_raise_r+0x12>
 8005242:	2400      	movs	r4, #0
 8005244:	4628      	mov	r0, r5
 8005246:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800524a:	4798      	blx	r3
 800524c:	2000      	movs	r0, #0
 800524e:	e7e0      	b.n	8005212 <_raise_r+0x12>

08005250 <raise>:
 8005250:	4b02      	ldr	r3, [pc, #8]	; (800525c <raise+0xc>)
 8005252:	4601      	mov	r1, r0
 8005254:	6818      	ldr	r0, [r3, #0]
 8005256:	f7ff bfd3 	b.w	8005200 <_raise_r>
 800525a:	bf00      	nop
 800525c:	20000074 	.word	0x20000074

08005260 <_kill_r>:
 8005260:	b538      	push	{r3, r4, r5, lr}
 8005262:	2300      	movs	r3, #0
 8005264:	4d06      	ldr	r5, [pc, #24]	; (8005280 <_kill_r+0x20>)
 8005266:	4604      	mov	r4, r0
 8005268:	4608      	mov	r0, r1
 800526a:	4611      	mov	r1, r2
 800526c:	602b      	str	r3, [r5, #0]
 800526e:	f7fc fb08 	bl	8001882 <_kill>
 8005272:	1c43      	adds	r3, r0, #1
 8005274:	d102      	bne.n	800527c <_kill_r+0x1c>
 8005276:	682b      	ldr	r3, [r5, #0]
 8005278:	b103      	cbz	r3, 800527c <_kill_r+0x1c>
 800527a:	6023      	str	r3, [r4, #0]
 800527c:	bd38      	pop	{r3, r4, r5, pc}
 800527e:	bf00      	nop
 8005280:	20000ea0 	.word	0x20000ea0

08005284 <_getpid_r>:
 8005284:	f7fc baf6 	b.w	8001874 <_getpid>

08005288 <_malloc_usable_size_r>:
 8005288:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800528c:	1f18      	subs	r0, r3, #4
 800528e:	2b00      	cmp	r3, #0
 8005290:	bfbc      	itt	lt
 8005292:	580b      	ldrlt	r3, [r1, r0]
 8005294:	18c0      	addlt	r0, r0, r3
 8005296:	4770      	bx	lr

08005298 <__swhatbuf_r>:
 8005298:	b570      	push	{r4, r5, r6, lr}
 800529a:	460c      	mov	r4, r1
 800529c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052a0:	4615      	mov	r5, r2
 80052a2:	2900      	cmp	r1, #0
 80052a4:	461e      	mov	r6, r3
 80052a6:	b096      	sub	sp, #88	; 0x58
 80052a8:	da0c      	bge.n	80052c4 <__swhatbuf_r+0x2c>
 80052aa:	89a3      	ldrh	r3, [r4, #12]
 80052ac:	2100      	movs	r1, #0
 80052ae:	f013 0f80 	tst.w	r3, #128	; 0x80
 80052b2:	bf0c      	ite	eq
 80052b4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80052b8:	2340      	movne	r3, #64	; 0x40
 80052ba:	2000      	movs	r0, #0
 80052bc:	6031      	str	r1, [r6, #0]
 80052be:	602b      	str	r3, [r5, #0]
 80052c0:	b016      	add	sp, #88	; 0x58
 80052c2:	bd70      	pop	{r4, r5, r6, pc}
 80052c4:	466a      	mov	r2, sp
 80052c6:	f000 f849 	bl	800535c <_fstat_r>
 80052ca:	2800      	cmp	r0, #0
 80052cc:	dbed      	blt.n	80052aa <__swhatbuf_r+0x12>
 80052ce:	9901      	ldr	r1, [sp, #4]
 80052d0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80052d4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80052d8:	4259      	negs	r1, r3
 80052da:	4159      	adcs	r1, r3
 80052dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052e0:	e7eb      	b.n	80052ba <__swhatbuf_r+0x22>

080052e2 <__smakebuf_r>:
 80052e2:	898b      	ldrh	r3, [r1, #12]
 80052e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80052e6:	079d      	lsls	r5, r3, #30
 80052e8:	4606      	mov	r6, r0
 80052ea:	460c      	mov	r4, r1
 80052ec:	d507      	bpl.n	80052fe <__smakebuf_r+0x1c>
 80052ee:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80052f2:	6023      	str	r3, [r4, #0]
 80052f4:	6123      	str	r3, [r4, #16]
 80052f6:	2301      	movs	r3, #1
 80052f8:	6163      	str	r3, [r4, #20]
 80052fa:	b002      	add	sp, #8
 80052fc:	bd70      	pop	{r4, r5, r6, pc}
 80052fe:	466a      	mov	r2, sp
 8005300:	ab01      	add	r3, sp, #4
 8005302:	f7ff ffc9 	bl	8005298 <__swhatbuf_r>
 8005306:	9900      	ldr	r1, [sp, #0]
 8005308:	4605      	mov	r5, r0
 800530a:	4630      	mov	r0, r6
 800530c:	f7ff f8fe 	bl	800450c <_malloc_r>
 8005310:	b948      	cbnz	r0, 8005326 <__smakebuf_r+0x44>
 8005312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005316:	059a      	lsls	r2, r3, #22
 8005318:	d4ef      	bmi.n	80052fa <__smakebuf_r+0x18>
 800531a:	f023 0303 	bic.w	r3, r3, #3
 800531e:	f043 0302 	orr.w	r3, r3, #2
 8005322:	81a3      	strh	r3, [r4, #12]
 8005324:	e7e3      	b.n	80052ee <__smakebuf_r+0xc>
 8005326:	89a3      	ldrh	r3, [r4, #12]
 8005328:	6020      	str	r0, [r4, #0]
 800532a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800532e:	81a3      	strh	r3, [r4, #12]
 8005330:	9b00      	ldr	r3, [sp, #0]
 8005332:	6120      	str	r0, [r4, #16]
 8005334:	6163      	str	r3, [r4, #20]
 8005336:	9b01      	ldr	r3, [sp, #4]
 8005338:	b15b      	cbz	r3, 8005352 <__smakebuf_r+0x70>
 800533a:	4630      	mov	r0, r6
 800533c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005340:	f000 f81e 	bl	8005380 <_isatty_r>
 8005344:	b128      	cbz	r0, 8005352 <__smakebuf_r+0x70>
 8005346:	89a3      	ldrh	r3, [r4, #12]
 8005348:	f023 0303 	bic.w	r3, r3, #3
 800534c:	f043 0301 	orr.w	r3, r3, #1
 8005350:	81a3      	strh	r3, [r4, #12]
 8005352:	89a3      	ldrh	r3, [r4, #12]
 8005354:	431d      	orrs	r5, r3
 8005356:	81a5      	strh	r5, [r4, #12]
 8005358:	e7cf      	b.n	80052fa <__smakebuf_r+0x18>
	...

0800535c <_fstat_r>:
 800535c:	b538      	push	{r3, r4, r5, lr}
 800535e:	2300      	movs	r3, #0
 8005360:	4d06      	ldr	r5, [pc, #24]	; (800537c <_fstat_r+0x20>)
 8005362:	4604      	mov	r4, r0
 8005364:	4608      	mov	r0, r1
 8005366:	4611      	mov	r1, r2
 8005368:	602b      	str	r3, [r5, #0]
 800536a:	f7fc fae8 	bl	800193e <_fstat>
 800536e:	1c43      	adds	r3, r0, #1
 8005370:	d102      	bne.n	8005378 <_fstat_r+0x1c>
 8005372:	682b      	ldr	r3, [r5, #0]
 8005374:	b103      	cbz	r3, 8005378 <_fstat_r+0x1c>
 8005376:	6023      	str	r3, [r4, #0]
 8005378:	bd38      	pop	{r3, r4, r5, pc}
 800537a:	bf00      	nop
 800537c:	20000ea0 	.word	0x20000ea0

08005380 <_isatty_r>:
 8005380:	b538      	push	{r3, r4, r5, lr}
 8005382:	2300      	movs	r3, #0
 8005384:	4d05      	ldr	r5, [pc, #20]	; (800539c <_isatty_r+0x1c>)
 8005386:	4604      	mov	r4, r0
 8005388:	4608      	mov	r0, r1
 800538a:	602b      	str	r3, [r5, #0]
 800538c:	f7fc fae6 	bl	800195c <_isatty>
 8005390:	1c43      	adds	r3, r0, #1
 8005392:	d102      	bne.n	800539a <_isatty_r+0x1a>
 8005394:	682b      	ldr	r3, [r5, #0]
 8005396:	b103      	cbz	r3, 800539a <_isatty_r+0x1a>
 8005398:	6023      	str	r3, [r4, #0]
 800539a:	bd38      	pop	{r3, r4, r5, pc}
 800539c:	20000ea0 	.word	0x20000ea0

080053a0 <_init>:
 80053a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053a2:	bf00      	nop
 80053a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053a6:	bc08      	pop	{r3}
 80053a8:	469e      	mov	lr, r3
 80053aa:	4770      	bx	lr

080053ac <_fini>:
 80053ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ae:	bf00      	nop
 80053b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053b2:	bc08      	pop	{r3}
 80053b4:	469e      	mov	lr, r3
 80053b6:	4770      	bx	lr
