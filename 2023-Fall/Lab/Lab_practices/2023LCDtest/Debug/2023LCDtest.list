
2023LCDtest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a34  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003034  08009c1c  08009c1c  00019c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc50  0800cc50  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  0800cc50  0800cc50  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cc50  0800cc50  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc50  0800cc50  0001cc50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc54  0800cc54  0001cc54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800cc58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20000060  0800ccb8  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  0800ccb8  000201f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007f27  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dd9  00000000  00000000  00027ff3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007a0  00000000  00000000  00029dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000597  00000000  00000000  0002a570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a03e  00000000  00000000  0002ab07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b57b  00000000  00000000  00044b45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091bce  00000000  00000000  000500c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002270  00000000  00000000  000e1c90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000e3f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000060 	.word	0x20000060
 8000204:	00000000 	.word	0x00000000
 8000208:	08009c04 	.word	0x08009c04

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000064 	.word	0x20000064
 8000224:	08009c04 	.word	0x08009c04

08000228 <__aeabi_dmul>:
 8000228:	b570      	push	{r4, r5, r6, lr}
 800022a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800022e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000232:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000236:	bf1d      	ittte	ne
 8000238:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800023c:	ea94 0f0c 	teqne	r4, ip
 8000240:	ea95 0f0c 	teqne	r5, ip
 8000244:	f000 f8de 	bleq	8000404 <__aeabi_dmul+0x1dc>
 8000248:	442c      	add	r4, r5
 800024a:	ea81 0603 	eor.w	r6, r1, r3
 800024e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000252:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000256:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800025a:	bf18      	it	ne
 800025c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000260:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000264:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000268:	d038      	beq.n	80002dc <__aeabi_dmul+0xb4>
 800026a:	fba0 ce02 	umull	ip, lr, r0, r2
 800026e:	f04f 0500 	mov.w	r5, #0
 8000272:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000276:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800027a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800027e:	f04f 0600 	mov.w	r6, #0
 8000282:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000286:	f09c 0f00 	teq	ip, #0
 800028a:	bf18      	it	ne
 800028c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000290:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000294:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000298:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800029c:	d204      	bcs.n	80002a8 <__aeabi_dmul+0x80>
 800029e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002a2:	416d      	adcs	r5, r5
 80002a4:	eb46 0606 	adc.w	r6, r6, r6
 80002a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002c0:	bf88      	it	hi
 80002c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002c6:	d81e      	bhi.n	8000306 <__aeabi_dmul+0xde>
 80002c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002cc:	bf08      	it	eq
 80002ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002d2:	f150 0000 	adcs.w	r0, r0, #0
 80002d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002da:	bd70      	pop	{r4, r5, r6, pc}
 80002dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002e0:	ea46 0101 	orr.w	r1, r6, r1
 80002e4:	ea40 0002 	orr.w	r0, r0, r2
 80002e8:	ea81 0103 	eor.w	r1, r1, r3
 80002ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f0:	bfc2      	ittt	gt
 80002f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002fa:	bd70      	popgt	{r4, r5, r6, pc}
 80002fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000300:	f04f 0e00 	mov.w	lr, #0
 8000304:	3c01      	subs	r4, #1
 8000306:	f300 80ab 	bgt.w	8000460 <__aeabi_dmul+0x238>
 800030a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800030e:	bfde      	ittt	le
 8000310:	2000      	movle	r0, #0
 8000312:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000316:	bd70      	pople	{r4, r5, r6, pc}
 8000318:	f1c4 0400 	rsb	r4, r4, #0
 800031c:	3c20      	subs	r4, #32
 800031e:	da35      	bge.n	800038c <__aeabi_dmul+0x164>
 8000320:	340c      	adds	r4, #12
 8000322:	dc1b      	bgt.n	800035c <__aeabi_dmul+0x134>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0520 	rsb	r5, r4, #32
 800032c:	fa00 f305 	lsl.w	r3, r0, r5
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f205 	lsl.w	r2, r1, r5
 8000338:	ea40 0002 	orr.w	r0, r0, r2
 800033c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000340:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000344:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000348:	fa21 f604 	lsr.w	r6, r1, r4
 800034c:	eb42 0106 	adc.w	r1, r2, r6
 8000350:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000354:	bf08      	it	eq
 8000356:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	f1c4 040c 	rsb	r4, r4, #12
 8000360:	f1c4 0520 	rsb	r5, r4, #32
 8000364:	fa00 f304 	lsl.w	r3, r0, r4
 8000368:	fa20 f005 	lsr.w	r0, r0, r5
 800036c:	fa01 f204 	lsl.w	r2, r1, r4
 8000370:	ea40 0002 	orr.w	r0, r0, r2
 8000374:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000378:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000384:	bf08      	it	eq
 8000386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f1c4 0520 	rsb	r5, r4, #32
 8000390:	fa00 f205 	lsl.w	r2, r0, r5
 8000394:	ea4e 0e02 	orr.w	lr, lr, r2
 8000398:	fa20 f304 	lsr.w	r3, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea43 0302 	orr.w	r3, r3, r2
 80003a4:	fa21 f004 	lsr.w	r0, r1, r4
 80003a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	fa21 f204 	lsr.w	r2, r1, r4
 80003b0:	ea20 0002 	bic.w	r0, r0, r2
 80003b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f094 0f00 	teq	r4, #0
 80003c8:	d10f      	bne.n	80003ea <__aeabi_dmul+0x1c2>
 80003ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003ce:	0040      	lsls	r0, r0, #1
 80003d0:	eb41 0101 	adc.w	r1, r1, r1
 80003d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3c01      	subeq	r4, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1a6>
 80003de:	ea41 0106 	orr.w	r1, r1, r6
 80003e2:	f095 0f00 	teq	r5, #0
 80003e6:	bf18      	it	ne
 80003e8:	4770      	bxne	lr
 80003ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ee:	0052      	lsls	r2, r2, #1
 80003f0:	eb43 0303 	adc.w	r3, r3, r3
 80003f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003f8:	bf08      	it	eq
 80003fa:	3d01      	subeq	r5, #1
 80003fc:	d0f7      	beq.n	80003ee <__aeabi_dmul+0x1c6>
 80003fe:	ea43 0306 	orr.w	r3, r3, r6
 8000402:	4770      	bx	lr
 8000404:	ea94 0f0c 	teq	r4, ip
 8000408:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800040c:	bf18      	it	ne
 800040e:	ea95 0f0c 	teqne	r5, ip
 8000412:	d00c      	beq.n	800042e <__aeabi_dmul+0x206>
 8000414:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000418:	bf18      	it	ne
 800041a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041e:	d1d1      	bne.n	80003c4 <__aeabi_dmul+0x19c>
 8000420:	ea81 0103 	eor.w	r1, r1, r3
 8000424:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd70      	pop	{r4, r5, r6, pc}
 800042e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000432:	bf06      	itte	eq
 8000434:	4610      	moveq	r0, r2
 8000436:	4619      	moveq	r1, r3
 8000438:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800043c:	d019      	beq.n	8000472 <__aeabi_dmul+0x24a>
 800043e:	ea94 0f0c 	teq	r4, ip
 8000442:	d102      	bne.n	800044a <__aeabi_dmul+0x222>
 8000444:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000448:	d113      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800044a:	ea95 0f0c 	teq	r5, ip
 800044e:	d105      	bne.n	800045c <__aeabi_dmul+0x234>
 8000450:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000454:	bf1c      	itt	ne
 8000456:	4610      	movne	r0, r2
 8000458:	4619      	movne	r1, r3
 800045a:	d10a      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800045c:	ea81 0103 	eor.w	r1, r1, r3
 8000460:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000464:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd70      	pop	{r4, r5, r6, pc}
 8000472:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000476:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800047a:	bd70      	pop	{r4, r5, r6, pc}

0800047c <__aeabi_drsub>:
 800047c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000480:	e002      	b.n	8000488 <__adddf3>
 8000482:	bf00      	nop

08000484 <__aeabi_dsub>:
 8000484:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000488 <__adddf3>:
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800048e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000492:	ea94 0f05 	teq	r4, r5
 8000496:	bf08      	it	eq
 8000498:	ea90 0f02 	teqeq	r0, r2
 800049c:	bf1f      	itttt	ne
 800049e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ae:	f000 80e2 	beq.w	8000676 <__adddf3+0x1ee>
 80004b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ba:	bfb8      	it	lt
 80004bc:	426d      	neglt	r5, r5
 80004be:	dd0c      	ble.n	80004da <__adddf3+0x52>
 80004c0:	442c      	add	r4, r5
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	ea82 0000 	eor.w	r0, r2, r0
 80004ce:	ea83 0101 	eor.w	r1, r3, r1
 80004d2:	ea80 0202 	eor.w	r2, r0, r2
 80004d6:	ea81 0303 	eor.w	r3, r1, r3
 80004da:	2d36      	cmp	r5, #54	; 0x36
 80004dc:	bf88      	it	hi
 80004de:	bd30      	pophi	{r4, r5, pc}
 80004e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f0:	d002      	beq.n	80004f8 <__adddf3+0x70>
 80004f2:	4240      	negs	r0, r0
 80004f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000500:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000504:	d002      	beq.n	800050c <__adddf3+0x84>
 8000506:	4252      	negs	r2, r2
 8000508:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800050c:	ea94 0f05 	teq	r4, r5
 8000510:	f000 80a7 	beq.w	8000662 <__adddf3+0x1da>
 8000514:	f1a4 0401 	sub.w	r4, r4, #1
 8000518:	f1d5 0e20 	rsbs	lr, r5, #32
 800051c:	db0d      	blt.n	800053a <__adddf3+0xb2>
 800051e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000522:	fa22 f205 	lsr.w	r2, r2, r5
 8000526:	1880      	adds	r0, r0, r2
 8000528:	f141 0100 	adc.w	r1, r1, #0
 800052c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000530:	1880      	adds	r0, r0, r2
 8000532:	fa43 f305 	asr.w	r3, r3, r5
 8000536:	4159      	adcs	r1, r3
 8000538:	e00e      	b.n	8000558 <__adddf3+0xd0>
 800053a:	f1a5 0520 	sub.w	r5, r5, #32
 800053e:	f10e 0e20 	add.w	lr, lr, #32
 8000542:	2a01      	cmp	r2, #1
 8000544:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000548:	bf28      	it	cs
 800054a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800054e:	fa43 f305 	asr.w	r3, r3, r5
 8000552:	18c0      	adds	r0, r0, r3
 8000554:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	d507      	bpl.n	800056e <__adddf3+0xe6>
 800055e:	f04f 0e00 	mov.w	lr, #0
 8000562:	f1dc 0c00 	rsbs	ip, ip, #0
 8000566:	eb7e 0000 	sbcs.w	r0, lr, r0
 800056a:	eb6e 0101 	sbc.w	r1, lr, r1
 800056e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000572:	d31b      	bcc.n	80005ac <__adddf3+0x124>
 8000574:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000578:	d30c      	bcc.n	8000594 <__adddf3+0x10c>
 800057a:	0849      	lsrs	r1, r1, #1
 800057c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000580:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000584:	f104 0401 	add.w	r4, r4, #1
 8000588:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800058c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000590:	f080 809a 	bcs.w	80006c8 <__adddf3+0x240>
 8000594:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000598:	bf08      	it	eq
 800059a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800059e:	f150 0000 	adcs.w	r0, r0, #0
 80005a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a6:	ea41 0105 	orr.w	r1, r1, r5
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b0:	4140      	adcs	r0, r0
 80005b2:	eb41 0101 	adc.w	r1, r1, r1
 80005b6:	3c01      	subs	r4, #1
 80005b8:	bf28      	it	cs
 80005ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005be:	d2e9      	bcs.n	8000594 <__adddf3+0x10c>
 80005c0:	f091 0f00 	teq	r1, #0
 80005c4:	bf04      	itt	eq
 80005c6:	4601      	moveq	r1, r0
 80005c8:	2000      	moveq	r0, #0
 80005ca:	fab1 f381 	clz	r3, r1
 80005ce:	bf08      	it	eq
 80005d0:	3320      	addeq	r3, #32
 80005d2:	f1a3 030b 	sub.w	r3, r3, #11
 80005d6:	f1b3 0220 	subs.w	r2, r3, #32
 80005da:	da0c      	bge.n	80005f6 <__adddf3+0x16e>
 80005dc:	320c      	adds	r2, #12
 80005de:	dd08      	ble.n	80005f2 <__adddf3+0x16a>
 80005e0:	f102 0c14 	add.w	ip, r2, #20
 80005e4:	f1c2 020c 	rsb	r2, r2, #12
 80005e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ec:	fa21 f102 	lsr.w	r1, r1, r2
 80005f0:	e00c      	b.n	800060c <__adddf3+0x184>
 80005f2:	f102 0214 	add.w	r2, r2, #20
 80005f6:	bfd8      	it	le
 80005f8:	f1c2 0c20 	rsble	ip, r2, #32
 80005fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000600:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000604:	bfdc      	itt	le
 8000606:	ea41 010c 	orrle.w	r1, r1, ip
 800060a:	4090      	lslle	r0, r2
 800060c:	1ae4      	subs	r4, r4, r3
 800060e:	bfa2      	ittt	ge
 8000610:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000614:	4329      	orrge	r1, r5
 8000616:	bd30      	popge	{r4, r5, pc}
 8000618:	ea6f 0404 	mvn.w	r4, r4
 800061c:	3c1f      	subs	r4, #31
 800061e:	da1c      	bge.n	800065a <__adddf3+0x1d2>
 8000620:	340c      	adds	r4, #12
 8000622:	dc0e      	bgt.n	8000642 <__adddf3+0x1ba>
 8000624:	f104 0414 	add.w	r4, r4, #20
 8000628:	f1c4 0220 	rsb	r2, r4, #32
 800062c:	fa20 f004 	lsr.w	r0, r0, r4
 8000630:	fa01 f302 	lsl.w	r3, r1, r2
 8000634:	ea40 0003 	orr.w	r0, r0, r3
 8000638:	fa21 f304 	lsr.w	r3, r1, r4
 800063c:	ea45 0103 	orr.w	r1, r5, r3
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f1c4 040c 	rsb	r4, r4, #12
 8000646:	f1c4 0220 	rsb	r2, r4, #32
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 f304 	lsl.w	r3, r1, r4
 8000652:	ea40 0003 	orr.w	r0, r0, r3
 8000656:	4629      	mov	r1, r5
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	fa21 f004 	lsr.w	r0, r1, r4
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	f094 0f00 	teq	r4, #0
 8000666:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800066a:	bf06      	itte	eq
 800066c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000670:	3401      	addeq	r4, #1
 8000672:	3d01      	subne	r5, #1
 8000674:	e74e      	b.n	8000514 <__adddf3+0x8c>
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf18      	it	ne
 800067c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000680:	d029      	beq.n	80006d6 <__adddf3+0x24e>
 8000682:	ea94 0f05 	teq	r4, r5
 8000686:	bf08      	it	eq
 8000688:	ea90 0f02 	teqeq	r0, r2
 800068c:	d005      	beq.n	800069a <__adddf3+0x212>
 800068e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000692:	bf04      	itt	eq
 8000694:	4619      	moveq	r1, r3
 8000696:	4610      	moveq	r0, r2
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	ea91 0f03 	teq	r1, r3
 800069e:	bf1e      	ittt	ne
 80006a0:	2100      	movne	r1, #0
 80006a2:	2000      	movne	r0, #0
 80006a4:	bd30      	popne	{r4, r5, pc}
 80006a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006aa:	d105      	bne.n	80006b8 <__adddf3+0x230>
 80006ac:	0040      	lsls	r0, r0, #1
 80006ae:	4149      	adcs	r1, r1
 80006b0:	bf28      	it	cs
 80006b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd30      	pop	{r4, r5, pc}
 80006b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006bc:	bf3c      	itt	cc
 80006be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006c2:	bd30      	popcc	{r4, r5, pc}
 80006c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd30      	pop	{r4, r5, pc}
 80006d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006da:	bf1a      	itte	ne
 80006dc:	4619      	movne	r1, r3
 80006de:	4610      	movne	r0, r2
 80006e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006e4:	bf1c      	itt	ne
 80006e6:	460b      	movne	r3, r1
 80006e8:	4602      	movne	r2, r0
 80006ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ee:	bf06      	itte	eq
 80006f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006f4:	ea91 0f03 	teqeq	r1, r3
 80006f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006fc:	bd30      	pop	{r4, r5, pc}
 80006fe:	bf00      	nop

08000700 <__aeabi_ui2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000714:	f04f 0500 	mov.w	r5, #0
 8000718:	f04f 0100 	mov.w	r1, #0
 800071c:	e750      	b.n	80005c0 <__adddf3+0x138>
 800071e:	bf00      	nop

08000720 <__aeabi_i2d>:
 8000720:	f090 0f00 	teq	r0, #0
 8000724:	bf04      	itt	eq
 8000726:	2100      	moveq	r1, #0
 8000728:	4770      	bxeq	lr
 800072a:	b530      	push	{r4, r5, lr}
 800072c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000730:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000734:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000738:	bf48      	it	mi
 800073a:	4240      	negmi	r0, r0
 800073c:	f04f 0100 	mov.w	r1, #0
 8000740:	e73e      	b.n	80005c0 <__adddf3+0x138>
 8000742:	bf00      	nop

08000744 <__aeabi_f2d>:
 8000744:	0042      	lsls	r2, r0, #1
 8000746:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800074a:	ea4f 0131 	mov.w	r1, r1, rrx
 800074e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000752:	bf1f      	itttt	ne
 8000754:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000758:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800075c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000760:	4770      	bxne	lr
 8000762:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000766:	bf08      	it	eq
 8000768:	4770      	bxeq	lr
 800076a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800076e:	bf04      	itt	eq
 8000770:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000774:	4770      	bxeq	lr
 8000776:	b530      	push	{r4, r5, lr}
 8000778:	f44f 7460 	mov.w	r4, #896	; 0x380
 800077c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	e71c      	b.n	80005c0 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_ul2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f04f 0500 	mov.w	r5, #0
 8000796:	e00a      	b.n	80007ae <__aeabi_l2d+0x16>

08000798 <__aeabi_l2d>:
 8000798:	ea50 0201 	orrs.w	r2, r0, r1
 800079c:	bf08      	it	eq
 800079e:	4770      	bxeq	lr
 80007a0:	b530      	push	{r4, r5, lr}
 80007a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007a6:	d502      	bpl.n	80007ae <__aeabi_l2d+0x16>
 80007a8:	4240      	negs	r0, r0
 80007aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ba:	f43f aed8 	beq.w	800056e <__adddf3+0xe6>
 80007be:	f04f 0203 	mov.w	r2, #3
 80007c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007c6:	bf18      	it	ne
 80007c8:	3203      	addne	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007d6:	f1c2 0320 	rsb	r3, r2, #32
 80007da:	fa00 fc03 	lsl.w	ip, r0, r3
 80007de:	fa20 f002 	lsr.w	r0, r0, r2
 80007e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007e6:	ea40 000e 	orr.w	r0, r0, lr
 80007ea:	fa21 f102 	lsr.w	r1, r1, r2
 80007ee:	4414      	add	r4, r2
 80007f0:	e6bd      	b.n	800056e <__adddf3+0xe6>
 80007f2:	bf00      	nop

080007f4 <__aeabi_d2uiz>:
 80007f4:	004a      	lsls	r2, r1, #1
 80007f6:	d211      	bcs.n	800081c <__aeabi_d2uiz+0x28>
 80007f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007fc:	d211      	bcs.n	8000822 <__aeabi_d2uiz+0x2e>
 80007fe:	d50d      	bpl.n	800081c <__aeabi_d2uiz+0x28>
 8000800:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000804:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000808:	d40e      	bmi.n	8000828 <__aeabi_d2uiz+0x34>
 800080a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800080e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000812:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000816:	fa23 f002 	lsr.w	r0, r3, r2
 800081a:	4770      	bx	lr
 800081c:	f04f 0000 	mov.w	r0, #0
 8000820:	4770      	bx	lr
 8000822:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000826:	d102      	bne.n	800082e <__aeabi_d2uiz+0x3a>
 8000828:	f04f 30ff 	mov.w	r0, #4294967295
 800082c:	4770      	bx	lr
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	4770      	bx	lr

08000834 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000834:	b480      	push	{r7}
 8000836:	b085      	sub	sp, #20
 8000838:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083a:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_GPIO_Init+0x58>)
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	4a13      	ldr	r2, [pc, #76]	; (800088c <MX_GPIO_Init+0x58>)
 8000840:	f043 0310 	orr.w	r3, r3, #16
 8000844:	6193      	str	r3, [r2, #24]
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_GPIO_Init+0x58>)
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	f003 0310 	and.w	r3, r3, #16
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_GPIO_Init+0x58>)
 8000854:	699b      	ldr	r3, [r3, #24]
 8000856:	4a0d      	ldr	r2, [pc, #52]	; (800088c <MX_GPIO_Init+0x58>)
 8000858:	f043 0320 	orr.w	r3, r3, #32
 800085c:	6193      	str	r3, [r2, #24]
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <MX_GPIO_Init+0x58>)
 8000860:	699b      	ldr	r3, [r3, #24]
 8000862:	f003 0320 	and.w	r3, r3, #32
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	4b08      	ldr	r3, [pc, #32]	; (800088c <MX_GPIO_Init+0x58>)
 800086c:	699b      	ldr	r3, [r3, #24]
 800086e:	4a07      	ldr	r2, [pc, #28]	; (800088c <MX_GPIO_Init+0x58>)
 8000870:	f043 0304 	orr.w	r3, r3, #4
 8000874:	6193      	str	r3, [r2, #24]
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <MX_GPIO_Init+0x58>)
 8000878:	699b      	ldr	r3, [r3, #24]
 800087a:	f003 0304 	and.w	r3, r3, #4
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]

}
 8000882:	bf00      	nop
 8000884:	3714      	adds	r7, #20
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr
 800088c:	40021000 	.word	0x40021000

08000890 <lcd_wr_xdata>:
 *              ʡ����ռ�.
 * @param       data : Ҫд�������
 * @retval      ��
 */
void lcd_wr_xdata(uint16_t data)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	80fb      	strh	r3, [r7, #6]
    LCD_RS(1);
 800089a:	4b0d      	ldr	r3, [pc, #52]	; (80008d0 <lcd_wr_xdata+0x40>)
 800089c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008a0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <lcd_wr_xdata+0x40>)
 80008a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80008a8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(data);
 80008aa:	4a0a      	ldr	r2, [pc, #40]	; (80008d4 <lcd_wr_xdata+0x44>)
 80008ac:	88fb      	ldrh	r3, [r7, #6]
 80008ae:	60d3      	str	r3, [r2, #12]
    LCD_WR(0);
 80008b0:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <lcd_wr_xdata+0x40>)
 80008b2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80008b6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80008b8:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <lcd_wr_xdata+0x40>)
 80008ba:	2280      	movs	r2, #128	; 0x80
 80008bc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80008be:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <lcd_wr_xdata+0x40>)
 80008c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008c4:	611a      	str	r2, [r3, #16]
}
 80008c6:	bf00      	nop
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr
 80008d0:	40011000 	.word	0x40011000
 80008d4:	40010c00 	.word	0x40010c00

080008d8 <lcd_write_reg>:
 * @param       regno:�Ĵ������/��ַ
 * @param       data:Ҫд�������
 * @retval      ��
 */
void lcd_write_reg(uint16_t regno, uint16_t data)
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	460a      	mov	r2, r1
 80008e2:	80fb      	strh	r3, [r7, #6]
 80008e4:	4613      	mov	r3, r2
 80008e6:	80bb      	strh	r3, [r7, #4]
 80008e8:	88fb      	ldrh	r3, [r7, #6]
 80008ea:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80008ec:	4b19      	ldr	r3, [pc, #100]	; (8000954 <lcd_write_reg+0x7c>)
 80008ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80008f2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80008f4:	4b17      	ldr	r3, [pc, #92]	; (8000954 <lcd_write_reg+0x7c>)
 80008f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80008fa:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80008fc:	89fb      	ldrh	r3, [r7, #14]
 80008fe:	b29a      	uxth	r2, r3
 8000900:	4b15      	ldr	r3, [pc, #84]	; (8000958 <lcd_write_reg+0x80>)
 8000902:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000904:	4b13      	ldr	r3, [pc, #76]	; (8000954 <lcd_write_reg+0x7c>)
 8000906:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800090a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800090c:	4b11      	ldr	r3, [pc, #68]	; (8000954 <lcd_write_reg+0x7c>)
 800090e:	2280      	movs	r2, #128	; 0x80
 8000910:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000912:	4b10      	ldr	r3, [pc, #64]	; (8000954 <lcd_write_reg+0x7c>)
 8000914:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000918:	611a      	str	r2, [r3, #16]
}
 800091a:	bf00      	nop
    lcd_wr_regno(regno);    /* д��Ҫд�ļĴ������ */
    lcd_wr_data(data);      /* д������ */
 800091c:	4b0d      	ldr	r3, [pc, #52]	; (8000954 <lcd_write_reg+0x7c>)
 800091e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000922:	611a      	str	r2, [r3, #16]
 8000924:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <lcd_write_reg+0x7c>)
 8000926:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800092a:	611a      	str	r2, [r3, #16]
 800092c:	4a0a      	ldr	r2, [pc, #40]	; (8000958 <lcd_write_reg+0x80>)
 800092e:	88bb      	ldrh	r3, [r7, #4]
 8000930:	60d3      	str	r3, [r2, #12]
 8000932:	4b08      	ldr	r3, [pc, #32]	; (8000954 <lcd_write_reg+0x7c>)
 8000934:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000938:	611a      	str	r2, [r3, #16]
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <lcd_write_reg+0x7c>)
 800093c:	2280      	movs	r2, #128	; 0x80
 800093e:	611a      	str	r2, [r3, #16]
 8000940:	4b04      	ldr	r3, [pc, #16]	; (8000954 <lcd_write_reg+0x7c>)
 8000942:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000946:	611a      	str	r2, [r3, #16]
}
 8000948:	bf00      	nop
 800094a:	3714      	adds	r7, #20
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	40011000 	.word	0x40011000
 8000958:	40010c00 	.word	0x40010c00

0800095c <lcd_opt_delay>:
 * @brief       LCD��ʱ����,�����ڲ�����mdk -O1ʱ���Ż�ʱ��Ҫ���õĵط�
 * @param       t:��ʱ����ֵ
 * @retval      ��
 */
static void lcd_opt_delay(uint32_t i)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
    while (i--);
 8000964:	bf00      	nop
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	1e5a      	subs	r2, r3, #1
 800096a:	607a      	str	r2, [r7, #4]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d1fa      	bne.n	8000966 <lcd_opt_delay+0xa>
}
 8000970:	bf00      	nop
 8000972:	bf00      	nop
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr

0800097c <lcd_rd_data>:
 * @brief       LCD������
 * @param       ��
 * @retval      ��ȡ��������
 */
static uint16_t lcd_rd_data(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af00      	add	r7, sp, #0
    volatile uint16_t ram;  /* ��ֹ���Ż� */
    
    GPIO_InitTypeDef gpio_init_struct;
    /* LCD_DATA ����ģʽ����, ��������, ׼���������� */
    gpio_init_struct.Pin = LCD_DATA_GPIO_PIN;
 8000982:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000986:	607b      	str	r3, [r7, #4]
    gpio_init_struct.Mode = GPIO_MODE_INPUT;
 8000988:	2300      	movs	r3, #0
 800098a:	60bb      	str	r3, [r7, #8]
    gpio_init_struct.Pull = GPIO_PULLUP;
 800098c:	2301      	movs	r3, #1
 800098e:	60fb      	str	r3, [r7, #12]
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000990:	2303      	movs	r3, #3
 8000992:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(LCD_DATA_GPIO_PORT, &gpio_init_struct); 
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	4619      	mov	r1, r3
 8000998:	4818      	ldr	r0, [pc, #96]	; (80009fc <lcd_rd_data+0x80>)
 800099a:	f006 ff33 	bl	8007804 <HAL_GPIO_Init>

    LCD_RS(1);              /* RS=1,��ʾ�������� */
 800099e:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <lcd_rd_data+0x84>)
 80009a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009a4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80009a6:	4b16      	ldr	r3, [pc, #88]	; (8000a00 <lcd_rd_data+0x84>)
 80009a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80009ac:	611a      	str	r2, [r3, #16]
    LCD_RD(0);
 80009ae:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <lcd_rd_data+0x84>)
 80009b0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80009b4:	611a      	str	r2, [r3, #16]
    lcd_opt_delay(2);
 80009b6:	2002      	movs	r0, #2
 80009b8:	f7ff ffd0 	bl	800095c <lcd_opt_delay>
    ram = LCD_DATA_IN;      /* ��ȡ���� */
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <lcd_rd_data+0x80>)
 80009be:	689b      	ldr	r3, [r3, #8]
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	82fb      	strh	r3, [r7, #22]
    LCD_RD(1);
 80009c4:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <lcd_rd_data+0x84>)
 80009c6:	2240      	movs	r2, #64	; 0x40
 80009c8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80009ca:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <lcd_rd_data+0x84>)
 80009cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009d0:	611a      	str	r2, [r3, #16]
    
    /* LCD_DATA ����ģʽ����, �������, �ָ����״̬ */
    gpio_init_struct.Pin = LCD_DATA_GPIO_PIN;
 80009d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009d6:	607b      	str	r3, [r7, #4]
    gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d8:	2301      	movs	r3, #1
 80009da:	60bb      	str	r3, [r7, #8]
    gpio_init_struct.Pull = GPIO_PULLUP;
 80009dc:	2301      	movs	r3, #1
 80009de:	60fb      	str	r3, [r7, #12]
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009e0:	2303      	movs	r3, #3
 80009e2:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(LCD_DATA_GPIO_PORT, &gpio_init_struct);
 80009e4:	1d3b      	adds	r3, r7, #4
 80009e6:	4619      	mov	r1, r3
 80009e8:	4804      	ldr	r0, [pc, #16]	; (80009fc <lcd_rd_data+0x80>)
 80009ea:	f006 ff0b 	bl	8007804 <HAL_GPIO_Init>

    return ram;
 80009ee:	8afb      	ldrh	r3, [r7, #22]
 80009f0:	b29b      	uxth	r3, r3
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3718      	adds	r7, #24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40010c00 	.word	0x40010c00
 8000a00:	40011000 	.word	0x40011000

08000a04 <lcd_set_cursor>:
 * @brief       ���ù��λ��(��RGB����Ч)
 * @param       x,y: ����
 * @retval      ��
 */
void lcd_set_cursor(uint16_t x, uint16_t y)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b089      	sub	sp, #36	; 0x24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	460a      	mov	r2, r1
 8000a0e:	80fb      	strh	r3, [r7, #6]
 8000a10:	4613      	mov	r3, r2
 8000a12:	80bb      	strh	r3, [r7, #4]
    if (lcddev.id == 0X1963)
 8000a14:	4b44      	ldr	r3, [pc, #272]	; (8000b28 <lcd_set_cursor+0x124>)
 8000a16:	889b      	ldrh	r3, [r3, #4]
 8000a18:	f641 1263 	movw	r2, #6499	; 0x1963
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	f040 8189 	bne.w	8000d34 <lcd_set_cursor+0x330>
    {
        if (lcddev.dir == 0)    /* ����ģʽ, x������Ҫ�任 */
 8000a22:	4b41      	ldr	r3, [pc, #260]	; (8000b28 <lcd_set_cursor+0x124>)
 8000a24:	799b      	ldrb	r3, [r3, #6]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	f040 8084 	bne.w	8000b34 <lcd_set_cursor+0x130>
        {
            x = lcddev.width - 1 - x;
 8000a2c:	4b3e      	ldr	r3, [pc, #248]	; (8000b28 <lcd_set_cursor+0x124>)
 8000a2e:	881a      	ldrh	r2, [r3, #0]
 8000a30:	88fb      	ldrh	r3, [r7, #6]
 8000a32:	1ad3      	subs	r3, r2, r3
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	3b01      	subs	r3, #1
 8000a38:	80fb      	strh	r3, [r7, #6]
            lcd_wr_regno(lcddev.setxcmd);
 8000a3a:	4b3b      	ldr	r3, [pc, #236]	; (8000b28 <lcd_set_cursor+0x124>)
 8000a3c:	895b      	ldrh	r3, [r3, #10]
 8000a3e:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000a40:	4b3a      	ldr	r3, [pc, #232]	; (8000b2c <lcd_set_cursor+0x128>)
 8000a42:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000a46:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000a48:	4b38      	ldr	r3, [pc, #224]	; (8000b2c <lcd_set_cursor+0x128>)
 8000a4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000a4e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000a50:	89fb      	ldrh	r3, [r7, #14]
 8000a52:	b29a      	uxth	r2, r3
 8000a54:	4b36      	ldr	r3, [pc, #216]	; (8000b30 <lcd_set_cursor+0x12c>)
 8000a56:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000a58:	4b34      	ldr	r3, [pc, #208]	; (8000b2c <lcd_set_cursor+0x128>)
 8000a5a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a5e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000a60:	4b32      	ldr	r3, [pc, #200]	; (8000b2c <lcd_set_cursor+0x128>)
 8000a62:	2280      	movs	r2, #128	; 0x80
 8000a64:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000a66:	4b31      	ldr	r3, [pc, #196]	; (8000b2c <lcd_set_cursor+0x128>)
 8000a68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a6c:	611a      	str	r2, [r3, #16]
}
 8000a6e:	bf00      	nop
            lcd_wr_data(0);
 8000a70:	4b2e      	ldr	r3, [pc, #184]	; (8000b2c <lcd_set_cursor+0x128>)
 8000a72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a76:	611a      	str	r2, [r3, #16]
 8000a78:	4b2c      	ldr	r3, [pc, #176]	; (8000b2c <lcd_set_cursor+0x128>)
 8000a7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000a7e:	611a      	str	r2, [r3, #16]
 8000a80:	4b2b      	ldr	r3, [pc, #172]	; (8000b30 <lcd_set_cursor+0x12c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	4b29      	ldr	r3, [pc, #164]	; (8000b2c <lcd_set_cursor+0x128>)
 8000a88:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a8c:	611a      	str	r2, [r3, #16]
 8000a8e:	4b27      	ldr	r3, [pc, #156]	; (8000b2c <lcd_set_cursor+0x128>)
 8000a90:	2280      	movs	r2, #128	; 0x80
 8000a92:	611a      	str	r2, [r3, #16]
 8000a94:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <lcd_set_cursor+0x128>)
 8000a96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a9a:	611a      	str	r2, [r3, #16]
            lcd_wr_data(0);
 8000a9c:	4b23      	ldr	r3, [pc, #140]	; (8000b2c <lcd_set_cursor+0x128>)
 8000a9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000aa2:	611a      	str	r2, [r3, #16]
 8000aa4:	4b21      	ldr	r3, [pc, #132]	; (8000b2c <lcd_set_cursor+0x128>)
 8000aa6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000aaa:	611a      	str	r2, [r3, #16]
 8000aac:	4b20      	ldr	r3, [pc, #128]	; (8000b30 <lcd_set_cursor+0x12c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	4b1e      	ldr	r3, [pc, #120]	; (8000b2c <lcd_set_cursor+0x128>)
 8000ab4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000ab8:	611a      	str	r2, [r3, #16]
 8000aba:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <lcd_set_cursor+0x128>)
 8000abc:	2280      	movs	r2, #128	; 0x80
 8000abe:	611a      	str	r2, [r3, #16]
 8000ac0:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <lcd_set_cursor+0x128>)
 8000ac2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ac6:	611a      	str	r2, [r3, #16]
            lcd_wr_data(x >> 8);
 8000ac8:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <lcd_set_cursor+0x128>)
 8000aca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ace:	611a      	str	r2, [r3, #16]
 8000ad0:	4b16      	ldr	r3, [pc, #88]	; (8000b2c <lcd_set_cursor+0x128>)
 8000ad2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000ad6:	611a      	str	r2, [r3, #16]
 8000ad8:	88fb      	ldrh	r3, [r7, #6]
 8000ada:	0a1b      	lsrs	r3, r3, #8
 8000adc:	b29a      	uxth	r2, r3
 8000ade:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <lcd_set_cursor+0x12c>)
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <lcd_set_cursor+0x128>)
 8000ae4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000ae8:	611a      	str	r2, [r3, #16]
 8000aea:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <lcd_set_cursor+0x128>)
 8000aec:	2280      	movs	r2, #128	; 0x80
 8000aee:	611a      	str	r2, [r3, #16]
 8000af0:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <lcd_set_cursor+0x128>)
 8000af2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000af6:	611a      	str	r2, [r3, #16]
            lcd_wr_data(x & 0XFF);
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <lcd_set_cursor+0x128>)
 8000afa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000afe:	611a      	str	r2, [r3, #16]
 8000b00:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <lcd_set_cursor+0x128>)
 8000b02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000b06:	611a      	str	r2, [r3, #16]
 8000b08:	88fb      	ldrh	r3, [r7, #6]
 8000b0a:	4a09      	ldr	r2, [pc, #36]	; (8000b30 <lcd_set_cursor+0x12c>)
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	60d3      	str	r3, [r2, #12]
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <lcd_set_cursor+0x128>)
 8000b12:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000b16:	611a      	str	r2, [r3, #16]
 8000b18:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <lcd_set_cursor+0x128>)
 8000b1a:	2280      	movs	r2, #128	; 0x80
 8000b1c:	611a      	str	r2, [r3, #16]
 8000b1e:	4b03      	ldr	r3, [pc, #12]	; (8000b2c <lcd_set_cursor+0x128>)
 8000b20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b24:	611a      	str	r2, [r3, #16]
 8000b26:	e081      	b.n	8000c2c <lcd_set_cursor+0x228>
 8000b28:	2000007c 	.word	0x2000007c
 8000b2c:	40011000 	.word	0x40011000
 8000b30:	40010c00 	.word	0x40010c00
        }
        else                    /* ����ģʽ */
        {
            lcd_wr_regno(lcddev.setxcmd);
 8000b34:	4b7c      	ldr	r3, [pc, #496]	; (8000d28 <lcd_set_cursor+0x324>)
 8000b36:	895b      	ldrh	r3, [r3, #10]
 8000b38:	823b      	strh	r3, [r7, #16]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000b3a:	4b7c      	ldr	r3, [pc, #496]	; (8000d2c <lcd_set_cursor+0x328>)
 8000b3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000b40:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000b42:	4b7a      	ldr	r3, [pc, #488]	; (8000d2c <lcd_set_cursor+0x328>)
 8000b44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000b48:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000b4a:	8a3b      	ldrh	r3, [r7, #16]
 8000b4c:	b29a      	uxth	r2, r3
 8000b4e:	4b78      	ldr	r3, [pc, #480]	; (8000d30 <lcd_set_cursor+0x32c>)
 8000b50:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000b52:	4b76      	ldr	r3, [pc, #472]	; (8000d2c <lcd_set_cursor+0x328>)
 8000b54:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000b58:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000b5a:	4b74      	ldr	r3, [pc, #464]	; (8000d2c <lcd_set_cursor+0x328>)
 8000b5c:	2280      	movs	r2, #128	; 0x80
 8000b5e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000b60:	4b72      	ldr	r3, [pc, #456]	; (8000d2c <lcd_set_cursor+0x328>)
 8000b62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b66:	611a      	str	r2, [r3, #16]
}
 8000b68:	bf00      	nop
            lcd_wr_data(x >> 8);
 8000b6a:	4b70      	ldr	r3, [pc, #448]	; (8000d2c <lcd_set_cursor+0x328>)
 8000b6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b70:	611a      	str	r2, [r3, #16]
 8000b72:	4b6e      	ldr	r3, [pc, #440]	; (8000d2c <lcd_set_cursor+0x328>)
 8000b74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000b78:	611a      	str	r2, [r3, #16]
 8000b7a:	88fb      	ldrh	r3, [r7, #6]
 8000b7c:	0a1b      	lsrs	r3, r3, #8
 8000b7e:	b29a      	uxth	r2, r3
 8000b80:	4b6b      	ldr	r3, [pc, #428]	; (8000d30 <lcd_set_cursor+0x32c>)
 8000b82:	60da      	str	r2, [r3, #12]
 8000b84:	4b69      	ldr	r3, [pc, #420]	; (8000d2c <lcd_set_cursor+0x328>)
 8000b86:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000b8a:	611a      	str	r2, [r3, #16]
 8000b8c:	4b67      	ldr	r3, [pc, #412]	; (8000d2c <lcd_set_cursor+0x328>)
 8000b8e:	2280      	movs	r2, #128	; 0x80
 8000b90:	611a      	str	r2, [r3, #16]
 8000b92:	4b66      	ldr	r3, [pc, #408]	; (8000d2c <lcd_set_cursor+0x328>)
 8000b94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b98:	611a      	str	r2, [r3, #16]
            lcd_wr_data(x & 0XFF);
 8000b9a:	4b64      	ldr	r3, [pc, #400]	; (8000d2c <lcd_set_cursor+0x328>)
 8000b9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ba0:	611a      	str	r2, [r3, #16]
 8000ba2:	4b62      	ldr	r3, [pc, #392]	; (8000d2c <lcd_set_cursor+0x328>)
 8000ba4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000ba8:	611a      	str	r2, [r3, #16]
 8000baa:	88fb      	ldrh	r3, [r7, #6]
 8000bac:	4a60      	ldr	r2, [pc, #384]	; (8000d30 <lcd_set_cursor+0x32c>)
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	60d3      	str	r3, [r2, #12]
 8000bb2:	4b5e      	ldr	r3, [pc, #376]	; (8000d2c <lcd_set_cursor+0x328>)
 8000bb4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000bb8:	611a      	str	r2, [r3, #16]
 8000bba:	4b5c      	ldr	r3, [pc, #368]	; (8000d2c <lcd_set_cursor+0x328>)
 8000bbc:	2280      	movs	r2, #128	; 0x80
 8000bbe:	611a      	str	r2, [r3, #16]
 8000bc0:	4b5a      	ldr	r3, [pc, #360]	; (8000d2c <lcd_set_cursor+0x328>)
 8000bc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bc6:	611a      	str	r2, [r3, #16]
            lcd_wr_data((lcddev.width - 1) >> 8);
 8000bc8:	4b58      	ldr	r3, [pc, #352]	; (8000d2c <lcd_set_cursor+0x328>)
 8000bca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bce:	611a      	str	r2, [r3, #16]
 8000bd0:	4b56      	ldr	r3, [pc, #344]	; (8000d2c <lcd_set_cursor+0x328>)
 8000bd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000bd6:	611a      	str	r2, [r3, #16]
 8000bd8:	4b53      	ldr	r3, [pc, #332]	; (8000d28 <lcd_set_cursor+0x324>)
 8000bda:	881b      	ldrh	r3, [r3, #0]
 8000bdc:	3b01      	subs	r3, #1
 8000bde:	121a      	asrs	r2, r3, #8
 8000be0:	4b53      	ldr	r3, [pc, #332]	; (8000d30 <lcd_set_cursor+0x32c>)
 8000be2:	60da      	str	r2, [r3, #12]
 8000be4:	4b51      	ldr	r3, [pc, #324]	; (8000d2c <lcd_set_cursor+0x328>)
 8000be6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000bea:	611a      	str	r2, [r3, #16]
 8000bec:	4b4f      	ldr	r3, [pc, #316]	; (8000d2c <lcd_set_cursor+0x328>)
 8000bee:	2280      	movs	r2, #128	; 0x80
 8000bf0:	611a      	str	r2, [r3, #16]
 8000bf2:	4b4e      	ldr	r3, [pc, #312]	; (8000d2c <lcd_set_cursor+0x328>)
 8000bf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bf8:	611a      	str	r2, [r3, #16]
            lcd_wr_data((lcddev.width - 1) & 0XFF);
 8000bfa:	4b4c      	ldr	r3, [pc, #304]	; (8000d2c <lcd_set_cursor+0x328>)
 8000bfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c00:	611a      	str	r2, [r3, #16]
 8000c02:	4b4a      	ldr	r3, [pc, #296]	; (8000d2c <lcd_set_cursor+0x328>)
 8000c04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000c08:	611a      	str	r2, [r3, #16]
 8000c0a:	4b47      	ldr	r3, [pc, #284]	; (8000d28 <lcd_set_cursor+0x324>)
 8000c0c:	881b      	ldrh	r3, [r3, #0]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	4a47      	ldr	r2, [pc, #284]	; (8000d30 <lcd_set_cursor+0x32c>)
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	60d3      	str	r3, [r2, #12]
 8000c16:	4b45      	ldr	r3, [pc, #276]	; (8000d2c <lcd_set_cursor+0x328>)
 8000c18:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000c1c:	611a      	str	r2, [r3, #16]
 8000c1e:	4b43      	ldr	r3, [pc, #268]	; (8000d2c <lcd_set_cursor+0x328>)
 8000c20:	2280      	movs	r2, #128	; 0x80
 8000c22:	611a      	str	r2, [r3, #16]
 8000c24:	4b41      	ldr	r3, [pc, #260]	; (8000d2c <lcd_set_cursor+0x328>)
 8000c26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c2a:	611a      	str	r2, [r3, #16]
        }

        lcd_wr_regno(lcddev.setycmd);
 8000c2c:	4b3e      	ldr	r3, [pc, #248]	; (8000d28 <lcd_set_cursor+0x324>)
 8000c2e:	899b      	ldrh	r3, [r3, #12]
 8000c30:	827b      	strh	r3, [r7, #18]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000c32:	4b3e      	ldr	r3, [pc, #248]	; (8000d2c <lcd_set_cursor+0x328>)
 8000c34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000c38:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000c3a:	4b3c      	ldr	r3, [pc, #240]	; (8000d2c <lcd_set_cursor+0x328>)
 8000c3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000c40:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000c42:	8a7b      	ldrh	r3, [r7, #18]
 8000c44:	b29a      	uxth	r2, r3
 8000c46:	4b3a      	ldr	r3, [pc, #232]	; (8000d30 <lcd_set_cursor+0x32c>)
 8000c48:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000c4a:	4b38      	ldr	r3, [pc, #224]	; (8000d2c <lcd_set_cursor+0x328>)
 8000c4c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000c50:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000c52:	4b36      	ldr	r3, [pc, #216]	; (8000d2c <lcd_set_cursor+0x328>)
 8000c54:	2280      	movs	r2, #128	; 0x80
 8000c56:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000c58:	4b34      	ldr	r3, [pc, #208]	; (8000d2c <lcd_set_cursor+0x328>)
 8000c5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c5e:	611a      	str	r2, [r3, #16]
}
 8000c60:	bf00      	nop
        lcd_wr_data(y >> 8);
 8000c62:	4b32      	ldr	r3, [pc, #200]	; (8000d2c <lcd_set_cursor+0x328>)
 8000c64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c68:	611a      	str	r2, [r3, #16]
 8000c6a:	4b30      	ldr	r3, [pc, #192]	; (8000d2c <lcd_set_cursor+0x328>)
 8000c6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000c70:	611a      	str	r2, [r3, #16]
 8000c72:	88bb      	ldrh	r3, [r7, #4]
 8000c74:	0a1b      	lsrs	r3, r3, #8
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	4b2d      	ldr	r3, [pc, #180]	; (8000d30 <lcd_set_cursor+0x32c>)
 8000c7a:	60da      	str	r2, [r3, #12]
 8000c7c:	4b2b      	ldr	r3, [pc, #172]	; (8000d2c <lcd_set_cursor+0x328>)
 8000c7e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000c82:	611a      	str	r2, [r3, #16]
 8000c84:	4b29      	ldr	r3, [pc, #164]	; (8000d2c <lcd_set_cursor+0x328>)
 8000c86:	2280      	movs	r2, #128	; 0x80
 8000c88:	611a      	str	r2, [r3, #16]
 8000c8a:	4b28      	ldr	r3, [pc, #160]	; (8000d2c <lcd_set_cursor+0x328>)
 8000c8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c90:	611a      	str	r2, [r3, #16]
        lcd_wr_data(y & 0XFF);
 8000c92:	4b26      	ldr	r3, [pc, #152]	; (8000d2c <lcd_set_cursor+0x328>)
 8000c94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c98:	611a      	str	r2, [r3, #16]
 8000c9a:	4b24      	ldr	r3, [pc, #144]	; (8000d2c <lcd_set_cursor+0x328>)
 8000c9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000ca0:	611a      	str	r2, [r3, #16]
 8000ca2:	88bb      	ldrh	r3, [r7, #4]
 8000ca4:	4a22      	ldr	r2, [pc, #136]	; (8000d30 <lcd_set_cursor+0x32c>)
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	60d3      	str	r3, [r2, #12]
 8000caa:	4b20      	ldr	r3, [pc, #128]	; (8000d2c <lcd_set_cursor+0x328>)
 8000cac:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000cb0:	611a      	str	r2, [r3, #16]
 8000cb2:	4b1e      	ldr	r3, [pc, #120]	; (8000d2c <lcd_set_cursor+0x328>)
 8000cb4:	2280      	movs	r2, #128	; 0x80
 8000cb6:	611a      	str	r2, [r3, #16]
 8000cb8:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <lcd_set_cursor+0x328>)
 8000cba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cbe:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.height - 1) >> 8);
 8000cc0:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <lcd_set_cursor+0x328>)
 8000cc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cc6:	611a      	str	r2, [r3, #16]
 8000cc8:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <lcd_set_cursor+0x328>)
 8000cca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000cce:	611a      	str	r2, [r3, #16]
 8000cd0:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <lcd_set_cursor+0x324>)
 8000cd2:	885b      	ldrh	r3, [r3, #2]
 8000cd4:	3b01      	subs	r3, #1
 8000cd6:	121a      	asrs	r2, r3, #8
 8000cd8:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <lcd_set_cursor+0x32c>)
 8000cda:	60da      	str	r2, [r3, #12]
 8000cdc:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <lcd_set_cursor+0x328>)
 8000cde:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000ce2:	611a      	str	r2, [r3, #16]
 8000ce4:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <lcd_set_cursor+0x328>)
 8000ce6:	2280      	movs	r2, #128	; 0x80
 8000ce8:	611a      	str	r2, [r3, #16]
 8000cea:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <lcd_set_cursor+0x328>)
 8000cec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cf0:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <lcd_set_cursor+0x328>)
 8000cf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cf8:	611a      	str	r2, [r3, #16]
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <lcd_set_cursor+0x328>)
 8000cfc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000d00:	611a      	str	r2, [r3, #16]
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <lcd_set_cursor+0x324>)
 8000d04:	885b      	ldrh	r3, [r3, #2]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	4a09      	ldr	r2, [pc, #36]	; (8000d30 <lcd_set_cursor+0x32c>)
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	60d3      	str	r3, [r2, #12]
 8000d0e:	4b07      	ldr	r3, [pc, #28]	; (8000d2c <lcd_set_cursor+0x328>)
 8000d10:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000d14:	611a      	str	r2, [r3, #16]
 8000d16:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <lcd_set_cursor+0x328>)
 8000d18:	2280      	movs	r2, #128	; 0x80
 8000d1a:	611a      	str	r2, [r3, #16]
 8000d1c:	4b03      	ldr	r3, [pc, #12]	; (8000d2c <lcd_set_cursor+0x328>)
 8000d1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d22:	611a      	str	r2, [r3, #16]
        lcd_wr_data(x & 0XFF);
        lcd_wr_regno(lcddev.setycmd);
        lcd_wr_data(y >> 8);
        lcd_wr_data(y & 0XFF);
    }
}
 8000d24:	e176      	b.n	8001014 <lcd_set_cursor+0x610>
 8000d26:	bf00      	nop
 8000d28:	2000007c 	.word	0x2000007c
 8000d2c:	40011000 	.word	0x40011000
 8000d30:	40010c00 	.word	0x40010c00
    else if (lcddev.id == 0X5510)
 8000d34:	4b6a      	ldr	r3, [pc, #424]	; (8000ee0 <lcd_set_cursor+0x4dc>)
 8000d36:	889b      	ldrh	r3, [r3, #4]
 8000d38:	f245 5210 	movw	r2, #21776	; 0x5510
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	f040 80d5 	bne.w	8000eec <lcd_set_cursor+0x4e8>
        lcd_wr_regno(lcddev.setxcmd);
 8000d42:	4b67      	ldr	r3, [pc, #412]	; (8000ee0 <lcd_set_cursor+0x4dc>)
 8000d44:	895b      	ldrh	r3, [r3, #10]
 8000d46:	837b      	strh	r3, [r7, #26]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000d48:	4b66      	ldr	r3, [pc, #408]	; (8000ee4 <lcd_set_cursor+0x4e0>)
 8000d4a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000d4e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000d50:	4b64      	ldr	r3, [pc, #400]	; (8000ee4 <lcd_set_cursor+0x4e0>)
 8000d52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000d56:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000d58:	8b7b      	ldrh	r3, [r7, #26]
 8000d5a:	b29a      	uxth	r2, r3
 8000d5c:	4b62      	ldr	r3, [pc, #392]	; (8000ee8 <lcd_set_cursor+0x4e4>)
 8000d5e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000d60:	4b60      	ldr	r3, [pc, #384]	; (8000ee4 <lcd_set_cursor+0x4e0>)
 8000d62:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000d66:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000d68:	4b5e      	ldr	r3, [pc, #376]	; (8000ee4 <lcd_set_cursor+0x4e0>)
 8000d6a:	2280      	movs	r2, #128	; 0x80
 8000d6c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000d6e:	4b5d      	ldr	r3, [pc, #372]	; (8000ee4 <lcd_set_cursor+0x4e0>)
 8000d70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d74:	611a      	str	r2, [r3, #16]
}
 8000d76:	bf00      	nop
        lcd_wr_data(x >> 8);
 8000d78:	4b5a      	ldr	r3, [pc, #360]	; (8000ee4 <lcd_set_cursor+0x4e0>)
 8000d7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d7e:	611a      	str	r2, [r3, #16]
 8000d80:	4b58      	ldr	r3, [pc, #352]	; (8000ee4 <lcd_set_cursor+0x4e0>)
 8000d82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000d86:	611a      	str	r2, [r3, #16]
 8000d88:	88fb      	ldrh	r3, [r7, #6]
 8000d8a:	0a1b      	lsrs	r3, r3, #8
 8000d8c:	b29a      	uxth	r2, r3
 8000d8e:	4b56      	ldr	r3, [pc, #344]	; (8000ee8 <lcd_set_cursor+0x4e4>)
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	4b54      	ldr	r3, [pc, #336]	; (8000ee4 <lcd_set_cursor+0x4e0>)
 8000d94:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000d98:	611a      	str	r2, [r3, #16]
 8000d9a:	4b52      	ldr	r3, [pc, #328]	; (8000ee4 <lcd_set_cursor+0x4e0>)
 8000d9c:	2280      	movs	r2, #128	; 0x80
 8000d9e:	611a      	str	r2, [r3, #16]
 8000da0:	4b50      	ldr	r3, [pc, #320]	; (8000ee4 <lcd_set_cursor+0x4e0>)
 8000da2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000da6:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setxcmd + 1);
 8000da8:	4b4d      	ldr	r3, [pc, #308]	; (8000ee0 <lcd_set_cursor+0x4dc>)
 8000daa:	895b      	ldrh	r3, [r3, #10]
 8000dac:	3301      	adds	r3, #1
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	833b      	strh	r3, [r7, #24]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000db2:	4b4c      	ldr	r3, [pc, #304]	; (8000ee4 <lcd_set_cursor+0x4e0>)
 8000db4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000db8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000dba:	4b4a      	ldr	r3, [pc, #296]	; (8000ee4 <lcd_set_cursor+0x4e0>)
 8000dbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000dc0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000dc2:	8b3b      	ldrh	r3, [r7, #24]
 8000dc4:	b29a      	uxth	r2, r3
 8000dc6:	4b48      	ldr	r3, [pc, #288]	; (8000ee8 <lcd_set_cursor+0x4e4>)
 8000dc8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000dca:	4b46      	ldr	r3, [pc, #280]	; (8000ee4 <lcd_set_cursor+0x4e0>)
 8000dcc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000dd0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000dd2:	4b44      	ldr	r3, [pc, #272]	; (8000ee4 <lcd_set_cursor+0x4e0>)
 8000dd4:	2280      	movs	r2, #128	; 0x80
 8000dd6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000dd8:	4b42      	ldr	r3, [pc, #264]	; (8000ee4 <lcd_set_cursor+0x4e0>)
 8000dda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dde:	611a      	str	r2, [r3, #16]
}
 8000de0:	bf00      	nop
        lcd_wr_data(x & 0XFF);
 8000de2:	4b40      	ldr	r3, [pc, #256]	; (8000ee4 <lcd_set_cursor+0x4e0>)
 8000de4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000de8:	611a      	str	r2, [r3, #16]
 8000dea:	4b3e      	ldr	r3, [pc, #248]	; (8000ee4 <lcd_set_cursor+0x4e0>)
 8000dec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000df0:	611a      	str	r2, [r3, #16]
 8000df2:	88fb      	ldrh	r3, [r7, #6]
 8000df4:	4a3c      	ldr	r2, [pc, #240]	; (8000ee8 <lcd_set_cursor+0x4e4>)
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	60d3      	str	r3, [r2, #12]
 8000dfa:	4b3a      	ldr	r3, [pc, #232]	; (8000ee4 <lcd_set_cursor+0x4e0>)
 8000dfc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000e00:	611a      	str	r2, [r3, #16]
 8000e02:	4b38      	ldr	r3, [pc, #224]	; (8000ee4 <lcd_set_cursor+0x4e0>)
 8000e04:	2280      	movs	r2, #128	; 0x80
 8000e06:	611a      	str	r2, [r3, #16]
 8000e08:	4b36      	ldr	r3, [pc, #216]	; (8000ee4 <lcd_set_cursor+0x4e0>)
 8000e0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e0e:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd);
 8000e10:	4b33      	ldr	r3, [pc, #204]	; (8000ee0 <lcd_set_cursor+0x4dc>)
 8000e12:	899b      	ldrh	r3, [r3, #12]
 8000e14:	82fb      	strh	r3, [r7, #22]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000e16:	4b33      	ldr	r3, [pc, #204]	; (8000ee4 <lcd_set_cursor+0x4e0>)
 8000e18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000e1c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000e1e:	4b31      	ldr	r3, [pc, #196]	; (8000ee4 <lcd_set_cursor+0x4e0>)
 8000e20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000e24:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000e26:	8afb      	ldrh	r3, [r7, #22]
 8000e28:	b29a      	uxth	r2, r3
 8000e2a:	4b2f      	ldr	r3, [pc, #188]	; (8000ee8 <lcd_set_cursor+0x4e4>)
 8000e2c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000e2e:	4b2d      	ldr	r3, [pc, #180]	; (8000ee4 <lcd_set_cursor+0x4e0>)
 8000e30:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000e34:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000e36:	4b2b      	ldr	r3, [pc, #172]	; (8000ee4 <lcd_set_cursor+0x4e0>)
 8000e38:	2280      	movs	r2, #128	; 0x80
 8000e3a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000e3c:	4b29      	ldr	r3, [pc, #164]	; (8000ee4 <lcd_set_cursor+0x4e0>)
 8000e3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e42:	611a      	str	r2, [r3, #16]
}
 8000e44:	bf00      	nop
        lcd_wr_data(y >> 8);
 8000e46:	4b27      	ldr	r3, [pc, #156]	; (8000ee4 <lcd_set_cursor+0x4e0>)
 8000e48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e4c:	611a      	str	r2, [r3, #16]
 8000e4e:	4b25      	ldr	r3, [pc, #148]	; (8000ee4 <lcd_set_cursor+0x4e0>)
 8000e50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000e54:	611a      	str	r2, [r3, #16]
 8000e56:	88bb      	ldrh	r3, [r7, #4]
 8000e58:	0a1b      	lsrs	r3, r3, #8
 8000e5a:	b29a      	uxth	r2, r3
 8000e5c:	4b22      	ldr	r3, [pc, #136]	; (8000ee8 <lcd_set_cursor+0x4e4>)
 8000e5e:	60da      	str	r2, [r3, #12]
 8000e60:	4b20      	ldr	r3, [pc, #128]	; (8000ee4 <lcd_set_cursor+0x4e0>)
 8000e62:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000e66:	611a      	str	r2, [r3, #16]
 8000e68:	4b1e      	ldr	r3, [pc, #120]	; (8000ee4 <lcd_set_cursor+0x4e0>)
 8000e6a:	2280      	movs	r2, #128	; 0x80
 8000e6c:	611a      	str	r2, [r3, #16]
 8000e6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <lcd_set_cursor+0x4e0>)
 8000e70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e74:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd + 1);
 8000e76:	4b1a      	ldr	r3, [pc, #104]	; (8000ee0 <lcd_set_cursor+0x4dc>)
 8000e78:	899b      	ldrh	r3, [r3, #12]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	82bb      	strh	r3, [r7, #20]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000e80:	4b18      	ldr	r3, [pc, #96]	; (8000ee4 <lcd_set_cursor+0x4e0>)
 8000e82:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000e86:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000e88:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <lcd_set_cursor+0x4e0>)
 8000e8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000e8e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000e90:	8abb      	ldrh	r3, [r7, #20]
 8000e92:	b29a      	uxth	r2, r3
 8000e94:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <lcd_set_cursor+0x4e4>)
 8000e96:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <lcd_set_cursor+0x4e0>)
 8000e9a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000e9e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000ea0:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <lcd_set_cursor+0x4e0>)
 8000ea2:	2280      	movs	r2, #128	; 0x80
 8000ea4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <lcd_set_cursor+0x4e0>)
 8000ea8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eac:	611a      	str	r2, [r3, #16]
}
 8000eae:	bf00      	nop
        lcd_wr_data(y & 0XFF);
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <lcd_set_cursor+0x4e0>)
 8000eb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eb6:	611a      	str	r2, [r3, #16]
 8000eb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <lcd_set_cursor+0x4e0>)
 8000eba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000ebe:	611a      	str	r2, [r3, #16]
 8000ec0:	88bb      	ldrh	r3, [r7, #4]
 8000ec2:	4a09      	ldr	r2, [pc, #36]	; (8000ee8 <lcd_set_cursor+0x4e4>)
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	60d3      	str	r3, [r2, #12]
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <lcd_set_cursor+0x4e0>)
 8000eca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000ece:	611a      	str	r2, [r3, #16]
 8000ed0:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <lcd_set_cursor+0x4e0>)
 8000ed2:	2280      	movs	r2, #128	; 0x80
 8000ed4:	611a      	str	r2, [r3, #16]
 8000ed6:	4b03      	ldr	r3, [pc, #12]	; (8000ee4 <lcd_set_cursor+0x4e0>)
 8000ed8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000edc:	611a      	str	r2, [r3, #16]
}
 8000ede:	e099      	b.n	8001014 <lcd_set_cursor+0x610>
 8000ee0:	2000007c 	.word	0x2000007c
 8000ee4:	40011000 	.word	0x40011000
 8000ee8:	40010c00 	.word	0x40010c00
        lcd_wr_regno(lcddev.setxcmd);
 8000eec:	4b4c      	ldr	r3, [pc, #304]	; (8001020 <lcd_set_cursor+0x61c>)
 8000eee:	895b      	ldrh	r3, [r3, #10]
 8000ef0:	83fb      	strh	r3, [r7, #30]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000ef2:	4b4c      	ldr	r3, [pc, #304]	; (8001024 <lcd_set_cursor+0x620>)
 8000ef4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000ef8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000efa:	4b4a      	ldr	r3, [pc, #296]	; (8001024 <lcd_set_cursor+0x620>)
 8000efc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f00:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000f02:	8bfb      	ldrh	r3, [r7, #30]
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	4b48      	ldr	r3, [pc, #288]	; (8001028 <lcd_set_cursor+0x624>)
 8000f08:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000f0a:	4b46      	ldr	r3, [pc, #280]	; (8001024 <lcd_set_cursor+0x620>)
 8000f0c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000f10:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000f12:	4b44      	ldr	r3, [pc, #272]	; (8001024 <lcd_set_cursor+0x620>)
 8000f14:	2280      	movs	r2, #128	; 0x80
 8000f16:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000f18:	4b42      	ldr	r3, [pc, #264]	; (8001024 <lcd_set_cursor+0x620>)
 8000f1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f1e:	611a      	str	r2, [r3, #16]
}
 8000f20:	bf00      	nop
        lcd_wr_data(x >> 8);
 8000f22:	4b40      	ldr	r3, [pc, #256]	; (8001024 <lcd_set_cursor+0x620>)
 8000f24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f28:	611a      	str	r2, [r3, #16]
 8000f2a:	4b3e      	ldr	r3, [pc, #248]	; (8001024 <lcd_set_cursor+0x620>)
 8000f2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f30:	611a      	str	r2, [r3, #16]
 8000f32:	88fb      	ldrh	r3, [r7, #6]
 8000f34:	0a1b      	lsrs	r3, r3, #8
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	4b3b      	ldr	r3, [pc, #236]	; (8001028 <lcd_set_cursor+0x624>)
 8000f3a:	60da      	str	r2, [r3, #12]
 8000f3c:	4b39      	ldr	r3, [pc, #228]	; (8001024 <lcd_set_cursor+0x620>)
 8000f3e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000f42:	611a      	str	r2, [r3, #16]
 8000f44:	4b37      	ldr	r3, [pc, #220]	; (8001024 <lcd_set_cursor+0x620>)
 8000f46:	2280      	movs	r2, #128	; 0x80
 8000f48:	611a      	str	r2, [r3, #16]
 8000f4a:	4b36      	ldr	r3, [pc, #216]	; (8001024 <lcd_set_cursor+0x620>)
 8000f4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f50:	611a      	str	r2, [r3, #16]
        lcd_wr_data(x & 0XFF);
 8000f52:	4b34      	ldr	r3, [pc, #208]	; (8001024 <lcd_set_cursor+0x620>)
 8000f54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f58:	611a      	str	r2, [r3, #16]
 8000f5a:	4b32      	ldr	r3, [pc, #200]	; (8001024 <lcd_set_cursor+0x620>)
 8000f5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f60:	611a      	str	r2, [r3, #16]
 8000f62:	88fb      	ldrh	r3, [r7, #6]
 8000f64:	4a30      	ldr	r2, [pc, #192]	; (8001028 <lcd_set_cursor+0x624>)
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	60d3      	str	r3, [r2, #12]
 8000f6a:	4b2e      	ldr	r3, [pc, #184]	; (8001024 <lcd_set_cursor+0x620>)
 8000f6c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000f70:	611a      	str	r2, [r3, #16]
 8000f72:	4b2c      	ldr	r3, [pc, #176]	; (8001024 <lcd_set_cursor+0x620>)
 8000f74:	2280      	movs	r2, #128	; 0x80
 8000f76:	611a      	str	r2, [r3, #16]
 8000f78:	4b2a      	ldr	r3, [pc, #168]	; (8001024 <lcd_set_cursor+0x620>)
 8000f7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f7e:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd);
 8000f80:	4b27      	ldr	r3, [pc, #156]	; (8001020 <lcd_set_cursor+0x61c>)
 8000f82:	899b      	ldrh	r3, [r3, #12]
 8000f84:	83bb      	strh	r3, [r7, #28]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000f86:	4b27      	ldr	r3, [pc, #156]	; (8001024 <lcd_set_cursor+0x620>)
 8000f88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f8c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000f8e:	4b25      	ldr	r3, [pc, #148]	; (8001024 <lcd_set_cursor+0x620>)
 8000f90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f94:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000f96:	8bbb      	ldrh	r3, [r7, #28]
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	4b23      	ldr	r3, [pc, #140]	; (8001028 <lcd_set_cursor+0x624>)
 8000f9c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000f9e:	4b21      	ldr	r3, [pc, #132]	; (8001024 <lcd_set_cursor+0x620>)
 8000fa0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000fa4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000fa6:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <lcd_set_cursor+0x620>)
 8000fa8:	2280      	movs	r2, #128	; 0x80
 8000faa:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000fac:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <lcd_set_cursor+0x620>)
 8000fae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fb2:	611a      	str	r2, [r3, #16]
}
 8000fb4:	bf00      	nop
        lcd_wr_data(y >> 8);
 8000fb6:	4b1b      	ldr	r3, [pc, #108]	; (8001024 <lcd_set_cursor+0x620>)
 8000fb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fbc:	611a      	str	r2, [r3, #16]
 8000fbe:	4b19      	ldr	r3, [pc, #100]	; (8001024 <lcd_set_cursor+0x620>)
 8000fc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000fc4:	611a      	str	r2, [r3, #16]
 8000fc6:	88bb      	ldrh	r3, [r7, #4]
 8000fc8:	0a1b      	lsrs	r3, r3, #8
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	4b16      	ldr	r3, [pc, #88]	; (8001028 <lcd_set_cursor+0x624>)
 8000fce:	60da      	str	r2, [r3, #12]
 8000fd0:	4b14      	ldr	r3, [pc, #80]	; (8001024 <lcd_set_cursor+0x620>)
 8000fd2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000fd6:	611a      	str	r2, [r3, #16]
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <lcd_set_cursor+0x620>)
 8000fda:	2280      	movs	r2, #128	; 0x80
 8000fdc:	611a      	str	r2, [r3, #16]
 8000fde:	4b11      	ldr	r3, [pc, #68]	; (8001024 <lcd_set_cursor+0x620>)
 8000fe0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fe4:	611a      	str	r2, [r3, #16]
        lcd_wr_data(y & 0XFF);
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <lcd_set_cursor+0x620>)
 8000fe8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fec:	611a      	str	r2, [r3, #16]
 8000fee:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <lcd_set_cursor+0x620>)
 8000ff0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000ff4:	611a      	str	r2, [r3, #16]
 8000ff6:	88bb      	ldrh	r3, [r7, #4]
 8000ff8:	4a0b      	ldr	r2, [pc, #44]	; (8001028 <lcd_set_cursor+0x624>)
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	60d3      	str	r3, [r2, #12]
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <lcd_set_cursor+0x620>)
 8001000:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001004:	611a      	str	r2, [r3, #16]
 8001006:	4b07      	ldr	r3, [pc, #28]	; (8001024 <lcd_set_cursor+0x620>)
 8001008:	2280      	movs	r2, #128	; 0x80
 800100a:	611a      	str	r2, [r3, #16]
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <lcd_set_cursor+0x620>)
 800100e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001012:	611a      	str	r2, [r3, #16]
}
 8001014:	bf00      	nop
 8001016:	3724      	adds	r7, #36	; 0x24
 8001018:	46bd      	mov	sp, r7
 800101a:	bc80      	pop	{r7}
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	2000007c 	.word	0x2000007c
 8001024:	40011000 	.word	0x40011000
 8001028:	40010c00 	.word	0x40010c00

0800102c <lcd_scan_dir>:
 *
 * @param       dir:0~7,����8������(���嶨���lcd.h)
 * @retval      ��
 */
void lcd_scan_dir(uint8_t dir)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	; 0x28
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
    uint16_t regval = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint16_t dirreg = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	84bb      	strh	r3, [r7, #36]	; 0x24
    uint16_t temp;

    /* ����ʱ����1963���ı�ɨ�跽��, ����IC�ı�ɨ�跽������ʱ1963�ı䷽��, ����IC���ı�ɨ�跽�� */
    if ((lcddev.dir == 1 && lcddev.id != 0X1963) || (lcddev.dir == 0 && lcddev.id == 0X1963))
 800103e:	4b5f      	ldr	r3, [pc, #380]	; (80011bc <lcd_scan_dir+0x190>)
 8001040:	799b      	ldrb	r3, [r3, #6]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d105      	bne.n	8001052 <lcd_scan_dir+0x26>
 8001046:	4b5d      	ldr	r3, [pc, #372]	; (80011bc <lcd_scan_dir+0x190>)
 8001048:	889b      	ldrh	r3, [r3, #4]
 800104a:	f641 1263 	movw	r2, #6499	; 0x1963
 800104e:	4293      	cmp	r3, r2
 8001050:	d109      	bne.n	8001066 <lcd_scan_dir+0x3a>
 8001052:	4b5a      	ldr	r3, [pc, #360]	; (80011bc <lcd_scan_dir+0x190>)
 8001054:	799b      	ldrb	r3, [r3, #6]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d134      	bne.n	80010c4 <lcd_scan_dir+0x98>
 800105a:	4b58      	ldr	r3, [pc, #352]	; (80011bc <lcd_scan_dir+0x190>)
 800105c:	889b      	ldrh	r3, [r3, #4]
 800105e:	f641 1263 	movw	r2, #6499	; 0x1963
 8001062:	4293      	cmp	r3, r2
 8001064:	d12e      	bne.n	80010c4 <lcd_scan_dir+0x98>
    {
        switch (dir)   /* ����ת�� */
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	2b07      	cmp	r3, #7
 800106a:	d82b      	bhi.n	80010c4 <lcd_scan_dir+0x98>
 800106c:	a201      	add	r2, pc, #4	; (adr r2, 8001074 <lcd_scan_dir+0x48>)
 800106e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001072:	bf00      	nop
 8001074:	08001095 	.word	0x08001095
 8001078:	0800109b 	.word	0x0800109b
 800107c:	080010a1 	.word	0x080010a1
 8001080:	080010a7 	.word	0x080010a7
 8001084:	080010ad 	.word	0x080010ad
 8001088:	080010b3 	.word	0x080010b3
 800108c:	080010b9 	.word	0x080010b9
 8001090:	080010bf 	.word	0x080010bf
        {
            case 0:
                dir = 6;
 8001094:	2306      	movs	r3, #6
 8001096:	71fb      	strb	r3, [r7, #7]
                break;
 8001098:	e014      	b.n	80010c4 <lcd_scan_dir+0x98>

            case 1:
                dir = 7;
 800109a:	2307      	movs	r3, #7
 800109c:	71fb      	strb	r3, [r7, #7]
                break;
 800109e:	e011      	b.n	80010c4 <lcd_scan_dir+0x98>

            case 2:
                dir = 4;
 80010a0:	2304      	movs	r3, #4
 80010a2:	71fb      	strb	r3, [r7, #7]
                break;
 80010a4:	e00e      	b.n	80010c4 <lcd_scan_dir+0x98>

            case 3:
                dir = 5;
 80010a6:	2305      	movs	r3, #5
 80010a8:	71fb      	strb	r3, [r7, #7]
                break;
 80010aa:	e00b      	b.n	80010c4 <lcd_scan_dir+0x98>

            case 4:
                dir = 1;
 80010ac:	2301      	movs	r3, #1
 80010ae:	71fb      	strb	r3, [r7, #7]
                break;
 80010b0:	e008      	b.n	80010c4 <lcd_scan_dir+0x98>

            case 5:
                dir = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	71fb      	strb	r3, [r7, #7]
                break;
 80010b6:	e005      	b.n	80010c4 <lcd_scan_dir+0x98>

            case 6:
                dir = 3;
 80010b8:	2303      	movs	r3, #3
 80010ba:	71fb      	strb	r3, [r7, #7]
                break;
 80010bc:	e002      	b.n	80010c4 <lcd_scan_dir+0x98>

            case 7:
                dir = 2;
 80010be:	2302      	movs	r3, #2
 80010c0:	71fb      	strb	r3, [r7, #7]
                break;
 80010c2:	bf00      	nop
        }
    }

    /* ����ɨ�跽ʽ ���� 0X36/0X3600 �Ĵ��� bit 5,6,7 λ��ֵ */
    switch (dir)
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	2b07      	cmp	r3, #7
 80010c8:	d835      	bhi.n	8001136 <lcd_scan_dir+0x10a>
 80010ca:	a201      	add	r2, pc, #4	; (adr r2, 80010d0 <lcd_scan_dir+0xa4>)
 80010cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d0:	08001137 	.word	0x08001137
 80010d4:	080010f1 	.word	0x080010f1
 80010d8:	080010fb 	.word	0x080010fb
 80010dc:	08001105 	.word	0x08001105
 80010e0:	0800110f 	.word	0x0800110f
 80010e4:	08001119 	.word	0x08001119
 80010e8:	08001123 	.word	0x08001123
 80010ec:	0800112d 	.word	0x0800112d
        case L2R_U2D:/* ������,���ϵ��� */
            regval |= (0 << 7) | (0 << 6) | (0 << 5);
            break;

        case L2R_D2U:/* ������,���µ��� */
            regval |= (1 << 7) | (0 << 6) | (0 << 5);
 80010f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010f6:	84fb      	strh	r3, [r7, #38]	; 0x26
            break;
 80010f8:	e01d      	b.n	8001136 <lcd_scan_dir+0x10a>

        case R2L_U2D:/* ���ҵ���,���ϵ��� */
            regval |= (0 << 7) | (1 << 6) | (0 << 5);
 80010fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001100:	84fb      	strh	r3, [r7, #38]	; 0x26
            break;
 8001102:	e018      	b.n	8001136 <lcd_scan_dir+0x10a>

        case R2L_D2U:/* ���ҵ���,���µ��� */
            regval |= (1 << 7) | (1 << 6) | (0 << 5);
 8001104:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001106:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800110a:	84fb      	strh	r3, [r7, #38]	; 0x26
            break;
 800110c:	e013      	b.n	8001136 <lcd_scan_dir+0x10a>

        case U2D_L2R:/* ���ϵ���,������ */
            regval |= (0 << 7) | (0 << 6) | (1 << 5);
 800110e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001110:	f043 0320 	orr.w	r3, r3, #32
 8001114:	84fb      	strh	r3, [r7, #38]	; 0x26
            break;
 8001116:	e00e      	b.n	8001136 <lcd_scan_dir+0x10a>

        case U2D_R2L:/* ���ϵ���,���ҵ��� */
            regval |= (0 << 7) | (1 << 6) | (1 << 5);
 8001118:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800111a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800111e:	84fb      	strh	r3, [r7, #38]	; 0x26
            break;
 8001120:	e009      	b.n	8001136 <lcd_scan_dir+0x10a>

        case D2U_L2R:/* ���µ���,������ */
            regval |= (1 << 7) | (0 << 6) | (1 << 5);
 8001122:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001124:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001128:	84fb      	strh	r3, [r7, #38]	; 0x26
            break;
 800112a:	e004      	b.n	8001136 <lcd_scan_dir+0x10a>

        case D2U_R2L:/* ���µ���,���ҵ��� */
            regval |= (1 << 7) | (1 << 6) | (1 << 5);
 800112c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800112e:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001132:	84fb      	strh	r3, [r7, #38]	; 0x26
            break;
 8001134:	bf00      	nop
    }

    dirreg = 0X36;  /* �Ծ��󲿷�����IC, ��0X36�Ĵ������� */
 8001136:	2336      	movs	r3, #54	; 0x36
 8001138:	84bb      	strh	r3, [r7, #36]	; 0x24

    if (lcddev.id == 0X5510)
 800113a:	4b20      	ldr	r3, [pc, #128]	; (80011bc <lcd_scan_dir+0x190>)
 800113c:	889b      	ldrh	r3, [r3, #4]
 800113e:	f245 5210 	movw	r2, #21776	; 0x5510
 8001142:	4293      	cmp	r3, r2
 8001144:	d102      	bne.n	800114c <lcd_scan_dir+0x120>
    {
        dirreg = 0X3600;    /* ����5510, ����������ic�ļĴ����в��� */
 8001146:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 800114a:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* 9341 & 7789 & 7796 Ҫ����BGRλ */
    if (lcddev.id == 0X9341 || lcddev.id == 0X7789 || lcddev.id == 0x7796)
 800114c:	4b1b      	ldr	r3, [pc, #108]	; (80011bc <lcd_scan_dir+0x190>)
 800114e:	889b      	ldrh	r3, [r3, #4]
 8001150:	f249 3241 	movw	r2, #37697	; 0x9341
 8001154:	4293      	cmp	r3, r2
 8001156:	d00b      	beq.n	8001170 <lcd_scan_dir+0x144>
 8001158:	4b18      	ldr	r3, [pc, #96]	; (80011bc <lcd_scan_dir+0x190>)
 800115a:	889b      	ldrh	r3, [r3, #4]
 800115c:	f247 7289 	movw	r2, #30601	; 0x7789
 8001160:	4293      	cmp	r3, r2
 8001162:	d005      	beq.n	8001170 <lcd_scan_dir+0x144>
 8001164:	4b15      	ldr	r3, [pc, #84]	; (80011bc <lcd_scan_dir+0x190>)
 8001166:	889b      	ldrh	r3, [r3, #4]
 8001168:	f247 7296 	movw	r2, #30614	; 0x7796
 800116c:	4293      	cmp	r3, r2
 800116e:	d103      	bne.n	8001178 <lcd_scan_dir+0x14c>
    {
        regval |= 0X08;
 8001170:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001172:	f043 0308 	orr.w	r3, r3, #8
 8001176:	84fb      	strh	r3, [r7, #38]	; 0x26
    }

    lcd_write_reg(dirreg, regval);
 8001178:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800117a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800117c:	4611      	mov	r1, r2
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff fbaa 	bl	80008d8 <lcd_write_reg>

    if (lcddev.id != 0X1963)   /* 1963�������괦�� */
 8001184:	4b0d      	ldr	r3, [pc, #52]	; (80011bc <lcd_scan_dir+0x190>)
 8001186:	889b      	ldrh	r3, [r3, #4]
 8001188:	f641 1263 	movw	r2, #6499	; 0x1963
 800118c:	4293      	cmp	r3, r2
 800118e:	d027      	beq.n	80011e0 <lcd_scan_dir+0x1b4>
    {
        if (regval & 0X20)
 8001190:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001192:	f003 0320 	and.w	r3, r3, #32
 8001196:	2b00      	cmp	r3, #0
 8001198:	d012      	beq.n	80011c0 <lcd_scan_dir+0x194>
        {
            if (lcddev.width < lcddev.height)   /* ����X,Y */
 800119a:	4b08      	ldr	r3, [pc, #32]	; (80011bc <lcd_scan_dir+0x190>)
 800119c:	881a      	ldrh	r2, [r3, #0]
 800119e:	4b07      	ldr	r3, [pc, #28]	; (80011bc <lcd_scan_dir+0x190>)
 80011a0:	885b      	ldrh	r3, [r3, #2]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d21c      	bcs.n	80011e0 <lcd_scan_dir+0x1b4>
            {
                temp = lcddev.width;
 80011a6:	4b05      	ldr	r3, [pc, #20]	; (80011bc <lcd_scan_dir+0x190>)
 80011a8:	881b      	ldrh	r3, [r3, #0]
 80011aa:	847b      	strh	r3, [r7, #34]	; 0x22
                lcddev.width = lcddev.height;
 80011ac:	4b03      	ldr	r3, [pc, #12]	; (80011bc <lcd_scan_dir+0x190>)
 80011ae:	885a      	ldrh	r2, [r3, #2]
 80011b0:	4b02      	ldr	r3, [pc, #8]	; (80011bc <lcd_scan_dir+0x190>)
 80011b2:	801a      	strh	r2, [r3, #0]
                lcddev.height = temp;
 80011b4:	4a01      	ldr	r2, [pc, #4]	; (80011bc <lcd_scan_dir+0x190>)
 80011b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80011b8:	8053      	strh	r3, [r2, #2]
 80011ba:	e011      	b.n	80011e0 <lcd_scan_dir+0x1b4>
 80011bc:	2000007c 	.word	0x2000007c
            }
        }
        else
        {
            if (lcddev.width > lcddev.height)   /* ����X,Y */
 80011c0:	4b9c      	ldr	r3, [pc, #624]	; (8001434 <lcd_scan_dir+0x408>)
 80011c2:	881a      	ldrh	r2, [r3, #0]
 80011c4:	4b9b      	ldr	r3, [pc, #620]	; (8001434 <lcd_scan_dir+0x408>)
 80011c6:	885b      	ldrh	r3, [r3, #2]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d909      	bls.n	80011e0 <lcd_scan_dir+0x1b4>
            {
                temp = lcddev.width;
 80011cc:	4b99      	ldr	r3, [pc, #612]	; (8001434 <lcd_scan_dir+0x408>)
 80011ce:	881b      	ldrh	r3, [r3, #0]
 80011d0:	847b      	strh	r3, [r7, #34]	; 0x22
                lcddev.width = lcddev.height;
 80011d2:	4b98      	ldr	r3, [pc, #608]	; (8001434 <lcd_scan_dir+0x408>)
 80011d4:	885a      	ldrh	r2, [r3, #2]
 80011d6:	4b97      	ldr	r3, [pc, #604]	; (8001434 <lcd_scan_dir+0x408>)
 80011d8:	801a      	strh	r2, [r3, #0]
                lcddev.height = temp;
 80011da:	4a96      	ldr	r2, [pc, #600]	; (8001434 <lcd_scan_dir+0x408>)
 80011dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80011de:	8053      	strh	r3, [r2, #2]
            }
        }
    }

    /* ������ʾ����(����)��С */
    if (lcddev.id == 0X5510)
 80011e0:	4b94      	ldr	r3, [pc, #592]	; (8001434 <lcd_scan_dir+0x408>)
 80011e2:	889b      	ldrh	r3, [r3, #4]
 80011e4:	f245 5210 	movw	r2, #21776	; 0x5510
 80011e8:	4293      	cmp	r3, r2
 80011ea:	f040 81af 	bne.w	800154c <lcd_scan_dir+0x520>
    {
        lcd_wr_regno(lcddev.setxcmd);
 80011ee:	4b91      	ldr	r3, [pc, #580]	; (8001434 <lcd_scan_dir+0x408>)
 80011f0:	895b      	ldrh	r3, [r3, #10]
 80011f2:	83bb      	strh	r3, [r7, #28]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80011f4:	4b90      	ldr	r3, [pc, #576]	; (8001438 <lcd_scan_dir+0x40c>)
 80011f6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80011fa:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80011fc:	4b8e      	ldr	r3, [pc, #568]	; (8001438 <lcd_scan_dir+0x40c>)
 80011fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001202:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001204:	8bbb      	ldrh	r3, [r7, #28]
 8001206:	b29a      	uxth	r2, r3
 8001208:	4b8c      	ldr	r3, [pc, #560]	; (800143c <lcd_scan_dir+0x410>)
 800120a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800120c:	4b8a      	ldr	r3, [pc, #552]	; (8001438 <lcd_scan_dir+0x40c>)
 800120e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001212:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001214:	4b88      	ldr	r3, [pc, #544]	; (8001438 <lcd_scan_dir+0x40c>)
 8001216:	2280      	movs	r2, #128	; 0x80
 8001218:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800121a:	4b87      	ldr	r3, [pc, #540]	; (8001438 <lcd_scan_dir+0x40c>)
 800121c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001220:	611a      	str	r2, [r3, #16]
}
 8001222:	bf00      	nop
        lcd_wr_data(0);
 8001224:	4b84      	ldr	r3, [pc, #528]	; (8001438 <lcd_scan_dir+0x40c>)
 8001226:	f44f 7280 	mov.w	r2, #256	; 0x100
 800122a:	611a      	str	r2, [r3, #16]
 800122c:	4b82      	ldr	r3, [pc, #520]	; (8001438 <lcd_scan_dir+0x40c>)
 800122e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001232:	611a      	str	r2, [r3, #16]
 8001234:	4b81      	ldr	r3, [pc, #516]	; (800143c <lcd_scan_dir+0x410>)
 8001236:	2200      	movs	r2, #0
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	4b7f      	ldr	r3, [pc, #508]	; (8001438 <lcd_scan_dir+0x40c>)
 800123c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001240:	611a      	str	r2, [r3, #16]
 8001242:	4b7d      	ldr	r3, [pc, #500]	; (8001438 <lcd_scan_dir+0x40c>)
 8001244:	2280      	movs	r2, #128	; 0x80
 8001246:	611a      	str	r2, [r3, #16]
 8001248:	4b7b      	ldr	r3, [pc, #492]	; (8001438 <lcd_scan_dir+0x40c>)
 800124a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800124e:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setxcmd + 1);
 8001250:	4b78      	ldr	r3, [pc, #480]	; (8001434 <lcd_scan_dir+0x408>)
 8001252:	895b      	ldrh	r3, [r3, #10]
 8001254:	3301      	adds	r3, #1
 8001256:	b29b      	uxth	r3, r3
 8001258:	837b      	strh	r3, [r7, #26]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800125a:	4b77      	ldr	r3, [pc, #476]	; (8001438 <lcd_scan_dir+0x40c>)
 800125c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001260:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001262:	4b75      	ldr	r3, [pc, #468]	; (8001438 <lcd_scan_dir+0x40c>)
 8001264:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001268:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800126a:	8b7b      	ldrh	r3, [r7, #26]
 800126c:	b29a      	uxth	r2, r3
 800126e:	4b73      	ldr	r3, [pc, #460]	; (800143c <lcd_scan_dir+0x410>)
 8001270:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001272:	4b71      	ldr	r3, [pc, #452]	; (8001438 <lcd_scan_dir+0x40c>)
 8001274:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001278:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800127a:	4b6f      	ldr	r3, [pc, #444]	; (8001438 <lcd_scan_dir+0x40c>)
 800127c:	2280      	movs	r2, #128	; 0x80
 800127e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001280:	4b6d      	ldr	r3, [pc, #436]	; (8001438 <lcd_scan_dir+0x40c>)
 8001282:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001286:	611a      	str	r2, [r3, #16]
}
 8001288:	bf00      	nop
        lcd_wr_data(0);
 800128a:	4b6b      	ldr	r3, [pc, #428]	; (8001438 <lcd_scan_dir+0x40c>)
 800128c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001290:	611a      	str	r2, [r3, #16]
 8001292:	4b69      	ldr	r3, [pc, #420]	; (8001438 <lcd_scan_dir+0x40c>)
 8001294:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001298:	611a      	str	r2, [r3, #16]
 800129a:	4b68      	ldr	r3, [pc, #416]	; (800143c <lcd_scan_dir+0x410>)
 800129c:	2200      	movs	r2, #0
 800129e:	60da      	str	r2, [r3, #12]
 80012a0:	4b65      	ldr	r3, [pc, #404]	; (8001438 <lcd_scan_dir+0x40c>)
 80012a2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80012a6:	611a      	str	r2, [r3, #16]
 80012a8:	4b63      	ldr	r3, [pc, #396]	; (8001438 <lcd_scan_dir+0x40c>)
 80012aa:	2280      	movs	r2, #128	; 0x80
 80012ac:	611a      	str	r2, [r3, #16]
 80012ae:	4b62      	ldr	r3, [pc, #392]	; (8001438 <lcd_scan_dir+0x40c>)
 80012b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012b4:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setxcmd + 2);
 80012b6:	4b5f      	ldr	r3, [pc, #380]	; (8001434 <lcd_scan_dir+0x408>)
 80012b8:	895b      	ldrh	r3, [r3, #10]
 80012ba:	3302      	adds	r3, #2
 80012bc:	b29b      	uxth	r3, r3
 80012be:	833b      	strh	r3, [r7, #24]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80012c0:	4b5d      	ldr	r3, [pc, #372]	; (8001438 <lcd_scan_dir+0x40c>)
 80012c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80012c6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80012c8:	4b5b      	ldr	r3, [pc, #364]	; (8001438 <lcd_scan_dir+0x40c>)
 80012ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80012ce:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80012d0:	8b3b      	ldrh	r3, [r7, #24]
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	4b59      	ldr	r3, [pc, #356]	; (800143c <lcd_scan_dir+0x410>)
 80012d6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80012d8:	4b57      	ldr	r3, [pc, #348]	; (8001438 <lcd_scan_dir+0x40c>)
 80012da:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80012de:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80012e0:	4b55      	ldr	r3, [pc, #340]	; (8001438 <lcd_scan_dir+0x40c>)
 80012e2:	2280      	movs	r2, #128	; 0x80
 80012e4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80012e6:	4b54      	ldr	r3, [pc, #336]	; (8001438 <lcd_scan_dir+0x40c>)
 80012e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012ec:	611a      	str	r2, [r3, #16]
}
 80012ee:	bf00      	nop
        lcd_wr_data((lcddev.width - 1) >> 8);
 80012f0:	4b51      	ldr	r3, [pc, #324]	; (8001438 <lcd_scan_dir+0x40c>)
 80012f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012f6:	611a      	str	r2, [r3, #16]
 80012f8:	4b4f      	ldr	r3, [pc, #316]	; (8001438 <lcd_scan_dir+0x40c>)
 80012fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80012fe:	611a      	str	r2, [r3, #16]
 8001300:	4b4c      	ldr	r3, [pc, #304]	; (8001434 <lcd_scan_dir+0x408>)
 8001302:	881b      	ldrh	r3, [r3, #0]
 8001304:	3b01      	subs	r3, #1
 8001306:	121a      	asrs	r2, r3, #8
 8001308:	4b4c      	ldr	r3, [pc, #304]	; (800143c <lcd_scan_dir+0x410>)
 800130a:	60da      	str	r2, [r3, #12]
 800130c:	4b4a      	ldr	r3, [pc, #296]	; (8001438 <lcd_scan_dir+0x40c>)
 800130e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001312:	611a      	str	r2, [r3, #16]
 8001314:	4b48      	ldr	r3, [pc, #288]	; (8001438 <lcd_scan_dir+0x40c>)
 8001316:	2280      	movs	r2, #128	; 0x80
 8001318:	611a      	str	r2, [r3, #16]
 800131a:	4b47      	ldr	r3, [pc, #284]	; (8001438 <lcd_scan_dir+0x40c>)
 800131c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001320:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setxcmd + 3);
 8001322:	4b44      	ldr	r3, [pc, #272]	; (8001434 <lcd_scan_dir+0x408>)
 8001324:	895b      	ldrh	r3, [r3, #10]
 8001326:	3303      	adds	r3, #3
 8001328:	b29b      	uxth	r3, r3
 800132a:	82fb      	strh	r3, [r7, #22]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800132c:	4b42      	ldr	r3, [pc, #264]	; (8001438 <lcd_scan_dir+0x40c>)
 800132e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001332:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001334:	4b40      	ldr	r3, [pc, #256]	; (8001438 <lcd_scan_dir+0x40c>)
 8001336:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800133a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800133c:	8afb      	ldrh	r3, [r7, #22]
 800133e:	b29a      	uxth	r2, r3
 8001340:	4b3e      	ldr	r3, [pc, #248]	; (800143c <lcd_scan_dir+0x410>)
 8001342:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001344:	4b3c      	ldr	r3, [pc, #240]	; (8001438 <lcd_scan_dir+0x40c>)
 8001346:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800134a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800134c:	4b3a      	ldr	r3, [pc, #232]	; (8001438 <lcd_scan_dir+0x40c>)
 800134e:	2280      	movs	r2, #128	; 0x80
 8001350:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001352:	4b39      	ldr	r3, [pc, #228]	; (8001438 <lcd_scan_dir+0x40c>)
 8001354:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001358:	611a      	str	r2, [r3, #16]
}
 800135a:	bf00      	nop
        lcd_wr_data((lcddev.width - 1) & 0XFF);
 800135c:	4b36      	ldr	r3, [pc, #216]	; (8001438 <lcd_scan_dir+0x40c>)
 800135e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001362:	611a      	str	r2, [r3, #16]
 8001364:	4b34      	ldr	r3, [pc, #208]	; (8001438 <lcd_scan_dir+0x40c>)
 8001366:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800136a:	611a      	str	r2, [r3, #16]
 800136c:	4b31      	ldr	r3, [pc, #196]	; (8001434 <lcd_scan_dir+0x408>)
 800136e:	881b      	ldrh	r3, [r3, #0]
 8001370:	3b01      	subs	r3, #1
 8001372:	4a32      	ldr	r2, [pc, #200]	; (800143c <lcd_scan_dir+0x410>)
 8001374:	b2db      	uxtb	r3, r3
 8001376:	60d3      	str	r3, [r2, #12]
 8001378:	4b2f      	ldr	r3, [pc, #188]	; (8001438 <lcd_scan_dir+0x40c>)
 800137a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800137e:	611a      	str	r2, [r3, #16]
 8001380:	4b2d      	ldr	r3, [pc, #180]	; (8001438 <lcd_scan_dir+0x40c>)
 8001382:	2280      	movs	r2, #128	; 0x80
 8001384:	611a      	str	r2, [r3, #16]
 8001386:	4b2c      	ldr	r3, [pc, #176]	; (8001438 <lcd_scan_dir+0x40c>)
 8001388:	f44f 7200 	mov.w	r2, #512	; 0x200
 800138c:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd);
 800138e:	4b29      	ldr	r3, [pc, #164]	; (8001434 <lcd_scan_dir+0x408>)
 8001390:	899b      	ldrh	r3, [r3, #12]
 8001392:	82bb      	strh	r3, [r7, #20]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001394:	4b28      	ldr	r3, [pc, #160]	; (8001438 <lcd_scan_dir+0x40c>)
 8001396:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800139a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800139c:	4b26      	ldr	r3, [pc, #152]	; (8001438 <lcd_scan_dir+0x40c>)
 800139e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013a2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80013a4:	8abb      	ldrh	r3, [r7, #20]
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	4b24      	ldr	r3, [pc, #144]	; (800143c <lcd_scan_dir+0x410>)
 80013aa:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80013ac:	4b22      	ldr	r3, [pc, #136]	; (8001438 <lcd_scan_dir+0x40c>)
 80013ae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80013b2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80013b4:	4b20      	ldr	r3, [pc, #128]	; (8001438 <lcd_scan_dir+0x40c>)
 80013b6:	2280      	movs	r2, #128	; 0x80
 80013b8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80013ba:	4b1f      	ldr	r3, [pc, #124]	; (8001438 <lcd_scan_dir+0x40c>)
 80013bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013c0:	611a      	str	r2, [r3, #16]
}
 80013c2:	bf00      	nop
        lcd_wr_data(0);
 80013c4:	4b1c      	ldr	r3, [pc, #112]	; (8001438 <lcd_scan_dir+0x40c>)
 80013c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013ca:	611a      	str	r2, [r3, #16]
 80013cc:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <lcd_scan_dir+0x40c>)
 80013ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013d2:	611a      	str	r2, [r3, #16]
 80013d4:	4b19      	ldr	r3, [pc, #100]	; (800143c <lcd_scan_dir+0x410>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	4b17      	ldr	r3, [pc, #92]	; (8001438 <lcd_scan_dir+0x40c>)
 80013dc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80013e0:	611a      	str	r2, [r3, #16]
 80013e2:	4b15      	ldr	r3, [pc, #84]	; (8001438 <lcd_scan_dir+0x40c>)
 80013e4:	2280      	movs	r2, #128	; 0x80
 80013e6:	611a      	str	r2, [r3, #16]
 80013e8:	4b13      	ldr	r3, [pc, #76]	; (8001438 <lcd_scan_dir+0x40c>)
 80013ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ee:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd + 1);
 80013f0:	4b10      	ldr	r3, [pc, #64]	; (8001434 <lcd_scan_dir+0x408>)
 80013f2:	899b      	ldrh	r3, [r3, #12]
 80013f4:	3301      	adds	r3, #1
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	827b      	strh	r3, [r7, #18]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80013fa:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <lcd_scan_dir+0x40c>)
 80013fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001400:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001402:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <lcd_scan_dir+0x40c>)
 8001404:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001408:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800140a:	8a7b      	ldrh	r3, [r7, #18]
 800140c:	b29a      	uxth	r2, r3
 800140e:	4b0b      	ldr	r3, [pc, #44]	; (800143c <lcd_scan_dir+0x410>)
 8001410:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <lcd_scan_dir+0x40c>)
 8001414:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001418:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800141a:	4b07      	ldr	r3, [pc, #28]	; (8001438 <lcd_scan_dir+0x40c>)
 800141c:	2280      	movs	r2, #128	; 0x80
 800141e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001420:	4b05      	ldr	r3, [pc, #20]	; (8001438 <lcd_scan_dir+0x40c>)
 8001422:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001426:	611a      	str	r2, [r3, #16]
}
 8001428:	bf00      	nop
        lcd_wr_data(0);
 800142a:	4b03      	ldr	r3, [pc, #12]	; (8001438 <lcd_scan_dir+0x40c>)
 800142c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001430:	611a      	str	r2, [r3, #16]
 8001432:	e005      	b.n	8001440 <lcd_scan_dir+0x414>
 8001434:	2000007c 	.word	0x2000007c
 8001438:	40011000 	.word	0x40011000
 800143c:	40010c00 	.word	0x40010c00
 8001440:	4b3f      	ldr	r3, [pc, #252]	; (8001540 <lcd_scan_dir+0x514>)
 8001442:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001446:	611a      	str	r2, [r3, #16]
 8001448:	4b3e      	ldr	r3, [pc, #248]	; (8001544 <lcd_scan_dir+0x518>)
 800144a:	2200      	movs	r2, #0
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	4b3c      	ldr	r3, [pc, #240]	; (8001540 <lcd_scan_dir+0x514>)
 8001450:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001454:	611a      	str	r2, [r3, #16]
 8001456:	4b3a      	ldr	r3, [pc, #232]	; (8001540 <lcd_scan_dir+0x514>)
 8001458:	2280      	movs	r2, #128	; 0x80
 800145a:	611a      	str	r2, [r3, #16]
 800145c:	4b38      	ldr	r3, [pc, #224]	; (8001540 <lcd_scan_dir+0x514>)
 800145e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001462:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd + 2);
 8001464:	4b38      	ldr	r3, [pc, #224]	; (8001548 <lcd_scan_dir+0x51c>)
 8001466:	899b      	ldrh	r3, [r3, #12]
 8001468:	3302      	adds	r3, #2
 800146a:	b29b      	uxth	r3, r3
 800146c:	823b      	strh	r3, [r7, #16]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800146e:	4b34      	ldr	r3, [pc, #208]	; (8001540 <lcd_scan_dir+0x514>)
 8001470:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001474:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001476:	4b32      	ldr	r3, [pc, #200]	; (8001540 <lcd_scan_dir+0x514>)
 8001478:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800147c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800147e:	8a3b      	ldrh	r3, [r7, #16]
 8001480:	b29a      	uxth	r2, r3
 8001482:	4b30      	ldr	r3, [pc, #192]	; (8001544 <lcd_scan_dir+0x518>)
 8001484:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001486:	4b2e      	ldr	r3, [pc, #184]	; (8001540 <lcd_scan_dir+0x514>)
 8001488:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800148c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800148e:	4b2c      	ldr	r3, [pc, #176]	; (8001540 <lcd_scan_dir+0x514>)
 8001490:	2280      	movs	r2, #128	; 0x80
 8001492:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001494:	4b2a      	ldr	r3, [pc, #168]	; (8001540 <lcd_scan_dir+0x514>)
 8001496:	f44f 7200 	mov.w	r2, #512	; 0x200
 800149a:	611a      	str	r2, [r3, #16]
}
 800149c:	bf00      	nop
        lcd_wr_data((lcddev.height - 1) >> 8);
 800149e:	4b28      	ldr	r3, [pc, #160]	; (8001540 <lcd_scan_dir+0x514>)
 80014a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014a4:	611a      	str	r2, [r3, #16]
 80014a6:	4b26      	ldr	r3, [pc, #152]	; (8001540 <lcd_scan_dir+0x514>)
 80014a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014ac:	611a      	str	r2, [r3, #16]
 80014ae:	4b26      	ldr	r3, [pc, #152]	; (8001548 <lcd_scan_dir+0x51c>)
 80014b0:	885b      	ldrh	r3, [r3, #2]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	121a      	asrs	r2, r3, #8
 80014b6:	4b23      	ldr	r3, [pc, #140]	; (8001544 <lcd_scan_dir+0x518>)
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	4b21      	ldr	r3, [pc, #132]	; (8001540 <lcd_scan_dir+0x514>)
 80014bc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80014c0:	611a      	str	r2, [r3, #16]
 80014c2:	4b1f      	ldr	r3, [pc, #124]	; (8001540 <lcd_scan_dir+0x514>)
 80014c4:	2280      	movs	r2, #128	; 0x80
 80014c6:	611a      	str	r2, [r3, #16]
 80014c8:	4b1d      	ldr	r3, [pc, #116]	; (8001540 <lcd_scan_dir+0x514>)
 80014ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014ce:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd + 3);
 80014d0:	4b1d      	ldr	r3, [pc, #116]	; (8001548 <lcd_scan_dir+0x51c>)
 80014d2:	899b      	ldrh	r3, [r3, #12]
 80014d4:	3303      	adds	r3, #3
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80014da:	4b19      	ldr	r3, [pc, #100]	; (8001540 <lcd_scan_dir+0x514>)
 80014dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80014e0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80014e2:	4b17      	ldr	r3, [pc, #92]	; (8001540 <lcd_scan_dir+0x514>)
 80014e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014e8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80014ea:	89fb      	ldrh	r3, [r7, #14]
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	4b15      	ldr	r3, [pc, #84]	; (8001544 <lcd_scan_dir+0x518>)
 80014f0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80014f2:	4b13      	ldr	r3, [pc, #76]	; (8001540 <lcd_scan_dir+0x514>)
 80014f4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80014f8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80014fa:	4b11      	ldr	r3, [pc, #68]	; (8001540 <lcd_scan_dir+0x514>)
 80014fc:	2280      	movs	r2, #128	; 0x80
 80014fe:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001500:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <lcd_scan_dir+0x514>)
 8001502:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001506:	611a      	str	r2, [r3, #16]
}
 8001508:	bf00      	nop
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 800150a:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <lcd_scan_dir+0x514>)
 800150c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001510:	611a      	str	r2, [r3, #16]
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <lcd_scan_dir+0x514>)
 8001514:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001518:	611a      	str	r2, [r3, #16]
 800151a:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <lcd_scan_dir+0x51c>)
 800151c:	885b      	ldrh	r3, [r3, #2]
 800151e:	3b01      	subs	r3, #1
 8001520:	4a08      	ldr	r2, [pc, #32]	; (8001544 <lcd_scan_dir+0x518>)
 8001522:	b2db      	uxtb	r3, r3
 8001524:	60d3      	str	r3, [r2, #12]
 8001526:	4b06      	ldr	r3, [pc, #24]	; (8001540 <lcd_scan_dir+0x514>)
 8001528:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800152c:	611a      	str	r2, [r3, #16]
 800152e:	4b04      	ldr	r3, [pc, #16]	; (8001540 <lcd_scan_dir+0x514>)
 8001530:	2280      	movs	r2, #128	; 0x80
 8001532:	611a      	str	r2, [r3, #16]
 8001534:	4b02      	ldr	r3, [pc, #8]	; (8001540 <lcd_scan_dir+0x514>)
 8001536:	f44f 7200 	mov.w	r2, #512	; 0x200
 800153a:	611a      	str	r2, [r3, #16]
        lcd_wr_data(0);
        lcd_wr_data(0);
        lcd_wr_data((lcddev.height - 1) >> 8);
        lcd_wr_data((lcddev.height - 1) & 0XFF);
    }
}
 800153c:	e0f8      	b.n	8001730 <lcd_scan_dir+0x704>
 800153e:	bf00      	nop
 8001540:	40011000 	.word	0x40011000
 8001544:	40010c00 	.word	0x40010c00
 8001548:	2000007c 	.word	0x2000007c
        lcd_wr_regno(lcddev.setxcmd);
 800154c:	4b7a      	ldr	r3, [pc, #488]	; (8001738 <lcd_scan_dir+0x70c>)
 800154e:	895b      	ldrh	r3, [r3, #10]
 8001550:	843b      	strh	r3, [r7, #32]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001552:	4b7a      	ldr	r3, [pc, #488]	; (800173c <lcd_scan_dir+0x710>)
 8001554:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001558:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800155a:	4b78      	ldr	r3, [pc, #480]	; (800173c <lcd_scan_dir+0x710>)
 800155c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001560:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001562:	8c3b      	ldrh	r3, [r7, #32]
 8001564:	b29a      	uxth	r2, r3
 8001566:	4b76      	ldr	r3, [pc, #472]	; (8001740 <lcd_scan_dir+0x714>)
 8001568:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800156a:	4b74      	ldr	r3, [pc, #464]	; (800173c <lcd_scan_dir+0x710>)
 800156c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001570:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001572:	4b72      	ldr	r3, [pc, #456]	; (800173c <lcd_scan_dir+0x710>)
 8001574:	2280      	movs	r2, #128	; 0x80
 8001576:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001578:	4b70      	ldr	r3, [pc, #448]	; (800173c <lcd_scan_dir+0x710>)
 800157a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800157e:	611a      	str	r2, [r3, #16]
}
 8001580:	bf00      	nop
        lcd_wr_data(0);
 8001582:	4b6e      	ldr	r3, [pc, #440]	; (800173c <lcd_scan_dir+0x710>)
 8001584:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001588:	611a      	str	r2, [r3, #16]
 800158a:	4b6c      	ldr	r3, [pc, #432]	; (800173c <lcd_scan_dir+0x710>)
 800158c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001590:	611a      	str	r2, [r3, #16]
 8001592:	4b6b      	ldr	r3, [pc, #428]	; (8001740 <lcd_scan_dir+0x714>)
 8001594:	2200      	movs	r2, #0
 8001596:	60da      	str	r2, [r3, #12]
 8001598:	4b68      	ldr	r3, [pc, #416]	; (800173c <lcd_scan_dir+0x710>)
 800159a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800159e:	611a      	str	r2, [r3, #16]
 80015a0:	4b66      	ldr	r3, [pc, #408]	; (800173c <lcd_scan_dir+0x710>)
 80015a2:	2280      	movs	r2, #128	; 0x80
 80015a4:	611a      	str	r2, [r3, #16]
 80015a6:	4b65      	ldr	r3, [pc, #404]	; (800173c <lcd_scan_dir+0x710>)
 80015a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ac:	611a      	str	r2, [r3, #16]
        lcd_wr_data(0);
 80015ae:	4b63      	ldr	r3, [pc, #396]	; (800173c <lcd_scan_dir+0x710>)
 80015b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015b4:	611a      	str	r2, [r3, #16]
 80015b6:	4b61      	ldr	r3, [pc, #388]	; (800173c <lcd_scan_dir+0x710>)
 80015b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015bc:	611a      	str	r2, [r3, #16]
 80015be:	4b60      	ldr	r3, [pc, #384]	; (8001740 <lcd_scan_dir+0x714>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	60da      	str	r2, [r3, #12]
 80015c4:	4b5d      	ldr	r3, [pc, #372]	; (800173c <lcd_scan_dir+0x710>)
 80015c6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80015ca:	611a      	str	r2, [r3, #16]
 80015cc:	4b5b      	ldr	r3, [pc, #364]	; (800173c <lcd_scan_dir+0x710>)
 80015ce:	2280      	movs	r2, #128	; 0x80
 80015d0:	611a      	str	r2, [r3, #16]
 80015d2:	4b5a      	ldr	r3, [pc, #360]	; (800173c <lcd_scan_dir+0x710>)
 80015d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015d8:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.width - 1) >> 8);
 80015da:	4b58      	ldr	r3, [pc, #352]	; (800173c <lcd_scan_dir+0x710>)
 80015dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015e0:	611a      	str	r2, [r3, #16]
 80015e2:	4b56      	ldr	r3, [pc, #344]	; (800173c <lcd_scan_dir+0x710>)
 80015e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015e8:	611a      	str	r2, [r3, #16]
 80015ea:	4b53      	ldr	r3, [pc, #332]	; (8001738 <lcd_scan_dir+0x70c>)
 80015ec:	881b      	ldrh	r3, [r3, #0]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	121a      	asrs	r2, r3, #8
 80015f2:	4b53      	ldr	r3, [pc, #332]	; (8001740 <lcd_scan_dir+0x714>)
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	4b51      	ldr	r3, [pc, #324]	; (800173c <lcd_scan_dir+0x710>)
 80015f8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80015fc:	611a      	str	r2, [r3, #16]
 80015fe:	4b4f      	ldr	r3, [pc, #316]	; (800173c <lcd_scan_dir+0x710>)
 8001600:	2280      	movs	r2, #128	; 0x80
 8001602:	611a      	str	r2, [r3, #16]
 8001604:	4b4d      	ldr	r3, [pc, #308]	; (800173c <lcd_scan_dir+0x710>)
 8001606:	f44f 7200 	mov.w	r2, #512	; 0x200
 800160a:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.width - 1) & 0XFF);
 800160c:	4b4b      	ldr	r3, [pc, #300]	; (800173c <lcd_scan_dir+0x710>)
 800160e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001612:	611a      	str	r2, [r3, #16]
 8001614:	4b49      	ldr	r3, [pc, #292]	; (800173c <lcd_scan_dir+0x710>)
 8001616:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800161a:	611a      	str	r2, [r3, #16]
 800161c:	4b46      	ldr	r3, [pc, #280]	; (8001738 <lcd_scan_dir+0x70c>)
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	3b01      	subs	r3, #1
 8001622:	4a47      	ldr	r2, [pc, #284]	; (8001740 <lcd_scan_dir+0x714>)
 8001624:	b2db      	uxtb	r3, r3
 8001626:	60d3      	str	r3, [r2, #12]
 8001628:	4b44      	ldr	r3, [pc, #272]	; (800173c <lcd_scan_dir+0x710>)
 800162a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800162e:	611a      	str	r2, [r3, #16]
 8001630:	4b42      	ldr	r3, [pc, #264]	; (800173c <lcd_scan_dir+0x710>)
 8001632:	2280      	movs	r2, #128	; 0x80
 8001634:	611a      	str	r2, [r3, #16]
 8001636:	4b41      	ldr	r3, [pc, #260]	; (800173c <lcd_scan_dir+0x710>)
 8001638:	f44f 7200 	mov.w	r2, #512	; 0x200
 800163c:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd);
 800163e:	4b3e      	ldr	r3, [pc, #248]	; (8001738 <lcd_scan_dir+0x70c>)
 8001640:	899b      	ldrh	r3, [r3, #12]
 8001642:	83fb      	strh	r3, [r7, #30]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001644:	4b3d      	ldr	r3, [pc, #244]	; (800173c <lcd_scan_dir+0x710>)
 8001646:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800164a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800164c:	4b3b      	ldr	r3, [pc, #236]	; (800173c <lcd_scan_dir+0x710>)
 800164e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001652:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001654:	8bfb      	ldrh	r3, [r7, #30]
 8001656:	b29a      	uxth	r2, r3
 8001658:	4b39      	ldr	r3, [pc, #228]	; (8001740 <lcd_scan_dir+0x714>)
 800165a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800165c:	4b37      	ldr	r3, [pc, #220]	; (800173c <lcd_scan_dir+0x710>)
 800165e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001662:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001664:	4b35      	ldr	r3, [pc, #212]	; (800173c <lcd_scan_dir+0x710>)
 8001666:	2280      	movs	r2, #128	; 0x80
 8001668:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800166a:	4b34      	ldr	r3, [pc, #208]	; (800173c <lcd_scan_dir+0x710>)
 800166c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001670:	611a      	str	r2, [r3, #16]
}
 8001672:	bf00      	nop
        lcd_wr_data(0);
 8001674:	4b31      	ldr	r3, [pc, #196]	; (800173c <lcd_scan_dir+0x710>)
 8001676:	f44f 7280 	mov.w	r2, #256	; 0x100
 800167a:	611a      	str	r2, [r3, #16]
 800167c:	4b2f      	ldr	r3, [pc, #188]	; (800173c <lcd_scan_dir+0x710>)
 800167e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001682:	611a      	str	r2, [r3, #16]
 8001684:	4b2e      	ldr	r3, [pc, #184]	; (8001740 <lcd_scan_dir+0x714>)
 8001686:	2200      	movs	r2, #0
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	4b2c      	ldr	r3, [pc, #176]	; (800173c <lcd_scan_dir+0x710>)
 800168c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001690:	611a      	str	r2, [r3, #16]
 8001692:	4b2a      	ldr	r3, [pc, #168]	; (800173c <lcd_scan_dir+0x710>)
 8001694:	2280      	movs	r2, #128	; 0x80
 8001696:	611a      	str	r2, [r3, #16]
 8001698:	4b28      	ldr	r3, [pc, #160]	; (800173c <lcd_scan_dir+0x710>)
 800169a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800169e:	611a      	str	r2, [r3, #16]
        lcd_wr_data(0);
 80016a0:	4b26      	ldr	r3, [pc, #152]	; (800173c <lcd_scan_dir+0x710>)
 80016a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016a6:	611a      	str	r2, [r3, #16]
 80016a8:	4b24      	ldr	r3, [pc, #144]	; (800173c <lcd_scan_dir+0x710>)
 80016aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016ae:	611a      	str	r2, [r3, #16]
 80016b0:	4b23      	ldr	r3, [pc, #140]	; (8001740 <lcd_scan_dir+0x714>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	4b21      	ldr	r3, [pc, #132]	; (800173c <lcd_scan_dir+0x710>)
 80016b8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80016bc:	611a      	str	r2, [r3, #16]
 80016be:	4b1f      	ldr	r3, [pc, #124]	; (800173c <lcd_scan_dir+0x710>)
 80016c0:	2280      	movs	r2, #128	; 0x80
 80016c2:	611a      	str	r2, [r3, #16]
 80016c4:	4b1d      	ldr	r3, [pc, #116]	; (800173c <lcd_scan_dir+0x710>)
 80016c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ca:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.height - 1) >> 8);
 80016cc:	4b1b      	ldr	r3, [pc, #108]	; (800173c <lcd_scan_dir+0x710>)
 80016ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016d2:	611a      	str	r2, [r3, #16]
 80016d4:	4b19      	ldr	r3, [pc, #100]	; (800173c <lcd_scan_dir+0x710>)
 80016d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016da:	611a      	str	r2, [r3, #16]
 80016dc:	4b16      	ldr	r3, [pc, #88]	; (8001738 <lcd_scan_dir+0x70c>)
 80016de:	885b      	ldrh	r3, [r3, #2]
 80016e0:	3b01      	subs	r3, #1
 80016e2:	121a      	asrs	r2, r3, #8
 80016e4:	4b16      	ldr	r3, [pc, #88]	; (8001740 <lcd_scan_dir+0x714>)
 80016e6:	60da      	str	r2, [r3, #12]
 80016e8:	4b14      	ldr	r3, [pc, #80]	; (800173c <lcd_scan_dir+0x710>)
 80016ea:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80016ee:	611a      	str	r2, [r3, #16]
 80016f0:	4b12      	ldr	r3, [pc, #72]	; (800173c <lcd_scan_dir+0x710>)
 80016f2:	2280      	movs	r2, #128	; 0x80
 80016f4:	611a      	str	r2, [r3, #16]
 80016f6:	4b11      	ldr	r3, [pc, #68]	; (800173c <lcd_scan_dir+0x710>)
 80016f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016fc:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 80016fe:	4b0f      	ldr	r3, [pc, #60]	; (800173c <lcd_scan_dir+0x710>)
 8001700:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001704:	611a      	str	r2, [r3, #16]
 8001706:	4b0d      	ldr	r3, [pc, #52]	; (800173c <lcd_scan_dir+0x710>)
 8001708:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800170c:	611a      	str	r2, [r3, #16]
 800170e:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <lcd_scan_dir+0x70c>)
 8001710:	885b      	ldrh	r3, [r3, #2]
 8001712:	3b01      	subs	r3, #1
 8001714:	4a0a      	ldr	r2, [pc, #40]	; (8001740 <lcd_scan_dir+0x714>)
 8001716:	b2db      	uxtb	r3, r3
 8001718:	60d3      	str	r3, [r2, #12]
 800171a:	4b08      	ldr	r3, [pc, #32]	; (800173c <lcd_scan_dir+0x710>)
 800171c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001720:	611a      	str	r2, [r3, #16]
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <lcd_scan_dir+0x710>)
 8001724:	2280      	movs	r2, #128	; 0x80
 8001726:	611a      	str	r2, [r3, #16]
 8001728:	4b04      	ldr	r3, [pc, #16]	; (800173c <lcd_scan_dir+0x710>)
 800172a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800172e:	611a      	str	r2, [r3, #16]
}
 8001730:	bf00      	nop
 8001732:	3728      	adds	r7, #40	; 0x28
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	2000007c 	.word	0x2000007c
 800173c:	40011000 	.word	0x40011000
 8001740:	40010c00 	.word	0x40010c00

08001744 <lcd_draw_point>:
 * @param       x,y: ����
 * @param       color: �����ɫ(32λ��ɫ,�������LTDC)
 * @retval      ��
 */
void lcd_draw_point(uint16_t x, uint16_t y, uint32_t color)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	603a      	str	r2, [r7, #0]
 800174e:	80fb      	strh	r3, [r7, #6]
 8001750:	460b      	mov	r3, r1
 8001752:	80bb      	strh	r3, [r7, #4]
    lcd_set_cursor(x, y);       /* ���ù��λ�� */
 8001754:	88ba      	ldrh	r2, [r7, #4]
 8001756:	88fb      	ldrh	r3, [r7, #6]
 8001758:	4611      	mov	r1, r2
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff f952 	bl	8000a04 <lcd_set_cursor>
    lcd_wr_regno(lcddev.wramcmd);
 8001760:	4b1a      	ldr	r3, [pc, #104]	; (80017cc <lcd_draw_point+0x88>)
 8001762:	891b      	ldrh	r3, [r3, #8]
 8001764:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001766:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <lcd_draw_point+0x8c>)
 8001768:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800176c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800176e:	4b18      	ldr	r3, [pc, #96]	; (80017d0 <lcd_draw_point+0x8c>)
 8001770:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001774:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001776:	89fb      	ldrh	r3, [r7, #14]
 8001778:	b29a      	uxth	r2, r3
 800177a:	4b16      	ldr	r3, [pc, #88]	; (80017d4 <lcd_draw_point+0x90>)
 800177c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800177e:	4b14      	ldr	r3, [pc, #80]	; (80017d0 <lcd_draw_point+0x8c>)
 8001780:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001784:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001786:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <lcd_draw_point+0x8c>)
 8001788:	2280      	movs	r2, #128	; 0x80
 800178a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800178c:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <lcd_draw_point+0x8c>)
 800178e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001792:	611a      	str	r2, [r3, #16]
}
 8001794:	bf00      	nop
}
 8001796:	bf00      	nop
    lcd_write_ram_prepare();    /* ��ʼд��GRAM */
    lcd_wr_data(color);
 8001798:	4b0d      	ldr	r3, [pc, #52]	; (80017d0 <lcd_draw_point+0x8c>)
 800179a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800179e:	611a      	str	r2, [r3, #16]
 80017a0:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <lcd_draw_point+0x8c>)
 80017a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017a6:	611a      	str	r2, [r3, #16]
 80017a8:	4a0a      	ldr	r2, [pc, #40]	; (80017d4 <lcd_draw_point+0x90>)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	60d3      	str	r3, [r2, #12]
 80017ae:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <lcd_draw_point+0x8c>)
 80017b0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80017b4:	611a      	str	r2, [r3, #16]
 80017b6:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <lcd_draw_point+0x8c>)
 80017b8:	2280      	movs	r2, #128	; 0x80
 80017ba:	611a      	str	r2, [r3, #16]
 80017bc:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <lcd_draw_point+0x8c>)
 80017be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017c2:	611a      	str	r2, [r3, #16]
}
 80017c4:	bf00      	nop
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	2000007c 	.word	0x2000007c
 80017d0:	40011000 	.word	0x40011000
 80017d4:	40010c00 	.word	0x40010c00

080017d8 <lcd_ssd_backlight_set>:
 * @brief       SSD1963�����������ú���
 * @param       pwm: ����ȼ�,0~100.Խ��Խ��.
 * @retval      ��
 */
void lcd_ssd_backlight_set(uint8_t pwm)
{
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	71fb      	strb	r3, [r7, #7]
 80017e2:	23be      	movs	r3, #190	; 0xbe
 80017e4:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80017e6:	4b5a      	ldr	r3, [pc, #360]	; (8001950 <lcd_ssd_backlight_set+0x178>)
 80017e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80017ec:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80017ee:	4b58      	ldr	r3, [pc, #352]	; (8001950 <lcd_ssd_backlight_set+0x178>)
 80017f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017f4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80017f6:	89fb      	ldrh	r3, [r7, #14]
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	4b56      	ldr	r3, [pc, #344]	; (8001954 <lcd_ssd_backlight_set+0x17c>)
 80017fc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80017fe:	4b54      	ldr	r3, [pc, #336]	; (8001950 <lcd_ssd_backlight_set+0x178>)
 8001800:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001804:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001806:	4b52      	ldr	r3, [pc, #328]	; (8001950 <lcd_ssd_backlight_set+0x178>)
 8001808:	2280      	movs	r2, #128	; 0x80
 800180a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800180c:	4b50      	ldr	r3, [pc, #320]	; (8001950 <lcd_ssd_backlight_set+0x178>)
 800180e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001812:	611a      	str	r2, [r3, #16]
}
 8001814:	bf00      	nop
    lcd_wr_regno(0xBE);         /* ����PWM��� */
    lcd_wr_data(0x05);          /* 1����PWMƵ�� */
 8001816:	4b4e      	ldr	r3, [pc, #312]	; (8001950 <lcd_ssd_backlight_set+0x178>)
 8001818:	f44f 7280 	mov.w	r2, #256	; 0x100
 800181c:	611a      	str	r2, [r3, #16]
 800181e:	4b4c      	ldr	r3, [pc, #304]	; (8001950 <lcd_ssd_backlight_set+0x178>)
 8001820:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001824:	611a      	str	r2, [r3, #16]
 8001826:	4b4b      	ldr	r3, [pc, #300]	; (8001954 <lcd_ssd_backlight_set+0x17c>)
 8001828:	2205      	movs	r2, #5
 800182a:	60da      	str	r2, [r3, #12]
 800182c:	4b48      	ldr	r3, [pc, #288]	; (8001950 <lcd_ssd_backlight_set+0x178>)
 800182e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001832:	611a      	str	r2, [r3, #16]
 8001834:	4b46      	ldr	r3, [pc, #280]	; (8001950 <lcd_ssd_backlight_set+0x178>)
 8001836:	2280      	movs	r2, #128	; 0x80
 8001838:	611a      	str	r2, [r3, #16]
 800183a:	4b45      	ldr	r3, [pc, #276]	; (8001950 <lcd_ssd_backlight_set+0x178>)
 800183c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001840:	611a      	str	r2, [r3, #16]
    lcd_wr_data(pwm * 2.55);    /* 2����PWMռ�ձ� */
 8001842:	4b43      	ldr	r3, [pc, #268]	; (8001950 <lcd_ssd_backlight_set+0x178>)
 8001844:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001848:	611a      	str	r2, [r3, #16]
 800184a:	4b41      	ldr	r3, [pc, #260]	; (8001950 <lcd_ssd_backlight_set+0x178>)
 800184c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001850:	611a      	str	r2, [r3, #16]
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	4618      	mov	r0, r3
 8001856:	f7fe ff63 	bl	8000720 <__aeabi_i2d>
 800185a:	a33b      	add	r3, pc, #236	; (adr r3, 8001948 <lcd_ssd_backlight_set+0x170>)
 800185c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001860:	f7fe fce2 	bl	8000228 <__aeabi_dmul>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	4c3a      	ldr	r4, [pc, #232]	; (8001954 <lcd_ssd_backlight_set+0x17c>)
 800186a:	4610      	mov	r0, r2
 800186c:	4619      	mov	r1, r3
 800186e:	f7fe ffc1 	bl	80007f4 <__aeabi_d2uiz>
 8001872:	4603      	mov	r3, r0
 8001874:	60e3      	str	r3, [r4, #12]
 8001876:	4b36      	ldr	r3, [pc, #216]	; (8001950 <lcd_ssd_backlight_set+0x178>)
 8001878:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800187c:	611a      	str	r2, [r3, #16]
 800187e:	4b34      	ldr	r3, [pc, #208]	; (8001950 <lcd_ssd_backlight_set+0x178>)
 8001880:	2280      	movs	r2, #128	; 0x80
 8001882:	611a      	str	r2, [r3, #16]
 8001884:	4b32      	ldr	r3, [pc, #200]	; (8001950 <lcd_ssd_backlight_set+0x178>)
 8001886:	f44f 7200 	mov.w	r2, #512	; 0x200
 800188a:	611a      	str	r2, [r3, #16]
    lcd_wr_data(0x01);          /* 3����C */
 800188c:	4b30      	ldr	r3, [pc, #192]	; (8001950 <lcd_ssd_backlight_set+0x178>)
 800188e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001892:	611a      	str	r2, [r3, #16]
 8001894:	4b2e      	ldr	r3, [pc, #184]	; (8001950 <lcd_ssd_backlight_set+0x178>)
 8001896:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800189a:	611a      	str	r2, [r3, #16]
 800189c:	4b2d      	ldr	r3, [pc, #180]	; (8001954 <lcd_ssd_backlight_set+0x17c>)
 800189e:	2201      	movs	r2, #1
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	4b2b      	ldr	r3, [pc, #172]	; (8001950 <lcd_ssd_backlight_set+0x178>)
 80018a4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80018a8:	611a      	str	r2, [r3, #16]
 80018aa:	4b29      	ldr	r3, [pc, #164]	; (8001950 <lcd_ssd_backlight_set+0x178>)
 80018ac:	2280      	movs	r2, #128	; 0x80
 80018ae:	611a      	str	r2, [r3, #16]
 80018b0:	4b27      	ldr	r3, [pc, #156]	; (8001950 <lcd_ssd_backlight_set+0x178>)
 80018b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018b6:	611a      	str	r2, [r3, #16]
    lcd_wr_data(0xFF);          /* 4����D */
 80018b8:	4b25      	ldr	r3, [pc, #148]	; (8001950 <lcd_ssd_backlight_set+0x178>)
 80018ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018be:	611a      	str	r2, [r3, #16]
 80018c0:	4b23      	ldr	r3, [pc, #140]	; (8001950 <lcd_ssd_backlight_set+0x178>)
 80018c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018c6:	611a      	str	r2, [r3, #16]
 80018c8:	4b22      	ldr	r3, [pc, #136]	; (8001954 <lcd_ssd_backlight_set+0x17c>)
 80018ca:	22ff      	movs	r2, #255	; 0xff
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	4b20      	ldr	r3, [pc, #128]	; (8001950 <lcd_ssd_backlight_set+0x178>)
 80018d0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80018d4:	611a      	str	r2, [r3, #16]
 80018d6:	4b1e      	ldr	r3, [pc, #120]	; (8001950 <lcd_ssd_backlight_set+0x178>)
 80018d8:	2280      	movs	r2, #128	; 0x80
 80018da:	611a      	str	r2, [r3, #16]
 80018dc:	4b1c      	ldr	r3, [pc, #112]	; (8001950 <lcd_ssd_backlight_set+0x178>)
 80018de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018e2:	611a      	str	r2, [r3, #16]
    lcd_wr_data(0x00);          /* 5����E */
 80018e4:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <lcd_ssd_backlight_set+0x178>)
 80018e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018ea:	611a      	str	r2, [r3, #16]
 80018ec:	4b18      	ldr	r3, [pc, #96]	; (8001950 <lcd_ssd_backlight_set+0x178>)
 80018ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018f2:	611a      	str	r2, [r3, #16]
 80018f4:	4b17      	ldr	r3, [pc, #92]	; (8001954 <lcd_ssd_backlight_set+0x17c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	4b15      	ldr	r3, [pc, #84]	; (8001950 <lcd_ssd_backlight_set+0x178>)
 80018fc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001900:	611a      	str	r2, [r3, #16]
 8001902:	4b13      	ldr	r3, [pc, #76]	; (8001950 <lcd_ssd_backlight_set+0x178>)
 8001904:	2280      	movs	r2, #128	; 0x80
 8001906:	611a      	str	r2, [r3, #16]
 8001908:	4b11      	ldr	r3, [pc, #68]	; (8001950 <lcd_ssd_backlight_set+0x178>)
 800190a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800190e:	611a      	str	r2, [r3, #16]
    lcd_wr_data(0x00);          /* 6����F */
 8001910:	4b0f      	ldr	r3, [pc, #60]	; (8001950 <lcd_ssd_backlight_set+0x178>)
 8001912:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001916:	611a      	str	r2, [r3, #16]
 8001918:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <lcd_ssd_backlight_set+0x178>)
 800191a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800191e:	611a      	str	r2, [r3, #16]
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <lcd_ssd_backlight_set+0x17c>)
 8001922:	2200      	movs	r2, #0
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	4b0a      	ldr	r3, [pc, #40]	; (8001950 <lcd_ssd_backlight_set+0x178>)
 8001928:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800192c:	611a      	str	r2, [r3, #16]
 800192e:	4b08      	ldr	r3, [pc, #32]	; (8001950 <lcd_ssd_backlight_set+0x178>)
 8001930:	2280      	movs	r2, #128	; 0x80
 8001932:	611a      	str	r2, [r3, #16]
 8001934:	4b06      	ldr	r3, [pc, #24]	; (8001950 <lcd_ssd_backlight_set+0x178>)
 8001936:	f44f 7200 	mov.w	r2, #512	; 0x200
 800193a:	611a      	str	r2, [r3, #16]
}
 800193c:	bf00      	nop
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	bd90      	pop	{r4, r7, pc}
 8001944:	f3af 8000 	nop.w
 8001948:	66666666 	.word	0x66666666
 800194c:	40046666 	.word	0x40046666
 8001950:	40011000 	.word	0x40011000
 8001954:	40010c00 	.word	0x40010c00

08001958 <lcd_display_dir>:
 * @brief       ����LCD��ʾ����
 * @param       dir:0,����; 1,����
 * @retval      ��
 */
void lcd_display_dir(uint8_t dir)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	71fb      	strb	r3, [r7, #7]
    lcddev.dir = dir;   /* ����/���� */
 8001962:	4a68      	ldr	r2, [pc, #416]	; (8001b04 <lcd_display_dir+0x1ac>)
 8001964:	79fb      	ldrb	r3, [r7, #7]
 8001966:	7193      	strb	r3, [r2, #6]

    if (dir == 0)       /* ���� */
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d165      	bne.n	8001a3a <lcd_display_dir+0xe2>
    {
        lcddev.width = 240;
 800196e:	4b65      	ldr	r3, [pc, #404]	; (8001b04 <lcd_display_dir+0x1ac>)
 8001970:	22f0      	movs	r2, #240	; 0xf0
 8001972:	801a      	strh	r2, [r3, #0]
        lcddev.height = 320;
 8001974:	4b63      	ldr	r3, [pc, #396]	; (8001b04 <lcd_display_dir+0x1ac>)
 8001976:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800197a:	805a      	strh	r2, [r3, #2]

        if (lcddev.id == 0x5510)
 800197c:	4b61      	ldr	r3, [pc, #388]	; (8001b04 <lcd_display_dir+0x1ac>)
 800197e:	889b      	ldrh	r3, [r3, #4]
 8001980:	f245 5210 	movw	r2, #21776	; 0x5510
 8001984:	4293      	cmp	r3, r2
 8001986:	d114      	bne.n	80019b2 <lcd_display_dir+0x5a>
        {
            lcddev.wramcmd = 0X2C00;
 8001988:	4b5e      	ldr	r3, [pc, #376]	; (8001b04 <lcd_display_dir+0x1ac>)
 800198a:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 800198e:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A00;
 8001990:	4b5c      	ldr	r3, [pc, #368]	; (8001b04 <lcd_display_dir+0x1ac>)
 8001992:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001996:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B00;
 8001998:	4b5a      	ldr	r3, [pc, #360]	; (8001b04 <lcd_display_dir+0x1ac>)
 800199a:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 800199e:	819a      	strh	r2, [r3, #12]
            lcddev.width = 480;
 80019a0:	4b58      	ldr	r3, [pc, #352]	; (8001b04 <lcd_display_dir+0x1ac>)
 80019a2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80019a6:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;
 80019a8:	4b56      	ldr	r3, [pc, #344]	; (8001b04 <lcd_display_dir+0x1ac>)
 80019aa:	f44f 7248 	mov.w	r2, #800	; 0x320
 80019ae:	805a      	strh	r2, [r3, #2]
 80019b0:	e020      	b.n	80019f4 <lcd_display_dir+0x9c>
        }
        else if (lcddev.id == 0X1963)
 80019b2:	4b54      	ldr	r3, [pc, #336]	; (8001b04 <lcd_display_dir+0x1ac>)
 80019b4:	889b      	ldrh	r3, [r3, #4]
 80019b6:	f641 1263 	movw	r2, #6499	; 0x1963
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d111      	bne.n	80019e2 <lcd_display_dir+0x8a>
        {
            lcddev.wramcmd = 0X2C;  /* ����д��GRAM��ָ�� */
 80019be:	4b51      	ldr	r3, [pc, #324]	; (8001b04 <lcd_display_dir+0x1ac>)
 80019c0:	222c      	movs	r2, #44	; 0x2c
 80019c2:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2B;  /* ����дX����ָ�� */
 80019c4:	4b4f      	ldr	r3, [pc, #316]	; (8001b04 <lcd_display_dir+0x1ac>)
 80019c6:	222b      	movs	r2, #43	; 0x2b
 80019c8:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2A;  /* ����дY����ָ�� */
 80019ca:	4b4e      	ldr	r3, [pc, #312]	; (8001b04 <lcd_display_dir+0x1ac>)
 80019cc:	222a      	movs	r2, #42	; 0x2a
 80019ce:	819a      	strh	r2, [r3, #12]
            lcddev.width = 480;     /* ���ÿ��480 */
 80019d0:	4b4c      	ldr	r3, [pc, #304]	; (8001b04 <lcd_display_dir+0x1ac>)
 80019d2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80019d6:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;    /* ���ø߶�800 */
 80019d8:	4b4a      	ldr	r3, [pc, #296]	; (8001b04 <lcd_display_dir+0x1ac>)
 80019da:	f44f 7248 	mov.w	r2, #800	; 0x320
 80019de:	805a      	strh	r2, [r3, #2]
 80019e0:	e008      	b.n	80019f4 <lcd_display_dir+0x9c>
        }
        else   /* ����IC, ����: 9341 / 5310 / 7789 / 7796 / 9806 ��IC */
        {
            lcddev.wramcmd = 0X2C;
 80019e2:	4b48      	ldr	r3, [pc, #288]	; (8001b04 <lcd_display_dir+0x1ac>)
 80019e4:	222c      	movs	r2, #44	; 0x2c
 80019e6:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;
 80019e8:	4b46      	ldr	r3, [pc, #280]	; (8001b04 <lcd_display_dir+0x1ac>)
 80019ea:	222a      	movs	r2, #42	; 0x2a
 80019ec:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;
 80019ee:	4b45      	ldr	r3, [pc, #276]	; (8001b04 <lcd_display_dir+0x1ac>)
 80019f0:	222b      	movs	r2, #43	; 0x2b
 80019f2:	819a      	strh	r2, [r3, #12]
        }

        if (lcddev.id == 0X5310 || lcddev.id == 0x7796)     /* �����5310/7796 ���ʾ�� 320*480�ֱ��� */
 80019f4:	4b43      	ldr	r3, [pc, #268]	; (8001b04 <lcd_display_dir+0x1ac>)
 80019f6:	889b      	ldrh	r3, [r3, #4]
 80019f8:	f245 3210 	movw	r2, #21264	; 0x5310
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d005      	beq.n	8001a0c <lcd_display_dir+0xb4>
 8001a00:	4b40      	ldr	r3, [pc, #256]	; (8001b04 <lcd_display_dir+0x1ac>)
 8001a02:	889b      	ldrh	r3, [r3, #4]
 8001a04:	f247 7296 	movw	r2, #30614	; 0x7796
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d107      	bne.n	8001a1c <lcd_display_dir+0xc4>
        {
            lcddev.width = 320;
 8001a0c:	4b3d      	ldr	r3, [pc, #244]	; (8001b04 <lcd_display_dir+0x1ac>)
 8001a0e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001a12:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;
 8001a14:	4b3b      	ldr	r3, [pc, #236]	; (8001b04 <lcd_display_dir+0x1ac>)
 8001a16:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001a1a:	805a      	strh	r2, [r3, #2]
        }

        if (lcddev.id == 0X9806)    /* �����9806 ���ʾ�� 480*800 �ֱ��� */
 8001a1c:	4b39      	ldr	r3, [pc, #228]	; (8001b04 <lcd_display_dir+0x1ac>)
 8001a1e:	889b      	ldrh	r3, [r3, #4]
 8001a20:	f649 0206 	movw	r2, #38918	; 0x9806
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d165      	bne.n	8001af4 <lcd_display_dir+0x19c>
        {
            lcddev.width = 480;
 8001a28:	4b36      	ldr	r3, [pc, #216]	; (8001b04 <lcd_display_dir+0x1ac>)
 8001a2a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001a2e:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;
 8001a30:	4b34      	ldr	r3, [pc, #208]	; (8001b04 <lcd_display_dir+0x1ac>)
 8001a32:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001a36:	805a      	strh	r2, [r3, #2]
 8001a38:	e05c      	b.n	8001af4 <lcd_display_dir+0x19c>
        }
    }
    else                /* ���� */
    {
        lcddev.width = 320;         /* Ĭ�Ͽ�� */
 8001a3a:	4b32      	ldr	r3, [pc, #200]	; (8001b04 <lcd_display_dir+0x1ac>)
 8001a3c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001a40:	801a      	strh	r2, [r3, #0]
        lcddev.height = 240;        /* Ĭ�ϸ߶� */
 8001a42:	4b30      	ldr	r3, [pc, #192]	; (8001b04 <lcd_display_dir+0x1ac>)
 8001a44:	22f0      	movs	r2, #240	; 0xf0
 8001a46:	805a      	strh	r2, [r3, #2]

        if (lcddev.id == 0x5510)
 8001a48:	4b2e      	ldr	r3, [pc, #184]	; (8001b04 <lcd_display_dir+0x1ac>)
 8001a4a:	889b      	ldrh	r3, [r3, #4]
 8001a4c:	f245 5210 	movw	r2, #21776	; 0x5510
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d114      	bne.n	8001a7e <lcd_display_dir+0x126>
        {
            lcddev.wramcmd = 0X2C00;
 8001a54:	4b2b      	ldr	r3, [pc, #172]	; (8001b04 <lcd_display_dir+0x1ac>)
 8001a56:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001a5a:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A00;
 8001a5c:	4b29      	ldr	r3, [pc, #164]	; (8001b04 <lcd_display_dir+0x1ac>)
 8001a5e:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001a62:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B00;
 8001a64:	4b27      	ldr	r3, [pc, #156]	; (8001b04 <lcd_display_dir+0x1ac>)
 8001a66:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001a6a:	819a      	strh	r2, [r3, #12]
            lcddev.width = 800;
 8001a6c:	4b25      	ldr	r3, [pc, #148]	; (8001b04 <lcd_display_dir+0x1ac>)
 8001a6e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001a72:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;
 8001a74:	4b23      	ldr	r3, [pc, #140]	; (8001b04 <lcd_display_dir+0x1ac>)
 8001a76:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001a7a:	805a      	strh	r2, [r3, #2]
 8001a7c:	e026      	b.n	8001acc <lcd_display_dir+0x174>
        }
        else if (lcddev.id == 0X1963 || lcddev.id == 0x9806)
 8001a7e:	4b21      	ldr	r3, [pc, #132]	; (8001b04 <lcd_display_dir+0x1ac>)
 8001a80:	889b      	ldrh	r3, [r3, #4]
 8001a82:	f641 1263 	movw	r2, #6499	; 0x1963
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d005      	beq.n	8001a96 <lcd_display_dir+0x13e>
 8001a8a:	4b1e      	ldr	r3, [pc, #120]	; (8001b04 <lcd_display_dir+0x1ac>)
 8001a8c:	889b      	ldrh	r3, [r3, #4]
 8001a8e:	f649 0206 	movw	r2, #38918	; 0x9806
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d111      	bne.n	8001aba <lcd_display_dir+0x162>
        {
            lcddev.wramcmd = 0X2C;  /* ����д��GRAM��ָ�� */
 8001a96:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <lcd_display_dir+0x1ac>)
 8001a98:	222c      	movs	r2, #44	; 0x2c
 8001a9a:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;  /* ����дX����ָ�� */
 8001a9c:	4b19      	ldr	r3, [pc, #100]	; (8001b04 <lcd_display_dir+0x1ac>)
 8001a9e:	222a      	movs	r2, #42	; 0x2a
 8001aa0:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;  /* ����дY����ָ�� */
 8001aa2:	4b18      	ldr	r3, [pc, #96]	; (8001b04 <lcd_display_dir+0x1ac>)
 8001aa4:	222b      	movs	r2, #43	; 0x2b
 8001aa6:	819a      	strh	r2, [r3, #12]
            lcddev.width = 800;     /* ���ÿ��800 */
 8001aa8:	4b16      	ldr	r3, [pc, #88]	; (8001b04 <lcd_display_dir+0x1ac>)
 8001aaa:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001aae:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;    /* ���ø߶�480 */
 8001ab0:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <lcd_display_dir+0x1ac>)
 8001ab2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001ab6:	805a      	strh	r2, [r3, #2]
 8001ab8:	e008      	b.n	8001acc <lcd_display_dir+0x174>
        }
        else     /* ����IC, ����: 9341 / 5310 / 7789 / 7796 ��IC */
        {
            lcddev.wramcmd = 0X2C;
 8001aba:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <lcd_display_dir+0x1ac>)
 8001abc:	222c      	movs	r2, #44	; 0x2c
 8001abe:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;
 8001ac0:	4b10      	ldr	r3, [pc, #64]	; (8001b04 <lcd_display_dir+0x1ac>)
 8001ac2:	222a      	movs	r2, #42	; 0x2a
 8001ac4:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;
 8001ac6:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <lcd_display_dir+0x1ac>)
 8001ac8:	222b      	movs	r2, #43	; 0x2b
 8001aca:	819a      	strh	r2, [r3, #12]
        }

        if (lcddev.id == 0X5310 || lcddev.id == 0x7796)     /* �����5310/7796 ���ʾ�� 320*480�ֱ��� */
 8001acc:	4b0d      	ldr	r3, [pc, #52]	; (8001b04 <lcd_display_dir+0x1ac>)
 8001ace:	889b      	ldrh	r3, [r3, #4]
 8001ad0:	f245 3210 	movw	r2, #21264	; 0x5310
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d005      	beq.n	8001ae4 <lcd_display_dir+0x18c>
 8001ad8:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <lcd_display_dir+0x1ac>)
 8001ada:	889b      	ldrh	r3, [r3, #4]
 8001adc:	f247 7296 	movw	r2, #30614	; 0x7796
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d107      	bne.n	8001af4 <lcd_display_dir+0x19c>
        {
            lcddev.width = 480;
 8001ae4:	4b07      	ldr	r3, [pc, #28]	; (8001b04 <lcd_display_dir+0x1ac>)
 8001ae6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001aea:	801a      	strh	r2, [r3, #0]
            lcddev.height = 320;
 8001aec:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <lcd_display_dir+0x1ac>)
 8001aee:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001af2:	805a      	strh	r2, [r3, #2]
        }
    }

    lcd_scan_dir(DFT_SCAN_DIR);     /* Ĭ��ɨ�跽�� */
 8001af4:	2000      	movs	r0, #0
 8001af6:	f7ff fa99 	bl	800102c <lcd_scan_dir>
}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	2000007c 	.word	0x2000007c

08001b08 <lcd_init>:
 *
 * @param       ��
 * @retval      ��
 */
void lcd_init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b0da      	sub	sp, #360	; 0x168
 8001b0c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef gpio_init_struct;
    
    LCD_BL_GPIO_CLK_ENABLE();   /* LCD_BL��ʱ��ʹ�� */
 8001b0e:	4bbe      	ldr	r3, [pc, #760]	; (8001e08 <lcd_init+0x300>)
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	4abd      	ldr	r2, [pc, #756]	; (8001e08 <lcd_init+0x300>)
 8001b14:	f043 0310 	orr.w	r3, r3, #16
 8001b18:	6193      	str	r3, [r2, #24]
 8001b1a:	4bbb      	ldr	r3, [pc, #748]	; (8001e08 <lcd_init+0x300>)
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	f003 0210 	and.w	r2, r3, #16
 8001b22:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001b26:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001b30:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001b34:	681b      	ldr	r3, [r3, #0]
    LCD_CS_GPIO_CLK_ENABLE();   /* LCD_CS��ʱ��ʹ�� */
 8001b36:	4bb4      	ldr	r3, [pc, #720]	; (8001e08 <lcd_init+0x300>)
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	4ab3      	ldr	r2, [pc, #716]	; (8001e08 <lcd_init+0x300>)
 8001b3c:	f043 0310 	orr.w	r3, r3, #16
 8001b40:	6193      	str	r3, [r2, #24]
 8001b42:	4bb1      	ldr	r3, [pc, #708]	; (8001e08 <lcd_init+0x300>)
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	f003 0210 	and.w	r2, r3, #16
 8001b4a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001b4e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001b58:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001b5c:	681b      	ldr	r3, [r3, #0]
    LCD_WR_GPIO_CLK_ENABLE();   /* LCD_WR��ʱ��ʹ�� */
 8001b5e:	4baa      	ldr	r3, [pc, #680]	; (8001e08 <lcd_init+0x300>)
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	4aa9      	ldr	r2, [pc, #676]	; (8001e08 <lcd_init+0x300>)
 8001b64:	f043 0310 	orr.w	r3, r3, #16
 8001b68:	6193      	str	r3, [r2, #24]
 8001b6a:	4ba7      	ldr	r3, [pc, #668]	; (8001e08 <lcd_init+0x300>)
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	f003 0210 	and.w	r2, r3, #16
 8001b72:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001b76:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001b80:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001b84:	681b      	ldr	r3, [r3, #0]
    LCD_RD_GPIO_CLK_ENABLE();   /* LCD_RD��ʱ��ʹ�� */
 8001b86:	4ba0      	ldr	r3, [pc, #640]	; (8001e08 <lcd_init+0x300>)
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	4a9f      	ldr	r2, [pc, #636]	; (8001e08 <lcd_init+0x300>)
 8001b8c:	f043 0310 	orr.w	r3, r3, #16
 8001b90:	6193      	str	r3, [r2, #24]
 8001b92:	4b9d      	ldr	r3, [pc, #628]	; (8001e08 <lcd_init+0x300>)
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	f003 0210 	and.w	r2, r3, #16
 8001b9a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001b9e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001ba8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001bac:	681b      	ldr	r3, [r3, #0]
    LCD_RS_GPIO_CLK_ENABLE();   /* LCD_RS��ʱ��ʹ�� */
 8001bae:	4b96      	ldr	r3, [pc, #600]	; (8001e08 <lcd_init+0x300>)
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	4a95      	ldr	r2, [pc, #596]	; (8001e08 <lcd_init+0x300>)
 8001bb4:	f043 0310 	orr.w	r3, r3, #16
 8001bb8:	6193      	str	r3, [r2, #24]
 8001bba:	4b93      	ldr	r3, [pc, #588]	; (8001e08 <lcd_init+0x300>)
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	f003 0210 	and.w	r2, r3, #16
 8001bc2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001bc6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001bd0:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001bd4:	681b      	ldr	r3, [r3, #0]
    LCD_DATA_GPIO_CLK_ENABLE(); /* LCD_DATA��ʱ��ʹ�� */
 8001bd6:	4b8c      	ldr	r3, [pc, #560]	; (8001e08 <lcd_init+0x300>)
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	4a8b      	ldr	r2, [pc, #556]	; (8001e08 <lcd_init+0x300>)
 8001bdc:	f043 0308 	orr.w	r3, r3, #8
 8001be0:	6193      	str	r3, [r2, #24]
 8001be2:	4b89      	ldr	r3, [pc, #548]	; (8001e08 <lcd_init+0x300>)
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	f003 0208 	and.w	r2, r3, #8
 8001bea:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001bee:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001bf8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001bfc:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_AFIO_CLK_ENABLE();
 8001bfe:	4b82      	ldr	r3, [pc, #520]	; (8001e08 <lcd_init+0x300>)
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	4a81      	ldr	r2, [pc, #516]	; (8001e08 <lcd_init+0x300>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	6193      	str	r3, [r2, #24]
 8001c0a:	4b7f      	ldr	r3, [pc, #508]	; (8001e08 <lcd_init+0x300>)
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	f003 0201 	and.w	r2, r3, #1
 8001c12:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001c16:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001c20:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001c24:	681b      	ldr	r3, [r3, #0]
    __HAL_AFIO_REMAP_SWJ_NOJTAG(); /* ��ֹJTAG, ʹ��SWD, �ͷ�PB3,PB4������������ͨIO�� */
 8001c26:	4b79      	ldr	r3, [pc, #484]	; (8001e0c <lcd_init+0x304>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8001c2e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001c32:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c36:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8001c3a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001c3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c42:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8001c46:	4a71      	ldr	r2, [pc, #452]	; (8001e0c <lcd_init+0x304>)
 8001c48:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001c4c:	6053      	str	r3, [r2, #4]
    
    gpio_init_struct.Pin = LCD_BL_GPIO_PIN;
 8001c4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c52:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;               
 8001c56:	2301      	movs	r3, #1
 8001c58:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    gpio_init_struct.Pull = GPIO_PULLUP;                    
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;          
 8001c62:	2303      	movs	r3, #3
 8001c64:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    HAL_GPIO_Init(LCD_BL_GPIO_PORT, &gpio_init_struct);     /* LCD_BL����ģʽ����(�������) */
 8001c68:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4868      	ldr	r0, [pc, #416]	; (8001e10 <lcd_init+0x308>)
 8001c70:	f005 fdc8 	bl	8007804 <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_CS_GPIO_PIN;
 8001c74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c78:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;            /* ���츴�� */
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    gpio_init_struct.Pull = GPIO_PULLUP;                    /* ���� */
 8001c82:	2301      	movs	r3, #1
 8001c84:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;          /* ���� */
 8001c88:	2303      	movs	r3, #3
 8001c8a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    HAL_GPIO_Init(LCD_CS_GPIO_PORT, &gpio_init_struct);     /* ��ʼ��LCD_CS���� */
 8001c8e:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8001c92:	4619      	mov	r1, r3
 8001c94:	485e      	ldr	r0, [pc, #376]	; (8001e10 <lcd_init+0x308>)
 8001c96:	f005 fdb5 	bl	8007804 <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_WR_GPIO_PIN;
 8001c9a:	2380      	movs	r3, #128	; 0x80
 8001c9c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    HAL_GPIO_Init(LCD_WR_GPIO_PORT, &gpio_init_struct);     /* ��ʼ��LCD_WR���� */
 8001ca0:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	485a      	ldr	r0, [pc, #360]	; (8001e10 <lcd_init+0x308>)
 8001ca8:	f005 fdac 	bl	8007804 <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_RD_GPIO_PIN;
 8001cac:	2340      	movs	r3, #64	; 0x40
 8001cae:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    HAL_GPIO_Init(LCD_RD_GPIO_PORT, &gpio_init_struct);     /* ��ʼ��LCD_RD���� */
 8001cb2:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4855      	ldr	r0, [pc, #340]	; (8001e10 <lcd_init+0x308>)
 8001cba:	f005 fda3 	bl	8007804 <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_RS_GPIO_PIN;
 8001cbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cc2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    HAL_GPIO_Init(LCD_RS_GPIO_PORT, &gpio_init_struct);     /* ��ʼ��LCD_RS���� */
 8001cc6:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4850      	ldr	r0, [pc, #320]	; (8001e10 <lcd_init+0x308>)
 8001cce:	f005 fd99 	bl	8007804 <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_DATA_GPIO_PIN;
 8001cd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cd6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;            /* ������� */
 8001cda:	2301      	movs	r3, #1
 8001cdc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    HAL_GPIO_Init(LCD_DATA_GPIO_PORT, &gpio_init_struct);   /* LCD_DATA����ģʽ���� */
 8001ce0:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	484b      	ldr	r0, [pc, #300]	; (8001e14 <lcd_init+0x30c>)
 8001ce8:	f005 fd8c 	bl	8007804 <HAL_GPIO_Init>
    LCD_WR(1);                  /* WR Ĭ�ϸߵ�ƽ */
 8001cec:	4b48      	ldr	r3, [pc, #288]	; (8001e10 <lcd_init+0x308>)
 8001cee:	2280      	movs	r2, #128	; 0x80
 8001cf0:	611a      	str	r2, [r3, #16]
    LCD_RD(1);                  /* RD Ĭ�ϸߵ�ƽ */
 8001cf2:	4b47      	ldr	r3, [pc, #284]	; (8001e10 <lcd_init+0x308>)
 8001cf4:	2240      	movs	r2, #64	; 0x40
 8001cf6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);                  /* CS Ĭ�ϸߵ�ƽ */
 8001cf8:	4b45      	ldr	r3, [pc, #276]	; (8001e10 <lcd_init+0x308>)
 8001cfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cfe:	611a      	str	r2, [r3, #16]
    LCD_RS(1);                  /* RS Ĭ�ϸߵ�ƽ */
 8001d00:	4b43      	ldr	r3, [pc, #268]	; (8001e10 <lcd_init+0x308>)
 8001d02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d06:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(0XFFFF);       /* DATA Ĭ�ϸߵ�ƽ */
 8001d08:	4b42      	ldr	r3, [pc, #264]	; (8001e14 <lcd_init+0x30c>)
 8001d0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d0e:	60da      	str	r2, [r3, #12]

    lcd_opt_delay(0X1FFFF);
 8001d10:	4841      	ldr	r0, [pc, #260]	; (8001e18 <lcd_init+0x310>)
 8001d12:	f7fe fe23 	bl	800095c <lcd_opt_delay>
 8001d16:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001d1a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001d1e:	22d3      	movs	r2, #211	; 0xd3
 8001d20:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001d22:	4b3b      	ldr	r3, [pc, #236]	; (8001e10 <lcd_init+0x308>)
 8001d24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d28:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001d2a:	4b39      	ldr	r3, [pc, #228]	; (8001e10 <lcd_init+0x308>)
 8001d2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d30:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001d32:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001d36:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001d3a:	881b      	ldrh	r3, [r3, #0]
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	4b35      	ldr	r3, [pc, #212]	; (8001e14 <lcd_init+0x30c>)
 8001d40:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001d42:	4b33      	ldr	r3, [pc, #204]	; (8001e10 <lcd_init+0x308>)
 8001d44:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001d48:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001d4a:	4b31      	ldr	r3, [pc, #196]	; (8001e10 <lcd_init+0x308>)
 8001d4c:	2280      	movs	r2, #128	; 0x80
 8001d4e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001d50:	4b2f      	ldr	r3, [pc, #188]	; (8001e10 <lcd_init+0x308>)
 8001d52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d56:	611a      	str	r2, [r3, #16]
}
 8001d58:	bf00      	nop

    /* ����9341 ID�Ķ�ȡ */
    lcd_wr_regno(0XD3);
    lcddev.id = lcd_rd_data();  /* dummy read */
 8001d5a:	f7fe fe0f 	bl	800097c <lcd_rd_data>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	461a      	mov	r2, r3
 8001d62:	4b2e      	ldr	r3, [pc, #184]	; (8001e1c <lcd_init+0x314>)
 8001d64:	809a      	strh	r2, [r3, #4]
    lcddev.id = lcd_rd_data();  /* ����0X00 */
 8001d66:	f7fe fe09 	bl	800097c <lcd_rd_data>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4b2b      	ldr	r3, [pc, #172]	; (8001e1c <lcd_init+0x314>)
 8001d70:	809a      	strh	r2, [r3, #4]
    lcddev.id = lcd_rd_data();  /* ��ȡ0X93 */
 8001d72:	f7fe fe03 	bl	800097c <lcd_rd_data>
 8001d76:	4603      	mov	r3, r0
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4b28      	ldr	r3, [pc, #160]	; (8001e1c <lcd_init+0x314>)
 8001d7c:	809a      	strh	r2, [r3, #4]
    lcddev.id <<= 8;
 8001d7e:	4b27      	ldr	r3, [pc, #156]	; (8001e1c <lcd_init+0x314>)
 8001d80:	889b      	ldrh	r3, [r3, #4]
 8001d82:	021b      	lsls	r3, r3, #8
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	4b25      	ldr	r3, [pc, #148]	; (8001e1c <lcd_init+0x314>)
 8001d88:	809a      	strh	r2, [r3, #4]
    lcddev.id |= lcd_rd_data(); /* ��ȡ0X41 */
 8001d8a:	f7fe fdf7 	bl	800097c <lcd_rd_data>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	461a      	mov	r2, r3
 8001d92:	4b22      	ldr	r3, [pc, #136]	; (8001e1c <lcd_init+0x314>)
 8001d94:	889b      	ldrh	r3, [r3, #4]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	4b20      	ldr	r3, [pc, #128]	; (8001e1c <lcd_init+0x314>)
 8001d9c:	809a      	strh	r2, [r3, #4]

    if (lcddev.id != 0X9341)    /* ���� 9341 , ���Կ����ǲ��� ST7789 */
 8001d9e:	4b1f      	ldr	r3, [pc, #124]	; (8001e1c <lcd_init+0x314>)
 8001da0:	889b      	ldrh	r3, [r3, #4]
 8001da2:	f249 3241 	movw	r2, #37697	; 0x9341
 8001da6:	4293      	cmp	r3, r2
 8001da8:	f000 820e 	beq.w	80021c8 <lcd_init+0x6c0>
 8001dac:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001db0:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
 8001db4:	2204      	movs	r2, #4
 8001db6:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001db8:	4b15      	ldr	r3, [pc, #84]	; (8001e10 <lcd_init+0x308>)
 8001dba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001dbe:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001dc0:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <lcd_init+0x308>)
 8001dc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dc6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001dc8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001dcc:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	4b0f      	ldr	r3, [pc, #60]	; (8001e14 <lcd_init+0x30c>)
 8001dd6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001dd8:	4b0d      	ldr	r3, [pc, #52]	; (8001e10 <lcd_init+0x308>)
 8001dda:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001dde:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001de0:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <lcd_init+0x308>)
 8001de2:	2280      	movs	r2, #128	; 0x80
 8001de4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001de6:	4b0a      	ldr	r3, [pc, #40]	; (8001e10 <lcd_init+0x308>)
 8001de8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dec:	611a      	str	r2, [r3, #16]
}
 8001dee:	bf00      	nop
    {
        lcd_wr_regno(0X04);
        lcddev.id = lcd_rd_data();      /* dummy read */
 8001df0:	f7fe fdc4 	bl	800097c <lcd_rd_data>
 8001df4:	4603      	mov	r3, r0
 8001df6:	461a      	mov	r2, r3
 8001df8:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <lcd_init+0x314>)
 8001dfa:	809a      	strh	r2, [r3, #4]
        lcddev.id = lcd_rd_data();      /* ����0X85 */
 8001dfc:	f7fe fdbe 	bl	800097c <lcd_rd_data>
 8001e00:	4603      	mov	r3, r0
 8001e02:	461a      	mov	r2, r3
 8001e04:	e00c      	b.n	8001e20 <lcd_init+0x318>
 8001e06:	bf00      	nop
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	40010000 	.word	0x40010000
 8001e10:	40011000 	.word	0x40011000
 8001e14:	40010c00 	.word	0x40010c00
 8001e18:	0001ffff 	.word	0x0001ffff
 8001e1c:	2000007c 	.word	0x2000007c
 8001e20:	4bb1      	ldr	r3, [pc, #708]	; (80020e8 <lcd_init+0x5e0>)
 8001e22:	809a      	strh	r2, [r3, #4]
        lcddev.id = lcd_rd_data();      /* ��ȡ0X85 */
 8001e24:	f7fe fdaa 	bl	800097c <lcd_rd_data>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	4bae      	ldr	r3, [pc, #696]	; (80020e8 <lcd_init+0x5e0>)
 8001e2e:	809a      	strh	r2, [r3, #4]
        lcddev.id <<= 8;
 8001e30:	4bad      	ldr	r3, [pc, #692]	; (80020e8 <lcd_init+0x5e0>)
 8001e32:	889b      	ldrh	r3, [r3, #4]
 8001e34:	021b      	lsls	r3, r3, #8
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	4bab      	ldr	r3, [pc, #684]	; (80020e8 <lcd_init+0x5e0>)
 8001e3a:	809a      	strh	r2, [r3, #4]
        lcddev.id |= lcd_rd_data();     /* ��ȡ0X52 */
 8001e3c:	f7fe fd9e 	bl	800097c <lcd_rd_data>
 8001e40:	4603      	mov	r3, r0
 8001e42:	461a      	mov	r2, r3
 8001e44:	4ba8      	ldr	r3, [pc, #672]	; (80020e8 <lcd_init+0x5e0>)
 8001e46:	889b      	ldrh	r3, [r3, #4]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	4ba6      	ldr	r3, [pc, #664]	; (80020e8 <lcd_init+0x5e0>)
 8001e4e:	809a      	strh	r2, [r3, #4]
        
        if (lcddev.id == 0X8552)        /* ��8552��IDת����7789 */
 8001e50:	4ba5      	ldr	r3, [pc, #660]	; (80020e8 <lcd_init+0x5e0>)
 8001e52:	889b      	ldrh	r3, [r3, #4]
 8001e54:	f248 5252 	movw	r2, #34130	; 0x8552
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d103      	bne.n	8001e64 <lcd_init+0x35c>
        {
            lcddev.id = 0x7789;
 8001e5c:	4ba2      	ldr	r3, [pc, #648]	; (80020e8 <lcd_init+0x5e0>)
 8001e5e:	f247 7289 	movw	r2, #30601	; 0x7789
 8001e62:	809a      	strh	r2, [r3, #4]
        }

        if (lcddev.id != 0x7789)        /* Ҳ����ST7789, �����ǲ��� NT35310 */
 8001e64:	4ba0      	ldr	r3, [pc, #640]	; (80020e8 <lcd_init+0x5e0>)
 8001e66:	889b      	ldrh	r3, [r3, #4]
 8001e68:	f247 7289 	movw	r2, #30601	; 0x7789
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	f000 81ab 	beq.w	80021c8 <lcd_init+0x6c0>
 8001e72:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001e76:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001e7a:	22d4      	movs	r2, #212	; 0xd4
 8001e7c:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001e7e:	4b9b      	ldr	r3, [pc, #620]	; (80020ec <lcd_init+0x5e4>)
 8001e80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e84:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001e86:	4b99      	ldr	r3, [pc, #612]	; (80020ec <lcd_init+0x5e4>)
 8001e88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e8c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001e8e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001e92:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	4b95      	ldr	r3, [pc, #596]	; (80020f0 <lcd_init+0x5e8>)
 8001e9c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001e9e:	4b93      	ldr	r3, [pc, #588]	; (80020ec <lcd_init+0x5e4>)
 8001ea0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001ea4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001ea6:	4b91      	ldr	r3, [pc, #580]	; (80020ec <lcd_init+0x5e4>)
 8001ea8:	2280      	movs	r2, #128	; 0x80
 8001eaa:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001eac:	4b8f      	ldr	r3, [pc, #572]	; (80020ec <lcd_init+0x5e4>)
 8001eae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eb2:	611a      	str	r2, [r3, #16]
}
 8001eb4:	bf00      	nop
        {
            lcd_wr_regno(0xD4);
            lcddev.id = lcd_rd_data();  /* dummy read */
 8001eb6:	f7fe fd61 	bl	800097c <lcd_rd_data>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4b8a      	ldr	r3, [pc, #552]	; (80020e8 <lcd_init+0x5e0>)
 8001ec0:	809a      	strh	r2, [r3, #4]
            lcddev.id = lcd_rd_data();  /* ����0x01 */
 8001ec2:	f7fe fd5b 	bl	800097c <lcd_rd_data>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	461a      	mov	r2, r3
 8001eca:	4b87      	ldr	r3, [pc, #540]	; (80020e8 <lcd_init+0x5e0>)
 8001ecc:	809a      	strh	r2, [r3, #4]
            lcddev.id = lcd_rd_data();  /* ����0x53 */
 8001ece:	f7fe fd55 	bl	800097c <lcd_rd_data>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4b84      	ldr	r3, [pc, #528]	; (80020e8 <lcd_init+0x5e0>)
 8001ed8:	809a      	strh	r2, [r3, #4]
            lcddev.id <<= 8;
 8001eda:	4b83      	ldr	r3, [pc, #524]	; (80020e8 <lcd_init+0x5e0>)
 8001edc:	889b      	ldrh	r3, [r3, #4]
 8001ede:	021b      	lsls	r3, r3, #8
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	4b81      	ldr	r3, [pc, #516]	; (80020e8 <lcd_init+0x5e0>)
 8001ee4:	809a      	strh	r2, [r3, #4]
            lcddev.id |= lcd_rd_data(); /* �������0x10 */
 8001ee6:	f7fe fd49 	bl	800097c <lcd_rd_data>
 8001eea:	4603      	mov	r3, r0
 8001eec:	461a      	mov	r2, r3
 8001eee:	4b7e      	ldr	r3, [pc, #504]	; (80020e8 <lcd_init+0x5e0>)
 8001ef0:	889b      	ldrh	r3, [r3, #4]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	4b7c      	ldr	r3, [pc, #496]	; (80020e8 <lcd_init+0x5e0>)
 8001ef8:	809a      	strh	r2, [r3, #4]

            if (lcddev.id != 0x5310)    /* Ҳ����NT35310,���Կ����ǲ���ST7796 */
 8001efa:	4b7b      	ldr	r3, [pc, #492]	; (80020e8 <lcd_init+0x5e0>)
 8001efc:	889b      	ldrh	r3, [r3, #4]
 8001efe:	f245 3210 	movw	r2, #21264	; 0x5310
 8001f02:	4293      	cmp	r3, r2
 8001f04:	f000 8160 	beq.w	80021c8 <lcd_init+0x6c0>
 8001f08:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001f0c:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8001f10:	22d3      	movs	r2, #211	; 0xd3
 8001f12:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001f14:	4b75      	ldr	r3, [pc, #468]	; (80020ec <lcd_init+0x5e4>)
 8001f16:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f1a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001f1c:	4b73      	ldr	r3, [pc, #460]	; (80020ec <lcd_init+0x5e4>)
 8001f1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f22:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001f24:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001f28:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8001f2c:	881b      	ldrh	r3, [r3, #0]
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	4b6f      	ldr	r3, [pc, #444]	; (80020f0 <lcd_init+0x5e8>)
 8001f32:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001f34:	4b6d      	ldr	r3, [pc, #436]	; (80020ec <lcd_init+0x5e4>)
 8001f36:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001f3a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001f3c:	4b6b      	ldr	r3, [pc, #428]	; (80020ec <lcd_init+0x5e4>)
 8001f3e:	2280      	movs	r2, #128	; 0x80
 8001f40:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001f42:	4b6a      	ldr	r3, [pc, #424]	; (80020ec <lcd_init+0x5e4>)
 8001f44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f48:	611a      	str	r2, [r3, #16]
}
 8001f4a:	bf00      	nop
            {
                lcd_wr_regno(0XD3);
                lcddev.id = lcd_rd_data();  /* dummy read */
 8001f4c:	f7fe fd16 	bl	800097c <lcd_rd_data>
 8001f50:	4603      	mov	r3, r0
 8001f52:	461a      	mov	r2, r3
 8001f54:	4b64      	ldr	r3, [pc, #400]	; (80020e8 <lcd_init+0x5e0>)
 8001f56:	809a      	strh	r2, [r3, #4]
                lcddev.id = lcd_rd_data();  /* ����0X00 */
 8001f58:	f7fe fd10 	bl	800097c <lcd_rd_data>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	461a      	mov	r2, r3
 8001f60:	4b61      	ldr	r3, [pc, #388]	; (80020e8 <lcd_init+0x5e0>)
 8001f62:	809a      	strh	r2, [r3, #4]
                lcddev.id = lcd_rd_data();  /* ��ȡ0X77 */
 8001f64:	f7fe fd0a 	bl	800097c <lcd_rd_data>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	4b5e      	ldr	r3, [pc, #376]	; (80020e8 <lcd_init+0x5e0>)
 8001f6e:	809a      	strh	r2, [r3, #4]
                lcddev.id <<= 8;
 8001f70:	4b5d      	ldr	r3, [pc, #372]	; (80020e8 <lcd_init+0x5e0>)
 8001f72:	889b      	ldrh	r3, [r3, #4]
 8001f74:	021b      	lsls	r3, r3, #8
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	4b5b      	ldr	r3, [pc, #364]	; (80020e8 <lcd_init+0x5e0>)
 8001f7a:	809a      	strh	r2, [r3, #4]
                lcddev.id |= lcd_rd_data(); /* ��ȡ0X96 */
 8001f7c:	f7fe fcfe 	bl	800097c <lcd_rd_data>
 8001f80:	4603      	mov	r3, r0
 8001f82:	461a      	mov	r2, r3
 8001f84:	4b58      	ldr	r3, [pc, #352]	; (80020e8 <lcd_init+0x5e0>)
 8001f86:	889b      	ldrh	r3, [r3, #4]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	4b56      	ldr	r3, [pc, #344]	; (80020e8 <lcd_init+0x5e0>)
 8001f8e:	809a      	strh	r2, [r3, #4]
                
                if (lcddev.id != 0x7796)    /* Ҳ����ST7796,���Կ����ǲ���NT35510 */
 8001f90:	4b55      	ldr	r3, [pc, #340]	; (80020e8 <lcd_init+0x5e0>)
 8001f92:	889b      	ldrh	r3, [r3, #4]
 8001f94:	f247 7296 	movw	r2, #30614	; 0x7796
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	f000 8115 	beq.w	80021c8 <lcd_init+0x6c0>
                {
                    /* ������Կ�������ṩ�� */
                    lcd_write_reg(0xF000, 0x0055);
 8001f9e:	2155      	movs	r1, #85	; 0x55
 8001fa0:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8001fa4:	f7fe fc98 	bl	80008d8 <lcd_write_reg>
                    lcd_write_reg(0xF001, 0x00AA);
 8001fa8:	21aa      	movs	r1, #170	; 0xaa
 8001faa:	f24f 0001 	movw	r0, #61441	; 0xf001
 8001fae:	f7fe fc93 	bl	80008d8 <lcd_write_reg>
                    lcd_write_reg(0xF002, 0x0052);
 8001fb2:	2152      	movs	r1, #82	; 0x52
 8001fb4:	f24f 0002 	movw	r0, #61442	; 0xf002
 8001fb8:	f7fe fc8e 	bl	80008d8 <lcd_write_reg>
                    lcd_write_reg(0xF003, 0x0008);
 8001fbc:	2108      	movs	r1, #8
 8001fbe:	f24f 0003 	movw	r0, #61443	; 0xf003
 8001fc2:	f7fe fc89 	bl	80008d8 <lcd_write_reg>
                    lcd_write_reg(0xF004, 0x0001);
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	f24f 0004 	movw	r0, #61444	; 0xf004
 8001fcc:	f7fe fc84 	bl	80008d8 <lcd_write_reg>
 8001fd0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001fd4:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 8001fd8:	f44f 4245 	mov.w	r2, #50432	; 0xc500
 8001fdc:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001fde:	4b43      	ldr	r3, [pc, #268]	; (80020ec <lcd_init+0x5e4>)
 8001fe0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001fe4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001fe6:	4b41      	ldr	r3, [pc, #260]	; (80020ec <lcd_init+0x5e4>)
 8001fe8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fec:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001fee:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001ff2:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	4b3d      	ldr	r3, [pc, #244]	; (80020f0 <lcd_init+0x5e8>)
 8001ffc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001ffe:	4b3b      	ldr	r3, [pc, #236]	; (80020ec <lcd_init+0x5e4>)
 8002000:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002004:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002006:	4b39      	ldr	r3, [pc, #228]	; (80020ec <lcd_init+0x5e4>)
 8002008:	2280      	movs	r2, #128	; 0x80
 800200a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800200c:	4b37      	ldr	r3, [pc, #220]	; (80020ec <lcd_init+0x5e4>)
 800200e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002012:	611a      	str	r2, [r3, #16]
}
 8002014:	bf00      	nop

                    lcd_wr_regno(0xC500);       /* ��ȡID�Ͱ�λ */
                    lcddev.id = lcd_rd_data();  /* ����0x55 */
 8002016:	f7fe fcb1 	bl	800097c <lcd_rd_data>
 800201a:	4603      	mov	r3, r0
 800201c:	461a      	mov	r2, r3
 800201e:	4b32      	ldr	r3, [pc, #200]	; (80020e8 <lcd_init+0x5e0>)
 8002020:	809a      	strh	r2, [r3, #4]
                    lcddev.id <<= 8;
 8002022:	4b31      	ldr	r3, [pc, #196]	; (80020e8 <lcd_init+0x5e0>)
 8002024:	889b      	ldrh	r3, [r3, #4]
 8002026:	021b      	lsls	r3, r3, #8
 8002028:	b29a      	uxth	r2, r3
 800202a:	4b2f      	ldr	r3, [pc, #188]	; (80020e8 <lcd_init+0x5e0>)
 800202c:	809a      	strh	r2, [r3, #4]
 800202e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002032:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002036:	f24c 5201 	movw	r2, #50433	; 0xc501
 800203a:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800203c:	4b2b      	ldr	r3, [pc, #172]	; (80020ec <lcd_init+0x5e4>)
 800203e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002042:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002044:	4b29      	ldr	r3, [pc, #164]	; (80020ec <lcd_init+0x5e4>)
 8002046:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800204a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800204c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002050:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002054:	881b      	ldrh	r3, [r3, #0]
 8002056:	b29a      	uxth	r2, r3
 8002058:	4b25      	ldr	r3, [pc, #148]	; (80020f0 <lcd_init+0x5e8>)
 800205a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800205c:	4b23      	ldr	r3, [pc, #140]	; (80020ec <lcd_init+0x5e4>)
 800205e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002062:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002064:	4b21      	ldr	r3, [pc, #132]	; (80020ec <lcd_init+0x5e4>)
 8002066:	2280      	movs	r2, #128	; 0x80
 8002068:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800206a:	4b20      	ldr	r3, [pc, #128]	; (80020ec <lcd_init+0x5e4>)
 800206c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002070:	611a      	str	r2, [r3, #16]
}
 8002072:	bf00      	nop

                    lcd_wr_regno(0xC501);       /* ��ȡID�߰�λ */
                    lcddev.id |= lcd_rd_data(); /* ����0x10 */
 8002074:	f7fe fc82 	bl	800097c <lcd_rd_data>
 8002078:	4603      	mov	r3, r0
 800207a:	461a      	mov	r2, r3
 800207c:	4b1a      	ldr	r3, [pc, #104]	; (80020e8 <lcd_init+0x5e0>)
 800207e:	889b      	ldrh	r3, [r3, #4]
 8002080:	4313      	orrs	r3, r2
 8002082:	b29a      	uxth	r2, r3
 8002084:	4b18      	ldr	r3, [pc, #96]	; (80020e8 <lcd_init+0x5e0>)
 8002086:	809a      	strh	r2, [r3, #4]
                    
                    //delay_ms(5);                /* �ȴ�5ms, ��Ϊ0XC501ָ���1963��˵���������λָ��, �ȴ�5ms��1963��λ����ٲ��� */

                    if (lcddev.id != 0x5510)    /* Ҳ����NT5510,���Կ����ǲ���ILI9806 */
 8002088:	4b17      	ldr	r3, [pc, #92]	; (80020e8 <lcd_init+0x5e0>)
 800208a:	889b      	ldrh	r3, [r3, #4]
 800208c:	f245 5210 	movw	r2, #21776	; 0x5510
 8002090:	4293      	cmp	r3, r2
 8002092:	f000 8099 	beq.w	80021c8 <lcd_init+0x6c0>
 8002096:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800209a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800209e:	22d3      	movs	r2, #211	; 0xd3
 80020a0:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80020a2:	4b12      	ldr	r3, [pc, #72]	; (80020ec <lcd_init+0x5e4>)
 80020a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020a8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80020aa:	4b10      	ldr	r3, [pc, #64]	; (80020ec <lcd_init+0x5e4>)
 80020ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020b0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80020b2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80020b6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80020ba:	881b      	ldrh	r3, [r3, #0]
 80020bc:	b29a      	uxth	r2, r3
 80020be:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <lcd_init+0x5e8>)
 80020c0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80020c2:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <lcd_init+0x5e4>)
 80020c4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80020c8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80020ca:	4b08      	ldr	r3, [pc, #32]	; (80020ec <lcd_init+0x5e4>)
 80020cc:	2280      	movs	r2, #128	; 0x80
 80020ce:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80020d0:	4b06      	ldr	r3, [pc, #24]	; (80020ec <lcd_init+0x5e4>)
 80020d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020d6:	611a      	str	r2, [r3, #16]
}
 80020d8:	bf00      	nop
                    {
                        lcd_wr_regno(0XD3);
                        lcddev.id = lcd_rd_data();  /* dummy read */
 80020da:	f7fe fc4f 	bl	800097c <lcd_rd_data>
 80020de:	4603      	mov	r3, r0
 80020e0:	461a      	mov	r2, r3
 80020e2:	4b01      	ldr	r3, [pc, #4]	; (80020e8 <lcd_init+0x5e0>)
 80020e4:	809a      	strh	r2, [r3, #4]
 80020e6:	e005      	b.n	80020f4 <lcd_init+0x5ec>
 80020e8:	2000007c 	.word	0x2000007c
 80020ec:	40011000 	.word	0x40011000
 80020f0:	40010c00 	.word	0x40010c00
                        lcddev.id = lcd_rd_data();  /* ����0X00 */
 80020f4:	f7fe fc42 	bl	800097c <lcd_rd_data>
 80020f8:	4603      	mov	r3, r0
 80020fa:	461a      	mov	r2, r3
 80020fc:	4bb2      	ldr	r3, [pc, #712]	; (80023c8 <lcd_init+0x8c0>)
 80020fe:	809a      	strh	r2, [r3, #4]
                        lcddev.id = lcd_rd_data();  /* ����0X98 */
 8002100:	f7fe fc3c 	bl	800097c <lcd_rd_data>
 8002104:	4603      	mov	r3, r0
 8002106:	461a      	mov	r2, r3
 8002108:	4baf      	ldr	r3, [pc, #700]	; (80023c8 <lcd_init+0x8c0>)
 800210a:	809a      	strh	r2, [r3, #4]
                        lcddev.id <<= 8;
 800210c:	4bae      	ldr	r3, [pc, #696]	; (80023c8 <lcd_init+0x8c0>)
 800210e:	889b      	ldrh	r3, [r3, #4]
 8002110:	021b      	lsls	r3, r3, #8
 8002112:	b29a      	uxth	r2, r3
 8002114:	4bac      	ldr	r3, [pc, #688]	; (80023c8 <lcd_init+0x8c0>)
 8002116:	809a      	strh	r2, [r3, #4]
                        lcddev.id |= lcd_rd_data(); /* ����0X06 */
 8002118:	f7fe fc30 	bl	800097c <lcd_rd_data>
 800211c:	4603      	mov	r3, r0
 800211e:	461a      	mov	r2, r3
 8002120:	4ba9      	ldr	r3, [pc, #676]	; (80023c8 <lcd_init+0x8c0>)
 8002122:	889b      	ldrh	r3, [r3, #4]
 8002124:	4313      	orrs	r3, r2
 8002126:	b29a      	uxth	r2, r3
 8002128:	4ba7      	ldr	r3, [pc, #668]	; (80023c8 <lcd_init+0x8c0>)
 800212a:	809a      	strh	r2, [r3, #4]
                        
                        if (lcddev.id != 0x9806)    /* Ҳ����ILI9806,���Կ����ǲ���SSD1963 */
 800212c:	4ba6      	ldr	r3, [pc, #664]	; (80023c8 <lcd_init+0x8c0>)
 800212e:	889b      	ldrh	r3, [r3, #4]
 8002130:	f649 0206 	movw	r2, #38918	; 0x9806
 8002134:	4293      	cmp	r3, r2
 8002136:	d047      	beq.n	80021c8 <lcd_init+0x6c0>
 8002138:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800213c:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 8002140:	22a1      	movs	r2, #161	; 0xa1
 8002142:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002144:	4ba1      	ldr	r3, [pc, #644]	; (80023cc <lcd_init+0x8c4>)
 8002146:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800214a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800214c:	4b9f      	ldr	r3, [pc, #636]	; (80023cc <lcd_init+0x8c4>)
 800214e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002152:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002154:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002158:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800215c:	881b      	ldrh	r3, [r3, #0]
 800215e:	b29a      	uxth	r2, r3
 8002160:	4b9b      	ldr	r3, [pc, #620]	; (80023d0 <lcd_init+0x8c8>)
 8002162:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002164:	4b99      	ldr	r3, [pc, #612]	; (80023cc <lcd_init+0x8c4>)
 8002166:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800216a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800216c:	4b97      	ldr	r3, [pc, #604]	; (80023cc <lcd_init+0x8c4>)
 800216e:	2280      	movs	r2, #128	; 0x80
 8002170:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002172:	4b96      	ldr	r3, [pc, #600]	; (80023cc <lcd_init+0x8c4>)
 8002174:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002178:	611a      	str	r2, [r3, #16]
}
 800217a:	bf00      	nop
                        {
                            lcd_wr_regno(0xA1);
                            lcddev.id = lcd_rd_data();
 800217c:	f7fe fbfe 	bl	800097c <lcd_rd_data>
 8002180:	4603      	mov	r3, r0
 8002182:	461a      	mov	r2, r3
 8002184:	4b90      	ldr	r3, [pc, #576]	; (80023c8 <lcd_init+0x8c0>)
 8002186:	809a      	strh	r2, [r3, #4]
                            lcddev.id = lcd_rd_data();  /* ����0x57 */
 8002188:	f7fe fbf8 	bl	800097c <lcd_rd_data>
 800218c:	4603      	mov	r3, r0
 800218e:	461a      	mov	r2, r3
 8002190:	4b8d      	ldr	r3, [pc, #564]	; (80023c8 <lcd_init+0x8c0>)
 8002192:	809a      	strh	r2, [r3, #4]
                            lcddev.id <<= 8;
 8002194:	4b8c      	ldr	r3, [pc, #560]	; (80023c8 <lcd_init+0x8c0>)
 8002196:	889b      	ldrh	r3, [r3, #4]
 8002198:	021b      	lsls	r3, r3, #8
 800219a:	b29a      	uxth	r2, r3
 800219c:	4b8a      	ldr	r3, [pc, #552]	; (80023c8 <lcd_init+0x8c0>)
 800219e:	809a      	strh	r2, [r3, #4]
                            lcddev.id |= lcd_rd_data(); /* ����0x61 */
 80021a0:	f7fe fbec 	bl	800097c <lcd_rd_data>
 80021a4:	4603      	mov	r3, r0
 80021a6:	461a      	mov	r2, r3
 80021a8:	4b87      	ldr	r3, [pc, #540]	; (80023c8 <lcd_init+0x8c0>)
 80021aa:	889b      	ldrh	r3, [r3, #4]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	4b85      	ldr	r3, [pc, #532]	; (80023c8 <lcd_init+0x8c0>)
 80021b2:	809a      	strh	r2, [r3, #4]

                            if (lcddev.id == 0x5761) lcddev.id = 0x1963; /* SSD1963���ص�ID��5761H,Ϊ��������,����ǿ������Ϊ1963 */
 80021b4:	4b84      	ldr	r3, [pc, #528]	; (80023c8 <lcd_init+0x8c0>)
 80021b6:	889b      	ldrh	r3, [r3, #4]
 80021b8:	f245 7261 	movw	r2, #22369	; 0x5761
 80021bc:	4293      	cmp	r3, r2
 80021be:	d103      	bne.n	80021c8 <lcd_init+0x6c0>
 80021c0:	4b81      	ldr	r3, [pc, #516]	; (80023c8 <lcd_init+0x8c0>)
 80021c2:	f641 1263 	movw	r2, #6499	; 0x1963
 80021c6:	809a      	strh	r2, [r3, #4]
     * ����(������f_putc����), ����, �����ʼ������1, �������ε�����
     * ���� printf ��� !!!!!!!
     */
    //printf("LCD ID:%x\r\n", lcddev.id); /* ��ӡLCD ID */

    if (lcddev.id == 0X7789)
 80021c8:	4b7f      	ldr	r3, [pc, #508]	; (80023c8 <lcd_init+0x8c0>)
 80021ca:	889b      	ldrh	r3, [r3, #4]
 80021cc:	f247 7289 	movw	r2, #30601	; 0x7789
 80021d0:	4293      	cmp	r3, r2
 80021d2:	f040 82f3 	bne.w	80027bc <lcd_init+0xcb4>
 80021d6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80021da:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80021de:	2211      	movs	r2, #17
 80021e0:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80021e2:	4b7a      	ldr	r3, [pc, #488]	; (80023cc <lcd_init+0x8c4>)
 80021e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021e8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80021ea:	4b78      	ldr	r3, [pc, #480]	; (80023cc <lcd_init+0x8c4>)
 80021ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021f0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80021f2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80021f6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80021fa:	881b      	ldrh	r3, [r3, #0]
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	4b74      	ldr	r3, [pc, #464]	; (80023d0 <lcd_init+0x8c8>)
 8002200:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002202:	4b72      	ldr	r3, [pc, #456]	; (80023cc <lcd_init+0x8c4>)
 8002204:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002208:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800220a:	4b70      	ldr	r3, [pc, #448]	; (80023cc <lcd_init+0x8c4>)
 800220c:	2280      	movs	r2, #128	; 0x80
 800220e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002210:	4b6e      	ldr	r3, [pc, #440]	; (80023cc <lcd_init+0x8c4>)
 8002212:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002216:	611a      	str	r2, [r3, #16]
}
 8002218:	bf00      	nop
    {
        //lcd_ex_st7789_reginit();    /* ִ��ST7789��ʼ�� */
        lcd_wr_regno(0x11);

        HAL_Delay(120);
 800221a:	2078      	movs	r0, #120	; 0x78
 800221c:	f005 f9c0 	bl	80075a0 <HAL_Delay>
 8002220:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002224:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8002228:	2236      	movs	r2, #54	; 0x36
 800222a:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800222c:	4b67      	ldr	r3, [pc, #412]	; (80023cc <lcd_init+0x8c4>)
 800222e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002232:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002234:	4b65      	ldr	r3, [pc, #404]	; (80023cc <lcd_init+0x8c4>)
 8002236:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800223a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800223c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002240:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8002244:	881b      	ldrh	r3, [r3, #0]
 8002246:	b29a      	uxth	r2, r3
 8002248:	4b61      	ldr	r3, [pc, #388]	; (80023d0 <lcd_init+0x8c8>)
 800224a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800224c:	4b5f      	ldr	r3, [pc, #380]	; (80023cc <lcd_init+0x8c4>)
 800224e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002252:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002254:	4b5d      	ldr	r3, [pc, #372]	; (80023cc <lcd_init+0x8c4>)
 8002256:	2280      	movs	r2, #128	; 0x80
 8002258:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800225a:	4b5c      	ldr	r3, [pc, #368]	; (80023cc <lcd_init+0x8c4>)
 800225c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002260:	611a      	str	r2, [r3, #16]
}
 8002262:	bf00      	nop

        lcd_wr_regno(0x36);
        lcd_wr_xdata(0x00);
 8002264:	2000      	movs	r0, #0
 8002266:	f7fe fb13 	bl	8000890 <lcd_wr_xdata>
 800226a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800226e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002272:	223a      	movs	r2, #58	; 0x3a
 8002274:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002276:	4b55      	ldr	r3, [pc, #340]	; (80023cc <lcd_init+0x8c4>)
 8002278:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800227c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800227e:	4b53      	ldr	r3, [pc, #332]	; (80023cc <lcd_init+0x8c4>)
 8002280:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002284:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002286:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800228a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	b29a      	uxth	r2, r3
 8002292:	4b4f      	ldr	r3, [pc, #316]	; (80023d0 <lcd_init+0x8c8>)
 8002294:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002296:	4b4d      	ldr	r3, [pc, #308]	; (80023cc <lcd_init+0x8c4>)
 8002298:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800229c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800229e:	4b4b      	ldr	r3, [pc, #300]	; (80023cc <lcd_init+0x8c4>)
 80022a0:	2280      	movs	r2, #128	; 0x80
 80022a2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80022a4:	4b49      	ldr	r3, [pc, #292]	; (80023cc <lcd_init+0x8c4>)
 80022a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022aa:	611a      	str	r2, [r3, #16]
}
 80022ac:	bf00      	nop


        lcd_wr_regno(0x3A);
        lcd_wr_xdata(0X05);
 80022ae:	2005      	movs	r0, #5
 80022b0:	f7fe faee 	bl	8000890 <lcd_wr_xdata>
 80022b4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80022b8:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 80022bc:	22b2      	movs	r2, #178	; 0xb2
 80022be:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80022c0:	4b42      	ldr	r3, [pc, #264]	; (80023cc <lcd_init+0x8c4>)
 80022c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022c6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80022c8:	4b40      	ldr	r3, [pc, #256]	; (80023cc <lcd_init+0x8c4>)
 80022ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022ce:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80022d0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80022d4:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 80022d8:	881b      	ldrh	r3, [r3, #0]
 80022da:	b29a      	uxth	r2, r3
 80022dc:	4b3c      	ldr	r3, [pc, #240]	; (80023d0 <lcd_init+0x8c8>)
 80022de:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80022e0:	4b3a      	ldr	r3, [pc, #232]	; (80023cc <lcd_init+0x8c4>)
 80022e2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80022e6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80022e8:	4b38      	ldr	r3, [pc, #224]	; (80023cc <lcd_init+0x8c4>)
 80022ea:	2280      	movs	r2, #128	; 0x80
 80022ec:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80022ee:	4b37      	ldr	r3, [pc, #220]	; (80023cc <lcd_init+0x8c4>)
 80022f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022f4:	611a      	str	r2, [r3, #16]
}
 80022f6:	bf00      	nop

        lcd_wr_regno(0xB2);
        lcd_wr_xdata(0x0C);
 80022f8:	200c      	movs	r0, #12
 80022fa:	f7fe fac9 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x0C);
 80022fe:	200c      	movs	r0, #12
 8002300:	f7fe fac6 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002304:	2000      	movs	r0, #0
 8002306:	f7fe fac3 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 800230a:	2033      	movs	r0, #51	; 0x33
 800230c:	f7fe fac0 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 8002310:	2033      	movs	r0, #51	; 0x33
 8002312:	f7fe fabd 	bl	8000890 <lcd_wr_xdata>
 8002316:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800231a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800231e:	22b7      	movs	r2, #183	; 0xb7
 8002320:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002322:	4b2a      	ldr	r3, [pc, #168]	; (80023cc <lcd_init+0x8c4>)
 8002324:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002328:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800232a:	4b28      	ldr	r3, [pc, #160]	; (80023cc <lcd_init+0x8c4>)
 800232c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002330:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002332:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002336:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800233a:	881b      	ldrh	r3, [r3, #0]
 800233c:	b29a      	uxth	r2, r3
 800233e:	4b24      	ldr	r3, [pc, #144]	; (80023d0 <lcd_init+0x8c8>)
 8002340:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002342:	4b22      	ldr	r3, [pc, #136]	; (80023cc <lcd_init+0x8c4>)
 8002344:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002348:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800234a:	4b20      	ldr	r3, [pc, #128]	; (80023cc <lcd_init+0x8c4>)
 800234c:	2280      	movs	r2, #128	; 0x80
 800234e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002350:	4b1e      	ldr	r3, [pc, #120]	; (80023cc <lcd_init+0x8c4>)
 8002352:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002356:	611a      	str	r2, [r3, #16]
}
 8002358:	bf00      	nop

        lcd_wr_regno(0xB7);
        lcd_wr_xdata(0x35);
 800235a:	2035      	movs	r0, #53	; 0x35
 800235c:	f7fe fa98 	bl	8000890 <lcd_wr_xdata>
 8002360:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002364:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8002368:	22bb      	movs	r2, #187	; 0xbb
 800236a:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800236c:	4b17      	ldr	r3, [pc, #92]	; (80023cc <lcd_init+0x8c4>)
 800236e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002372:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002374:	4b15      	ldr	r3, [pc, #84]	; (80023cc <lcd_init+0x8c4>)
 8002376:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800237a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800237c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002380:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8002384:	881b      	ldrh	r3, [r3, #0]
 8002386:	b29a      	uxth	r2, r3
 8002388:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <lcd_init+0x8c8>)
 800238a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800238c:	4b0f      	ldr	r3, [pc, #60]	; (80023cc <lcd_init+0x8c4>)
 800238e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002392:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002394:	4b0d      	ldr	r3, [pc, #52]	; (80023cc <lcd_init+0x8c4>)
 8002396:	2280      	movs	r2, #128	; 0x80
 8002398:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800239a:	4b0c      	ldr	r3, [pc, #48]	; (80023cc <lcd_init+0x8c4>)
 800239c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023a0:	611a      	str	r2, [r3, #16]
}
 80023a2:	bf00      	nop

        lcd_wr_regno(0xBB); /* vcom */
        lcd_wr_xdata(0x32); /* 30 */
 80023a4:	2032      	movs	r0, #50	; 0x32
 80023a6:	f7fe fa73 	bl	8000890 <lcd_wr_xdata>
 80023aa:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80023ae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80023b2:	22c0      	movs	r2, #192	; 0xc0
 80023b4:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80023b6:	4b05      	ldr	r3, [pc, #20]	; (80023cc <lcd_init+0x8c4>)
 80023b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023bc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80023be:	4b03      	ldr	r3, [pc, #12]	; (80023cc <lcd_init+0x8c4>)
 80023c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023c4:	611a      	str	r2, [r3, #16]
 80023c6:	e005      	b.n	80023d4 <lcd_init+0x8cc>
 80023c8:	2000007c 	.word	0x2000007c
 80023cc:	40011000 	.word	0x40011000
 80023d0:	40010c00 	.word	0x40010c00
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80023d4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80023d8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	b29a      	uxth	r2, r3
 80023e0:	4bbf      	ldr	r3, [pc, #764]	; (80026e0 <lcd_init+0xbd8>)
 80023e2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80023e4:	4bbf      	ldr	r3, [pc, #764]	; (80026e4 <lcd_init+0xbdc>)
 80023e6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80023ea:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80023ec:	4bbd      	ldr	r3, [pc, #756]	; (80026e4 <lcd_init+0xbdc>)
 80023ee:	2280      	movs	r2, #128	; 0x80
 80023f0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80023f2:	4bbc      	ldr	r3, [pc, #752]	; (80026e4 <lcd_init+0xbdc>)
 80023f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023f8:	611a      	str	r2, [r3, #16]
}
 80023fa:	bf00      	nop

        lcd_wr_regno(0xC0);
        lcd_wr_xdata(0x0C);
 80023fc:	200c      	movs	r0, #12
 80023fe:	f7fe fa47 	bl	8000890 <lcd_wr_xdata>
 8002402:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002406:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800240a:	22c2      	movs	r2, #194	; 0xc2
 800240c:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800240e:	4bb5      	ldr	r3, [pc, #724]	; (80026e4 <lcd_init+0xbdc>)
 8002410:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002414:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002416:	4bb3      	ldr	r3, [pc, #716]	; (80026e4 <lcd_init+0xbdc>)
 8002418:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800241c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800241e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002422:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8002426:	881b      	ldrh	r3, [r3, #0]
 8002428:	b29a      	uxth	r2, r3
 800242a:	4bad      	ldr	r3, [pc, #692]	; (80026e0 <lcd_init+0xbd8>)
 800242c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800242e:	4bad      	ldr	r3, [pc, #692]	; (80026e4 <lcd_init+0xbdc>)
 8002430:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002434:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002436:	4bab      	ldr	r3, [pc, #684]	; (80026e4 <lcd_init+0xbdc>)
 8002438:	2280      	movs	r2, #128	; 0x80
 800243a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800243c:	4ba9      	ldr	r3, [pc, #676]	; (80026e4 <lcd_init+0xbdc>)
 800243e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002442:	611a      	str	r2, [r3, #16]
}
 8002444:	bf00      	nop

        lcd_wr_regno(0xC2);
        lcd_wr_xdata(0x01);
 8002446:	2001      	movs	r0, #1
 8002448:	f7fe fa22 	bl	8000890 <lcd_wr_xdata>
 800244c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002450:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002454:	22c3      	movs	r2, #195	; 0xc3
 8002456:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002458:	4ba2      	ldr	r3, [pc, #648]	; (80026e4 <lcd_init+0xbdc>)
 800245a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800245e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002460:	4ba0      	ldr	r3, [pc, #640]	; (80026e4 <lcd_init+0xbdc>)
 8002462:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002466:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002468:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800246c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002470:	881b      	ldrh	r3, [r3, #0]
 8002472:	b29a      	uxth	r2, r3
 8002474:	4b9a      	ldr	r3, [pc, #616]	; (80026e0 <lcd_init+0xbd8>)
 8002476:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002478:	4b9a      	ldr	r3, [pc, #616]	; (80026e4 <lcd_init+0xbdc>)
 800247a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800247e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002480:	4b98      	ldr	r3, [pc, #608]	; (80026e4 <lcd_init+0xbdc>)
 8002482:	2280      	movs	r2, #128	; 0x80
 8002484:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002486:	4b97      	ldr	r3, [pc, #604]	; (80026e4 <lcd_init+0xbdc>)
 8002488:	f44f 7200 	mov.w	r2, #512	; 0x200
 800248c:	611a      	str	r2, [r3, #16]
}
 800248e:	bf00      	nop

        lcd_wr_regno(0xC3); /* vrh */
        lcd_wr_xdata(0x10); /* 17 0D */
 8002490:	2010      	movs	r0, #16
 8002492:	f7fe f9fd 	bl	8000890 <lcd_wr_xdata>
 8002496:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800249a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800249e:	22c4      	movs	r2, #196	; 0xc4
 80024a0:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80024a2:	4b90      	ldr	r3, [pc, #576]	; (80026e4 <lcd_init+0xbdc>)
 80024a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024a8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80024aa:	4b8e      	ldr	r3, [pc, #568]	; (80026e4 <lcd_init+0xbdc>)
 80024ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024b0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80024b2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80024b6:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80024ba:	881b      	ldrh	r3, [r3, #0]
 80024bc:	b29a      	uxth	r2, r3
 80024be:	4b88      	ldr	r3, [pc, #544]	; (80026e0 <lcd_init+0xbd8>)
 80024c0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80024c2:	4b88      	ldr	r3, [pc, #544]	; (80026e4 <lcd_init+0xbdc>)
 80024c4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80024c8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80024ca:	4b86      	ldr	r3, [pc, #536]	; (80026e4 <lcd_init+0xbdc>)
 80024cc:	2280      	movs	r2, #128	; 0x80
 80024ce:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80024d0:	4b84      	ldr	r3, [pc, #528]	; (80026e4 <lcd_init+0xbdc>)
 80024d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024d6:	611a      	str	r2, [r3, #16]
}
 80024d8:	bf00      	nop

        lcd_wr_regno(0xC4); /* vdv */
        lcd_wr_xdata(0x20); /* 20 */
 80024da:	2020      	movs	r0, #32
 80024dc:	f7fe f9d8 	bl	8000890 <lcd_wr_xdata>
 80024e0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80024e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80024e8:	22c6      	movs	r2, #198	; 0xc6
 80024ea:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80024ec:	4b7d      	ldr	r3, [pc, #500]	; (80026e4 <lcd_init+0xbdc>)
 80024ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024f2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80024f4:	4b7b      	ldr	r3, [pc, #492]	; (80026e4 <lcd_init+0xbdc>)
 80024f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024fa:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80024fc:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002500:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	b29a      	uxth	r2, r3
 8002508:	4b75      	ldr	r3, [pc, #468]	; (80026e0 <lcd_init+0xbd8>)
 800250a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800250c:	4b75      	ldr	r3, [pc, #468]	; (80026e4 <lcd_init+0xbdc>)
 800250e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002512:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002514:	4b73      	ldr	r3, [pc, #460]	; (80026e4 <lcd_init+0xbdc>)
 8002516:	2280      	movs	r2, #128	; 0x80
 8002518:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800251a:	4b72      	ldr	r3, [pc, #456]	; (80026e4 <lcd_init+0xbdc>)
 800251c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002520:	611a      	str	r2, [r3, #16]
}
 8002522:	bf00      	nop

        lcd_wr_regno(0xC6);
        lcd_wr_xdata(0x0f);
 8002524:	200f      	movs	r0, #15
 8002526:	f7fe f9b3 	bl	8000890 <lcd_wr_xdata>
 800252a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800252e:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8002532:	22d0      	movs	r2, #208	; 0xd0
 8002534:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002536:	4b6b      	ldr	r3, [pc, #428]	; (80026e4 <lcd_init+0xbdc>)
 8002538:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800253c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800253e:	4b69      	ldr	r3, [pc, #420]	; (80026e4 <lcd_init+0xbdc>)
 8002540:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002544:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002546:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800254a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800254e:	881b      	ldrh	r3, [r3, #0]
 8002550:	b29a      	uxth	r2, r3
 8002552:	4b63      	ldr	r3, [pc, #396]	; (80026e0 <lcd_init+0xbd8>)
 8002554:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002556:	4b63      	ldr	r3, [pc, #396]	; (80026e4 <lcd_init+0xbdc>)
 8002558:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800255c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800255e:	4b61      	ldr	r3, [pc, #388]	; (80026e4 <lcd_init+0xbdc>)
 8002560:	2280      	movs	r2, #128	; 0x80
 8002562:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002564:	4b5f      	ldr	r3, [pc, #380]	; (80026e4 <lcd_init+0xbdc>)
 8002566:	f44f 7200 	mov.w	r2, #512	; 0x200
 800256a:	611a      	str	r2, [r3, #16]
}
 800256c:	bf00      	nop

        lcd_wr_regno(0xD0);
        lcd_wr_xdata(0xA4);
 800256e:	20a4      	movs	r0, #164	; 0xa4
 8002570:	f7fe f98e 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xA1);
 8002574:	20a1      	movs	r0, #161	; 0xa1
 8002576:	f7fe f98b 	bl	8000890 <lcd_wr_xdata>
 800257a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800257e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002582:	22e0      	movs	r2, #224	; 0xe0
 8002584:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002586:	4b57      	ldr	r3, [pc, #348]	; (80026e4 <lcd_init+0xbdc>)
 8002588:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800258c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800258e:	4b55      	ldr	r3, [pc, #340]	; (80026e4 <lcd_init+0xbdc>)
 8002590:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002594:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002596:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800259a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	4b4f      	ldr	r3, [pc, #316]	; (80026e0 <lcd_init+0xbd8>)
 80025a4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80025a6:	4b4f      	ldr	r3, [pc, #316]	; (80026e4 <lcd_init+0xbdc>)
 80025a8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80025ac:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80025ae:	4b4d      	ldr	r3, [pc, #308]	; (80026e4 <lcd_init+0xbdc>)
 80025b0:	2280      	movs	r2, #128	; 0x80
 80025b2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80025b4:	4b4b      	ldr	r3, [pc, #300]	; (80026e4 <lcd_init+0xbdc>)
 80025b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025ba:	611a      	str	r2, [r3, #16]
}
 80025bc:	bf00      	nop

        lcd_wr_regno(0xE0); /* Set Gamma  */
        lcd_wr_xdata(0xd0);
 80025be:	20d0      	movs	r0, #208	; 0xd0
 80025c0:	f7fe f966 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80025c4:	2000      	movs	r0, #0
 80025c6:	f7fe f963 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 80025ca:	2002      	movs	r0, #2
 80025cc:	f7fe f960 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x07);
 80025d0:	2007      	movs	r0, #7
 80025d2:	f7fe f95d 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x0a);
 80025d6:	200a      	movs	r0, #10
 80025d8:	f7fe f95a 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x28);
 80025dc:	2028      	movs	r0, #40	; 0x28
 80025de:	f7fe f957 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x32);
 80025e2:	2032      	movs	r0, #50	; 0x32
 80025e4:	f7fe f954 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0X44);
 80025e8:	2044      	movs	r0, #68	; 0x44
 80025ea:	f7fe f951 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x42);
 80025ee:	2042      	movs	r0, #66	; 0x42
 80025f0:	f7fe f94e 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x06);
 80025f4:	2006      	movs	r0, #6
 80025f6:	f7fe f94b 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x0e);
 80025fa:	200e      	movs	r0, #14
 80025fc:	f7fe f948 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x12);
 8002600:	2012      	movs	r0, #18
 8002602:	f7fe f945 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x14);
 8002606:	2014      	movs	r0, #20
 8002608:	f7fe f942 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 800260c:	2017      	movs	r0, #23
 800260e:	f7fe f93f 	bl	8000890 <lcd_wr_xdata>
 8002612:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002616:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800261a:	22e1      	movs	r2, #225	; 0xe1
 800261c:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800261e:	4b31      	ldr	r3, [pc, #196]	; (80026e4 <lcd_init+0xbdc>)
 8002620:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002624:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002626:	4b2f      	ldr	r3, [pc, #188]	; (80026e4 <lcd_init+0xbdc>)
 8002628:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800262c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800262e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002632:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8002636:	881b      	ldrh	r3, [r3, #0]
 8002638:	b29a      	uxth	r2, r3
 800263a:	4b29      	ldr	r3, [pc, #164]	; (80026e0 <lcd_init+0xbd8>)
 800263c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800263e:	4b29      	ldr	r3, [pc, #164]	; (80026e4 <lcd_init+0xbdc>)
 8002640:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002644:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002646:	4b27      	ldr	r3, [pc, #156]	; (80026e4 <lcd_init+0xbdc>)
 8002648:	2280      	movs	r2, #128	; 0x80
 800264a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800264c:	4b25      	ldr	r3, [pc, #148]	; (80026e4 <lcd_init+0xbdc>)
 800264e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002652:	611a      	str	r2, [r3, #16]
}
 8002654:	bf00      	nop


        lcd_wr_regno(0XE1);  /* Set Gamma */
        lcd_wr_xdata(0xd0);
 8002656:	20d0      	movs	r0, #208	; 0xd0
 8002658:	f7fe f91a 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800265c:	2000      	movs	r0, #0
 800265e:	f7fe f917 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 8002662:	2002      	movs	r0, #2
 8002664:	f7fe f914 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x07);
 8002668:	2007      	movs	r0, #7
 800266a:	f7fe f911 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x0a);
 800266e:	200a      	movs	r0, #10
 8002670:	f7fe f90e 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x28);
 8002674:	2028      	movs	r0, #40	; 0x28
 8002676:	f7fe f90b 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x31);
 800267a:	2031      	movs	r0, #49	; 0x31
 800267c:	f7fe f908 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x54);
 8002680:	2054      	movs	r0, #84	; 0x54
 8002682:	f7fe f905 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x47);
 8002686:	2047      	movs	r0, #71	; 0x47
 8002688:	f7fe f902 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x0e);
 800268c:	200e      	movs	r0, #14
 800268e:	f7fe f8ff 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x1c);
 8002692:	201c      	movs	r0, #28
 8002694:	f7fe f8fc 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 8002698:	2017      	movs	r0, #23
 800269a:	f7fe f8f9 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x1b);
 800269e:	201b      	movs	r0, #27
 80026a0:	f7fe f8f6 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x1e);
 80026a4:	201e      	movs	r0, #30
 80026a6:	f7fe f8f3 	bl	8000890 <lcd_wr_xdata>
 80026aa:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80026ae:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80026b2:	222a      	movs	r2, #42	; 0x2a
 80026b4:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80026b6:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <lcd_init+0xbdc>)
 80026b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80026bc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80026be:	4b09      	ldr	r3, [pc, #36]	; (80026e4 <lcd_init+0xbdc>)
 80026c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026c4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80026c6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80026ca:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	4b03      	ldr	r3, [pc, #12]	; (80026e0 <lcd_init+0xbd8>)
 80026d4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80026d6:	4b03      	ldr	r3, [pc, #12]	; (80026e4 <lcd_init+0xbdc>)
 80026d8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80026dc:	611a      	str	r2, [r3, #16]
 80026de:	e003      	b.n	80026e8 <lcd_init+0xbe0>
 80026e0:	40010c00 	.word	0x40010c00
 80026e4:	40011000 	.word	0x40011000
    LCD_WR(1);
 80026e8:	4b32      	ldr	r3, [pc, #200]	; (80027b4 <lcd_init+0xcac>)
 80026ea:	2280      	movs	r2, #128	; 0x80
 80026ec:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80026ee:	4b31      	ldr	r3, [pc, #196]	; (80027b4 <lcd_init+0xcac>)
 80026f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026f4:	611a      	str	r2, [r3, #16]
}
 80026f6:	bf00      	nop


        lcd_wr_regno(0x2A);
        lcd_wr_xdata(0x00);
 80026f8:	2000      	movs	r0, #0
 80026fa:	f7fe f8c9 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80026fe:	2000      	movs	r0, #0
 8002700:	f7fe f8c6 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002704:	2000      	movs	r0, #0
 8002706:	f7fe f8c3 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xef);
 800270a:	20ef      	movs	r0, #239	; 0xef
 800270c:	f7fe f8c0 	bl	8000890 <lcd_wr_xdata>
 8002710:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002714:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8002718:	222b      	movs	r2, #43	; 0x2b
 800271a:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800271c:	4b25      	ldr	r3, [pc, #148]	; (80027b4 <lcd_init+0xcac>)
 800271e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002722:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002724:	4b23      	ldr	r3, [pc, #140]	; (80027b4 <lcd_init+0xcac>)
 8002726:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800272a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800272c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002730:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8002734:	881b      	ldrh	r3, [r3, #0]
 8002736:	b29a      	uxth	r2, r3
 8002738:	4b1f      	ldr	r3, [pc, #124]	; (80027b8 <lcd_init+0xcb0>)
 800273a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800273c:	4b1d      	ldr	r3, [pc, #116]	; (80027b4 <lcd_init+0xcac>)
 800273e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002742:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002744:	4b1b      	ldr	r3, [pc, #108]	; (80027b4 <lcd_init+0xcac>)
 8002746:	2280      	movs	r2, #128	; 0x80
 8002748:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800274a:	4b1a      	ldr	r3, [pc, #104]	; (80027b4 <lcd_init+0xcac>)
 800274c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002750:	611a      	str	r2, [r3, #16]
}
 8002752:	bf00      	nop

        lcd_wr_regno(0x2B);
        lcd_wr_xdata(0x00);
 8002754:	2000      	movs	r0, #0
 8002756:	f7fe f89b 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800275a:	2000      	movs	r0, #0
 800275c:	f7fe f898 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8002760:	2001      	movs	r0, #1
 8002762:	f7fe f895 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x3f);
 8002766:	203f      	movs	r0, #63	; 0x3f
 8002768:	f7fe f892 	bl	8000890 <lcd_wr_xdata>
 800276c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002770:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002774:	2229      	movs	r2, #41	; 0x29
 8002776:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002778:	4b0e      	ldr	r3, [pc, #56]	; (80027b4 <lcd_init+0xcac>)
 800277a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800277e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002780:	4b0c      	ldr	r3, [pc, #48]	; (80027b4 <lcd_init+0xcac>)
 8002782:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002786:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002788:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800278c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	b29a      	uxth	r2, r3
 8002794:	4b08      	ldr	r3, [pc, #32]	; (80027b8 <lcd_init+0xcb0>)
 8002796:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002798:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <lcd_init+0xcac>)
 800279a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800279e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80027a0:	4b04      	ldr	r3, [pc, #16]	; (80027b4 <lcd_init+0xcac>)
 80027a2:	2280      	movs	r2, #128	; 0x80
 80027a4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80027a6:	4b03      	ldr	r3, [pc, #12]	; (80027b4 <lcd_init+0xcac>)
 80027a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027ac:	611a      	str	r2, [r3, #16]
}
 80027ae:	f004 b8f4 	b.w	800699a <lcd_init+0x4e92>
 80027b2:	bf00      	nop
 80027b4:	40011000 	.word	0x40011000
 80027b8:	40010c00 	.word	0x40010c00

        lcd_wr_regno(0x29); /* display on */
    }
    else if (lcddev.id == 0X9341)
 80027bc:	4bb9      	ldr	r3, [pc, #740]	; (8002aa4 <lcd_init+0xf9c>)
 80027be:	889b      	ldrh	r3, [r3, #4]
 80027c0:	f249 3241 	movw	r2, #37697	; 0x9341
 80027c4:	4293      	cmp	r3, r2
 80027c6:	f040 83a1 	bne.w	8002f0c <lcd_init+0x1404>
 80027ca:	23cf      	movs	r3, #207	; 0xcf
 80027cc:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80027d0:	4bb5      	ldr	r3, [pc, #724]	; (8002aa8 <lcd_init+0xfa0>)
 80027d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027d6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80027d8:	4bb3      	ldr	r3, [pc, #716]	; (8002aa8 <lcd_init+0xfa0>)
 80027da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027de:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80027e0:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	4bb1      	ldr	r3, [pc, #708]	; (8002aac <lcd_init+0xfa4>)
 80027e8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80027ea:	4baf      	ldr	r3, [pc, #700]	; (8002aa8 <lcd_init+0xfa0>)
 80027ec:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80027f0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80027f2:	4bad      	ldr	r3, [pc, #692]	; (8002aa8 <lcd_init+0xfa0>)
 80027f4:	2280      	movs	r2, #128	; 0x80
 80027f6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80027f8:	4bab      	ldr	r3, [pc, #684]	; (8002aa8 <lcd_init+0xfa0>)
 80027fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027fe:	611a      	str	r2, [r3, #16]
}
 8002800:	bf00      	nop
    {
        //lcd_ex_ili9341_reginit();   /* ִ��ILI9341��ʼ�� */
        lcd_wr_regno(0xCF);
        lcd_wr_xdata(0x00);
 8002802:	2000      	movs	r0, #0
 8002804:	f7fe f844 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xC1);
 8002808:	20c1      	movs	r0, #193	; 0xc1
 800280a:	f7fe f841 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0X30);
 800280e:	2030      	movs	r0, #48	; 0x30
 8002810:	f7fe f83e 	bl	8000890 <lcd_wr_xdata>
 8002814:	23ed      	movs	r3, #237	; 0xed
 8002816:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800281a:	4ba3      	ldr	r3, [pc, #652]	; (8002aa8 <lcd_init+0xfa0>)
 800281c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002820:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002822:	4ba1      	ldr	r3, [pc, #644]	; (8002aa8 <lcd_init+0xfa0>)
 8002824:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002828:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800282a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800282e:	b29a      	uxth	r2, r3
 8002830:	4b9e      	ldr	r3, [pc, #632]	; (8002aac <lcd_init+0xfa4>)
 8002832:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002834:	4b9c      	ldr	r3, [pc, #624]	; (8002aa8 <lcd_init+0xfa0>)
 8002836:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800283a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800283c:	4b9a      	ldr	r3, [pc, #616]	; (8002aa8 <lcd_init+0xfa0>)
 800283e:	2280      	movs	r2, #128	; 0x80
 8002840:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002842:	4b99      	ldr	r3, [pc, #612]	; (8002aa8 <lcd_init+0xfa0>)
 8002844:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002848:	611a      	str	r2, [r3, #16]
}
 800284a:	bf00      	nop
        lcd_wr_regno(0xED);
        lcd_wr_xdata(0x64);
 800284c:	2064      	movs	r0, #100	; 0x64
 800284e:	f7fe f81f 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x03);
 8002852:	2003      	movs	r0, #3
 8002854:	f7fe f81c 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0X12);
 8002858:	2012      	movs	r0, #18
 800285a:	f7fe f819 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0X81);
 800285e:	2081      	movs	r0, #129	; 0x81
 8002860:	f7fe f816 	bl	8000890 <lcd_wr_xdata>
 8002864:	23e8      	movs	r3, #232	; 0xe8
 8002866:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800286a:	4b8f      	ldr	r3, [pc, #572]	; (8002aa8 <lcd_init+0xfa0>)
 800286c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002870:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002872:	4b8d      	ldr	r3, [pc, #564]	; (8002aa8 <lcd_init+0xfa0>)
 8002874:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002878:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800287a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800287e:	b29a      	uxth	r2, r3
 8002880:	4b8a      	ldr	r3, [pc, #552]	; (8002aac <lcd_init+0xfa4>)
 8002882:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002884:	4b88      	ldr	r3, [pc, #544]	; (8002aa8 <lcd_init+0xfa0>)
 8002886:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800288a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800288c:	4b86      	ldr	r3, [pc, #536]	; (8002aa8 <lcd_init+0xfa0>)
 800288e:	2280      	movs	r2, #128	; 0x80
 8002890:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002892:	4b85      	ldr	r3, [pc, #532]	; (8002aa8 <lcd_init+0xfa0>)
 8002894:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002898:	611a      	str	r2, [r3, #16]
}
 800289a:	bf00      	nop
        lcd_wr_regno(0xE8);
        lcd_wr_xdata(0x85);
 800289c:	2085      	movs	r0, #133	; 0x85
 800289e:	f7fd fff7 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 80028a2:	2010      	movs	r0, #16
 80028a4:	f7fd fff4 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x7A);
 80028a8:	207a      	movs	r0, #122	; 0x7a
 80028aa:	f7fd fff1 	bl	8000890 <lcd_wr_xdata>
 80028ae:	23cb      	movs	r3, #203	; 0xcb
 80028b0:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80028b4:	4b7c      	ldr	r3, [pc, #496]	; (8002aa8 <lcd_init+0xfa0>)
 80028b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028ba:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80028bc:	4b7a      	ldr	r3, [pc, #488]	; (8002aa8 <lcd_init+0xfa0>)
 80028be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028c2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80028c4:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	4b78      	ldr	r3, [pc, #480]	; (8002aac <lcd_init+0xfa4>)
 80028cc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80028ce:	4b76      	ldr	r3, [pc, #472]	; (8002aa8 <lcd_init+0xfa0>)
 80028d0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80028d4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80028d6:	4b74      	ldr	r3, [pc, #464]	; (8002aa8 <lcd_init+0xfa0>)
 80028d8:	2280      	movs	r2, #128	; 0x80
 80028da:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80028dc:	4b72      	ldr	r3, [pc, #456]	; (8002aa8 <lcd_init+0xfa0>)
 80028de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028e2:	611a      	str	r2, [r3, #16]
}
 80028e4:	bf00      	nop
        lcd_wr_regno(0xCB);
        lcd_wr_xdata(0x39);
 80028e6:	2039      	movs	r0, #57	; 0x39
 80028e8:	f7fd ffd2 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x2C);
 80028ec:	202c      	movs	r0, #44	; 0x2c
 80028ee:	f7fd ffcf 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80028f2:	2000      	movs	r0, #0
 80028f4:	f7fd ffcc 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x34);
 80028f8:	2034      	movs	r0, #52	; 0x34
 80028fa:	f7fd ffc9 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 80028fe:	2002      	movs	r0, #2
 8002900:	f7fd ffc6 	bl	8000890 <lcd_wr_xdata>
 8002904:	23f7      	movs	r3, #247	; 0xf7
 8002906:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800290a:	4b67      	ldr	r3, [pc, #412]	; (8002aa8 <lcd_init+0xfa0>)
 800290c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002910:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002912:	4b65      	ldr	r3, [pc, #404]	; (8002aa8 <lcd_init+0xfa0>)
 8002914:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002918:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800291a:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800291e:	b29a      	uxth	r2, r3
 8002920:	4b62      	ldr	r3, [pc, #392]	; (8002aac <lcd_init+0xfa4>)
 8002922:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002924:	4b60      	ldr	r3, [pc, #384]	; (8002aa8 <lcd_init+0xfa0>)
 8002926:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800292a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800292c:	4b5e      	ldr	r3, [pc, #376]	; (8002aa8 <lcd_init+0xfa0>)
 800292e:	2280      	movs	r2, #128	; 0x80
 8002930:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002932:	4b5d      	ldr	r3, [pc, #372]	; (8002aa8 <lcd_init+0xfa0>)
 8002934:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002938:	611a      	str	r2, [r3, #16]
}
 800293a:	bf00      	nop
        lcd_wr_regno(0xF7);
        lcd_wr_xdata(0x20);
 800293c:	2020      	movs	r0, #32
 800293e:	f7fd ffa7 	bl	8000890 <lcd_wr_xdata>
 8002942:	23ea      	movs	r3, #234	; 0xea
 8002944:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002948:	4b57      	ldr	r3, [pc, #348]	; (8002aa8 <lcd_init+0xfa0>)
 800294a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800294e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002950:	4b55      	ldr	r3, [pc, #340]	; (8002aa8 <lcd_init+0xfa0>)
 8002952:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002956:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002958:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800295c:	b29a      	uxth	r2, r3
 800295e:	4b53      	ldr	r3, [pc, #332]	; (8002aac <lcd_init+0xfa4>)
 8002960:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002962:	4b51      	ldr	r3, [pc, #324]	; (8002aa8 <lcd_init+0xfa0>)
 8002964:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002968:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800296a:	4b4f      	ldr	r3, [pc, #316]	; (8002aa8 <lcd_init+0xfa0>)
 800296c:	2280      	movs	r2, #128	; 0x80
 800296e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002970:	4b4d      	ldr	r3, [pc, #308]	; (8002aa8 <lcd_init+0xfa0>)
 8002972:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002976:	611a      	str	r2, [r3, #16]
}
 8002978:	bf00      	nop
        lcd_wr_regno(0xEA);
        lcd_wr_xdata(0x00);
 800297a:	2000      	movs	r0, #0
 800297c:	f7fd ff88 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002980:	2000      	movs	r0, #0
 8002982:	f7fd ff85 	bl	8000890 <lcd_wr_xdata>
 8002986:	23c0      	movs	r3, #192	; 0xc0
 8002988:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800298c:	4b46      	ldr	r3, [pc, #280]	; (8002aa8 <lcd_init+0xfa0>)
 800298e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002992:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002994:	4b44      	ldr	r3, [pc, #272]	; (8002aa8 <lcd_init+0xfa0>)
 8002996:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800299a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800299c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	4b42      	ldr	r3, [pc, #264]	; (8002aac <lcd_init+0xfa4>)
 80029a4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80029a6:	4b40      	ldr	r3, [pc, #256]	; (8002aa8 <lcd_init+0xfa0>)
 80029a8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80029ac:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80029ae:	4b3e      	ldr	r3, [pc, #248]	; (8002aa8 <lcd_init+0xfa0>)
 80029b0:	2280      	movs	r2, #128	; 0x80
 80029b2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80029b4:	4b3c      	ldr	r3, [pc, #240]	; (8002aa8 <lcd_init+0xfa0>)
 80029b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029ba:	611a      	str	r2, [r3, #16]
}
 80029bc:	bf00      	nop
        lcd_wr_regno(0xC0); /* Power control */
        lcd_wr_xdata(0x1B); /* VRH[5:0] */
 80029be:	201b      	movs	r0, #27
 80029c0:	f7fd ff66 	bl	8000890 <lcd_wr_xdata>
 80029c4:	23c1      	movs	r3, #193	; 0xc1
 80029c6:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80029ca:	4b37      	ldr	r3, [pc, #220]	; (8002aa8 <lcd_init+0xfa0>)
 80029cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029d0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80029d2:	4b35      	ldr	r3, [pc, #212]	; (8002aa8 <lcd_init+0xfa0>)
 80029d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029d8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80029da:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80029de:	b29a      	uxth	r2, r3
 80029e0:	4b32      	ldr	r3, [pc, #200]	; (8002aac <lcd_init+0xfa4>)
 80029e2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80029e4:	4b30      	ldr	r3, [pc, #192]	; (8002aa8 <lcd_init+0xfa0>)
 80029e6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80029ea:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80029ec:	4b2e      	ldr	r3, [pc, #184]	; (8002aa8 <lcd_init+0xfa0>)
 80029ee:	2280      	movs	r2, #128	; 0x80
 80029f0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80029f2:	4b2d      	ldr	r3, [pc, #180]	; (8002aa8 <lcd_init+0xfa0>)
 80029f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029f8:	611a      	str	r2, [r3, #16]
}
 80029fa:	bf00      	nop
        lcd_wr_regno(0xC1); /* Power control */
        lcd_wr_xdata(0x01); /* SAP[2:0];BT[3:0] */
 80029fc:	2001      	movs	r0, #1
 80029fe:	f7fd ff47 	bl	8000890 <lcd_wr_xdata>
 8002a02:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002a06:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002a0a:	22c5      	movs	r2, #197	; 0xc5
 8002a0c:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002a0e:	4b26      	ldr	r3, [pc, #152]	; (8002aa8 <lcd_init+0xfa0>)
 8002a10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a14:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002a16:	4b24      	ldr	r3, [pc, #144]	; (8002aa8 <lcd_init+0xfa0>)
 8002a18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a1c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002a1e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002a22:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002a26:	881b      	ldrh	r3, [r3, #0]
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	4b20      	ldr	r3, [pc, #128]	; (8002aac <lcd_init+0xfa4>)
 8002a2c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002a2e:	4b1e      	ldr	r3, [pc, #120]	; (8002aa8 <lcd_init+0xfa0>)
 8002a30:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002a34:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002a36:	4b1c      	ldr	r3, [pc, #112]	; (8002aa8 <lcd_init+0xfa0>)
 8002a38:	2280      	movs	r2, #128	; 0x80
 8002a3a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002a3c:	4b1a      	ldr	r3, [pc, #104]	; (8002aa8 <lcd_init+0xfa0>)
 8002a3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a42:	611a      	str	r2, [r3, #16]
}
 8002a44:	bf00      	nop
        lcd_wr_regno(0xC5); /* VCM control */
        lcd_wr_xdata(0x30); /* 3F */
 8002a46:	2030      	movs	r0, #48	; 0x30
 8002a48:	f7fd ff22 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x30); /* 3C */
 8002a4c:	2030      	movs	r0, #48	; 0x30
 8002a4e:	f7fd ff1f 	bl	8000890 <lcd_wr_xdata>
 8002a52:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002a56:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002a5a:	22c7      	movs	r2, #199	; 0xc7
 8002a5c:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002a5e:	4b12      	ldr	r3, [pc, #72]	; (8002aa8 <lcd_init+0xfa0>)
 8002a60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a64:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002a66:	4b10      	ldr	r3, [pc, #64]	; (8002aa8 <lcd_init+0xfa0>)
 8002a68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a6c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002a6e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002a72:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002a76:	881b      	ldrh	r3, [r3, #0]
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <lcd_init+0xfa4>)
 8002a7c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002a7e:	4b0a      	ldr	r3, [pc, #40]	; (8002aa8 <lcd_init+0xfa0>)
 8002a80:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002a84:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002a86:	4b08      	ldr	r3, [pc, #32]	; (8002aa8 <lcd_init+0xfa0>)
 8002a88:	2280      	movs	r2, #128	; 0x80
 8002a8a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002a8c:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <lcd_init+0xfa0>)
 8002a8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a92:	611a      	str	r2, [r3, #16]
}
 8002a94:	bf00      	nop
        lcd_wr_regno(0xC7); /* VCM control2 */
        lcd_wr_xdata(0XB7);
 8002a96:	20b7      	movs	r0, #183	; 0xb7
 8002a98:	f7fd fefa 	bl	8000890 <lcd_wr_xdata>
 8002a9c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002aa0:	e006      	b.n	8002ab0 <lcd_init+0xfa8>
 8002aa2:	bf00      	nop
 8002aa4:	2000007c 	.word	0x2000007c
 8002aa8:	40011000 	.word	0x40011000
 8002aac:	40010c00 	.word	0x40010c00
 8002ab0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002ab4:	2236      	movs	r2, #54	; 0x36
 8002ab6:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002ab8:	4bc1      	ldr	r3, [pc, #772]	; (8002dc0 <lcd_init+0x12b8>)
 8002aba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002abe:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002ac0:	4bbf      	ldr	r3, [pc, #764]	; (8002dc0 <lcd_init+0x12b8>)
 8002ac2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ac6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002ac8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002acc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002ad0:	881b      	ldrh	r3, [r3, #0]
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	4bbb      	ldr	r3, [pc, #748]	; (8002dc4 <lcd_init+0x12bc>)
 8002ad6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002ad8:	4bb9      	ldr	r3, [pc, #740]	; (8002dc0 <lcd_init+0x12b8>)
 8002ada:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002ade:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002ae0:	4bb7      	ldr	r3, [pc, #732]	; (8002dc0 <lcd_init+0x12b8>)
 8002ae2:	2280      	movs	r2, #128	; 0x80
 8002ae4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002ae6:	4bb6      	ldr	r3, [pc, #728]	; (8002dc0 <lcd_init+0x12b8>)
 8002ae8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aec:	611a      	str	r2, [r3, #16]
}
 8002aee:	bf00      	nop
        lcd_wr_regno(0x36); /*  Memory Access Control */
        lcd_wr_xdata(0x48);
 8002af0:	2048      	movs	r0, #72	; 0x48
 8002af2:	f7fd fecd 	bl	8000890 <lcd_wr_xdata>
 8002af6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002afa:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 8002afe:	223a      	movs	r2, #58	; 0x3a
 8002b00:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002b02:	4baf      	ldr	r3, [pc, #700]	; (8002dc0 <lcd_init+0x12b8>)
 8002b04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b08:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002b0a:	4bad      	ldr	r3, [pc, #692]	; (8002dc0 <lcd_init+0x12b8>)
 8002b0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b10:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002b12:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002b16:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 8002b1a:	881b      	ldrh	r3, [r3, #0]
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	4ba9      	ldr	r3, [pc, #676]	; (8002dc4 <lcd_init+0x12bc>)
 8002b20:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002b22:	4ba7      	ldr	r3, [pc, #668]	; (8002dc0 <lcd_init+0x12b8>)
 8002b24:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002b28:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002b2a:	4ba5      	ldr	r3, [pc, #660]	; (8002dc0 <lcd_init+0x12b8>)
 8002b2c:	2280      	movs	r2, #128	; 0x80
 8002b2e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002b30:	4ba3      	ldr	r3, [pc, #652]	; (8002dc0 <lcd_init+0x12b8>)
 8002b32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b36:	611a      	str	r2, [r3, #16]
}
 8002b38:	bf00      	nop
        lcd_wr_regno(0x3A);
        lcd_wr_xdata(0x55);
 8002b3a:	2055      	movs	r0, #85	; 0x55
 8002b3c:	f7fd fea8 	bl	8000890 <lcd_wr_xdata>
 8002b40:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002b44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002b48:	22b1      	movs	r2, #177	; 0xb1
 8002b4a:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002b4c:	4b9c      	ldr	r3, [pc, #624]	; (8002dc0 <lcd_init+0x12b8>)
 8002b4e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b52:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002b54:	4b9a      	ldr	r3, [pc, #616]	; (8002dc0 <lcd_init+0x12b8>)
 8002b56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b5a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002b5c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002b60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002b64:	881b      	ldrh	r3, [r3, #0]
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	4b96      	ldr	r3, [pc, #600]	; (8002dc4 <lcd_init+0x12bc>)
 8002b6a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002b6c:	4b94      	ldr	r3, [pc, #592]	; (8002dc0 <lcd_init+0x12b8>)
 8002b6e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002b72:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002b74:	4b92      	ldr	r3, [pc, #584]	; (8002dc0 <lcd_init+0x12b8>)
 8002b76:	2280      	movs	r2, #128	; 0x80
 8002b78:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002b7a:	4b91      	ldr	r3, [pc, #580]	; (8002dc0 <lcd_init+0x12b8>)
 8002b7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b80:	611a      	str	r2, [r3, #16]
}
 8002b82:	bf00      	nop
        lcd_wr_regno(0xB1);
        lcd_wr_xdata(0x00);
 8002b84:	2000      	movs	r0, #0
 8002b86:	f7fd fe83 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x1A);
 8002b8a:	201a      	movs	r0, #26
 8002b8c:	f7fd fe80 	bl	8000890 <lcd_wr_xdata>
 8002b90:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002b94:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8002b98:	22b6      	movs	r2, #182	; 0xb6
 8002b9a:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002b9c:	4b88      	ldr	r3, [pc, #544]	; (8002dc0 <lcd_init+0x12b8>)
 8002b9e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ba2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002ba4:	4b86      	ldr	r3, [pc, #536]	; (8002dc0 <lcd_init+0x12b8>)
 8002ba6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002baa:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002bac:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002bb0:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8002bb4:	881b      	ldrh	r3, [r3, #0]
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	4b82      	ldr	r3, [pc, #520]	; (8002dc4 <lcd_init+0x12bc>)
 8002bba:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002bbc:	4b80      	ldr	r3, [pc, #512]	; (8002dc0 <lcd_init+0x12b8>)
 8002bbe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002bc2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002bc4:	4b7e      	ldr	r3, [pc, #504]	; (8002dc0 <lcd_init+0x12b8>)
 8002bc6:	2280      	movs	r2, #128	; 0x80
 8002bc8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002bca:	4b7d      	ldr	r3, [pc, #500]	; (8002dc0 <lcd_init+0x12b8>)
 8002bcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bd0:	611a      	str	r2, [r3, #16]
}
 8002bd2:	bf00      	nop
        lcd_wr_regno(0xB6); /*  Display Function Control */
        lcd_wr_xdata(0x0A);
 8002bd4:	200a      	movs	r0, #10
 8002bd6:	f7fd fe5b 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xA2);
 8002bda:	20a2      	movs	r0, #162	; 0xa2
 8002bdc:	f7fd fe58 	bl	8000890 <lcd_wr_xdata>
 8002be0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002be4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002be8:	22f2      	movs	r2, #242	; 0xf2
 8002bea:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002bec:	4b74      	ldr	r3, [pc, #464]	; (8002dc0 <lcd_init+0x12b8>)
 8002bee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002bf2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002bf4:	4b72      	ldr	r3, [pc, #456]	; (8002dc0 <lcd_init+0x12b8>)
 8002bf6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bfa:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002bfc:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002c00:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002c04:	881b      	ldrh	r3, [r3, #0]
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	4b6e      	ldr	r3, [pc, #440]	; (8002dc4 <lcd_init+0x12bc>)
 8002c0a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002c0c:	4b6c      	ldr	r3, [pc, #432]	; (8002dc0 <lcd_init+0x12b8>)
 8002c0e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002c12:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002c14:	4b6a      	ldr	r3, [pc, #424]	; (8002dc0 <lcd_init+0x12b8>)
 8002c16:	2280      	movs	r2, #128	; 0x80
 8002c18:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002c1a:	4b69      	ldr	r3, [pc, #420]	; (8002dc0 <lcd_init+0x12b8>)
 8002c1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c20:	611a      	str	r2, [r3, #16]
}
 8002c22:	bf00      	nop
        lcd_wr_regno(0xF2); /*  3Gamma Function Disable */
        lcd_wr_xdata(0x00);
 8002c24:	2000      	movs	r0, #0
 8002c26:	f7fd fe33 	bl	8000890 <lcd_wr_xdata>
 8002c2a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002c2e:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 8002c32:	2226      	movs	r2, #38	; 0x26
 8002c34:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002c36:	4b62      	ldr	r3, [pc, #392]	; (8002dc0 <lcd_init+0x12b8>)
 8002c38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c3c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002c3e:	4b60      	ldr	r3, [pc, #384]	; (8002dc0 <lcd_init+0x12b8>)
 8002c40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c44:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002c46:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002c4a:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 8002c4e:	881b      	ldrh	r3, [r3, #0]
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	4b5c      	ldr	r3, [pc, #368]	; (8002dc4 <lcd_init+0x12bc>)
 8002c54:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002c56:	4b5a      	ldr	r3, [pc, #360]	; (8002dc0 <lcd_init+0x12b8>)
 8002c58:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002c5c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002c5e:	4b58      	ldr	r3, [pc, #352]	; (8002dc0 <lcd_init+0x12b8>)
 8002c60:	2280      	movs	r2, #128	; 0x80
 8002c62:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002c64:	4b56      	ldr	r3, [pc, #344]	; (8002dc0 <lcd_init+0x12b8>)
 8002c66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c6a:	611a      	str	r2, [r3, #16]
}
 8002c6c:	bf00      	nop
        lcd_wr_regno(0x26); /* Gamma curve selected */
        lcd_wr_xdata(0x01);
 8002c6e:	2001      	movs	r0, #1
 8002c70:	f7fd fe0e 	bl	8000890 <lcd_wr_xdata>
 8002c74:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002c78:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002c7c:	22e0      	movs	r2, #224	; 0xe0
 8002c7e:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002c80:	4b4f      	ldr	r3, [pc, #316]	; (8002dc0 <lcd_init+0x12b8>)
 8002c82:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c86:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002c88:	4b4d      	ldr	r3, [pc, #308]	; (8002dc0 <lcd_init+0x12b8>)
 8002c8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c8e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002c90:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002c94:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002c98:	881b      	ldrh	r3, [r3, #0]
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	4b49      	ldr	r3, [pc, #292]	; (8002dc4 <lcd_init+0x12bc>)
 8002c9e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002ca0:	4b47      	ldr	r3, [pc, #284]	; (8002dc0 <lcd_init+0x12b8>)
 8002ca2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002ca6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002ca8:	4b45      	ldr	r3, [pc, #276]	; (8002dc0 <lcd_init+0x12b8>)
 8002caa:	2280      	movs	r2, #128	; 0x80
 8002cac:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002cae:	4b44      	ldr	r3, [pc, #272]	; (8002dc0 <lcd_init+0x12b8>)
 8002cb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cb4:	611a      	str	r2, [r3, #16]
}
 8002cb6:	bf00      	nop
        lcd_wr_regno(0xE0); /* Set Gamma */
        lcd_wr_xdata(0x0F);
 8002cb8:	200f      	movs	r0, #15
 8002cba:	f7fd fde9 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x2A);
 8002cbe:	202a      	movs	r0, #42	; 0x2a
 8002cc0:	f7fd fde6 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x28);
 8002cc4:	2028      	movs	r0, #40	; 0x28
 8002cc6:	f7fd fde3 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x08);
 8002cca:	2008      	movs	r0, #8
 8002ccc:	f7fd fde0 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);
 8002cd0:	200e      	movs	r0, #14
 8002cd2:	f7fd fddd 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x08);
 8002cd6:	2008      	movs	r0, #8
 8002cd8:	f7fd fdda 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x54);
 8002cdc:	2054      	movs	r0, #84	; 0x54
 8002cde:	f7fd fdd7 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0XA9);
 8002ce2:	20a9      	movs	r0, #169	; 0xa9
 8002ce4:	f7fd fdd4 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x43);
 8002ce8:	2043      	movs	r0, #67	; 0x43
 8002cea:	f7fd fdd1 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x0A);
 8002cee:	200a      	movs	r0, #10
 8002cf0:	f7fd fdce 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 8002cf4:	200f      	movs	r0, #15
 8002cf6:	f7fd fdcb 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002cfa:	2000      	movs	r0, #0
 8002cfc:	f7fd fdc8 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002d00:	2000      	movs	r0, #0
 8002d02:	f7fd fdc5 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002d06:	2000      	movs	r0, #0
 8002d08:	f7fd fdc2 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002d0c:	2000      	movs	r0, #0
 8002d0e:	f7fd fdbf 	bl	8000890 <lcd_wr_xdata>
 8002d12:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002d16:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 8002d1a:	22e1      	movs	r2, #225	; 0xe1
 8002d1c:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002d1e:	4b28      	ldr	r3, [pc, #160]	; (8002dc0 <lcd_init+0x12b8>)
 8002d20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d24:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002d26:	4b26      	ldr	r3, [pc, #152]	; (8002dc0 <lcd_init+0x12b8>)
 8002d28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d2c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002d2e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002d32:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 8002d36:	881b      	ldrh	r3, [r3, #0]
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	4b22      	ldr	r3, [pc, #136]	; (8002dc4 <lcd_init+0x12bc>)
 8002d3c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002d3e:	4b20      	ldr	r3, [pc, #128]	; (8002dc0 <lcd_init+0x12b8>)
 8002d40:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002d44:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002d46:	4b1e      	ldr	r3, [pc, #120]	; (8002dc0 <lcd_init+0x12b8>)
 8002d48:	2280      	movs	r2, #128	; 0x80
 8002d4a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002d4c:	4b1c      	ldr	r3, [pc, #112]	; (8002dc0 <lcd_init+0x12b8>)
 8002d4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d52:	611a      	str	r2, [r3, #16]
}
 8002d54:	bf00      	nop
        lcd_wr_regno(0XE1); /* Set Gamma */
        lcd_wr_xdata(0x00);
 8002d56:	2000      	movs	r0, #0
 8002d58:	f7fd fd9a 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x15);
 8002d5c:	2015      	movs	r0, #21
 8002d5e:	f7fd fd97 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 8002d62:	2017      	movs	r0, #23
 8002d64:	f7fd fd94 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x07);
 8002d68:	2007      	movs	r0, #7
 8002d6a:	f7fd fd91 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x11);
 8002d6e:	2011      	movs	r0, #17
 8002d70:	f7fd fd8e 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x06);
 8002d74:	2006      	movs	r0, #6
 8002d76:	f7fd fd8b 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x2B);
 8002d7a:	202b      	movs	r0, #43	; 0x2b
 8002d7c:	f7fd fd88 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x56);
 8002d80:	2056      	movs	r0, #86	; 0x56
 8002d82:	f7fd fd85 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 8002d86:	203c      	movs	r0, #60	; 0x3c
 8002d88:	f7fd fd82 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x05);
 8002d8c:	2005      	movs	r0, #5
 8002d8e:	f7fd fd7f 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 8002d92:	2010      	movs	r0, #16
 8002d94:	f7fd fd7c 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 8002d98:	200f      	movs	r0, #15
 8002d9a:	f7fd fd79 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x3F);
 8002d9e:	203f      	movs	r0, #63	; 0x3f
 8002da0:	f7fd fd76 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x3F);
 8002da4:	203f      	movs	r0, #63	; 0x3f
 8002da6:	f7fd fd73 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 8002daa:	200f      	movs	r0, #15
 8002dac:	f7fd fd70 	bl	8000890 <lcd_wr_xdata>
 8002db0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002db4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002db8:	222b      	movs	r2, #43	; 0x2b
 8002dba:	801a      	strh	r2, [r3, #0]
 8002dbc:	e004      	b.n	8002dc8 <lcd_init+0x12c0>
 8002dbe:	bf00      	nop
 8002dc0:	40011000 	.word	0x40011000
 8002dc4:	40010c00 	.word	0x40010c00
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002dc8:	4b4e      	ldr	r3, [pc, #312]	; (8002f04 <lcd_init+0x13fc>)
 8002dca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002dce:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002dd0:	4b4c      	ldr	r3, [pc, #304]	; (8002f04 <lcd_init+0x13fc>)
 8002dd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dd6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002dd8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002ddc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002de0:	881b      	ldrh	r3, [r3, #0]
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	4b48      	ldr	r3, [pc, #288]	; (8002f08 <lcd_init+0x1400>)
 8002de6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002de8:	4b46      	ldr	r3, [pc, #280]	; (8002f04 <lcd_init+0x13fc>)
 8002dea:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002dee:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002df0:	4b44      	ldr	r3, [pc, #272]	; (8002f04 <lcd_init+0x13fc>)
 8002df2:	2280      	movs	r2, #128	; 0x80
 8002df4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002df6:	4b43      	ldr	r3, [pc, #268]	; (8002f04 <lcd_init+0x13fc>)
 8002df8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dfc:	611a      	str	r2, [r3, #16]
}
 8002dfe:	bf00      	nop
        lcd_wr_regno(0x2B);
        lcd_wr_xdata(0x00);
 8002e00:	2000      	movs	r0, #0
 8002e02:	f7fd fd45 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002e06:	2000      	movs	r0, #0
 8002e08:	f7fd fd42 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8002e0c:	2001      	movs	r0, #1
 8002e0e:	f7fd fd3f 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x3f);
 8002e12:	203f      	movs	r0, #63	; 0x3f
 8002e14:	f7fd fd3c 	bl	8000890 <lcd_wr_xdata>
 8002e18:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002e1c:	f5a3 738b 	sub.w	r3, r3, #278	; 0x116
 8002e20:	222a      	movs	r2, #42	; 0x2a
 8002e22:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002e24:	4b37      	ldr	r3, [pc, #220]	; (8002f04 <lcd_init+0x13fc>)
 8002e26:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e2a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002e2c:	4b35      	ldr	r3, [pc, #212]	; (8002f04 <lcd_init+0x13fc>)
 8002e2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e32:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002e34:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002e38:	f5a3 738b 	sub.w	r3, r3, #278	; 0x116
 8002e3c:	881b      	ldrh	r3, [r3, #0]
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	4b31      	ldr	r3, [pc, #196]	; (8002f08 <lcd_init+0x1400>)
 8002e42:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002e44:	4b2f      	ldr	r3, [pc, #188]	; (8002f04 <lcd_init+0x13fc>)
 8002e46:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002e4a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002e4c:	4b2d      	ldr	r3, [pc, #180]	; (8002f04 <lcd_init+0x13fc>)
 8002e4e:	2280      	movs	r2, #128	; 0x80
 8002e50:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002e52:	4b2c      	ldr	r3, [pc, #176]	; (8002f04 <lcd_init+0x13fc>)
 8002e54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e58:	611a      	str	r2, [r3, #16]
}
 8002e5a:	bf00      	nop
        lcd_wr_regno(0x2A);
        lcd_wr_xdata(0x00);
 8002e5c:	2000      	movs	r0, #0
 8002e5e:	f7fd fd17 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002e62:	2000      	movs	r0, #0
 8002e64:	f7fd fd14 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002e68:	2000      	movs	r0, #0
 8002e6a:	f7fd fd11 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xef);
 8002e6e:	20ef      	movs	r0, #239	; 0xef
 8002e70:	f7fd fd0e 	bl	8000890 <lcd_wr_xdata>
 8002e74:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002e78:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002e7c:	2211      	movs	r2, #17
 8002e7e:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002e80:	4b20      	ldr	r3, [pc, #128]	; (8002f04 <lcd_init+0x13fc>)
 8002e82:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e86:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002e88:	4b1e      	ldr	r3, [pc, #120]	; (8002f04 <lcd_init+0x13fc>)
 8002e8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e8e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002e90:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002e94:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002e98:	881b      	ldrh	r3, [r3, #0]
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	4b1a      	ldr	r3, [pc, #104]	; (8002f08 <lcd_init+0x1400>)
 8002e9e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002ea0:	4b18      	ldr	r3, [pc, #96]	; (8002f04 <lcd_init+0x13fc>)
 8002ea2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002ea6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002ea8:	4b16      	ldr	r3, [pc, #88]	; (8002f04 <lcd_init+0x13fc>)
 8002eaa:	2280      	movs	r2, #128	; 0x80
 8002eac:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002eae:	4b15      	ldr	r3, [pc, #84]	; (8002f04 <lcd_init+0x13fc>)
 8002eb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eb4:	611a      	str	r2, [r3, #16]
}
 8002eb6:	bf00      	nop
        lcd_wr_regno(0x11); /* Exit Sleep */
        HAL_Delay(120);
 8002eb8:	2078      	movs	r0, #120	; 0x78
 8002eba:	f004 fb71 	bl	80075a0 <HAL_Delay>
 8002ebe:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002ec2:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8002ec6:	2229      	movs	r2, #41	; 0x29
 8002ec8:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002eca:	4b0e      	ldr	r3, [pc, #56]	; (8002f04 <lcd_init+0x13fc>)
 8002ecc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ed0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002ed2:	4b0c      	ldr	r3, [pc, #48]	; (8002f04 <lcd_init+0x13fc>)
 8002ed4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ed8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002eda:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002ede:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8002ee2:	881b      	ldrh	r3, [r3, #0]
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	4b08      	ldr	r3, [pc, #32]	; (8002f08 <lcd_init+0x1400>)
 8002ee8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002eea:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <lcd_init+0x13fc>)
 8002eec:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002ef0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002ef2:	4b04      	ldr	r3, [pc, #16]	; (8002f04 <lcd_init+0x13fc>)
 8002ef4:	2280      	movs	r2, #128	; 0x80
 8002ef6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002ef8:	4b02      	ldr	r3, [pc, #8]	; (8002f04 <lcd_init+0x13fc>)
 8002efa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002efe:	611a      	str	r2, [r3, #16]
}
 8002f00:	f003 bd4b 	b.w	800699a <lcd_init+0x4e92>
 8002f04:	40011000 	.word	0x40011000
 8002f08:	40010c00 	.word	0x40010c00
        lcd_wr_regno(0x29); /* display on */
    }
    else if (lcddev.id == 0x5310)
 8002f0c:	4bbe      	ldr	r3, [pc, #760]	; (8003208 <lcd_init+0x1700>)
 8002f0e:	889b      	ldrh	r3, [r3, #4]
 8002f10:	f245 3210 	movw	r2, #21264	; 0x5310
 8002f14:	4293      	cmp	r3, r2
 8002f16:	f041 846d 	bne.w	80047f4 <lcd_init+0x2cec>
 8002f1a:	23ed      	movs	r3, #237	; 0xed
 8002f1c:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002f20:	4bba      	ldr	r3, [pc, #744]	; (800320c <lcd_init+0x1704>)
 8002f22:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f26:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002f28:	4bb8      	ldr	r3, [pc, #736]	; (800320c <lcd_init+0x1704>)
 8002f2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f2e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002f30:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	4bb6      	ldr	r3, [pc, #728]	; (8003210 <lcd_init+0x1708>)
 8002f38:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002f3a:	4bb4      	ldr	r3, [pc, #720]	; (800320c <lcd_init+0x1704>)
 8002f3c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002f40:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002f42:	4bb2      	ldr	r3, [pc, #712]	; (800320c <lcd_init+0x1704>)
 8002f44:	2280      	movs	r2, #128	; 0x80
 8002f46:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002f48:	4bb0      	ldr	r3, [pc, #704]	; (800320c <lcd_init+0x1704>)
 8002f4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f4e:	611a      	str	r2, [r3, #16]
}
 8002f50:	bf00      	nop
    {
        //lcd_ex_nt35310_reginit();   /* ִ��NT35310��ʼ�� */
        lcd_wr_regno(0xED);
        lcd_wr_xdata(0x01);
 8002f52:	2001      	movs	r0, #1
 8002f54:	f7fd fc9c 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xFE);
 8002f58:	20fe      	movs	r0, #254	; 0xfe
 8002f5a:	f7fd fc99 	bl	8000890 <lcd_wr_xdata>
 8002f5e:	23ee      	movs	r3, #238	; 0xee
 8002f60:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002f64:	4ba9      	ldr	r3, [pc, #676]	; (800320c <lcd_init+0x1704>)
 8002f66:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f6a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002f6c:	4ba7      	ldr	r3, [pc, #668]	; (800320c <lcd_init+0x1704>)
 8002f6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f72:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002f74:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	4ba5      	ldr	r3, [pc, #660]	; (8003210 <lcd_init+0x1708>)
 8002f7c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002f7e:	4ba3      	ldr	r3, [pc, #652]	; (800320c <lcd_init+0x1704>)
 8002f80:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002f84:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002f86:	4ba1      	ldr	r3, [pc, #644]	; (800320c <lcd_init+0x1704>)
 8002f88:	2280      	movs	r2, #128	; 0x80
 8002f8a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002f8c:	4b9f      	ldr	r3, [pc, #636]	; (800320c <lcd_init+0x1704>)
 8002f8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f92:	611a      	str	r2, [r3, #16]
}
 8002f94:	bf00      	nop

        lcd_wr_regno(0xEE);
        lcd_wr_xdata(0xDE);
 8002f96:	20de      	movs	r0, #222	; 0xde
 8002f98:	f7fd fc7a 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x21);
 8002f9c:	2021      	movs	r0, #33	; 0x21
 8002f9e:	f7fd fc77 	bl	8000890 <lcd_wr_xdata>
 8002fa2:	23f1      	movs	r3, #241	; 0xf1
 8002fa4:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002fa8:	4b98      	ldr	r3, [pc, #608]	; (800320c <lcd_init+0x1704>)
 8002faa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fae:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002fb0:	4b96      	ldr	r3, [pc, #600]	; (800320c <lcd_init+0x1704>)
 8002fb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fb6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002fb8:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	4b94      	ldr	r3, [pc, #592]	; (8003210 <lcd_init+0x1708>)
 8002fc0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002fc2:	4b92      	ldr	r3, [pc, #584]	; (800320c <lcd_init+0x1704>)
 8002fc4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002fc8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002fca:	4b90      	ldr	r3, [pc, #576]	; (800320c <lcd_init+0x1704>)
 8002fcc:	2280      	movs	r2, #128	; 0x80
 8002fce:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002fd0:	4b8e      	ldr	r3, [pc, #568]	; (800320c <lcd_init+0x1704>)
 8002fd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fd6:	611a      	str	r2, [r3, #16]
}
 8002fd8:	bf00      	nop

        lcd_wr_regno(0xF1);
        lcd_wr_xdata(0x01);
 8002fda:	2001      	movs	r0, #1
 8002fdc:	f7fd fc58 	bl	8000890 <lcd_wr_xdata>
 8002fe0:	23df      	movs	r3, #223	; 0xdf
 8002fe2:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002fe6:	4b89      	ldr	r3, [pc, #548]	; (800320c <lcd_init+0x1704>)
 8002fe8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fec:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002fee:	4b87      	ldr	r3, [pc, #540]	; (800320c <lcd_init+0x1704>)
 8002ff0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ff4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002ff6:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	4b84      	ldr	r3, [pc, #528]	; (8003210 <lcd_init+0x1708>)
 8002ffe:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003000:	4b82      	ldr	r3, [pc, #520]	; (800320c <lcd_init+0x1704>)
 8003002:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003006:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003008:	4b80      	ldr	r3, [pc, #512]	; (800320c <lcd_init+0x1704>)
 800300a:	2280      	movs	r2, #128	; 0x80
 800300c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800300e:	4b7f      	ldr	r3, [pc, #508]	; (800320c <lcd_init+0x1704>)
 8003010:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003014:	611a      	str	r2, [r3, #16]
}
 8003016:	bf00      	nop
        lcd_wr_regno(0xDF);
        lcd_wr_xdata(0x10);
 8003018:	2010      	movs	r0, #16
 800301a:	f7fd fc39 	bl	8000890 <lcd_wr_xdata>
 800301e:	23c4      	movs	r3, #196	; 0xc4
 8003020:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003024:	4b79      	ldr	r3, [pc, #484]	; (800320c <lcd_init+0x1704>)
 8003026:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800302a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800302c:	4b77      	ldr	r3, [pc, #476]	; (800320c <lcd_init+0x1704>)
 800302e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003032:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003034:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8003038:	b29a      	uxth	r2, r3
 800303a:	4b75      	ldr	r3, [pc, #468]	; (8003210 <lcd_init+0x1708>)
 800303c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800303e:	4b73      	ldr	r3, [pc, #460]	; (800320c <lcd_init+0x1704>)
 8003040:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003044:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003046:	4b71      	ldr	r3, [pc, #452]	; (800320c <lcd_init+0x1704>)
 8003048:	2280      	movs	r2, #128	; 0x80
 800304a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800304c:	4b6f      	ldr	r3, [pc, #444]	; (800320c <lcd_init+0x1704>)
 800304e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003052:	611a      	str	r2, [r3, #16]
}
 8003054:	bf00      	nop

        /* VCOMvoltage */
        lcd_wr_regno(0xC4);
        lcd_wr_xdata(0x8F);  /* 5f */
 8003056:	208f      	movs	r0, #143	; 0x8f
 8003058:	f7fd fc1a 	bl	8000890 <lcd_wr_xdata>
 800305c:	23c6      	movs	r3, #198	; 0xc6
 800305e:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003062:	4b6a      	ldr	r3, [pc, #424]	; (800320c <lcd_init+0x1704>)
 8003064:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003068:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800306a:	4b68      	ldr	r3, [pc, #416]	; (800320c <lcd_init+0x1704>)
 800306c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003070:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003072:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 8003076:	b29a      	uxth	r2, r3
 8003078:	4b65      	ldr	r3, [pc, #404]	; (8003210 <lcd_init+0x1708>)
 800307a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800307c:	4b63      	ldr	r3, [pc, #396]	; (800320c <lcd_init+0x1704>)
 800307e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003082:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003084:	4b61      	ldr	r3, [pc, #388]	; (800320c <lcd_init+0x1704>)
 8003086:	2280      	movs	r2, #128	; 0x80
 8003088:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800308a:	4b60      	ldr	r3, [pc, #384]	; (800320c <lcd_init+0x1704>)
 800308c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003090:	611a      	str	r2, [r3, #16]
}
 8003092:	bf00      	nop

        lcd_wr_regno(0xC6);
        lcd_wr_xdata(0x00);
 8003094:	2000      	movs	r0, #0
 8003096:	f7fd fbfb 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xE2);
 800309a:	20e2      	movs	r0, #226	; 0xe2
 800309c:	f7fd fbf8 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xE2);
 80030a0:	20e2      	movs	r0, #226	; 0xe2
 80030a2:	f7fd fbf5 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xE2);
 80030a6:	20e2      	movs	r0, #226	; 0xe2
 80030a8:	f7fd fbf2 	bl	8000890 <lcd_wr_xdata>
 80030ac:	23bf      	movs	r3, #191	; 0xbf
 80030ae:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80030b2:	4b56      	ldr	r3, [pc, #344]	; (800320c <lcd_init+0x1704>)
 80030b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030b8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80030ba:	4b54      	ldr	r3, [pc, #336]	; (800320c <lcd_init+0x1704>)
 80030bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030c0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80030c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	4b51      	ldr	r3, [pc, #324]	; (8003210 <lcd_init+0x1708>)
 80030ca:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80030cc:	4b4f      	ldr	r3, [pc, #316]	; (800320c <lcd_init+0x1704>)
 80030ce:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80030d2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80030d4:	4b4d      	ldr	r3, [pc, #308]	; (800320c <lcd_init+0x1704>)
 80030d6:	2280      	movs	r2, #128	; 0x80
 80030d8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80030da:	4b4c      	ldr	r3, [pc, #304]	; (800320c <lcd_init+0x1704>)
 80030dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030e0:	611a      	str	r2, [r3, #16]
}
 80030e2:	bf00      	nop
        lcd_wr_regno(0xBF);
        lcd_wr_xdata(0xAA);
 80030e4:	20aa      	movs	r0, #170	; 0xaa
 80030e6:	f7fd fbd3 	bl	8000890 <lcd_wr_xdata>
 80030ea:	23b0      	movs	r3, #176	; 0xb0
 80030ec:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80030f0:	4b46      	ldr	r3, [pc, #280]	; (800320c <lcd_init+0x1704>)
 80030f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030f6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80030f8:	4b44      	ldr	r3, [pc, #272]	; (800320c <lcd_init+0x1704>)
 80030fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030fe:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003100:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 8003104:	b29a      	uxth	r2, r3
 8003106:	4b42      	ldr	r3, [pc, #264]	; (8003210 <lcd_init+0x1708>)
 8003108:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800310a:	4b40      	ldr	r3, [pc, #256]	; (800320c <lcd_init+0x1704>)
 800310c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003110:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003112:	4b3e      	ldr	r3, [pc, #248]	; (800320c <lcd_init+0x1704>)
 8003114:	2280      	movs	r2, #128	; 0x80
 8003116:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003118:	4b3c      	ldr	r3, [pc, #240]	; (800320c <lcd_init+0x1704>)
 800311a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800311e:	611a      	str	r2, [r3, #16]
}
 8003120:	bf00      	nop

        lcd_wr_regno(0xB0);
        lcd_wr_xdata(0x0D);
 8003122:	200d      	movs	r0, #13
 8003124:	f7fd fbb4 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003128:	2000      	movs	r0, #0
 800312a:	f7fd fbb1 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x0D);
 800312e:	200d      	movs	r0, #13
 8003130:	f7fd fbae 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003134:	2000      	movs	r0, #0
 8003136:	f7fd fbab 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x11);
 800313a:	2011      	movs	r0, #17
 800313c:	f7fd fba8 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003140:	2000      	movs	r0, #0
 8003142:	f7fd fba5 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x19);
 8003146:	2019      	movs	r0, #25
 8003148:	f7fd fba2 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800314c:	2000      	movs	r0, #0
 800314e:	f7fd fb9f 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x21);
 8003152:	2021      	movs	r0, #33	; 0x21
 8003154:	f7fd fb9c 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003158:	2000      	movs	r0, #0
 800315a:	f7fd fb99 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x2D);
 800315e:	202d      	movs	r0, #45	; 0x2d
 8003160:	f7fd fb96 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003164:	2000      	movs	r0, #0
 8003166:	f7fd fb93 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x3D);
 800316a:	203d      	movs	r0, #61	; 0x3d
 800316c:	f7fd fb90 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003170:	2000      	movs	r0, #0
 8003172:	f7fd fb8d 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x5D);
 8003176:	205d      	movs	r0, #93	; 0x5d
 8003178:	f7fd fb8a 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800317c:	2000      	movs	r0, #0
 800317e:	f7fd fb87 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x5D);
 8003182:	205d      	movs	r0, #93	; 0x5d
 8003184:	f7fd fb84 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003188:	2000      	movs	r0, #0
 800318a:	f7fd fb81 	bl	8000890 <lcd_wr_xdata>
 800318e:	23b1      	movs	r3, #177	; 0xb1
 8003190:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003194:	4b1d      	ldr	r3, [pc, #116]	; (800320c <lcd_init+0x1704>)
 8003196:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800319a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800319c:	4b1b      	ldr	r3, [pc, #108]	; (800320c <lcd_init+0x1704>)
 800319e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031a2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80031a4:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	4b19      	ldr	r3, [pc, #100]	; (8003210 <lcd_init+0x1708>)
 80031ac:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80031ae:	4b17      	ldr	r3, [pc, #92]	; (800320c <lcd_init+0x1704>)
 80031b0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80031b4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80031b6:	4b15      	ldr	r3, [pc, #84]	; (800320c <lcd_init+0x1704>)
 80031b8:	2280      	movs	r2, #128	; 0x80
 80031ba:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80031bc:	4b13      	ldr	r3, [pc, #76]	; (800320c <lcd_init+0x1704>)
 80031be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031c2:	611a      	str	r2, [r3, #16]
}
 80031c4:	bf00      	nop

        lcd_wr_regno(0xB1);
        lcd_wr_xdata(0x80);
 80031c6:	2080      	movs	r0, #128	; 0x80
 80031c8:	f7fd fb62 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80031cc:	2000      	movs	r0, #0
 80031ce:	f7fd fb5f 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x8B);
 80031d2:	208b      	movs	r0, #139	; 0x8b
 80031d4:	f7fd fb5c 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80031d8:	2000      	movs	r0, #0
 80031da:	f7fd fb59 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x96);
 80031de:	2096      	movs	r0, #150	; 0x96
 80031e0:	f7fd fb56 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80031e4:	2000      	movs	r0, #0
 80031e6:	f7fd fb53 	bl	8000890 <lcd_wr_xdata>
 80031ea:	23b2      	movs	r3, #178	; 0xb2
 80031ec:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80031f0:	4b06      	ldr	r3, [pc, #24]	; (800320c <lcd_init+0x1704>)
 80031f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031f6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80031f8:	4b04      	ldr	r3, [pc, #16]	; (800320c <lcd_init+0x1704>)
 80031fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031fe:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003200:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8003204:	b29a      	uxth	r2, r3
 8003206:	e005      	b.n	8003214 <lcd_init+0x170c>
 8003208:	2000007c 	.word	0x2000007c
 800320c:	40011000 	.word	0x40011000
 8003210:	40010c00 	.word	0x40010c00
 8003214:	4bd0      	ldr	r3, [pc, #832]	; (8003558 <lcd_init+0x1a50>)
 8003216:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003218:	4bd0      	ldr	r3, [pc, #832]	; (800355c <lcd_init+0x1a54>)
 800321a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800321e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003220:	4bce      	ldr	r3, [pc, #824]	; (800355c <lcd_init+0x1a54>)
 8003222:	2280      	movs	r2, #128	; 0x80
 8003224:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003226:	4bcd      	ldr	r3, [pc, #820]	; (800355c <lcd_init+0x1a54>)
 8003228:	f44f 7200 	mov.w	r2, #512	; 0x200
 800322c:	611a      	str	r2, [r3, #16]
}
 800322e:	bf00      	nop

        lcd_wr_regno(0xB2);
        lcd_wr_xdata(0x00);
 8003230:	2000      	movs	r0, #0
 8003232:	f7fd fb2d 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003236:	2000      	movs	r0, #0
 8003238:	f7fd fb2a 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 800323c:	2002      	movs	r0, #2
 800323e:	f7fd fb27 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003242:	2000      	movs	r0, #0
 8003244:	f7fd fb24 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x03);
 8003248:	2003      	movs	r0, #3
 800324a:	f7fd fb21 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800324e:	2000      	movs	r0, #0
 8003250:	f7fd fb1e 	bl	8000890 <lcd_wr_xdata>
 8003254:	23b3      	movs	r3, #179	; 0xb3
 8003256:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800325a:	4bc0      	ldr	r3, [pc, #768]	; (800355c <lcd_init+0x1a54>)
 800325c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003260:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003262:	4bbe      	ldr	r3, [pc, #760]	; (800355c <lcd_init+0x1a54>)
 8003264:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003268:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800326a:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 800326e:	b29a      	uxth	r2, r3
 8003270:	4bb9      	ldr	r3, [pc, #740]	; (8003558 <lcd_init+0x1a50>)
 8003272:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003274:	4bb9      	ldr	r3, [pc, #740]	; (800355c <lcd_init+0x1a54>)
 8003276:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800327a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800327c:	4bb7      	ldr	r3, [pc, #732]	; (800355c <lcd_init+0x1a54>)
 800327e:	2280      	movs	r2, #128	; 0x80
 8003280:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003282:	4bb6      	ldr	r3, [pc, #728]	; (800355c <lcd_init+0x1a54>)
 8003284:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003288:	611a      	str	r2, [r3, #16]
}
 800328a:	bf00      	nop

        lcd_wr_regno(0xB3);
        lcd_wr_xdata(0x00);
 800328c:	2000      	movs	r0, #0
 800328e:	f7fd faff 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003292:	2000      	movs	r0, #0
 8003294:	f7fd fafc 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003298:	2000      	movs	r0, #0
 800329a:	f7fd faf9 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800329e:	2000      	movs	r0, #0
 80032a0:	f7fd faf6 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80032a4:	2000      	movs	r0, #0
 80032a6:	f7fd faf3 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80032aa:	2000      	movs	r0, #0
 80032ac:	f7fd faf0 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80032b0:	2000      	movs	r0, #0
 80032b2:	f7fd faed 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80032b6:	2000      	movs	r0, #0
 80032b8:	f7fd faea 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80032bc:	2000      	movs	r0, #0
 80032be:	f7fd fae7 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80032c2:	2000      	movs	r0, #0
 80032c4:	f7fd fae4 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80032c8:	2000      	movs	r0, #0
 80032ca:	f7fd fae1 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80032ce:	2000      	movs	r0, #0
 80032d0:	f7fd fade 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80032d4:	2000      	movs	r0, #0
 80032d6:	f7fd fadb 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80032da:	2000      	movs	r0, #0
 80032dc:	f7fd fad8 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80032e0:	2000      	movs	r0, #0
 80032e2:	f7fd fad5 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80032e6:	2000      	movs	r0, #0
 80032e8:	f7fd fad2 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80032ec:	2000      	movs	r0, #0
 80032ee:	f7fd facf 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80032f2:	2000      	movs	r0, #0
 80032f4:	f7fd facc 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80032f8:	2000      	movs	r0, #0
 80032fa:	f7fd fac9 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80032fe:	2000      	movs	r0, #0
 8003300:	f7fd fac6 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003304:	2000      	movs	r0, #0
 8003306:	f7fd fac3 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800330a:	2000      	movs	r0, #0
 800330c:	f7fd fac0 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003310:	2000      	movs	r0, #0
 8003312:	f7fd fabd 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003316:	2000      	movs	r0, #0
 8003318:	f7fd faba 	bl	8000890 <lcd_wr_xdata>
 800331c:	23b4      	movs	r3, #180	; 0xb4
 800331e:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003322:	4b8e      	ldr	r3, [pc, #568]	; (800355c <lcd_init+0x1a54>)
 8003324:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003328:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800332a:	4b8c      	ldr	r3, [pc, #560]	; (800355c <lcd_init+0x1a54>)
 800332c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003330:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003332:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8003336:	b29a      	uxth	r2, r3
 8003338:	4b87      	ldr	r3, [pc, #540]	; (8003558 <lcd_init+0x1a50>)
 800333a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800333c:	4b87      	ldr	r3, [pc, #540]	; (800355c <lcd_init+0x1a54>)
 800333e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003342:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003344:	4b85      	ldr	r3, [pc, #532]	; (800355c <lcd_init+0x1a54>)
 8003346:	2280      	movs	r2, #128	; 0x80
 8003348:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800334a:	4b84      	ldr	r3, [pc, #528]	; (800355c <lcd_init+0x1a54>)
 800334c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003350:	611a      	str	r2, [r3, #16]
}
 8003352:	bf00      	nop

        lcd_wr_regno(0xB4);
        lcd_wr_xdata(0x8B);
 8003354:	208b      	movs	r0, #139	; 0x8b
 8003356:	f7fd fa9b 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800335a:	2000      	movs	r0, #0
 800335c:	f7fd fa98 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x96);
 8003360:	2096      	movs	r0, #150	; 0x96
 8003362:	f7fd fa95 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003366:	2000      	movs	r0, #0
 8003368:	f7fd fa92 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xA1);
 800336c:	20a1      	movs	r0, #161	; 0xa1
 800336e:	f7fd fa8f 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003372:	2000      	movs	r0, #0
 8003374:	f7fd fa8c 	bl	8000890 <lcd_wr_xdata>
 8003378:	23b5      	movs	r3, #181	; 0xb5
 800337a:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800337e:	4b77      	ldr	r3, [pc, #476]	; (800355c <lcd_init+0x1a54>)
 8003380:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003384:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003386:	4b75      	ldr	r3, [pc, #468]	; (800355c <lcd_init+0x1a54>)
 8003388:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800338c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800338e:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 8003392:	b29a      	uxth	r2, r3
 8003394:	4b70      	ldr	r3, [pc, #448]	; (8003558 <lcd_init+0x1a50>)
 8003396:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003398:	4b70      	ldr	r3, [pc, #448]	; (800355c <lcd_init+0x1a54>)
 800339a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800339e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80033a0:	4b6e      	ldr	r3, [pc, #440]	; (800355c <lcd_init+0x1a54>)
 80033a2:	2280      	movs	r2, #128	; 0x80
 80033a4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80033a6:	4b6d      	ldr	r3, [pc, #436]	; (800355c <lcd_init+0x1a54>)
 80033a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033ac:	611a      	str	r2, [r3, #16]
}
 80033ae:	bf00      	nop

        lcd_wr_regno(0xB5);
        lcd_wr_xdata(0x02);
 80033b0:	2002      	movs	r0, #2
 80033b2:	f7fd fa6d 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80033b6:	2000      	movs	r0, #0
 80033b8:	f7fd fa6a 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x03);
 80033bc:	2003      	movs	r0, #3
 80033be:	f7fd fa67 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80033c2:	2000      	movs	r0, #0
 80033c4:	f7fd fa64 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x04);
 80033c8:	2004      	movs	r0, #4
 80033ca:	f7fd fa61 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80033ce:	2000      	movs	r0, #0
 80033d0:	f7fd fa5e 	bl	8000890 <lcd_wr_xdata>
 80033d4:	23b6      	movs	r3, #182	; 0xb6
 80033d6:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80033da:	4b60      	ldr	r3, [pc, #384]	; (800355c <lcd_init+0x1a54>)
 80033dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80033e0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80033e2:	4b5e      	ldr	r3, [pc, #376]	; (800355c <lcd_init+0x1a54>)
 80033e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033e8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80033ea:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	4b59      	ldr	r3, [pc, #356]	; (8003558 <lcd_init+0x1a50>)
 80033f2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80033f4:	4b59      	ldr	r3, [pc, #356]	; (800355c <lcd_init+0x1a54>)
 80033f6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80033fa:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80033fc:	4b57      	ldr	r3, [pc, #348]	; (800355c <lcd_init+0x1a54>)
 80033fe:	2280      	movs	r2, #128	; 0x80
 8003400:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003402:	4b56      	ldr	r3, [pc, #344]	; (800355c <lcd_init+0x1a54>)
 8003404:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003408:	611a      	str	r2, [r3, #16]
}
 800340a:	bf00      	nop

        lcd_wr_regno(0xB6);
        lcd_wr_xdata(0x00);
 800340c:	2000      	movs	r0, #0
 800340e:	f7fd fa3f 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003412:	2000      	movs	r0, #0
 8003414:	f7fd fa3c 	bl	8000890 <lcd_wr_xdata>
 8003418:	23b7      	movs	r3, #183	; 0xb7
 800341a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800341e:	4b4f      	ldr	r3, [pc, #316]	; (800355c <lcd_init+0x1a54>)
 8003420:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003424:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003426:	4b4d      	ldr	r3, [pc, #308]	; (800355c <lcd_init+0x1a54>)
 8003428:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800342c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800342e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003432:	b29a      	uxth	r2, r3
 8003434:	4b48      	ldr	r3, [pc, #288]	; (8003558 <lcd_init+0x1a50>)
 8003436:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003438:	4b48      	ldr	r3, [pc, #288]	; (800355c <lcd_init+0x1a54>)
 800343a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800343e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003440:	4b46      	ldr	r3, [pc, #280]	; (800355c <lcd_init+0x1a54>)
 8003442:	2280      	movs	r2, #128	; 0x80
 8003444:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003446:	4b45      	ldr	r3, [pc, #276]	; (800355c <lcd_init+0x1a54>)
 8003448:	f44f 7200 	mov.w	r2, #512	; 0x200
 800344c:	611a      	str	r2, [r3, #16]
}
 800344e:	bf00      	nop

        lcd_wr_regno(0xB7);
        lcd_wr_xdata(0x00);
 8003450:	2000      	movs	r0, #0
 8003452:	f7fd fa1d 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003456:	2000      	movs	r0, #0
 8003458:	f7fd fa1a 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x3F);
 800345c:	203f      	movs	r0, #63	; 0x3f
 800345e:	f7fd fa17 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003462:	2000      	movs	r0, #0
 8003464:	f7fd fa14 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x5E);
 8003468:	205e      	movs	r0, #94	; 0x5e
 800346a:	f7fd fa11 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800346e:	2000      	movs	r0, #0
 8003470:	f7fd fa0e 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x64);
 8003474:	2064      	movs	r0, #100	; 0x64
 8003476:	f7fd fa0b 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800347a:	2000      	movs	r0, #0
 800347c:	f7fd fa08 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x8C);
 8003480:	208c      	movs	r0, #140	; 0x8c
 8003482:	f7fd fa05 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003486:	2000      	movs	r0, #0
 8003488:	f7fd fa02 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xAC);
 800348c:	20ac      	movs	r0, #172	; 0xac
 800348e:	f7fd f9ff 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003492:	2000      	movs	r0, #0
 8003494:	f7fd f9fc 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xDC);
 8003498:	20dc      	movs	r0, #220	; 0xdc
 800349a:	f7fd f9f9 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800349e:	2000      	movs	r0, #0
 80034a0:	f7fd f9f6 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x70);
 80034a4:	2070      	movs	r0, #112	; 0x70
 80034a6:	f7fd f9f3 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80034aa:	2000      	movs	r0, #0
 80034ac:	f7fd f9f0 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x90);
 80034b0:	2090      	movs	r0, #144	; 0x90
 80034b2:	f7fd f9ed 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80034b6:	2000      	movs	r0, #0
 80034b8:	f7fd f9ea 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xEB);
 80034bc:	20eb      	movs	r0, #235	; 0xeb
 80034be:	f7fd f9e7 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80034c2:	2000      	movs	r0, #0
 80034c4:	f7fd f9e4 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xDC);
 80034c8:	20dc      	movs	r0, #220	; 0xdc
 80034ca:	f7fd f9e1 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80034ce:	2000      	movs	r0, #0
 80034d0:	f7fd f9de 	bl	8000890 <lcd_wr_xdata>
 80034d4:	23b8      	movs	r3, #184	; 0xb8
 80034d6:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80034da:	4b20      	ldr	r3, [pc, #128]	; (800355c <lcd_init+0x1a54>)
 80034dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034e0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80034e2:	4b1e      	ldr	r3, [pc, #120]	; (800355c <lcd_init+0x1a54>)
 80034e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034e8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80034ea:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	4b19      	ldr	r3, [pc, #100]	; (8003558 <lcd_init+0x1a50>)
 80034f2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80034f4:	4b19      	ldr	r3, [pc, #100]	; (800355c <lcd_init+0x1a54>)
 80034f6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80034fa:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80034fc:	4b17      	ldr	r3, [pc, #92]	; (800355c <lcd_init+0x1a54>)
 80034fe:	2280      	movs	r2, #128	; 0x80
 8003500:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003502:	4b16      	ldr	r3, [pc, #88]	; (800355c <lcd_init+0x1a54>)
 8003504:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003508:	611a      	str	r2, [r3, #16]
}
 800350a:	bf00      	nop

        lcd_wr_regno(0xB8);
        lcd_wr_xdata(0x00);
 800350c:	2000      	movs	r0, #0
 800350e:	f7fd f9bf 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003512:	2000      	movs	r0, #0
 8003514:	f7fd f9bc 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003518:	2000      	movs	r0, #0
 800351a:	f7fd f9b9 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800351e:	2000      	movs	r0, #0
 8003520:	f7fd f9b6 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003524:	2000      	movs	r0, #0
 8003526:	f7fd f9b3 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800352a:	2000      	movs	r0, #0
 800352c:	f7fd f9b0 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003530:	2000      	movs	r0, #0
 8003532:	f7fd f9ad 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003536:	2000      	movs	r0, #0
 8003538:	f7fd f9aa 	bl	8000890 <lcd_wr_xdata>
 800353c:	23ba      	movs	r3, #186	; 0xba
 800353e:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003542:	4b06      	ldr	r3, [pc, #24]	; (800355c <lcd_init+0x1a54>)
 8003544:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003548:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800354a:	4b04      	ldr	r3, [pc, #16]	; (800355c <lcd_init+0x1a54>)
 800354c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003550:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003552:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8003556:	e003      	b.n	8003560 <lcd_init+0x1a58>
 8003558:	40010c00 	.word	0x40010c00
 800355c:	40011000 	.word	0x40011000
 8003560:	b29a      	uxth	r2, r3
 8003562:	4bd9      	ldr	r3, [pc, #868]	; (80038c8 <lcd_init+0x1dc0>)
 8003564:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003566:	4bd9      	ldr	r3, [pc, #868]	; (80038cc <lcd_init+0x1dc4>)
 8003568:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800356c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800356e:	4bd7      	ldr	r3, [pc, #860]	; (80038cc <lcd_init+0x1dc4>)
 8003570:	2280      	movs	r2, #128	; 0x80
 8003572:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003574:	4bd5      	ldr	r3, [pc, #852]	; (80038cc <lcd_init+0x1dc4>)
 8003576:	f44f 7200 	mov.w	r2, #512	; 0x200
 800357a:	611a      	str	r2, [r3, #16]
}
 800357c:	bf00      	nop

        lcd_wr_regno(0xBA);
        lcd_wr_xdata(0x24);
 800357e:	2024      	movs	r0, #36	; 0x24
 8003580:	f7fd f986 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003584:	2000      	movs	r0, #0
 8003586:	f7fd f983 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800358a:	2000      	movs	r0, #0
 800358c:	f7fd f980 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003590:	2000      	movs	r0, #0
 8003592:	f7fd f97d 	bl	8000890 <lcd_wr_xdata>
 8003596:	23c1      	movs	r3, #193	; 0xc1
 8003598:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800359c:	4bcb      	ldr	r3, [pc, #812]	; (80038cc <lcd_init+0x1dc4>)
 800359e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80035a2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80035a4:	4bc9      	ldr	r3, [pc, #804]	; (80038cc <lcd_init+0x1dc4>)
 80035a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035aa:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80035ac:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	4bc5      	ldr	r3, [pc, #788]	; (80038c8 <lcd_init+0x1dc0>)
 80035b4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80035b6:	4bc5      	ldr	r3, [pc, #788]	; (80038cc <lcd_init+0x1dc4>)
 80035b8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80035bc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80035be:	4bc3      	ldr	r3, [pc, #780]	; (80038cc <lcd_init+0x1dc4>)
 80035c0:	2280      	movs	r2, #128	; 0x80
 80035c2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80035c4:	4bc1      	ldr	r3, [pc, #772]	; (80038cc <lcd_init+0x1dc4>)
 80035c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035ca:	611a      	str	r2, [r3, #16]
}
 80035cc:	bf00      	nop

        lcd_wr_regno(0xC1);
        lcd_wr_xdata(0x20);
 80035ce:	2020      	movs	r0, #32
 80035d0:	f7fd f95e 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80035d4:	2000      	movs	r0, #0
 80035d6:	f7fd f95b 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x54);
 80035da:	2054      	movs	r0, #84	; 0x54
 80035dc:	f7fd f958 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80035e0:	2000      	movs	r0, #0
 80035e2:	f7fd f955 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 80035e6:	20ff      	movs	r0, #255	; 0xff
 80035e8:	f7fd f952 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80035ec:	2000      	movs	r0, #0
 80035ee:	f7fd f94f 	bl	8000890 <lcd_wr_xdata>
 80035f2:	23c2      	movs	r3, #194	; 0xc2
 80035f4:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80035f8:	4bb4      	ldr	r3, [pc, #720]	; (80038cc <lcd_init+0x1dc4>)
 80035fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80035fe:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003600:	4bb2      	ldr	r3, [pc, #712]	; (80038cc <lcd_init+0x1dc4>)
 8003602:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003606:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003608:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800360c:	b29a      	uxth	r2, r3
 800360e:	4bae      	ldr	r3, [pc, #696]	; (80038c8 <lcd_init+0x1dc0>)
 8003610:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003612:	4bae      	ldr	r3, [pc, #696]	; (80038cc <lcd_init+0x1dc4>)
 8003614:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003618:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800361a:	4bac      	ldr	r3, [pc, #688]	; (80038cc <lcd_init+0x1dc4>)
 800361c:	2280      	movs	r2, #128	; 0x80
 800361e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003620:	4baa      	ldr	r3, [pc, #680]	; (80038cc <lcd_init+0x1dc4>)
 8003622:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003626:	611a      	str	r2, [r3, #16]
}
 8003628:	bf00      	nop

        lcd_wr_regno(0xC2);
        lcd_wr_xdata(0x0A);
 800362a:	200a      	movs	r0, #10
 800362c:	f7fd f930 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003630:	2000      	movs	r0, #0
 8003632:	f7fd f92d 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x04);
 8003636:	2004      	movs	r0, #4
 8003638:	f7fd f92a 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800363c:	2000      	movs	r0, #0
 800363e:	f7fd f927 	bl	8000890 <lcd_wr_xdata>
 8003642:	23c3      	movs	r3, #195	; 0xc3
 8003644:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003648:	4ba0      	ldr	r3, [pc, #640]	; (80038cc <lcd_init+0x1dc4>)
 800364a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800364e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003650:	4b9e      	ldr	r3, [pc, #632]	; (80038cc <lcd_init+0x1dc4>)
 8003652:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003656:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003658:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800365c:	b29a      	uxth	r2, r3
 800365e:	4b9a      	ldr	r3, [pc, #616]	; (80038c8 <lcd_init+0x1dc0>)
 8003660:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003662:	4b9a      	ldr	r3, [pc, #616]	; (80038cc <lcd_init+0x1dc4>)
 8003664:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003668:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800366a:	4b98      	ldr	r3, [pc, #608]	; (80038cc <lcd_init+0x1dc4>)
 800366c:	2280      	movs	r2, #128	; 0x80
 800366e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003670:	4b96      	ldr	r3, [pc, #600]	; (80038cc <lcd_init+0x1dc4>)
 8003672:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003676:	611a      	str	r2, [r3, #16]
}
 8003678:	bf00      	nop

        lcd_wr_regno(0xC3);
        lcd_wr_xdata(0x3C);
 800367a:	203c      	movs	r0, #60	; 0x3c
 800367c:	f7fd f908 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003680:	2000      	movs	r0, #0
 8003682:	f7fd f905 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x3A);
 8003686:	203a      	movs	r0, #58	; 0x3a
 8003688:	f7fd f902 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800368c:	2000      	movs	r0, #0
 800368e:	f7fd f8ff 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x39);
 8003692:	2039      	movs	r0, #57	; 0x39
 8003694:	f7fd f8fc 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003698:	2000      	movs	r0, #0
 800369a:	f7fd f8f9 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x37);
 800369e:	2037      	movs	r0, #55	; 0x37
 80036a0:	f7fd f8f6 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80036a4:	2000      	movs	r0, #0
 80036a6:	f7fd f8f3 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 80036aa:	203c      	movs	r0, #60	; 0x3c
 80036ac:	f7fd f8f0 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80036b0:	2000      	movs	r0, #0
 80036b2:	f7fd f8ed 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 80036b6:	2036      	movs	r0, #54	; 0x36
 80036b8:	f7fd f8ea 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80036bc:	2000      	movs	r0, #0
 80036be:	f7fd f8e7 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x32);
 80036c2:	2032      	movs	r0, #50	; 0x32
 80036c4:	f7fd f8e4 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80036c8:	2000      	movs	r0, #0
 80036ca:	f7fd f8e1 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x2F);
 80036ce:	202f      	movs	r0, #47	; 0x2f
 80036d0:	f7fd f8de 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80036d4:	2000      	movs	r0, #0
 80036d6:	f7fd f8db 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x2C);
 80036da:	202c      	movs	r0, #44	; 0x2c
 80036dc:	f7fd f8d8 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80036e0:	2000      	movs	r0, #0
 80036e2:	f7fd f8d5 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 80036e6:	2029      	movs	r0, #41	; 0x29
 80036e8:	f7fd f8d2 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80036ec:	2000      	movs	r0, #0
 80036ee:	f7fd f8cf 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x26);
 80036f2:	2026      	movs	r0, #38	; 0x26
 80036f4:	f7fd f8cc 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80036f8:	2000      	movs	r0, #0
 80036fa:	f7fd f8c9 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x24);
 80036fe:	2024      	movs	r0, #36	; 0x24
 8003700:	f7fd f8c6 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003704:	2000      	movs	r0, #0
 8003706:	f7fd f8c3 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x24);
 800370a:	2024      	movs	r0, #36	; 0x24
 800370c:	f7fd f8c0 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003710:	2000      	movs	r0, #0
 8003712:	f7fd f8bd 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 8003716:	2023      	movs	r0, #35	; 0x23
 8003718:	f7fd f8ba 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800371c:	2000      	movs	r0, #0
 800371e:	f7fd f8b7 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 8003722:	203c      	movs	r0, #60	; 0x3c
 8003724:	f7fd f8b4 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003728:	2000      	movs	r0, #0
 800372a:	f7fd f8b1 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 800372e:	2036      	movs	r0, #54	; 0x36
 8003730:	f7fd f8ae 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003734:	2000      	movs	r0, #0
 8003736:	f7fd f8ab 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x32);
 800373a:	2032      	movs	r0, #50	; 0x32
 800373c:	f7fd f8a8 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003740:	2000      	movs	r0, #0
 8003742:	f7fd f8a5 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x2F);
 8003746:	202f      	movs	r0, #47	; 0x2f
 8003748:	f7fd f8a2 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800374c:	2000      	movs	r0, #0
 800374e:	f7fd f89f 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x2C);
 8003752:	202c      	movs	r0, #44	; 0x2c
 8003754:	f7fd f89c 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003758:	2000      	movs	r0, #0
 800375a:	f7fd f899 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 800375e:	2029      	movs	r0, #41	; 0x29
 8003760:	f7fd f896 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003764:	2000      	movs	r0, #0
 8003766:	f7fd f893 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x26);
 800376a:	2026      	movs	r0, #38	; 0x26
 800376c:	f7fd f890 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003770:	2000      	movs	r0, #0
 8003772:	f7fd f88d 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x24);
 8003776:	2024      	movs	r0, #36	; 0x24
 8003778:	f7fd f88a 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800377c:	2000      	movs	r0, #0
 800377e:	f7fd f887 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x24);
 8003782:	2024      	movs	r0, #36	; 0x24
 8003784:	f7fd f884 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003788:	2000      	movs	r0, #0
 800378a:	f7fd f881 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 800378e:	2023      	movs	r0, #35	; 0x23
 8003790:	f7fd f87e 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003794:	2000      	movs	r0, #0
 8003796:	f7fd f87b 	bl	8000890 <lcd_wr_xdata>
 800379a:	23c4      	movs	r3, #196	; 0xc4
 800379c:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80037a0:	4b4a      	ldr	r3, [pc, #296]	; (80038cc <lcd_init+0x1dc4>)
 80037a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80037a6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80037a8:	4b48      	ldr	r3, [pc, #288]	; (80038cc <lcd_init+0x1dc4>)
 80037aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037ae:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80037b0:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	4b44      	ldr	r3, [pc, #272]	; (80038c8 <lcd_init+0x1dc0>)
 80037b8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80037ba:	4b44      	ldr	r3, [pc, #272]	; (80038cc <lcd_init+0x1dc4>)
 80037bc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80037c0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80037c2:	4b42      	ldr	r3, [pc, #264]	; (80038cc <lcd_init+0x1dc4>)
 80037c4:	2280      	movs	r2, #128	; 0x80
 80037c6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80037c8:	4b40      	ldr	r3, [pc, #256]	; (80038cc <lcd_init+0x1dc4>)
 80037ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037ce:	611a      	str	r2, [r3, #16]
}
 80037d0:	bf00      	nop

        lcd_wr_regno(0xC4);
        lcd_wr_xdata(0x62);
 80037d2:	2062      	movs	r0, #98	; 0x62
 80037d4:	f7fd f85c 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037d8:	2000      	movs	r0, #0
 80037da:	f7fd f859 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x05);
 80037de:	2005      	movs	r0, #5
 80037e0:	f7fd f856 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037e4:	2000      	movs	r0, #0
 80037e6:	f7fd f853 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x84);
 80037ea:	2084      	movs	r0, #132	; 0x84
 80037ec:	f7fd f850 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037f0:	2000      	movs	r0, #0
 80037f2:	f7fd f84d 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xF0);
 80037f6:	20f0      	movs	r0, #240	; 0xf0
 80037f8:	f7fd f84a 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037fc:	2000      	movs	r0, #0
 80037fe:	f7fd f847 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x18);
 8003802:	2018      	movs	r0, #24
 8003804:	f7fd f844 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003808:	2000      	movs	r0, #0
 800380a:	f7fd f841 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xA4);
 800380e:	20a4      	movs	r0, #164	; 0xa4
 8003810:	f7fd f83e 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003814:	2000      	movs	r0, #0
 8003816:	f7fd f83b 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x18);
 800381a:	2018      	movs	r0, #24
 800381c:	f7fd f838 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003820:	2000      	movs	r0, #0
 8003822:	f7fd f835 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x50);
 8003826:	2050      	movs	r0, #80	; 0x50
 8003828:	f7fd f832 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800382c:	2000      	movs	r0, #0
 800382e:	f7fd f82f 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x0C);
 8003832:	200c      	movs	r0, #12
 8003834:	f7fd f82c 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003838:	2000      	movs	r0, #0
 800383a:	f7fd f829 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 800383e:	2017      	movs	r0, #23
 8003840:	f7fd f826 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003844:	2000      	movs	r0, #0
 8003846:	f7fd f823 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x95);
 800384a:	2095      	movs	r0, #149	; 0x95
 800384c:	f7fd f820 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003850:	2000      	movs	r0, #0
 8003852:	f7fd f81d 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 8003856:	20f3      	movs	r0, #243	; 0xf3
 8003858:	f7fd f81a 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800385c:	2000      	movs	r0, #0
 800385e:	f7fd f817 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xE6);
 8003862:	20e6      	movs	r0, #230	; 0xe6
 8003864:	f7fd f814 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003868:	2000      	movs	r0, #0
 800386a:	f7fd f811 	bl	8000890 <lcd_wr_xdata>
 800386e:	23c5      	movs	r3, #197	; 0xc5
 8003870:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003874:	4b15      	ldr	r3, [pc, #84]	; (80038cc <lcd_init+0x1dc4>)
 8003876:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800387a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800387c:	4b13      	ldr	r3, [pc, #76]	; (80038cc <lcd_init+0x1dc4>)
 800387e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003882:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003884:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8003888:	b29a      	uxth	r2, r3
 800388a:	4b0f      	ldr	r3, [pc, #60]	; (80038c8 <lcd_init+0x1dc0>)
 800388c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800388e:	4b0f      	ldr	r3, [pc, #60]	; (80038cc <lcd_init+0x1dc4>)
 8003890:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003894:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003896:	4b0d      	ldr	r3, [pc, #52]	; (80038cc <lcd_init+0x1dc4>)
 8003898:	2280      	movs	r2, #128	; 0x80
 800389a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800389c:	4b0b      	ldr	r3, [pc, #44]	; (80038cc <lcd_init+0x1dc4>)
 800389e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038a2:	611a      	str	r2, [r3, #16]
}
 80038a4:	bf00      	nop

        lcd_wr_regno(0xC5);
        lcd_wr_xdata(0x32);
 80038a6:	2032      	movs	r0, #50	; 0x32
 80038a8:	f7fc fff2 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80038ac:	2000      	movs	r0, #0
 80038ae:	f7fc ffef 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 80038b2:	2044      	movs	r0, #68	; 0x44
 80038b4:	f7fc ffec 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80038b8:	2000      	movs	r0, #0
 80038ba:	f7fc ffe9 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x65);
 80038be:	2065      	movs	r0, #101	; 0x65
 80038c0:	f7fc ffe6 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80038c4:	2000      	movs	r0, #0
 80038c6:	e003      	b.n	80038d0 <lcd_init+0x1dc8>
 80038c8:	40010c00 	.word	0x40010c00
 80038cc:	40011000 	.word	0x40011000
 80038d0:	f7fc ffde 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x76);
 80038d4:	2076      	movs	r0, #118	; 0x76
 80038d6:	f7fc ffdb 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80038da:	2000      	movs	r0, #0
 80038dc:	f7fc ffd8 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 80038e0:	2088      	movs	r0, #136	; 0x88
 80038e2:	f7fc ffd5 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80038e6:	2000      	movs	r0, #0
 80038e8:	f7fc ffd2 	bl	8000890 <lcd_wr_xdata>
 80038ec:	23c6      	movs	r3, #198	; 0xc6
 80038ee:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80038f2:	4bd7      	ldr	r3, [pc, #860]	; (8003c50 <lcd_init+0x2148>)
 80038f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80038f8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80038fa:	4bd5      	ldr	r3, [pc, #852]	; (8003c50 <lcd_init+0x2148>)
 80038fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003900:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003902:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8003906:	b29a      	uxth	r2, r3
 8003908:	4bd2      	ldr	r3, [pc, #840]	; (8003c54 <lcd_init+0x214c>)
 800390a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800390c:	4bd0      	ldr	r3, [pc, #832]	; (8003c50 <lcd_init+0x2148>)
 800390e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003912:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003914:	4bce      	ldr	r3, [pc, #824]	; (8003c50 <lcd_init+0x2148>)
 8003916:	2280      	movs	r2, #128	; 0x80
 8003918:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800391a:	4bcd      	ldr	r3, [pc, #820]	; (8003c50 <lcd_init+0x2148>)
 800391c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003920:	611a      	str	r2, [r3, #16]
}
 8003922:	bf00      	nop

        lcd_wr_regno(0xC6);
        lcd_wr_xdata(0x20);
 8003924:	2020      	movs	r0, #32
 8003926:	f7fc ffb3 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800392a:	2000      	movs	r0, #0
 800392c:	f7fc ffb0 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 8003930:	2017      	movs	r0, #23
 8003932:	f7fc ffad 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003936:	2000      	movs	r0, #0
 8003938:	f7fc ffaa 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 800393c:	2001      	movs	r0, #1
 800393e:	f7fc ffa7 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003942:	2000      	movs	r0, #0
 8003944:	f7fc ffa4 	bl	8000890 <lcd_wr_xdata>
 8003948:	23c7      	movs	r3, #199	; 0xc7
 800394a:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800394e:	4bc0      	ldr	r3, [pc, #768]	; (8003c50 <lcd_init+0x2148>)
 8003950:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003954:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003956:	4bbe      	ldr	r3, [pc, #760]	; (8003c50 <lcd_init+0x2148>)
 8003958:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800395c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800395e:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8003962:	b29a      	uxth	r2, r3
 8003964:	4bbb      	ldr	r3, [pc, #748]	; (8003c54 <lcd_init+0x214c>)
 8003966:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003968:	4bb9      	ldr	r3, [pc, #740]	; (8003c50 <lcd_init+0x2148>)
 800396a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800396e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003970:	4bb7      	ldr	r3, [pc, #732]	; (8003c50 <lcd_init+0x2148>)
 8003972:	2280      	movs	r2, #128	; 0x80
 8003974:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003976:	4bb6      	ldr	r3, [pc, #728]	; (8003c50 <lcd_init+0x2148>)
 8003978:	f44f 7200 	mov.w	r2, #512	; 0x200
 800397c:	611a      	str	r2, [r3, #16]
}
 800397e:	bf00      	nop

        lcd_wr_regno(0xC7);
        lcd_wr_xdata(0x00);
 8003980:	2000      	movs	r0, #0
 8003982:	f7fc ff85 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003986:	2000      	movs	r0, #0
 8003988:	f7fc ff82 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800398c:	2000      	movs	r0, #0
 800398e:	f7fc ff7f 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003992:	2000      	movs	r0, #0
 8003994:	f7fc ff7c 	bl	8000890 <lcd_wr_xdata>
 8003998:	23c8      	movs	r3, #200	; 0xc8
 800399a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800399e:	4bac      	ldr	r3, [pc, #688]	; (8003c50 <lcd_init+0x2148>)
 80039a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80039a4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80039a6:	4baa      	ldr	r3, [pc, #680]	; (8003c50 <lcd_init+0x2148>)
 80039a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039ac:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80039ae:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	4ba7      	ldr	r3, [pc, #668]	; (8003c54 <lcd_init+0x214c>)
 80039b6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80039b8:	4ba5      	ldr	r3, [pc, #660]	; (8003c50 <lcd_init+0x2148>)
 80039ba:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80039be:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80039c0:	4ba3      	ldr	r3, [pc, #652]	; (8003c50 <lcd_init+0x2148>)
 80039c2:	2280      	movs	r2, #128	; 0x80
 80039c4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80039c6:	4ba2      	ldr	r3, [pc, #648]	; (8003c50 <lcd_init+0x2148>)
 80039c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039cc:	611a      	str	r2, [r3, #16]
}
 80039ce:	bf00      	nop

        lcd_wr_regno(0xC8);
        lcd_wr_xdata(0x00);
 80039d0:	2000      	movs	r0, #0
 80039d2:	f7fc ff5d 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80039d6:	2000      	movs	r0, #0
 80039d8:	f7fc ff5a 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80039dc:	2000      	movs	r0, #0
 80039de:	f7fc ff57 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80039e2:	2000      	movs	r0, #0
 80039e4:	f7fc ff54 	bl	8000890 <lcd_wr_xdata>
 80039e8:	23c9      	movs	r3, #201	; 0xc9
 80039ea:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80039ee:	4b98      	ldr	r3, [pc, #608]	; (8003c50 <lcd_init+0x2148>)
 80039f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80039f4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80039f6:	4b96      	ldr	r3, [pc, #600]	; (8003c50 <lcd_init+0x2148>)
 80039f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039fc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80039fe:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	4b93      	ldr	r3, [pc, #588]	; (8003c54 <lcd_init+0x214c>)
 8003a06:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003a08:	4b91      	ldr	r3, [pc, #580]	; (8003c50 <lcd_init+0x2148>)
 8003a0a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003a0e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003a10:	4b8f      	ldr	r3, [pc, #572]	; (8003c50 <lcd_init+0x2148>)
 8003a12:	2280      	movs	r2, #128	; 0x80
 8003a14:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003a16:	4b8e      	ldr	r3, [pc, #568]	; (8003c50 <lcd_init+0x2148>)
 8003a18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a1c:	611a      	str	r2, [r3, #16]
}
 8003a1e:	bf00      	nop

        lcd_wr_regno(0xC9);
        lcd_wr_xdata(0x00);
 8003a20:	2000      	movs	r0, #0
 8003a22:	f7fc ff35 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a26:	2000      	movs	r0, #0
 8003a28:	f7fc ff32 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a2c:	2000      	movs	r0, #0
 8003a2e:	f7fc ff2f 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a32:	2000      	movs	r0, #0
 8003a34:	f7fc ff2c 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a38:	2000      	movs	r0, #0
 8003a3a:	f7fc ff29 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a3e:	2000      	movs	r0, #0
 8003a40:	f7fc ff26 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a44:	2000      	movs	r0, #0
 8003a46:	f7fc ff23 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a4a:	2000      	movs	r0, #0
 8003a4c:	f7fc ff20 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a50:	2000      	movs	r0, #0
 8003a52:	f7fc ff1d 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a56:	2000      	movs	r0, #0
 8003a58:	f7fc ff1a 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a5c:	2000      	movs	r0, #0
 8003a5e:	f7fc ff17 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a62:	2000      	movs	r0, #0
 8003a64:	f7fc ff14 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a68:	2000      	movs	r0, #0
 8003a6a:	f7fc ff11 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a6e:	2000      	movs	r0, #0
 8003a70:	f7fc ff0e 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a74:	2000      	movs	r0, #0
 8003a76:	f7fc ff0b 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a7a:	2000      	movs	r0, #0
 8003a7c:	f7fc ff08 	bl	8000890 <lcd_wr_xdata>
 8003a80:	23e0      	movs	r3, #224	; 0xe0
 8003a82:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003a86:	4b72      	ldr	r3, [pc, #456]	; (8003c50 <lcd_init+0x2148>)
 8003a88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a8c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003a8e:	4b70      	ldr	r3, [pc, #448]	; (8003c50 <lcd_init+0x2148>)
 8003a90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a94:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003a96:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	4b6d      	ldr	r3, [pc, #436]	; (8003c54 <lcd_init+0x214c>)
 8003a9e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003aa0:	4b6b      	ldr	r3, [pc, #428]	; (8003c50 <lcd_init+0x2148>)
 8003aa2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003aa6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003aa8:	4b69      	ldr	r3, [pc, #420]	; (8003c50 <lcd_init+0x2148>)
 8003aaa:	2280      	movs	r2, #128	; 0x80
 8003aac:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003aae:	4b68      	ldr	r3, [pc, #416]	; (8003c50 <lcd_init+0x2148>)
 8003ab0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ab4:	611a      	str	r2, [r3, #16]
}
 8003ab6:	bf00      	nop

        lcd_wr_regno(0xE0);
        lcd_wr_xdata(0x16);
 8003ab8:	2016      	movs	r0, #22
 8003aba:	f7fc fee9 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003abe:	2000      	movs	r0, #0
 8003ac0:	f7fc fee6 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x1C);
 8003ac4:	201c      	movs	r0, #28
 8003ac6:	f7fc fee3 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003aca:	2000      	movs	r0, #0
 8003acc:	f7fc fee0 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x21);
 8003ad0:	2021      	movs	r0, #33	; 0x21
 8003ad2:	f7fc fedd 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ad6:	2000      	movs	r0, #0
 8003ad8:	f7fc feda 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 8003adc:	2036      	movs	r0, #54	; 0x36
 8003ade:	f7fc fed7 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ae2:	2000      	movs	r0, #0
 8003ae4:	f7fc fed4 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x46);
 8003ae8:	2046      	movs	r0, #70	; 0x46
 8003aea:	f7fc fed1 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003aee:	2000      	movs	r0, #0
 8003af0:	f7fc fece 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x52);
 8003af4:	2052      	movs	r0, #82	; 0x52
 8003af6:	f7fc fecb 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003afa:	2000      	movs	r0, #0
 8003afc:	f7fc fec8 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x64);
 8003b00:	2064      	movs	r0, #100	; 0x64
 8003b02:	f7fc fec5 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b06:	2000      	movs	r0, #0
 8003b08:	f7fc fec2 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x7A);
 8003b0c:	207a      	movs	r0, #122	; 0x7a
 8003b0e:	f7fc febf 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b12:	2000      	movs	r0, #0
 8003b14:	f7fc febc 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x8B);
 8003b18:	208b      	movs	r0, #139	; 0x8b
 8003b1a:	f7fc feb9 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b1e:	2000      	movs	r0, #0
 8003b20:	f7fc feb6 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8003b24:	2099      	movs	r0, #153	; 0x99
 8003b26:	f7fc feb3 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b2a:	2000      	movs	r0, #0
 8003b2c:	f7fc feb0 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xA8);
 8003b30:	20a8      	movs	r0, #168	; 0xa8
 8003b32:	f7fc fead 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b36:	2000      	movs	r0, #0
 8003b38:	f7fc feaa 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xB9);
 8003b3c:	20b9      	movs	r0, #185	; 0xb9
 8003b3e:	f7fc fea7 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b42:	2000      	movs	r0, #0
 8003b44:	f7fc fea4 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xC4);
 8003b48:	20c4      	movs	r0, #196	; 0xc4
 8003b4a:	f7fc fea1 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b4e:	2000      	movs	r0, #0
 8003b50:	f7fc fe9e 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xCA);
 8003b54:	20ca      	movs	r0, #202	; 0xca
 8003b56:	f7fc fe9b 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b5a:	2000      	movs	r0, #0
 8003b5c:	f7fc fe98 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xD2);
 8003b60:	20d2      	movs	r0, #210	; 0xd2
 8003b62:	f7fc fe95 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b66:	2000      	movs	r0, #0
 8003b68:	f7fc fe92 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xD9);
 8003b6c:	20d9      	movs	r0, #217	; 0xd9
 8003b6e:	f7fc fe8f 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b72:	2000      	movs	r0, #0
 8003b74:	f7fc fe8c 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xE0);
 8003b78:	20e0      	movs	r0, #224	; 0xe0
 8003b7a:	f7fc fe89 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b7e:	2000      	movs	r0, #0
 8003b80:	f7fc fe86 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 8003b84:	20f3      	movs	r0, #243	; 0xf3
 8003b86:	f7fc fe83 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b8a:	2000      	movs	r0, #0
 8003b8c:	f7fc fe80 	bl	8000890 <lcd_wr_xdata>
 8003b90:	23e1      	movs	r3, #225	; 0xe1
 8003b92:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003b96:	4b2e      	ldr	r3, [pc, #184]	; (8003c50 <lcd_init+0x2148>)
 8003b98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b9c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003b9e:	4b2c      	ldr	r3, [pc, #176]	; (8003c50 <lcd_init+0x2148>)
 8003ba0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ba4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003ba6:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	4b29      	ldr	r3, [pc, #164]	; (8003c54 <lcd_init+0x214c>)
 8003bae:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003bb0:	4b27      	ldr	r3, [pc, #156]	; (8003c50 <lcd_init+0x2148>)
 8003bb2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003bb6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003bb8:	4b25      	ldr	r3, [pc, #148]	; (8003c50 <lcd_init+0x2148>)
 8003bba:	2280      	movs	r2, #128	; 0x80
 8003bbc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003bbe:	4b24      	ldr	r3, [pc, #144]	; (8003c50 <lcd_init+0x2148>)
 8003bc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bc4:	611a      	str	r2, [r3, #16]
}
 8003bc6:	bf00      	nop

        lcd_wr_regno(0xE1);
        lcd_wr_xdata(0x16);
 8003bc8:	2016      	movs	r0, #22
 8003bca:	f7fc fe61 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003bce:	2000      	movs	r0, #0
 8003bd0:	f7fc fe5e 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x1C);
 8003bd4:	201c      	movs	r0, #28
 8003bd6:	f7fc fe5b 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003bda:	2000      	movs	r0, #0
 8003bdc:	f7fc fe58 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8003be0:	2022      	movs	r0, #34	; 0x22
 8003be2:	f7fc fe55 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003be6:	2000      	movs	r0, #0
 8003be8:	f7fc fe52 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 8003bec:	2036      	movs	r0, #54	; 0x36
 8003bee:	f7fc fe4f 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003bf2:	2000      	movs	r0, #0
 8003bf4:	f7fc fe4c 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 8003bf8:	2045      	movs	r0, #69	; 0x45
 8003bfa:	f7fc fe49 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003bfe:	2000      	movs	r0, #0
 8003c00:	f7fc fe46 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x52);
 8003c04:	2052      	movs	r0, #82	; 0x52
 8003c06:	f7fc fe43 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c0a:	2000      	movs	r0, #0
 8003c0c:	f7fc fe40 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x64);
 8003c10:	2064      	movs	r0, #100	; 0x64
 8003c12:	f7fc fe3d 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c16:	2000      	movs	r0, #0
 8003c18:	f7fc fe3a 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x7A);
 8003c1c:	207a      	movs	r0, #122	; 0x7a
 8003c1e:	f7fc fe37 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c22:	2000      	movs	r0, #0
 8003c24:	f7fc fe34 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x8B);
 8003c28:	208b      	movs	r0, #139	; 0x8b
 8003c2a:	f7fc fe31 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c2e:	2000      	movs	r0, #0
 8003c30:	f7fc fe2e 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8003c34:	2099      	movs	r0, #153	; 0x99
 8003c36:	f7fc fe2b 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c3a:	2000      	movs	r0, #0
 8003c3c:	f7fc fe28 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xA8);
 8003c40:	20a8      	movs	r0, #168	; 0xa8
 8003c42:	f7fc fe25 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c46:	2000      	movs	r0, #0
 8003c48:	f7fc fe22 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xB9);
 8003c4c:	20b9      	movs	r0, #185	; 0xb9
 8003c4e:	e003      	b.n	8003c58 <lcd_init+0x2150>
 8003c50:	40011000 	.word	0x40011000
 8003c54:	40010c00 	.word	0x40010c00
 8003c58:	f7fc fe1a 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c5c:	2000      	movs	r0, #0
 8003c5e:	f7fc fe17 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xC4);
 8003c62:	20c4      	movs	r0, #196	; 0xc4
 8003c64:	f7fc fe14 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c68:	2000      	movs	r0, #0
 8003c6a:	f7fc fe11 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xCA);
 8003c6e:	20ca      	movs	r0, #202	; 0xca
 8003c70:	f7fc fe0e 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c74:	2000      	movs	r0, #0
 8003c76:	f7fc fe0b 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xD2);
 8003c7a:	20d2      	movs	r0, #210	; 0xd2
 8003c7c:	f7fc fe08 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c80:	2000      	movs	r0, #0
 8003c82:	f7fc fe05 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xD8);
 8003c86:	20d8      	movs	r0, #216	; 0xd8
 8003c88:	f7fc fe02 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c8c:	2000      	movs	r0, #0
 8003c8e:	f7fc fdff 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xE0);
 8003c92:	20e0      	movs	r0, #224	; 0xe0
 8003c94:	f7fc fdfc 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c98:	2000      	movs	r0, #0
 8003c9a:	f7fc fdf9 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 8003c9e:	20f3      	movs	r0, #243	; 0xf3
 8003ca0:	f7fc fdf6 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ca4:	2000      	movs	r0, #0
 8003ca6:	f7fc fdf3 	bl	8000890 <lcd_wr_xdata>
 8003caa:	23e2      	movs	r3, #226	; 0xe2
 8003cac:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003cb0:	4be3      	ldr	r3, [pc, #908]	; (8004040 <lcd_init+0x2538>)
 8003cb2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003cb6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003cb8:	4be1      	ldr	r3, [pc, #900]	; (8004040 <lcd_init+0x2538>)
 8003cba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cbe:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003cc0:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	4bdf      	ldr	r3, [pc, #892]	; (8004044 <lcd_init+0x253c>)
 8003cc8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003cca:	4bdd      	ldr	r3, [pc, #884]	; (8004040 <lcd_init+0x2538>)
 8003ccc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003cd0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003cd2:	4bdb      	ldr	r3, [pc, #876]	; (8004040 <lcd_init+0x2538>)
 8003cd4:	2280      	movs	r2, #128	; 0x80
 8003cd6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003cd8:	4bd9      	ldr	r3, [pc, #868]	; (8004040 <lcd_init+0x2538>)
 8003cda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cde:	611a      	str	r2, [r3, #16]
}
 8003ce0:	bf00      	nop

        lcd_wr_regno(0xE2);
        lcd_wr_xdata(0x05);
 8003ce2:	2005      	movs	r0, #5
 8003ce4:	f7fc fdd4 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ce8:	2000      	movs	r0, #0
 8003cea:	f7fc fdd1 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);
 8003cee:	200b      	movs	r0, #11
 8003cf0:	f7fc fdce 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003cf4:	2000      	movs	r0, #0
 8003cf6:	f7fc fdcb 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x1B);
 8003cfa:	201b      	movs	r0, #27
 8003cfc:	f7fc fdc8 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d00:	2000      	movs	r0, #0
 8003d02:	f7fc fdc5 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x34);
 8003d06:	2034      	movs	r0, #52	; 0x34
 8003d08:	f7fc fdc2 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d0c:	2000      	movs	r0, #0
 8003d0e:	f7fc fdbf 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8003d12:	2044      	movs	r0, #68	; 0x44
 8003d14:	f7fc fdbc 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d18:	2000      	movs	r0, #0
 8003d1a:	f7fc fdb9 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x4F);
 8003d1e:	204f      	movs	r0, #79	; 0x4f
 8003d20:	f7fc fdb6 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d24:	2000      	movs	r0, #0
 8003d26:	f7fc fdb3 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x61);
 8003d2a:	2061      	movs	r0, #97	; 0x61
 8003d2c:	f7fc fdb0 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d30:	2000      	movs	r0, #0
 8003d32:	f7fc fdad 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x79);
 8003d36:	2079      	movs	r0, #121	; 0x79
 8003d38:	f7fc fdaa 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d3c:	2000      	movs	r0, #0
 8003d3e:	f7fc fda7 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 8003d42:	2088      	movs	r0, #136	; 0x88
 8003d44:	f7fc fda4 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d48:	2000      	movs	r0, #0
 8003d4a:	f7fc fda1 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x97);
 8003d4e:	2097      	movs	r0, #151	; 0x97
 8003d50:	f7fc fd9e 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d54:	2000      	movs	r0, #0
 8003d56:	f7fc fd9b 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xA6);
 8003d5a:	20a6      	movs	r0, #166	; 0xa6
 8003d5c:	f7fc fd98 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d60:	2000      	movs	r0, #0
 8003d62:	f7fc fd95 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xB7);
 8003d66:	20b7      	movs	r0, #183	; 0xb7
 8003d68:	f7fc fd92 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d6c:	2000      	movs	r0, #0
 8003d6e:	f7fc fd8f 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xC2);
 8003d72:	20c2      	movs	r0, #194	; 0xc2
 8003d74:	f7fc fd8c 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d78:	2000      	movs	r0, #0
 8003d7a:	f7fc fd89 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xC7);
 8003d7e:	20c7      	movs	r0, #199	; 0xc7
 8003d80:	f7fc fd86 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d84:	2000      	movs	r0, #0
 8003d86:	f7fc fd83 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xD1);
 8003d8a:	20d1      	movs	r0, #209	; 0xd1
 8003d8c:	f7fc fd80 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d90:	2000      	movs	r0, #0
 8003d92:	f7fc fd7d 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xD6);
 8003d96:	20d6      	movs	r0, #214	; 0xd6
 8003d98:	f7fc fd7a 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d9c:	2000      	movs	r0, #0
 8003d9e:	f7fc fd77 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xDD);
 8003da2:	20dd      	movs	r0, #221	; 0xdd
 8003da4:	f7fc fd74 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003da8:	2000      	movs	r0, #0
 8003daa:	f7fc fd71 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 8003dae:	20f3      	movs	r0, #243	; 0xf3
 8003db0:	f7fc fd6e 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003db4:	2000      	movs	r0, #0
 8003db6:	f7fc fd6b 	bl	8000890 <lcd_wr_xdata>
 8003dba:	23e3      	movs	r3, #227	; 0xe3
 8003dbc:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003dc0:	4b9f      	ldr	r3, [pc, #636]	; (8004040 <lcd_init+0x2538>)
 8003dc2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003dc6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003dc8:	4b9d      	ldr	r3, [pc, #628]	; (8004040 <lcd_init+0x2538>)
 8003dca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dce:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003dd0:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	4b9b      	ldr	r3, [pc, #620]	; (8004044 <lcd_init+0x253c>)
 8003dd8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003dda:	4b99      	ldr	r3, [pc, #612]	; (8004040 <lcd_init+0x2538>)
 8003ddc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003de0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003de2:	4b97      	ldr	r3, [pc, #604]	; (8004040 <lcd_init+0x2538>)
 8003de4:	2280      	movs	r2, #128	; 0x80
 8003de6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003de8:	4b95      	ldr	r3, [pc, #596]	; (8004040 <lcd_init+0x2538>)
 8003dea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dee:	611a      	str	r2, [r3, #16]
}
 8003df0:	bf00      	nop
        lcd_wr_regno(0xE3);
        lcd_wr_xdata(0x05);
 8003df2:	2005      	movs	r0, #5
 8003df4:	f7fc fd4c 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003df8:	2000      	movs	r0, #0
 8003dfa:	f7fc fd49 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xA);
 8003dfe:	200a      	movs	r0, #10
 8003e00:	f7fc fd46 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e04:	2000      	movs	r0, #0
 8003e06:	f7fc fd43 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x1C);
 8003e0a:	201c      	movs	r0, #28
 8003e0c:	f7fc fd40 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e10:	2000      	movs	r0, #0
 8003e12:	f7fc fd3d 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 8003e16:	2033      	movs	r0, #51	; 0x33
 8003e18:	f7fc fd3a 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e1c:	2000      	movs	r0, #0
 8003e1e:	f7fc fd37 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8003e22:	2044      	movs	r0, #68	; 0x44
 8003e24:	f7fc fd34 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e28:	2000      	movs	r0, #0
 8003e2a:	f7fc fd31 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x50);
 8003e2e:	2050      	movs	r0, #80	; 0x50
 8003e30:	f7fc fd2e 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e34:	2000      	movs	r0, #0
 8003e36:	f7fc fd2b 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x62);
 8003e3a:	2062      	movs	r0, #98	; 0x62
 8003e3c:	f7fc fd28 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e40:	2000      	movs	r0, #0
 8003e42:	f7fc fd25 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x78);
 8003e46:	2078      	movs	r0, #120	; 0x78
 8003e48:	f7fc fd22 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e4c:	2000      	movs	r0, #0
 8003e4e:	f7fc fd1f 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 8003e52:	2088      	movs	r0, #136	; 0x88
 8003e54:	f7fc fd1c 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e58:	2000      	movs	r0, #0
 8003e5a:	f7fc fd19 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x97);
 8003e5e:	2097      	movs	r0, #151	; 0x97
 8003e60:	f7fc fd16 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e64:	2000      	movs	r0, #0
 8003e66:	f7fc fd13 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xA6);
 8003e6a:	20a6      	movs	r0, #166	; 0xa6
 8003e6c:	f7fc fd10 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e70:	2000      	movs	r0, #0
 8003e72:	f7fc fd0d 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xB7);
 8003e76:	20b7      	movs	r0, #183	; 0xb7
 8003e78:	f7fc fd0a 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e7c:	2000      	movs	r0, #0
 8003e7e:	f7fc fd07 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xC2);
 8003e82:	20c2      	movs	r0, #194	; 0xc2
 8003e84:	f7fc fd04 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e88:	2000      	movs	r0, #0
 8003e8a:	f7fc fd01 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xC7);
 8003e8e:	20c7      	movs	r0, #199	; 0xc7
 8003e90:	f7fc fcfe 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e94:	2000      	movs	r0, #0
 8003e96:	f7fc fcfb 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xD1);
 8003e9a:	20d1      	movs	r0, #209	; 0xd1
 8003e9c:	f7fc fcf8 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ea0:	2000      	movs	r0, #0
 8003ea2:	f7fc fcf5 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xD5);
 8003ea6:	20d5      	movs	r0, #213	; 0xd5
 8003ea8:	f7fc fcf2 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003eac:	2000      	movs	r0, #0
 8003eae:	f7fc fcef 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xDD);
 8003eb2:	20dd      	movs	r0, #221	; 0xdd
 8003eb4:	f7fc fcec 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003eb8:	2000      	movs	r0, #0
 8003eba:	f7fc fce9 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 8003ebe:	20f3      	movs	r0, #243	; 0xf3
 8003ec0:	f7fc fce6 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ec4:	2000      	movs	r0, #0
 8003ec6:	f7fc fce3 	bl	8000890 <lcd_wr_xdata>
 8003eca:	23e4      	movs	r3, #228	; 0xe4
 8003ecc:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003ed0:	4b5b      	ldr	r3, [pc, #364]	; (8004040 <lcd_init+0x2538>)
 8003ed2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ed6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003ed8:	4b59      	ldr	r3, [pc, #356]	; (8004040 <lcd_init+0x2538>)
 8003eda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ede:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003ee0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	4b57      	ldr	r3, [pc, #348]	; (8004044 <lcd_init+0x253c>)
 8003ee8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003eea:	4b55      	ldr	r3, [pc, #340]	; (8004040 <lcd_init+0x2538>)
 8003eec:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003ef0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003ef2:	4b53      	ldr	r3, [pc, #332]	; (8004040 <lcd_init+0x2538>)
 8003ef4:	2280      	movs	r2, #128	; 0x80
 8003ef6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003ef8:	4b51      	ldr	r3, [pc, #324]	; (8004040 <lcd_init+0x2538>)
 8003efa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003efe:	611a      	str	r2, [r3, #16]
}
 8003f00:	bf00      	nop

        lcd_wr_regno(0xE4);
        lcd_wr_xdata(0x01);
 8003f02:	2001      	movs	r0, #1
 8003f04:	f7fc fcc4 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f08:	2000      	movs	r0, #0
 8003f0a:	f7fc fcc1 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8003f0e:	2001      	movs	r0, #1
 8003f10:	f7fc fcbe 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f14:	2000      	movs	r0, #0
 8003f16:	f7fc fcbb 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 8003f1a:	2002      	movs	r0, #2
 8003f1c:	f7fc fcb8 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f20:	2000      	movs	r0, #0
 8003f22:	f7fc fcb5 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x2A);
 8003f26:	202a      	movs	r0, #42	; 0x2a
 8003f28:	f7fc fcb2 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f2c:	2000      	movs	r0, #0
 8003f2e:	f7fc fcaf 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 8003f32:	203c      	movs	r0, #60	; 0x3c
 8003f34:	f7fc fcac 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f38:	2000      	movs	r0, #0
 8003f3a:	f7fc fca9 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x4B);
 8003f3e:	204b      	movs	r0, #75	; 0x4b
 8003f40:	f7fc fca6 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f44:	2000      	movs	r0, #0
 8003f46:	f7fc fca3 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x5D);
 8003f4a:	205d      	movs	r0, #93	; 0x5d
 8003f4c:	f7fc fca0 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f50:	2000      	movs	r0, #0
 8003f52:	f7fc fc9d 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x74);
 8003f56:	2074      	movs	r0, #116	; 0x74
 8003f58:	f7fc fc9a 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f5c:	2000      	movs	r0, #0
 8003f5e:	f7fc fc97 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x84);
 8003f62:	2084      	movs	r0, #132	; 0x84
 8003f64:	f7fc fc94 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f68:	2000      	movs	r0, #0
 8003f6a:	f7fc fc91 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x93);
 8003f6e:	2093      	movs	r0, #147	; 0x93
 8003f70:	f7fc fc8e 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f74:	2000      	movs	r0, #0
 8003f76:	f7fc fc8b 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xA2);
 8003f7a:	20a2      	movs	r0, #162	; 0xa2
 8003f7c:	f7fc fc88 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f80:	2000      	movs	r0, #0
 8003f82:	f7fc fc85 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xB3);
 8003f86:	20b3      	movs	r0, #179	; 0xb3
 8003f88:	f7fc fc82 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f8c:	2000      	movs	r0, #0
 8003f8e:	f7fc fc7f 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xBE);
 8003f92:	20be      	movs	r0, #190	; 0xbe
 8003f94:	f7fc fc7c 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f98:	2000      	movs	r0, #0
 8003f9a:	f7fc fc79 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xC4);
 8003f9e:	20c4      	movs	r0, #196	; 0xc4
 8003fa0:	f7fc fc76 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003fa4:	2000      	movs	r0, #0
 8003fa6:	f7fc fc73 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xCD);
 8003faa:	20cd      	movs	r0, #205	; 0xcd
 8003fac:	f7fc fc70 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003fb0:	2000      	movs	r0, #0
 8003fb2:	f7fc fc6d 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xD3);
 8003fb6:	20d3      	movs	r0, #211	; 0xd3
 8003fb8:	f7fc fc6a 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003fbc:	2000      	movs	r0, #0
 8003fbe:	f7fc fc67 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xDD);
 8003fc2:	20dd      	movs	r0, #221	; 0xdd
 8003fc4:	f7fc fc64 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003fc8:	2000      	movs	r0, #0
 8003fca:	f7fc fc61 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 8003fce:	20f3      	movs	r0, #243	; 0xf3
 8003fd0:	f7fc fc5e 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003fd4:	2000      	movs	r0, #0
 8003fd6:	f7fc fc5b 	bl	8000890 <lcd_wr_xdata>
 8003fda:	23e5      	movs	r3, #229	; 0xe5
 8003fdc:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003fe0:	4b17      	ldr	r3, [pc, #92]	; (8004040 <lcd_init+0x2538>)
 8003fe2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003fe6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003fe8:	4b15      	ldr	r3, [pc, #84]	; (8004040 <lcd_init+0x2538>)
 8003fea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fee:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003ff0:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	4b13      	ldr	r3, [pc, #76]	; (8004044 <lcd_init+0x253c>)
 8003ff8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003ffa:	4b11      	ldr	r3, [pc, #68]	; (8004040 <lcd_init+0x2538>)
 8003ffc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004000:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004002:	4b0f      	ldr	r3, [pc, #60]	; (8004040 <lcd_init+0x2538>)
 8004004:	2280      	movs	r2, #128	; 0x80
 8004006:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004008:	4b0d      	ldr	r3, [pc, #52]	; (8004040 <lcd_init+0x2538>)
 800400a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800400e:	611a      	str	r2, [r3, #16]
}
 8004010:	bf00      	nop
        lcd_wr_regno(0xE5);
        lcd_wr_xdata(0x00);
 8004012:	2000      	movs	r0, #0
 8004014:	f7fc fc3c 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004018:	2000      	movs	r0, #0
 800401a:	f7fc fc39 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800401e:	2000      	movs	r0, #0
 8004020:	f7fc fc36 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004024:	2000      	movs	r0, #0
 8004026:	f7fc fc33 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 800402a:	2002      	movs	r0, #2
 800402c:	f7fc fc30 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004030:	2000      	movs	r0, #0
 8004032:	f7fc fc2d 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 8004036:	2029      	movs	r0, #41	; 0x29
 8004038:	f7fc fc2a 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800403c:	2000      	movs	r0, #0
 800403e:	e003      	b.n	8004048 <lcd_init+0x2540>
 8004040:	40011000 	.word	0x40011000
 8004044:	40010c00 	.word	0x40010c00
 8004048:	f7fc fc22 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 800404c:	203c      	movs	r0, #60	; 0x3c
 800404e:	f7fc fc1f 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004052:	2000      	movs	r0, #0
 8004054:	f7fc fc1c 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x4B);
 8004058:	204b      	movs	r0, #75	; 0x4b
 800405a:	f7fc fc19 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800405e:	2000      	movs	r0, #0
 8004060:	f7fc fc16 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x5D);
 8004064:	205d      	movs	r0, #93	; 0x5d
 8004066:	f7fc fc13 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800406a:	2000      	movs	r0, #0
 800406c:	f7fc fc10 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x74);
 8004070:	2074      	movs	r0, #116	; 0x74
 8004072:	f7fc fc0d 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004076:	2000      	movs	r0, #0
 8004078:	f7fc fc0a 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x84);
 800407c:	2084      	movs	r0, #132	; 0x84
 800407e:	f7fc fc07 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004082:	2000      	movs	r0, #0
 8004084:	f7fc fc04 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x93);
 8004088:	2093      	movs	r0, #147	; 0x93
 800408a:	f7fc fc01 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800408e:	2000      	movs	r0, #0
 8004090:	f7fc fbfe 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xA2);
 8004094:	20a2      	movs	r0, #162	; 0xa2
 8004096:	f7fc fbfb 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800409a:	2000      	movs	r0, #0
 800409c:	f7fc fbf8 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xB3);
 80040a0:	20b3      	movs	r0, #179	; 0xb3
 80040a2:	f7fc fbf5 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040a6:	2000      	movs	r0, #0
 80040a8:	f7fc fbf2 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xBE);
 80040ac:	20be      	movs	r0, #190	; 0xbe
 80040ae:	f7fc fbef 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040b2:	2000      	movs	r0, #0
 80040b4:	f7fc fbec 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xC4);
 80040b8:	20c4      	movs	r0, #196	; 0xc4
 80040ba:	f7fc fbe9 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040be:	2000      	movs	r0, #0
 80040c0:	f7fc fbe6 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xCD);
 80040c4:	20cd      	movs	r0, #205	; 0xcd
 80040c6:	f7fc fbe3 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040ca:	2000      	movs	r0, #0
 80040cc:	f7fc fbe0 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xD3);
 80040d0:	20d3      	movs	r0, #211	; 0xd3
 80040d2:	f7fc fbdd 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040d6:	2000      	movs	r0, #0
 80040d8:	f7fc fbda 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xDC);
 80040dc:	20dc      	movs	r0, #220	; 0xdc
 80040de:	f7fc fbd7 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040e2:	2000      	movs	r0, #0
 80040e4:	f7fc fbd4 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 80040e8:	20f3      	movs	r0, #243	; 0xf3
 80040ea:	f7fc fbd1 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040ee:	2000      	movs	r0, #0
 80040f0:	f7fc fbce 	bl	8000890 <lcd_wr_xdata>
 80040f4:	23e6      	movs	r3, #230	; 0xe6
 80040f6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80040fa:	4bde      	ldr	r3, [pc, #888]	; (8004474 <lcd_init+0x296c>)
 80040fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004100:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004102:	4bdc      	ldr	r3, [pc, #880]	; (8004474 <lcd_init+0x296c>)
 8004104:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004108:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800410a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800410e:	b29a      	uxth	r2, r3
 8004110:	4bd9      	ldr	r3, [pc, #868]	; (8004478 <lcd_init+0x2970>)
 8004112:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004114:	4bd7      	ldr	r3, [pc, #860]	; (8004474 <lcd_init+0x296c>)
 8004116:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800411a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800411c:	4bd5      	ldr	r3, [pc, #852]	; (8004474 <lcd_init+0x296c>)
 800411e:	2280      	movs	r2, #128	; 0x80
 8004120:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004122:	4bd4      	ldr	r3, [pc, #848]	; (8004474 <lcd_init+0x296c>)
 8004124:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004128:	611a      	str	r2, [r3, #16]
}
 800412a:	bf00      	nop

        lcd_wr_regno(0xE6);
        lcd_wr_xdata(0x11);
 800412c:	2011      	movs	r0, #17
 800412e:	f7fc fbaf 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004132:	2000      	movs	r0, #0
 8004134:	f7fc fbac 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x34);
 8004138:	2034      	movs	r0, #52	; 0x34
 800413a:	f7fc fba9 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800413e:	2000      	movs	r0, #0
 8004140:	f7fc fba6 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x56);
 8004144:	2056      	movs	r0, #86	; 0x56
 8004146:	f7fc fba3 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800414a:	2000      	movs	r0, #0
 800414c:	f7fc fba0 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x76);
 8004150:	2076      	movs	r0, #118	; 0x76
 8004152:	f7fc fb9d 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004156:	2000      	movs	r0, #0
 8004158:	f7fc fb9a 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x77);
 800415c:	2077      	movs	r0, #119	; 0x77
 800415e:	f7fc fb97 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004162:	2000      	movs	r0, #0
 8004164:	f7fc fb94 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 8004168:	2066      	movs	r0, #102	; 0x66
 800416a:	f7fc fb91 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800416e:	2000      	movs	r0, #0
 8004170:	f7fc fb8e 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 8004174:	2088      	movs	r0, #136	; 0x88
 8004176:	f7fc fb8b 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800417a:	2000      	movs	r0, #0
 800417c:	f7fc fb88 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8004180:	2099      	movs	r0, #153	; 0x99
 8004182:	f7fc fb85 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004186:	2000      	movs	r0, #0
 8004188:	f7fc fb82 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xBB);
 800418c:	20bb      	movs	r0, #187	; 0xbb
 800418e:	f7fc fb7f 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004192:	2000      	movs	r0, #0
 8004194:	f7fc fb7c 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8004198:	2099      	movs	r0, #153	; 0x99
 800419a:	f7fc fb79 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800419e:	2000      	movs	r0, #0
 80041a0:	f7fc fb76 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 80041a4:	2066      	movs	r0, #102	; 0x66
 80041a6:	f7fc fb73 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041aa:	2000      	movs	r0, #0
 80041ac:	f7fc fb70 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 80041b0:	2055      	movs	r0, #85	; 0x55
 80041b2:	f7fc fb6d 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041b6:	2000      	movs	r0, #0
 80041b8:	f7fc fb6a 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 80041bc:	2055      	movs	r0, #85	; 0x55
 80041be:	f7fc fb67 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041c2:	2000      	movs	r0, #0
 80041c4:	f7fc fb64 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 80041c8:	2045      	movs	r0, #69	; 0x45
 80041ca:	f7fc fb61 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041ce:	2000      	movs	r0, #0
 80041d0:	f7fc fb5e 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x43);
 80041d4:	2043      	movs	r0, #67	; 0x43
 80041d6:	f7fc fb5b 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041da:	2000      	movs	r0, #0
 80041dc:	f7fc fb58 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 80041e0:	2044      	movs	r0, #68	; 0x44
 80041e2:	f7fc fb55 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041e6:	2000      	movs	r0, #0
 80041e8:	f7fc fb52 	bl	8000890 <lcd_wr_xdata>
 80041ec:	23e7      	movs	r3, #231	; 0xe7
 80041ee:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80041f2:	4ba0      	ldr	r3, [pc, #640]	; (8004474 <lcd_init+0x296c>)
 80041f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80041f8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80041fa:	4b9e      	ldr	r3, [pc, #632]	; (8004474 <lcd_init+0x296c>)
 80041fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004200:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004202:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8004206:	b29a      	uxth	r2, r3
 8004208:	4b9b      	ldr	r3, [pc, #620]	; (8004478 <lcd_init+0x2970>)
 800420a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800420c:	4b99      	ldr	r3, [pc, #612]	; (8004474 <lcd_init+0x296c>)
 800420e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004212:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004214:	4b97      	ldr	r3, [pc, #604]	; (8004474 <lcd_init+0x296c>)
 8004216:	2280      	movs	r2, #128	; 0x80
 8004218:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800421a:	4b96      	ldr	r3, [pc, #600]	; (8004474 <lcd_init+0x296c>)
 800421c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004220:	611a      	str	r2, [r3, #16]
}
 8004222:	bf00      	nop

        lcd_wr_regno(0xE7);
        lcd_wr_xdata(0x32);
 8004224:	2032      	movs	r0, #50	; 0x32
 8004226:	f7fc fb33 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800422a:	2000      	movs	r0, #0
 800422c:	f7fc fb30 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 8004230:	2055      	movs	r0, #85	; 0x55
 8004232:	f7fc fb2d 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004236:	2000      	movs	r0, #0
 8004238:	f7fc fb2a 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x76);
 800423c:	2076      	movs	r0, #118	; 0x76
 800423e:	f7fc fb27 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004242:	2000      	movs	r0, #0
 8004244:	f7fc fb24 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 8004248:	2066      	movs	r0, #102	; 0x66
 800424a:	f7fc fb21 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800424e:	2000      	movs	r0, #0
 8004250:	f7fc fb1e 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x67);
 8004254:	2067      	movs	r0, #103	; 0x67
 8004256:	f7fc fb1b 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800425a:	2000      	movs	r0, #0
 800425c:	f7fc fb18 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x67);
 8004260:	2067      	movs	r0, #103	; 0x67
 8004262:	f7fc fb15 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004266:	2000      	movs	r0, #0
 8004268:	f7fc fb12 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x87);
 800426c:	2087      	movs	r0, #135	; 0x87
 800426e:	f7fc fb0f 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004272:	2000      	movs	r0, #0
 8004274:	f7fc fb0c 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8004278:	2099      	movs	r0, #153	; 0x99
 800427a:	f7fc fb09 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800427e:	2000      	movs	r0, #0
 8004280:	f7fc fb06 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xBB);
 8004284:	20bb      	movs	r0, #187	; 0xbb
 8004286:	f7fc fb03 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800428a:	2000      	movs	r0, #0
 800428c:	f7fc fb00 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8004290:	2099      	movs	r0, #153	; 0x99
 8004292:	f7fc fafd 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004296:	2000      	movs	r0, #0
 8004298:	f7fc fafa 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x77);
 800429c:	2077      	movs	r0, #119	; 0x77
 800429e:	f7fc faf7 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042a2:	2000      	movs	r0, #0
 80042a4:	f7fc faf4 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 80042a8:	2044      	movs	r0, #68	; 0x44
 80042aa:	f7fc faf1 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042ae:	2000      	movs	r0, #0
 80042b0:	f7fc faee 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x56);
 80042b4:	2056      	movs	r0, #86	; 0x56
 80042b6:	f7fc faeb 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042ba:	2000      	movs	r0, #0
 80042bc:	f7fc fae8 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 80042c0:	2023      	movs	r0, #35	; 0x23
 80042c2:	f7fc fae5 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042c6:	2000      	movs	r0, #0
 80042c8:	f7fc fae2 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 80042cc:	2033      	movs	r0, #51	; 0x33
 80042ce:	f7fc fadf 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042d2:	2000      	movs	r0, #0
 80042d4:	f7fc fadc 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 80042d8:	2045      	movs	r0, #69	; 0x45
 80042da:	f7fc fad9 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042de:	2000      	movs	r0, #0
 80042e0:	f7fc fad6 	bl	8000890 <lcd_wr_xdata>
 80042e4:	23e8      	movs	r3, #232	; 0xe8
 80042e6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80042ea:	4b62      	ldr	r3, [pc, #392]	; (8004474 <lcd_init+0x296c>)
 80042ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80042f0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80042f2:	4b60      	ldr	r3, [pc, #384]	; (8004474 <lcd_init+0x296c>)
 80042f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042f8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80042fa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80042fe:	b29a      	uxth	r2, r3
 8004300:	4b5d      	ldr	r3, [pc, #372]	; (8004478 <lcd_init+0x2970>)
 8004302:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004304:	4b5b      	ldr	r3, [pc, #364]	; (8004474 <lcd_init+0x296c>)
 8004306:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800430a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800430c:	4b59      	ldr	r3, [pc, #356]	; (8004474 <lcd_init+0x296c>)
 800430e:	2280      	movs	r2, #128	; 0x80
 8004310:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004312:	4b58      	ldr	r3, [pc, #352]	; (8004474 <lcd_init+0x296c>)
 8004314:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004318:	611a      	str	r2, [r3, #16]
}
 800431a:	bf00      	nop

        lcd_wr_regno(0xE8);
        lcd_wr_xdata(0x00);
 800431c:	2000      	movs	r0, #0
 800431e:	f7fc fab7 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004322:	2000      	movs	r0, #0
 8004324:	f7fc fab4 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8004328:	2099      	movs	r0, #153	; 0x99
 800432a:	f7fc fab1 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800432e:	2000      	movs	r0, #0
 8004330:	f7fc faae 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x87);
 8004334:	2087      	movs	r0, #135	; 0x87
 8004336:	f7fc faab 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800433a:	2000      	movs	r0, #0
 800433c:	f7fc faa8 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 8004340:	2088      	movs	r0, #136	; 0x88
 8004342:	f7fc faa5 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004346:	2000      	movs	r0, #0
 8004348:	f7fc faa2 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x77);
 800434c:	2077      	movs	r0, #119	; 0x77
 800434e:	f7fc fa9f 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004352:	2000      	movs	r0, #0
 8004354:	f7fc fa9c 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 8004358:	2066      	movs	r0, #102	; 0x66
 800435a:	f7fc fa99 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800435e:	2000      	movs	r0, #0
 8004360:	f7fc fa96 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 8004364:	2088      	movs	r0, #136	; 0x88
 8004366:	f7fc fa93 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800436a:	2000      	movs	r0, #0
 800436c:	f7fc fa90 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xAA);
 8004370:	20aa      	movs	r0, #170	; 0xaa
 8004372:	f7fc fa8d 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004376:	2000      	movs	r0, #0
 8004378:	f7fc fa8a 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xBB);
 800437c:	20bb      	movs	r0, #187	; 0xbb
 800437e:	f7fc fa87 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004382:	2000      	movs	r0, #0
 8004384:	f7fc fa84 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8004388:	2099      	movs	r0, #153	; 0x99
 800438a:	f7fc fa81 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800438e:	2000      	movs	r0, #0
 8004390:	f7fc fa7e 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 8004394:	2066      	movs	r0, #102	; 0x66
 8004396:	f7fc fa7b 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800439a:	2000      	movs	r0, #0
 800439c:	f7fc fa78 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 80043a0:	2055      	movs	r0, #85	; 0x55
 80043a2:	f7fc fa75 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043a6:	2000      	movs	r0, #0
 80043a8:	f7fc fa72 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 80043ac:	2055      	movs	r0, #85	; 0x55
 80043ae:	f7fc fa6f 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043b2:	2000      	movs	r0, #0
 80043b4:	f7fc fa6c 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 80043b8:	2044      	movs	r0, #68	; 0x44
 80043ba:	f7fc fa69 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043be:	2000      	movs	r0, #0
 80043c0:	f7fc fa66 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 80043c4:	2044      	movs	r0, #68	; 0x44
 80043c6:	f7fc fa63 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043ca:	2000      	movs	r0, #0
 80043cc:	f7fc fa60 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 80043d0:	2055      	movs	r0, #85	; 0x55
 80043d2:	f7fc fa5d 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043d6:	2000      	movs	r0, #0
 80043d8:	f7fc fa5a 	bl	8000890 <lcd_wr_xdata>
 80043dc:	23e9      	movs	r3, #233	; 0xe9
 80043de:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80043e2:	4b24      	ldr	r3, [pc, #144]	; (8004474 <lcd_init+0x296c>)
 80043e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80043e8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80043ea:	4b22      	ldr	r3, [pc, #136]	; (8004474 <lcd_init+0x296c>)
 80043ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043f0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80043f2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	4b1f      	ldr	r3, [pc, #124]	; (8004478 <lcd_init+0x2970>)
 80043fa:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80043fc:	4b1d      	ldr	r3, [pc, #116]	; (8004474 <lcd_init+0x296c>)
 80043fe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004402:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004404:	4b1b      	ldr	r3, [pc, #108]	; (8004474 <lcd_init+0x296c>)
 8004406:	2280      	movs	r2, #128	; 0x80
 8004408:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800440a:	4b1a      	ldr	r3, [pc, #104]	; (8004474 <lcd_init+0x296c>)
 800440c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004410:	611a      	str	r2, [r3, #16]
}
 8004412:	bf00      	nop

        lcd_wr_regno(0xE9);
        lcd_wr_xdata(0xAA);
 8004414:	20aa      	movs	r0, #170	; 0xaa
 8004416:	f7fc fa3b 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800441a:	2000      	movs	r0, #0
 800441c:	f7fc fa38 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004420:	2000      	movs	r0, #0
 8004422:	f7fc fa35 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004426:	2000      	movs	r0, #0
 8004428:	f7fc fa32 	bl	8000890 <lcd_wr_xdata>
 800442c:	2300      	movs	r3, #0
 800442e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004432:	4b10      	ldr	r3, [pc, #64]	; (8004474 <lcd_init+0x296c>)
 8004434:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004438:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800443a:	4b0e      	ldr	r3, [pc, #56]	; (8004474 <lcd_init+0x296c>)
 800443c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004440:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004442:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8004446:	b29a      	uxth	r2, r3
 8004448:	4b0b      	ldr	r3, [pc, #44]	; (8004478 <lcd_init+0x2970>)
 800444a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800444c:	4b09      	ldr	r3, [pc, #36]	; (8004474 <lcd_init+0x296c>)
 800444e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004452:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004454:	4b07      	ldr	r3, [pc, #28]	; (8004474 <lcd_init+0x296c>)
 8004456:	2280      	movs	r2, #128	; 0x80
 8004458:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800445a:	4b06      	ldr	r3, [pc, #24]	; (8004474 <lcd_init+0x296c>)
 800445c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004460:	611a      	str	r2, [r3, #16]
}
 8004462:	bf00      	nop

        lcd_wr_regno(0x00);
        lcd_wr_xdata(0xAA);
 8004464:	20aa      	movs	r0, #170	; 0xaa
 8004466:	f7fc fa13 	bl	8000890 <lcd_wr_xdata>
 800446a:	23cf      	movs	r3, #207	; 0xcf
 800446c:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8004470:	e004      	b.n	800447c <lcd_init+0x2974>
 8004472:	bf00      	nop
 8004474:	40011000 	.word	0x40011000
 8004478:	40010c00 	.word	0x40010c00
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800447c:	4bbc      	ldr	r3, [pc, #752]	; (8004770 <lcd_init+0x2c68>)
 800447e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004482:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004484:	4bba      	ldr	r3, [pc, #744]	; (8004770 <lcd_init+0x2c68>)
 8004486:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800448a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800448c:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8004490:	b29a      	uxth	r2, r3
 8004492:	4bb8      	ldr	r3, [pc, #736]	; (8004774 <lcd_init+0x2c6c>)
 8004494:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004496:	4bb6      	ldr	r3, [pc, #728]	; (8004770 <lcd_init+0x2c68>)
 8004498:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800449c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800449e:	4bb4      	ldr	r3, [pc, #720]	; (8004770 <lcd_init+0x2c68>)
 80044a0:	2280      	movs	r2, #128	; 0x80
 80044a2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80044a4:	4bb2      	ldr	r3, [pc, #712]	; (8004770 <lcd_init+0x2c68>)
 80044a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044aa:	611a      	str	r2, [r3, #16]
}
 80044ac:	bf00      	nop

        lcd_wr_regno(0xCF);
        lcd_wr_xdata(0x00);
 80044ae:	2000      	movs	r0, #0
 80044b0:	f7fc f9ee 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044b4:	2000      	movs	r0, #0
 80044b6:	f7fc f9eb 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044ba:	2000      	movs	r0, #0
 80044bc:	f7fc f9e8 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044c0:	2000      	movs	r0, #0
 80044c2:	f7fc f9e5 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044c6:	2000      	movs	r0, #0
 80044c8:	f7fc f9e2 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044cc:	2000      	movs	r0, #0
 80044ce:	f7fc f9df 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044d2:	2000      	movs	r0, #0
 80044d4:	f7fc f9dc 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044d8:	2000      	movs	r0, #0
 80044da:	f7fc f9d9 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044de:	2000      	movs	r0, #0
 80044e0:	f7fc f9d6 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044e4:	2000      	movs	r0, #0
 80044e6:	f7fc f9d3 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044ea:	2000      	movs	r0, #0
 80044ec:	f7fc f9d0 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044f0:	2000      	movs	r0, #0
 80044f2:	f7fc f9cd 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044f6:	2000      	movs	r0, #0
 80044f8:	f7fc f9ca 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044fc:	2000      	movs	r0, #0
 80044fe:	f7fc f9c7 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004502:	2000      	movs	r0, #0
 8004504:	f7fc f9c4 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004508:	2000      	movs	r0, #0
 800450a:	f7fc f9c1 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800450e:	2000      	movs	r0, #0
 8004510:	f7fc f9be 	bl	8000890 <lcd_wr_xdata>
 8004514:	23f0      	movs	r3, #240	; 0xf0
 8004516:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800451a:	4b95      	ldr	r3, [pc, #596]	; (8004770 <lcd_init+0x2c68>)
 800451c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004520:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004522:	4b93      	ldr	r3, [pc, #588]	; (8004770 <lcd_init+0x2c68>)
 8004524:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004528:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800452a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800452e:	b29a      	uxth	r2, r3
 8004530:	4b90      	ldr	r3, [pc, #576]	; (8004774 <lcd_init+0x2c6c>)
 8004532:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004534:	4b8e      	ldr	r3, [pc, #568]	; (8004770 <lcd_init+0x2c68>)
 8004536:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800453a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800453c:	4b8c      	ldr	r3, [pc, #560]	; (8004770 <lcd_init+0x2c68>)
 800453e:	2280      	movs	r2, #128	; 0x80
 8004540:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004542:	4b8b      	ldr	r3, [pc, #556]	; (8004770 <lcd_init+0x2c68>)
 8004544:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004548:	611a      	str	r2, [r3, #16]
}
 800454a:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0x00);
 800454c:	2000      	movs	r0, #0
 800454e:	f7fc f99f 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x50);
 8004552:	2050      	movs	r0, #80	; 0x50
 8004554:	f7fc f99c 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004558:	2000      	movs	r0, #0
 800455a:	f7fc f999 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800455e:	2000      	movs	r0, #0
 8004560:	f7fc f996 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004564:	2000      	movs	r0, #0
 8004566:	f7fc f993 	bl	8000890 <lcd_wr_xdata>
 800456a:	23f3      	movs	r3, #243	; 0xf3
 800456c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004570:	4b7f      	ldr	r3, [pc, #508]	; (8004770 <lcd_init+0x2c68>)
 8004572:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004576:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004578:	4b7d      	ldr	r3, [pc, #500]	; (8004770 <lcd_init+0x2c68>)
 800457a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800457e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004580:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004584:	b29a      	uxth	r2, r3
 8004586:	4b7b      	ldr	r3, [pc, #492]	; (8004774 <lcd_init+0x2c6c>)
 8004588:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800458a:	4b79      	ldr	r3, [pc, #484]	; (8004770 <lcd_init+0x2c68>)
 800458c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004590:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004592:	4b77      	ldr	r3, [pc, #476]	; (8004770 <lcd_init+0x2c68>)
 8004594:	2280      	movs	r2, #128	; 0x80
 8004596:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004598:	4b75      	ldr	r3, [pc, #468]	; (8004770 <lcd_init+0x2c68>)
 800459a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800459e:	611a      	str	r2, [r3, #16]
}
 80045a0:	bf00      	nop

        lcd_wr_regno(0xF3);
        lcd_wr_xdata(0x00);
 80045a2:	2000      	movs	r0, #0
 80045a4:	f7fc f974 	bl	8000890 <lcd_wr_xdata>
 80045a8:	23f9      	movs	r3, #249	; 0xf9
 80045aa:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80045ae:	4b70      	ldr	r3, [pc, #448]	; (8004770 <lcd_init+0x2c68>)
 80045b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80045b4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80045b6:	4b6e      	ldr	r3, [pc, #440]	; (8004770 <lcd_init+0x2c68>)
 80045b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045bc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80045be:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	4b6b      	ldr	r3, [pc, #428]	; (8004774 <lcd_init+0x2c6c>)
 80045c6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80045c8:	4b69      	ldr	r3, [pc, #420]	; (8004770 <lcd_init+0x2c68>)
 80045ca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80045ce:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80045d0:	4b67      	ldr	r3, [pc, #412]	; (8004770 <lcd_init+0x2c68>)
 80045d2:	2280      	movs	r2, #128	; 0x80
 80045d4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80045d6:	4b66      	ldr	r3, [pc, #408]	; (8004770 <lcd_init+0x2c68>)
 80045d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045dc:	611a      	str	r2, [r3, #16]
}
 80045de:	bf00      	nop

        lcd_wr_regno(0xF9);
        lcd_wr_xdata(0x06);
 80045e0:	2006      	movs	r0, #6
 80045e2:	f7fc f955 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 80045e6:	2010      	movs	r0, #16
 80045e8:	f7fc f952 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 80045ec:	2029      	movs	r0, #41	; 0x29
 80045ee:	f7fc f94f 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045f2:	2000      	movs	r0, #0
 80045f4:	f7fc f94c 	bl	8000890 <lcd_wr_xdata>
 80045f8:	233a      	movs	r3, #58	; 0x3a
 80045fa:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80045fe:	4b5c      	ldr	r3, [pc, #368]	; (8004770 <lcd_init+0x2c68>)
 8004600:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004604:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004606:	4b5a      	ldr	r3, [pc, #360]	; (8004770 <lcd_init+0x2c68>)
 8004608:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800460c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800460e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8004612:	b29a      	uxth	r2, r3
 8004614:	4b57      	ldr	r3, [pc, #348]	; (8004774 <lcd_init+0x2c6c>)
 8004616:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004618:	4b55      	ldr	r3, [pc, #340]	; (8004770 <lcd_init+0x2c68>)
 800461a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800461e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004620:	4b53      	ldr	r3, [pc, #332]	; (8004770 <lcd_init+0x2c68>)
 8004622:	2280      	movs	r2, #128	; 0x80
 8004624:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004626:	4b52      	ldr	r3, [pc, #328]	; (8004770 <lcd_init+0x2c68>)
 8004628:	f44f 7200 	mov.w	r2, #512	; 0x200
 800462c:	611a      	str	r2, [r3, #16]
}
 800462e:	bf00      	nop

        lcd_wr_regno(0x3A);
        lcd_wr_xdata(0x55);  /* 66 */
 8004630:	2055      	movs	r0, #85	; 0x55
 8004632:	f7fc f92d 	bl	8000890 <lcd_wr_xdata>
 8004636:	2311      	movs	r3, #17
 8004638:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800463c:	4b4c      	ldr	r3, [pc, #304]	; (8004770 <lcd_init+0x2c68>)
 800463e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004642:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004644:	4b4a      	ldr	r3, [pc, #296]	; (8004770 <lcd_init+0x2c68>)
 8004646:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800464a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800464c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004650:	b29a      	uxth	r2, r3
 8004652:	4b48      	ldr	r3, [pc, #288]	; (8004774 <lcd_init+0x2c6c>)
 8004654:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004656:	4b46      	ldr	r3, [pc, #280]	; (8004770 <lcd_init+0x2c68>)
 8004658:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800465c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800465e:	4b44      	ldr	r3, [pc, #272]	; (8004770 <lcd_init+0x2c68>)
 8004660:	2280      	movs	r2, #128	; 0x80
 8004662:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004664:	4b42      	ldr	r3, [pc, #264]	; (8004770 <lcd_init+0x2c68>)
 8004666:	f44f 7200 	mov.w	r2, #512	; 0x200
 800466a:	611a      	str	r2, [r3, #16]
}
 800466c:	bf00      	nop

        lcd_wr_regno(0x11);
        HAL_Delay(100);
 800466e:	2064      	movs	r0, #100	; 0x64
 8004670:	f002 ff96 	bl	80075a0 <HAL_Delay>
 8004674:	2329      	movs	r3, #41	; 0x29
 8004676:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800467a:	4b3d      	ldr	r3, [pc, #244]	; (8004770 <lcd_init+0x2c68>)
 800467c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004680:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004682:	4b3b      	ldr	r3, [pc, #236]	; (8004770 <lcd_init+0x2c68>)
 8004684:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004688:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800468a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800468e:	b29a      	uxth	r2, r3
 8004690:	4b38      	ldr	r3, [pc, #224]	; (8004774 <lcd_init+0x2c6c>)
 8004692:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004694:	4b36      	ldr	r3, [pc, #216]	; (8004770 <lcd_init+0x2c68>)
 8004696:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800469a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800469c:	4b34      	ldr	r3, [pc, #208]	; (8004770 <lcd_init+0x2c68>)
 800469e:	2280      	movs	r2, #128	; 0x80
 80046a0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80046a2:	4b33      	ldr	r3, [pc, #204]	; (8004770 <lcd_init+0x2c68>)
 80046a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046a8:	611a      	str	r2, [r3, #16]
}
 80046aa:	bf00      	nop
 80046ac:	2335      	movs	r3, #53	; 0x35
 80046ae:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80046b2:	4b2f      	ldr	r3, [pc, #188]	; (8004770 <lcd_init+0x2c68>)
 80046b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80046b8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80046ba:	4b2d      	ldr	r3, [pc, #180]	; (8004770 <lcd_init+0x2c68>)
 80046bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046c0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80046c2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	4b2a      	ldr	r3, [pc, #168]	; (8004774 <lcd_init+0x2c6c>)
 80046ca:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80046cc:	4b28      	ldr	r3, [pc, #160]	; (8004770 <lcd_init+0x2c68>)
 80046ce:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80046d2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80046d4:	4b26      	ldr	r3, [pc, #152]	; (8004770 <lcd_init+0x2c68>)
 80046d6:	2280      	movs	r2, #128	; 0x80
 80046d8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80046da:	4b25      	ldr	r3, [pc, #148]	; (8004770 <lcd_init+0x2c68>)
 80046dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046e0:	611a      	str	r2, [r3, #16]
}
 80046e2:	bf00      	nop
        lcd_wr_regno(0x29);
        lcd_wr_regno(0x35);
        lcd_wr_xdata(0x00);
 80046e4:	2000      	movs	r0, #0
 80046e6:	f7fc f8d3 	bl	8000890 <lcd_wr_xdata>
 80046ea:	2351      	movs	r3, #81	; 0x51
 80046ec:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80046f0:	4b1f      	ldr	r3, [pc, #124]	; (8004770 <lcd_init+0x2c68>)
 80046f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80046f6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80046f8:	4b1d      	ldr	r3, [pc, #116]	; (8004770 <lcd_init+0x2c68>)
 80046fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046fe:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004700:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8004704:	b29a      	uxth	r2, r3
 8004706:	4b1b      	ldr	r3, [pc, #108]	; (8004774 <lcd_init+0x2c6c>)
 8004708:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800470a:	4b19      	ldr	r3, [pc, #100]	; (8004770 <lcd_init+0x2c68>)
 800470c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004710:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004712:	4b17      	ldr	r3, [pc, #92]	; (8004770 <lcd_init+0x2c68>)
 8004714:	2280      	movs	r2, #128	; 0x80
 8004716:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004718:	4b15      	ldr	r3, [pc, #84]	; (8004770 <lcd_init+0x2c68>)
 800471a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800471e:	611a      	str	r2, [r3, #16]
}
 8004720:	bf00      	nop

        lcd_wr_regno(0x51);
        lcd_wr_xdata(0xFF);
 8004722:	20ff      	movs	r0, #255	; 0xff
 8004724:	f7fc f8b4 	bl	8000890 <lcd_wr_xdata>
 8004728:	2353      	movs	r3, #83	; 0x53
 800472a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800472e:	4b10      	ldr	r3, [pc, #64]	; (8004770 <lcd_init+0x2c68>)
 8004730:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004734:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004736:	4b0e      	ldr	r3, [pc, #56]	; (8004770 <lcd_init+0x2c68>)
 8004738:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800473c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800473e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8004742:	b29a      	uxth	r2, r3
 8004744:	4b0b      	ldr	r3, [pc, #44]	; (8004774 <lcd_init+0x2c6c>)
 8004746:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004748:	4b09      	ldr	r3, [pc, #36]	; (8004770 <lcd_init+0x2c68>)
 800474a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800474e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004750:	4b07      	ldr	r3, [pc, #28]	; (8004770 <lcd_init+0x2c68>)
 8004752:	2280      	movs	r2, #128	; 0x80
 8004754:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004756:	4b06      	ldr	r3, [pc, #24]	; (8004770 <lcd_init+0x2c68>)
 8004758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800475c:	611a      	str	r2, [r3, #16]
}
 800475e:	bf00      	nop
        lcd_wr_regno(0x53);
        lcd_wr_xdata(0x2C);
 8004760:	202c      	movs	r0, #44	; 0x2c
 8004762:	f7fc f895 	bl	8000890 <lcd_wr_xdata>
 8004766:	2355      	movs	r3, #85	; 0x55
 8004768:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 800476c:	e004      	b.n	8004778 <lcd_init+0x2c70>
 800476e:	bf00      	nop
 8004770:	40011000 	.word	0x40011000
 8004774:	40010c00 	.word	0x40010c00
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004778:	4b1c      	ldr	r3, [pc, #112]	; (80047ec <lcd_init+0x2ce4>)
 800477a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800477e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004780:	4b1a      	ldr	r3, [pc, #104]	; (80047ec <lcd_init+0x2ce4>)
 8004782:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004786:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004788:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800478c:	b29a      	uxth	r2, r3
 800478e:	4b18      	ldr	r3, [pc, #96]	; (80047f0 <lcd_init+0x2ce8>)
 8004790:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004792:	4b16      	ldr	r3, [pc, #88]	; (80047ec <lcd_init+0x2ce4>)
 8004794:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004798:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800479a:	4b14      	ldr	r3, [pc, #80]	; (80047ec <lcd_init+0x2ce4>)
 800479c:	2280      	movs	r2, #128	; 0x80
 800479e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80047a0:	4b12      	ldr	r3, [pc, #72]	; (80047ec <lcd_init+0x2ce4>)
 80047a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047a6:	611a      	str	r2, [r3, #16]
}
 80047a8:	bf00      	nop
        lcd_wr_regno(0x55);
        lcd_wr_xdata(0x82);
 80047aa:	2082      	movs	r0, #130	; 0x82
 80047ac:	f7fc f870 	bl	8000890 <lcd_wr_xdata>
 80047b0:	232c      	movs	r3, #44	; 0x2c
 80047b2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80047b6:	4b0d      	ldr	r3, [pc, #52]	; (80047ec <lcd_init+0x2ce4>)
 80047b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80047bc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80047be:	4b0b      	ldr	r3, [pc, #44]	; (80047ec <lcd_init+0x2ce4>)
 80047c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047c4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80047c6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	4b08      	ldr	r3, [pc, #32]	; (80047f0 <lcd_init+0x2ce8>)
 80047ce:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80047d0:	4b06      	ldr	r3, [pc, #24]	; (80047ec <lcd_init+0x2ce4>)
 80047d2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80047d6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80047d8:	4b04      	ldr	r3, [pc, #16]	; (80047ec <lcd_init+0x2ce4>)
 80047da:	2280      	movs	r2, #128	; 0x80
 80047dc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80047de:	4b03      	ldr	r3, [pc, #12]	; (80047ec <lcd_init+0x2ce4>)
 80047e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047e4:	611a      	str	r2, [r3, #16]
}
 80047e6:	f002 b8d8 	b.w	800699a <lcd_init+0x4e92>
 80047ea:	bf00      	nop
 80047ec:	40011000 	.word	0x40011000
 80047f0:	40010c00 	.word	0x40010c00
        lcd_wr_regno(0x2c);
    }
    else if (lcddev.id == 0x7796)
 80047f4:	4bb4      	ldr	r3, [pc, #720]	; (8004ac8 <lcd_init+0x2fc0>)
 80047f6:	889b      	ldrh	r3, [r3, #4]
 80047f8:	f247 7296 	movw	r2, #30614	; 0x7796
 80047fc:	4293      	cmp	r3, r2
 80047fe:	f040 82e3 	bne.w	8004dc8 <lcd_init+0x32c0>
 8004802:	2311      	movs	r3, #17
 8004804:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004808:	4bb0      	ldr	r3, [pc, #704]	; (8004acc <lcd_init+0x2fc4>)
 800480a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800480e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004810:	4bae      	ldr	r3, [pc, #696]	; (8004acc <lcd_init+0x2fc4>)
 8004812:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004816:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004818:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 800481c:	b29a      	uxth	r2, r3
 800481e:	4bac      	ldr	r3, [pc, #688]	; (8004ad0 <lcd_init+0x2fc8>)
 8004820:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004822:	4baa      	ldr	r3, [pc, #680]	; (8004acc <lcd_init+0x2fc4>)
 8004824:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004828:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800482a:	4ba8      	ldr	r3, [pc, #672]	; (8004acc <lcd_init+0x2fc4>)
 800482c:	2280      	movs	r2, #128	; 0x80
 800482e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004830:	4ba6      	ldr	r3, [pc, #664]	; (8004acc <lcd_init+0x2fc4>)
 8004832:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004836:	611a      	str	r2, [r3, #16]
}
 8004838:	bf00      	nop
    {
       // lcd_ex_st7796_reginit();    /* ִ��ST7796��ʼ�� */
        lcd_wr_regno(0x11);

        HAL_Delay(120);
 800483a:	2078      	movs	r0, #120	; 0x78
 800483c:	f002 feb0 	bl	80075a0 <HAL_Delay>
 8004840:	2336      	movs	r3, #54	; 0x36
 8004842:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004846:	4ba1      	ldr	r3, [pc, #644]	; (8004acc <lcd_init+0x2fc4>)
 8004848:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800484c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800484e:	4b9f      	ldr	r3, [pc, #636]	; (8004acc <lcd_init+0x2fc4>)
 8004850:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004854:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004856:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 800485a:	b29a      	uxth	r2, r3
 800485c:	4b9c      	ldr	r3, [pc, #624]	; (8004ad0 <lcd_init+0x2fc8>)
 800485e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004860:	4b9a      	ldr	r3, [pc, #616]	; (8004acc <lcd_init+0x2fc4>)
 8004862:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004866:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004868:	4b98      	ldr	r3, [pc, #608]	; (8004acc <lcd_init+0x2fc4>)
 800486a:	2280      	movs	r2, #128	; 0x80
 800486c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800486e:	4b97      	ldr	r3, [pc, #604]	; (8004acc <lcd_init+0x2fc4>)
 8004870:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004874:	611a      	str	r2, [r3, #16]
}
 8004876:	bf00      	nop

        lcd_wr_regno(0x36); /* Memory Data Access Control MY,MX~~ */
        lcd_wr_xdata(0x48);
 8004878:	2048      	movs	r0, #72	; 0x48
 800487a:	f7fc f809 	bl	8000890 <lcd_wr_xdata>
 800487e:	233a      	movs	r3, #58	; 0x3a
 8004880:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004884:	4b91      	ldr	r3, [pc, #580]	; (8004acc <lcd_init+0x2fc4>)
 8004886:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800488a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800488c:	4b8f      	ldr	r3, [pc, #572]	; (8004acc <lcd_init+0x2fc4>)
 800488e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004892:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004894:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8004898:	b29a      	uxth	r2, r3
 800489a:	4b8d      	ldr	r3, [pc, #564]	; (8004ad0 <lcd_init+0x2fc8>)
 800489c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800489e:	4b8b      	ldr	r3, [pc, #556]	; (8004acc <lcd_init+0x2fc4>)
 80048a0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80048a4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80048a6:	4b89      	ldr	r3, [pc, #548]	; (8004acc <lcd_init+0x2fc4>)
 80048a8:	2280      	movs	r2, #128	; 0x80
 80048aa:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80048ac:	4b87      	ldr	r3, [pc, #540]	; (8004acc <lcd_init+0x2fc4>)
 80048ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048b2:	611a      	str	r2, [r3, #16]
}
 80048b4:	bf00      	nop

        lcd_wr_regno(0x3A);
        lcd_wr_xdata(0x55);
 80048b6:	2055      	movs	r0, #85	; 0x55
 80048b8:	f7fb ffea 	bl	8000890 <lcd_wr_xdata>
 80048bc:	23f0      	movs	r3, #240	; 0xf0
 80048be:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80048c2:	4b82      	ldr	r3, [pc, #520]	; (8004acc <lcd_init+0x2fc4>)
 80048c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80048c8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80048ca:	4b80      	ldr	r3, [pc, #512]	; (8004acc <lcd_init+0x2fc4>)
 80048cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048d0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80048d2:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	4b7d      	ldr	r3, [pc, #500]	; (8004ad0 <lcd_init+0x2fc8>)
 80048da:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80048dc:	4b7b      	ldr	r3, [pc, #492]	; (8004acc <lcd_init+0x2fc4>)
 80048de:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80048e2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80048e4:	4b79      	ldr	r3, [pc, #484]	; (8004acc <lcd_init+0x2fc4>)
 80048e6:	2280      	movs	r2, #128	; 0x80
 80048e8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80048ea:	4b78      	ldr	r3, [pc, #480]	; (8004acc <lcd_init+0x2fc4>)
 80048ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048f0:	611a      	str	r2, [r3, #16]
}
 80048f2:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0xC3);
 80048f4:	20c3      	movs	r0, #195	; 0xc3
 80048f6:	f7fb ffcb 	bl	8000890 <lcd_wr_xdata>
 80048fa:	23f0      	movs	r3, #240	; 0xf0
 80048fc:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004900:	4b72      	ldr	r3, [pc, #456]	; (8004acc <lcd_init+0x2fc4>)
 8004902:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004906:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004908:	4b70      	ldr	r3, [pc, #448]	; (8004acc <lcd_init+0x2fc4>)
 800490a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800490e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004910:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 8004914:	b29a      	uxth	r2, r3
 8004916:	4b6e      	ldr	r3, [pc, #440]	; (8004ad0 <lcd_init+0x2fc8>)
 8004918:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800491a:	4b6c      	ldr	r3, [pc, #432]	; (8004acc <lcd_init+0x2fc4>)
 800491c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004920:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004922:	4b6a      	ldr	r3, [pc, #424]	; (8004acc <lcd_init+0x2fc4>)
 8004924:	2280      	movs	r2, #128	; 0x80
 8004926:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004928:	4b68      	ldr	r3, [pc, #416]	; (8004acc <lcd_init+0x2fc4>)
 800492a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800492e:	611a      	str	r2, [r3, #16]
}
 8004930:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0x96);
 8004932:	2096      	movs	r0, #150	; 0x96
 8004934:	f7fb ffac 	bl	8000890 <lcd_wr_xdata>
 8004938:	23b4      	movs	r3, #180	; 0xb4
 800493a:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800493e:	4b63      	ldr	r3, [pc, #396]	; (8004acc <lcd_init+0x2fc4>)
 8004940:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004944:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004946:	4b61      	ldr	r3, [pc, #388]	; (8004acc <lcd_init+0x2fc4>)
 8004948:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800494c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800494e:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004952:	b29a      	uxth	r2, r3
 8004954:	4b5e      	ldr	r3, [pc, #376]	; (8004ad0 <lcd_init+0x2fc8>)
 8004956:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004958:	4b5c      	ldr	r3, [pc, #368]	; (8004acc <lcd_init+0x2fc4>)
 800495a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800495e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004960:	4b5a      	ldr	r3, [pc, #360]	; (8004acc <lcd_init+0x2fc4>)
 8004962:	2280      	movs	r2, #128	; 0x80
 8004964:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004966:	4b59      	ldr	r3, [pc, #356]	; (8004acc <lcd_init+0x2fc4>)
 8004968:	f44f 7200 	mov.w	r2, #512	; 0x200
 800496c:	611a      	str	r2, [r3, #16]
}
 800496e:	bf00      	nop

        lcd_wr_regno(0xB4);
        lcd_wr_xdata(0x01);
 8004970:	2001      	movs	r0, #1
 8004972:	f7fb ff8d 	bl	8000890 <lcd_wr_xdata>
 8004976:	23b6      	movs	r3, #182	; 0xb6
 8004978:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800497c:	4b53      	ldr	r3, [pc, #332]	; (8004acc <lcd_init+0x2fc4>)
 800497e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004982:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004984:	4b51      	ldr	r3, [pc, #324]	; (8004acc <lcd_init+0x2fc4>)
 8004986:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800498a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800498c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004990:	b29a      	uxth	r2, r3
 8004992:	4b4f      	ldr	r3, [pc, #316]	; (8004ad0 <lcd_init+0x2fc8>)
 8004994:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004996:	4b4d      	ldr	r3, [pc, #308]	; (8004acc <lcd_init+0x2fc4>)
 8004998:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800499c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800499e:	4b4b      	ldr	r3, [pc, #300]	; (8004acc <lcd_init+0x2fc4>)
 80049a0:	2280      	movs	r2, #128	; 0x80
 80049a2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80049a4:	4b49      	ldr	r3, [pc, #292]	; (8004acc <lcd_init+0x2fc4>)
 80049a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049aa:	611a      	str	r2, [r3, #16]
}
 80049ac:	bf00      	nop

        lcd_wr_regno(0xB6); /* Display Function Control */
        lcd_wr_xdata(0x0A);
 80049ae:	200a      	movs	r0, #10
 80049b0:	f7fb ff6e 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xA2);
 80049b4:	20a2      	movs	r0, #162	; 0xa2
 80049b6:	f7fb ff6b 	bl	8000890 <lcd_wr_xdata>
 80049ba:	23b7      	movs	r3, #183	; 0xb7
 80049bc:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80049c0:	4b42      	ldr	r3, [pc, #264]	; (8004acc <lcd_init+0x2fc4>)
 80049c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80049c6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80049c8:	4b40      	ldr	r3, [pc, #256]	; (8004acc <lcd_init+0x2fc4>)
 80049ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80049ce:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80049d0:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	4b3e      	ldr	r3, [pc, #248]	; (8004ad0 <lcd_init+0x2fc8>)
 80049d8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80049da:	4b3c      	ldr	r3, [pc, #240]	; (8004acc <lcd_init+0x2fc4>)
 80049dc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80049e0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80049e2:	4b3a      	ldr	r3, [pc, #232]	; (8004acc <lcd_init+0x2fc4>)
 80049e4:	2280      	movs	r2, #128	; 0x80
 80049e6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80049e8:	4b38      	ldr	r3, [pc, #224]	; (8004acc <lcd_init+0x2fc4>)
 80049ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049ee:	611a      	str	r2, [r3, #16]
}
 80049f0:	bf00      	nop

        lcd_wr_regno(0xB7);
        lcd_wr_xdata(0xC6);
 80049f2:	20c6      	movs	r0, #198	; 0xc6
 80049f4:	f7fb ff4c 	bl	8000890 <lcd_wr_xdata>
 80049f8:	23b9      	movs	r3, #185	; 0xb9
 80049fa:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80049fe:	4b33      	ldr	r3, [pc, #204]	; (8004acc <lcd_init+0x2fc4>)
 8004a00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a04:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004a06:	4b31      	ldr	r3, [pc, #196]	; (8004acc <lcd_init+0x2fc4>)
 8004a08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a0c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004a0e:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	4b2e      	ldr	r3, [pc, #184]	; (8004ad0 <lcd_init+0x2fc8>)
 8004a16:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004a18:	4b2c      	ldr	r3, [pc, #176]	; (8004acc <lcd_init+0x2fc4>)
 8004a1a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004a1e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004a20:	4b2a      	ldr	r3, [pc, #168]	; (8004acc <lcd_init+0x2fc4>)
 8004a22:	2280      	movs	r2, #128	; 0x80
 8004a24:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004a26:	4b29      	ldr	r3, [pc, #164]	; (8004acc <lcd_init+0x2fc4>)
 8004a28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a2c:	611a      	str	r2, [r3, #16]
}
 8004a2e:	bf00      	nop

        lcd_wr_regno(0xB9);
        lcd_wr_xdata(0x02);
 8004a30:	2002      	movs	r0, #2
 8004a32:	f7fb ff2d 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xE0);
 8004a36:	20e0      	movs	r0, #224	; 0xe0
 8004a38:	f7fb ff2a 	bl	8000890 <lcd_wr_xdata>
 8004a3c:	23c0      	movs	r3, #192	; 0xc0
 8004a3e:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004a42:	4b22      	ldr	r3, [pc, #136]	; (8004acc <lcd_init+0x2fc4>)
 8004a44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a48:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004a4a:	4b20      	ldr	r3, [pc, #128]	; (8004acc <lcd_init+0x2fc4>)
 8004a4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a50:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004a52:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	4b1d      	ldr	r3, [pc, #116]	; (8004ad0 <lcd_init+0x2fc8>)
 8004a5a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004a5c:	4b1b      	ldr	r3, [pc, #108]	; (8004acc <lcd_init+0x2fc4>)
 8004a5e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004a62:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004a64:	4b19      	ldr	r3, [pc, #100]	; (8004acc <lcd_init+0x2fc4>)
 8004a66:	2280      	movs	r2, #128	; 0x80
 8004a68:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004a6a:	4b18      	ldr	r3, [pc, #96]	; (8004acc <lcd_init+0x2fc4>)
 8004a6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a70:	611a      	str	r2, [r3, #16]
}
 8004a72:	bf00      	nop

        lcd_wr_regno(0xC0);
        lcd_wr_xdata(0x80);
 8004a74:	2080      	movs	r0, #128	; 0x80
 8004a76:	f7fb ff0b 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x16);
 8004a7a:	2016      	movs	r0, #22
 8004a7c:	f7fb ff08 	bl	8000890 <lcd_wr_xdata>
 8004a80:	23c1      	movs	r3, #193	; 0xc1
 8004a82:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004a86:	4b11      	ldr	r3, [pc, #68]	; (8004acc <lcd_init+0x2fc4>)
 8004a88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a8c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004a8e:	4b0f      	ldr	r3, [pc, #60]	; (8004acc <lcd_init+0x2fc4>)
 8004a90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a94:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004a96:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	4b0c      	ldr	r3, [pc, #48]	; (8004ad0 <lcd_init+0x2fc8>)
 8004a9e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004aa0:	4b0a      	ldr	r3, [pc, #40]	; (8004acc <lcd_init+0x2fc4>)
 8004aa2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004aa6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004aa8:	4b08      	ldr	r3, [pc, #32]	; (8004acc <lcd_init+0x2fc4>)
 8004aaa:	2280      	movs	r2, #128	; 0x80
 8004aac:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004aae:	4b07      	ldr	r3, [pc, #28]	; (8004acc <lcd_init+0x2fc4>)
 8004ab0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ab4:	611a      	str	r2, [r3, #16]
}
 8004ab6:	bf00      	nop

        lcd_wr_regno(0xC1);
        lcd_wr_xdata(0x19);
 8004ab8:	2019      	movs	r0, #25
 8004aba:	f7fb fee9 	bl	8000890 <lcd_wr_xdata>
 8004abe:	23c2      	movs	r3, #194	; 0xc2
 8004ac0:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
 8004ac4:	e006      	b.n	8004ad4 <lcd_init+0x2fcc>
 8004ac6:	bf00      	nop
 8004ac8:	2000007c 	.word	0x2000007c
 8004acc:	40011000 	.word	0x40011000
 8004ad0:	40010c00 	.word	0x40010c00
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004ad4:	4bba      	ldr	r3, [pc, #744]	; (8004dc0 <lcd_init+0x32b8>)
 8004ad6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ada:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004adc:	4bb8      	ldr	r3, [pc, #736]	; (8004dc0 <lcd_init+0x32b8>)
 8004ade:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ae2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004ae4:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	4bb6      	ldr	r3, [pc, #728]	; (8004dc4 <lcd_init+0x32bc>)
 8004aec:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004aee:	4bb4      	ldr	r3, [pc, #720]	; (8004dc0 <lcd_init+0x32b8>)
 8004af0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004af4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004af6:	4bb2      	ldr	r3, [pc, #712]	; (8004dc0 <lcd_init+0x32b8>)
 8004af8:	2280      	movs	r2, #128	; 0x80
 8004afa:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004afc:	4bb0      	ldr	r3, [pc, #704]	; (8004dc0 <lcd_init+0x32b8>)
 8004afe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b02:	611a      	str	r2, [r3, #16]
}
 8004b04:	bf00      	nop

        lcd_wr_regno(0xC2);
        lcd_wr_xdata(0xA7);
 8004b06:	20a7      	movs	r0, #167	; 0xa7
 8004b08:	f7fb fec2 	bl	8000890 <lcd_wr_xdata>
 8004b0c:	23c5      	movs	r3, #197	; 0xc5
 8004b0e:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004b12:	4bab      	ldr	r3, [pc, #684]	; (8004dc0 <lcd_init+0x32b8>)
 8004b14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b18:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004b1a:	4ba9      	ldr	r3, [pc, #676]	; (8004dc0 <lcd_init+0x32b8>)
 8004b1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b20:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004b22:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	; 0xea
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	4ba6      	ldr	r3, [pc, #664]	; (8004dc4 <lcd_init+0x32bc>)
 8004b2a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004b2c:	4ba4      	ldr	r3, [pc, #656]	; (8004dc0 <lcd_init+0x32b8>)
 8004b2e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004b32:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004b34:	4ba2      	ldr	r3, [pc, #648]	; (8004dc0 <lcd_init+0x32b8>)
 8004b36:	2280      	movs	r2, #128	; 0x80
 8004b38:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004b3a:	4ba1      	ldr	r3, [pc, #644]	; (8004dc0 <lcd_init+0x32b8>)
 8004b3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b40:	611a      	str	r2, [r3, #16]
}
 8004b42:	bf00      	nop

        lcd_wr_regno(0xC5);
        lcd_wr_xdata(0x16);
 8004b44:	2016      	movs	r0, #22
 8004b46:	f7fb fea3 	bl	8000890 <lcd_wr_xdata>
 8004b4a:	23e8      	movs	r3, #232	; 0xe8
 8004b4c:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004b50:	4b9b      	ldr	r3, [pc, #620]	; (8004dc0 <lcd_init+0x32b8>)
 8004b52:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b56:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004b58:	4b99      	ldr	r3, [pc, #612]	; (8004dc0 <lcd_init+0x32b8>)
 8004b5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b5e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004b60:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	4b97      	ldr	r3, [pc, #604]	; (8004dc4 <lcd_init+0x32bc>)
 8004b68:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004b6a:	4b95      	ldr	r3, [pc, #596]	; (8004dc0 <lcd_init+0x32b8>)
 8004b6c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004b70:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004b72:	4b93      	ldr	r3, [pc, #588]	; (8004dc0 <lcd_init+0x32b8>)
 8004b74:	2280      	movs	r2, #128	; 0x80
 8004b76:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004b78:	4b91      	ldr	r3, [pc, #580]	; (8004dc0 <lcd_init+0x32b8>)
 8004b7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b7e:	611a      	str	r2, [r3, #16]
}
 8004b80:	bf00      	nop

        lcd_wr_regno(0xE8);
        lcd_wr_xdata(0x40);
 8004b82:	2040      	movs	r0, #64	; 0x40
 8004b84:	f7fb fe84 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x8A);
 8004b88:	208a      	movs	r0, #138	; 0x8a
 8004b8a:	f7fb fe81 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004b8e:	2000      	movs	r0, #0
 8004b90:	f7fb fe7e 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004b94:	2000      	movs	r0, #0
 8004b96:	f7fb fe7b 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 8004b9a:	2029      	movs	r0, #41	; 0x29
 8004b9c:	f7fb fe78 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x19);
 8004ba0:	2019      	movs	r0, #25
 8004ba2:	f7fb fe75 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xA5);
 8004ba6:	20a5      	movs	r0, #165	; 0xa5
 8004ba8:	f7fb fe72 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 8004bac:	2033      	movs	r0, #51	; 0x33
 8004bae:	f7fb fe6f 	bl	8000890 <lcd_wr_xdata>
 8004bb2:	23e0      	movs	r3, #224	; 0xe0
 8004bb4:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004bb8:	4b81      	ldr	r3, [pc, #516]	; (8004dc0 <lcd_init+0x32b8>)
 8004bba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004bbe:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004bc0:	4b7f      	ldr	r3, [pc, #508]	; (8004dc0 <lcd_init+0x32b8>)
 8004bc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004bc6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004bc8:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	4b7d      	ldr	r3, [pc, #500]	; (8004dc4 <lcd_init+0x32bc>)
 8004bd0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004bd2:	4b7b      	ldr	r3, [pc, #492]	; (8004dc0 <lcd_init+0x32b8>)
 8004bd4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004bd8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004bda:	4b79      	ldr	r3, [pc, #484]	; (8004dc0 <lcd_init+0x32b8>)
 8004bdc:	2280      	movs	r2, #128	; 0x80
 8004bde:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004be0:	4b77      	ldr	r3, [pc, #476]	; (8004dc0 <lcd_init+0x32b8>)
 8004be2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004be6:	611a      	str	r2, [r3, #16]
}
 8004be8:	bf00      	nop

        lcd_wr_regno(0xE0);
        lcd_wr_xdata(0xF0);
 8004bea:	20f0      	movs	r0, #240	; 0xf0
 8004bec:	f7fb fe50 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x07);
 8004bf0:	2007      	movs	r0, #7
 8004bf2:	f7fb fe4d 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x0D);
 8004bf6:	200d      	movs	r0, #13
 8004bf8:	f7fb fe4a 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x04);
 8004bfc:	2004      	movs	r0, #4
 8004bfe:	f7fb fe47 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x05);
 8004c02:	2005      	movs	r0, #5
 8004c04:	f7fb fe44 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x14);
 8004c08:	2014      	movs	r0, #20
 8004c0a:	f7fb fe41 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 8004c0e:	2036      	movs	r0, #54	; 0x36
 8004c10:	f7fb fe3e 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x54);
 8004c14:	2054      	movs	r0, #84	; 0x54
 8004c16:	f7fb fe3b 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x4C);
 8004c1a:	204c      	movs	r0, #76	; 0x4c
 8004c1c:	f7fb fe38 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x38);
 8004c20:	2038      	movs	r0, #56	; 0x38
 8004c22:	f7fb fe35 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x13);
 8004c26:	2013      	movs	r0, #19
 8004c28:	f7fb fe32 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x14);
 8004c2c:	2014      	movs	r0, #20
 8004c2e:	f7fb fe2f 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x2E);
 8004c32:	202e      	movs	r0, #46	; 0x2e
 8004c34:	f7fb fe2c 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x34);
 8004c38:	2034      	movs	r0, #52	; 0x34
 8004c3a:	f7fb fe29 	bl	8000890 <lcd_wr_xdata>
 8004c3e:	23e1      	movs	r3, #225	; 0xe1
 8004c40:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004c44:	4b5e      	ldr	r3, [pc, #376]	; (8004dc0 <lcd_init+0x32b8>)
 8004c46:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004c4a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004c4c:	4b5c      	ldr	r3, [pc, #368]	; (8004dc0 <lcd_init+0x32b8>)
 8004c4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c52:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004c54:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	4b5a      	ldr	r3, [pc, #360]	; (8004dc4 <lcd_init+0x32bc>)
 8004c5c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004c5e:	4b58      	ldr	r3, [pc, #352]	; (8004dc0 <lcd_init+0x32b8>)
 8004c60:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004c64:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004c66:	4b56      	ldr	r3, [pc, #344]	; (8004dc0 <lcd_init+0x32b8>)
 8004c68:	2280      	movs	r2, #128	; 0x80
 8004c6a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004c6c:	4b54      	ldr	r3, [pc, #336]	; (8004dc0 <lcd_init+0x32b8>)
 8004c6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c72:	611a      	str	r2, [r3, #16]
}
 8004c74:	bf00      	nop

        lcd_wr_regno(0xE1);
        lcd_wr_xdata(0xF0);
 8004c76:	20f0      	movs	r0, #240	; 0xf0
 8004c78:	f7fb fe0a 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 8004c7c:	2010      	movs	r0, #16
 8004c7e:	f7fb fe07 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x14);
 8004c82:	2014      	movs	r0, #20
 8004c84:	f7fb fe04 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);
 8004c88:	200e      	movs	r0, #14
 8004c8a:	f7fb fe01 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x0C);
 8004c8e:	200c      	movs	r0, #12
 8004c90:	f7fb fdfe 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x08);
 8004c94:	2008      	movs	r0, #8
 8004c96:	f7fb fdfb 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x35);
 8004c9a:	2035      	movs	r0, #53	; 0x35
 8004c9c:	f7fb fdf8 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8004ca0:	2044      	movs	r0, #68	; 0x44
 8004ca2:	f7fb fdf5 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x4C);
 8004ca6:	204c      	movs	r0, #76	; 0x4c
 8004ca8:	f7fb fdf2 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x26);
 8004cac:	2026      	movs	r0, #38	; 0x26
 8004cae:	f7fb fdef 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 8004cb2:	2010      	movs	r0, #16
 8004cb4:	f7fb fdec 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x12);
 8004cb8:	2012      	movs	r0, #18
 8004cba:	f7fb fde9 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x2C);
 8004cbe:	202c      	movs	r0, #44	; 0x2c
 8004cc0:	f7fb fde6 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x32);
 8004cc4:	2032      	movs	r0, #50	; 0x32
 8004cc6:	f7fb fde3 	bl	8000890 <lcd_wr_xdata>
 8004cca:	23f0      	movs	r3, #240	; 0xf0
 8004ccc:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004cd0:	4b3b      	ldr	r3, [pc, #236]	; (8004dc0 <lcd_init+0x32b8>)
 8004cd2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004cd6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004cd8:	4b39      	ldr	r3, [pc, #228]	; (8004dc0 <lcd_init+0x32b8>)
 8004cda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004cde:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004ce0:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	4b37      	ldr	r3, [pc, #220]	; (8004dc4 <lcd_init+0x32bc>)
 8004ce8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004cea:	4b35      	ldr	r3, [pc, #212]	; (8004dc0 <lcd_init+0x32b8>)
 8004cec:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004cf0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004cf2:	4b33      	ldr	r3, [pc, #204]	; (8004dc0 <lcd_init+0x32b8>)
 8004cf4:	2280      	movs	r2, #128	; 0x80
 8004cf6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004cf8:	4b31      	ldr	r3, [pc, #196]	; (8004dc0 <lcd_init+0x32b8>)
 8004cfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cfe:	611a      	str	r2, [r3, #16]
}
 8004d00:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0x3C);
 8004d02:	203c      	movs	r0, #60	; 0x3c
 8004d04:	f7fb fdc4 	bl	8000890 <lcd_wr_xdata>
 8004d08:	23f0      	movs	r3, #240	; 0xf0
 8004d0a:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004d0e:	4b2c      	ldr	r3, [pc, #176]	; (8004dc0 <lcd_init+0x32b8>)
 8004d10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d14:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004d16:	4b2a      	ldr	r3, [pc, #168]	; (8004dc0 <lcd_init+0x32b8>)
 8004d18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d1c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004d1e:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	4b27      	ldr	r3, [pc, #156]	; (8004dc4 <lcd_init+0x32bc>)
 8004d26:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004d28:	4b25      	ldr	r3, [pc, #148]	; (8004dc0 <lcd_init+0x32b8>)
 8004d2a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004d2e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004d30:	4b23      	ldr	r3, [pc, #140]	; (8004dc0 <lcd_init+0x32b8>)
 8004d32:	2280      	movs	r2, #128	; 0x80
 8004d34:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004d36:	4b22      	ldr	r3, [pc, #136]	; (8004dc0 <lcd_init+0x32b8>)
 8004d38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d3c:	611a      	str	r2, [r3, #16]
}
 8004d3e:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0x69);
 8004d40:	2069      	movs	r0, #105	; 0x69
 8004d42:	f7fb fda5 	bl	8000890 <lcd_wr_xdata>

        HAL_Delay(120);
 8004d46:	2078      	movs	r0, #120	; 0x78
 8004d48:	f002 fc2a 	bl	80075a0 <HAL_Delay>
 8004d4c:	2321      	movs	r3, #33	; 0x21
 8004d4e:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004d52:	4b1b      	ldr	r3, [pc, #108]	; (8004dc0 <lcd_init+0x32b8>)
 8004d54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d58:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004d5a:	4b19      	ldr	r3, [pc, #100]	; (8004dc0 <lcd_init+0x32b8>)
 8004d5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d60:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004d62:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	4b16      	ldr	r3, [pc, #88]	; (8004dc4 <lcd_init+0x32bc>)
 8004d6a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004d6c:	4b14      	ldr	r3, [pc, #80]	; (8004dc0 <lcd_init+0x32b8>)
 8004d6e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004d72:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004d74:	4b12      	ldr	r3, [pc, #72]	; (8004dc0 <lcd_init+0x32b8>)
 8004d76:	2280      	movs	r2, #128	; 0x80
 8004d78:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004d7a:	4b11      	ldr	r3, [pc, #68]	; (8004dc0 <lcd_init+0x32b8>)
 8004d7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d80:	611a      	str	r2, [r3, #16]
}
 8004d82:	bf00      	nop
 8004d84:	2329      	movs	r3, #41	; 0x29
 8004d86:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004d8a:	4b0d      	ldr	r3, [pc, #52]	; (8004dc0 <lcd_init+0x32b8>)
 8004d8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d90:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004d92:	4b0b      	ldr	r3, [pc, #44]	; (8004dc0 <lcd_init+0x32b8>)
 8004d94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d98:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004d9a:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	4b08      	ldr	r3, [pc, #32]	; (8004dc4 <lcd_init+0x32bc>)
 8004da2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004da4:	4b06      	ldr	r3, [pc, #24]	; (8004dc0 <lcd_init+0x32b8>)
 8004da6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004daa:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004dac:	4b04      	ldr	r3, [pc, #16]	; (8004dc0 <lcd_init+0x32b8>)
 8004dae:	2280      	movs	r2, #128	; 0x80
 8004db0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004db2:	4b03      	ldr	r3, [pc, #12]	; (8004dc0 <lcd_init+0x32b8>)
 8004db4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004db8:	611a      	str	r2, [r3, #16]
}
 8004dba:	f001 bdee 	b.w	800699a <lcd_init+0x4e92>
 8004dbe:	bf00      	nop
 8004dc0:	40011000 	.word	0x40011000
 8004dc4:	40010c00 	.word	0x40010c00

        lcd_wr_regno(0x21);
        lcd_wr_regno(0x29);
    }
    else if (lcddev.id == 0x5510)
 8004dc8:	4b03      	ldr	r3, [pc, #12]	; (8004dd8 <lcd_init+0x32d0>)
 8004dca:	889b      	ldrh	r3, [r3, #4]
 8004dcc:	f245 5210 	movw	r2, #21776	; 0x5510
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	f040 87b3 	bne.w	8005d3c <lcd_init+0x4234>
 8004dd6:	e001      	b.n	8004ddc <lcd_init+0x32d4>
 8004dd8:	2000007c 	.word	0x2000007c
    {
        //lcd_ex_nt35510_reginit();   /* ִ��NT35510��ʼ�� */

        lcd_write_reg(0xF000, 0x55);
 8004ddc:	2155      	movs	r1, #85	; 0x55
 8004dde:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8004de2:	f7fb fd79 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xF001, 0xAA);
 8004de6:	21aa      	movs	r1, #170	; 0xaa
 8004de8:	f24f 0001 	movw	r0, #61441	; 0xf001
 8004dec:	f7fb fd74 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xF002, 0x52);
 8004df0:	2152      	movs	r1, #82	; 0x52
 8004df2:	f24f 0002 	movw	r0, #61442	; 0xf002
 8004df6:	f7fb fd6f 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xF003, 0x08);
 8004dfa:	2108      	movs	r1, #8
 8004dfc:	f24f 0003 	movw	r0, #61443	; 0xf003
 8004e00:	f7fb fd6a 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xF004, 0x01);
 8004e04:	2101      	movs	r1, #1
 8004e06:	f24f 0004 	movw	r0, #61444	; 0xf004
 8004e0a:	f7fb fd65 	bl	80008d8 <lcd_write_reg>
        /* AVDD Set AVDD 5.2V */
        lcd_write_reg(0xB000, 0x0D);
 8004e0e:	210d      	movs	r1, #13
 8004e10:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8004e14:	f7fb fd60 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xB001, 0x0D);
 8004e18:	210d      	movs	r1, #13
 8004e1a:	f24b 0001 	movw	r0, #45057	; 0xb001
 8004e1e:	f7fb fd5b 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xB002, 0x0D);
 8004e22:	210d      	movs	r1, #13
 8004e24:	f24b 0002 	movw	r0, #45058	; 0xb002
 8004e28:	f7fb fd56 	bl	80008d8 <lcd_write_reg>
        /* AVDD ratio */
        lcd_write_reg(0xB600, 0x34);
 8004e2c:	2134      	movs	r1, #52	; 0x34
 8004e2e:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8004e32:	f7fb fd51 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xB601, 0x34);
 8004e36:	2134      	movs	r1, #52	; 0x34
 8004e38:	f24b 6001 	movw	r0, #46593	; 0xb601
 8004e3c:	f7fb fd4c 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xB602, 0x34);
 8004e40:	2134      	movs	r1, #52	; 0x34
 8004e42:	f24b 6002 	movw	r0, #46594	; 0xb602
 8004e46:	f7fb fd47 	bl	80008d8 <lcd_write_reg>
        /* AVEE -5.2V */
        lcd_write_reg(0xB100, 0x0D);
 8004e4a:	210d      	movs	r1, #13
 8004e4c:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8004e50:	f7fb fd42 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xB101, 0x0D);
 8004e54:	210d      	movs	r1, #13
 8004e56:	f24b 1001 	movw	r0, #45313	; 0xb101
 8004e5a:	f7fb fd3d 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xB102, 0x0D);
 8004e5e:	210d      	movs	r1, #13
 8004e60:	f24b 1002 	movw	r0, #45314	; 0xb102
 8004e64:	f7fb fd38 	bl	80008d8 <lcd_write_reg>
        /* AVEE ratio */
        lcd_write_reg(0xB700, 0x34);
 8004e68:	2134      	movs	r1, #52	; 0x34
 8004e6a:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8004e6e:	f7fb fd33 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xB701, 0x34);
 8004e72:	2134      	movs	r1, #52	; 0x34
 8004e74:	f24b 7001 	movw	r0, #46849	; 0xb701
 8004e78:	f7fb fd2e 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xB702, 0x34);
 8004e7c:	2134      	movs	r1, #52	; 0x34
 8004e7e:	f24b 7002 	movw	r0, #46850	; 0xb702
 8004e82:	f7fb fd29 	bl	80008d8 <lcd_write_reg>
        /* VCL -2.5V */
        lcd_write_reg(0xB200, 0x00);
 8004e86:	2100      	movs	r1, #0
 8004e88:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8004e8c:	f7fb fd24 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xB201, 0x00);
 8004e90:	2100      	movs	r1, #0
 8004e92:	f24b 2001 	movw	r0, #45569	; 0xb201
 8004e96:	f7fb fd1f 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xB202, 0x00);
 8004e9a:	2100      	movs	r1, #0
 8004e9c:	f24b 2002 	movw	r0, #45570	; 0xb202
 8004ea0:	f7fb fd1a 	bl	80008d8 <lcd_write_reg>
        /* VCL ratio */
        lcd_write_reg(0xB800, 0x24);
 8004ea4:	2124      	movs	r1, #36	; 0x24
 8004ea6:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8004eaa:	f7fb fd15 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xB801, 0x24);
 8004eae:	2124      	movs	r1, #36	; 0x24
 8004eb0:	f64b 0001 	movw	r0, #47105	; 0xb801
 8004eb4:	f7fb fd10 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xB802, 0x24);
 8004eb8:	2124      	movs	r1, #36	; 0x24
 8004eba:	f64b 0002 	movw	r0, #47106	; 0xb802
 8004ebe:	f7fb fd0b 	bl	80008d8 <lcd_write_reg>
        /* VGH 15V (Free pump) */
        lcd_write_reg(0xBF00, 0x01);
 8004ec2:	2101      	movs	r1, #1
 8004ec4:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8004ec8:	f7fb fd06 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xB300, 0x0F);
 8004ecc:	210f      	movs	r1, #15
 8004ece:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 8004ed2:	f7fb fd01 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xB301, 0x0F);
 8004ed6:	210f      	movs	r1, #15
 8004ed8:	f24b 3001 	movw	r0, #45825	; 0xb301
 8004edc:	f7fb fcfc 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xB302, 0x0F);
 8004ee0:	210f      	movs	r1, #15
 8004ee2:	f24b 3002 	movw	r0, #45826	; 0xb302
 8004ee6:	f7fb fcf7 	bl	80008d8 <lcd_write_reg>
        /* VGH ratio */
        lcd_write_reg(0xB900, 0x34);
 8004eea:	2134      	movs	r1, #52	; 0x34
 8004eec:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 8004ef0:	f7fb fcf2 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xB901, 0x34);
 8004ef4:	2134      	movs	r1, #52	; 0x34
 8004ef6:	f64b 1001 	movw	r0, #47361	; 0xb901
 8004efa:	f7fb fced 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xB902, 0x34);
 8004efe:	2134      	movs	r1, #52	; 0x34
 8004f00:	f64b 1002 	movw	r0, #47362	; 0xb902
 8004f04:	f7fb fce8 	bl	80008d8 <lcd_write_reg>
        /* VGL_REG -10V */
        lcd_write_reg(0xB500, 0x08);
 8004f08:	2108      	movs	r1, #8
 8004f0a:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8004f0e:	f7fb fce3 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xB501, 0x08);
 8004f12:	2108      	movs	r1, #8
 8004f14:	f24b 5001 	movw	r0, #46337	; 0xb501
 8004f18:	f7fb fcde 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xB502, 0x08);
 8004f1c:	2108      	movs	r1, #8
 8004f1e:	f24b 5002 	movw	r0, #46338	; 0xb502
 8004f22:	f7fb fcd9 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xC200, 0x03);
 8004f26:	2103      	movs	r1, #3
 8004f28:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8004f2c:	f7fb fcd4 	bl	80008d8 <lcd_write_reg>
        /* VGLX ratio */
        lcd_write_reg(0xBA00, 0x24);
 8004f30:	2124      	movs	r1, #36	; 0x24
 8004f32:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 8004f36:	f7fb fccf 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xBA01, 0x24);
 8004f3a:	2124      	movs	r1, #36	; 0x24
 8004f3c:	f64b 2001 	movw	r0, #47617	; 0xba01
 8004f40:	f7fb fcca 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xBA02, 0x24);
 8004f44:	2124      	movs	r1, #36	; 0x24
 8004f46:	f64b 2002 	movw	r0, #47618	; 0xba02
 8004f4a:	f7fb fcc5 	bl	80008d8 <lcd_write_reg>
        /* VGMP/VGSP 4.5V/0V */
        lcd_write_reg(0xBC00, 0x00);
 8004f4e:	2100      	movs	r1, #0
 8004f50:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8004f54:	f7fb fcc0 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xBC01, 0x78);
 8004f58:	2178      	movs	r1, #120	; 0x78
 8004f5a:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8004f5e:	f7fb fcbb 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xBC02, 0x00);
 8004f62:	2100      	movs	r1, #0
 8004f64:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8004f68:	f7fb fcb6 	bl	80008d8 <lcd_write_reg>
        /* VGMN/VGSN -4.5V/0V */
        lcd_write_reg(0xBD00, 0x00);
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 8004f72:	f7fb fcb1 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xBD01, 0x78);
 8004f76:	2178      	movs	r1, #120	; 0x78
 8004f78:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8004f7c:	f7fb fcac 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xBD02, 0x00);
 8004f80:	2100      	movs	r1, #0
 8004f82:	f64b 5002 	movw	r0, #48386	; 0xbd02
 8004f86:	f7fb fca7 	bl	80008d8 <lcd_write_reg>
        /* VCOM */
        lcd_write_reg(0xBE00, 0x00);
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 8004f90:	f7fb fca2 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xBE01, 0x64);
 8004f94:	2164      	movs	r1, #100	; 0x64
 8004f96:	f64b 6001 	movw	r0, #48641	; 0xbe01
 8004f9a:	f7fb fc9d 	bl	80008d8 <lcd_write_reg>
        /* Gamma Setting */
        lcd_write_reg(0xD100, 0x00);
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8004fa4:	f7fb fc98 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD101, 0x33);
 8004fa8:	2133      	movs	r1, #51	; 0x33
 8004faa:	f24d 1001 	movw	r0, #53505	; 0xd101
 8004fae:	f7fb fc93 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD102, 0x00);
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	f24d 1002 	movw	r0, #53506	; 0xd102
 8004fb8:	f7fb fc8e 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD103, 0x34);
 8004fbc:	2134      	movs	r1, #52	; 0x34
 8004fbe:	f24d 1003 	movw	r0, #53507	; 0xd103
 8004fc2:	f7fb fc89 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD104, 0x00);
 8004fc6:	2100      	movs	r1, #0
 8004fc8:	f24d 1004 	movw	r0, #53508	; 0xd104
 8004fcc:	f7fb fc84 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD105, 0x3A);
 8004fd0:	213a      	movs	r1, #58	; 0x3a
 8004fd2:	f24d 1005 	movw	r0, #53509	; 0xd105
 8004fd6:	f7fb fc7f 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD106, 0x00);
 8004fda:	2100      	movs	r1, #0
 8004fdc:	f24d 1006 	movw	r0, #53510	; 0xd106
 8004fe0:	f7fb fc7a 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD107, 0x4A);
 8004fe4:	214a      	movs	r1, #74	; 0x4a
 8004fe6:	f24d 1007 	movw	r0, #53511	; 0xd107
 8004fea:	f7fb fc75 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD108, 0x00);
 8004fee:	2100      	movs	r1, #0
 8004ff0:	f24d 1008 	movw	r0, #53512	; 0xd108
 8004ff4:	f7fb fc70 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD109, 0x5C);
 8004ff8:	215c      	movs	r1, #92	; 0x5c
 8004ffa:	f24d 1009 	movw	r0, #53513	; 0xd109
 8004ffe:	f7fb fc6b 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD10A, 0x00);
 8005002:	2100      	movs	r1, #0
 8005004:	f24d 100a 	movw	r0, #53514	; 0xd10a
 8005008:	f7fb fc66 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD10B, 0x81);
 800500c:	2181      	movs	r1, #129	; 0x81
 800500e:	f24d 100b 	movw	r0, #53515	; 0xd10b
 8005012:	f7fb fc61 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD10C, 0x00);
 8005016:	2100      	movs	r1, #0
 8005018:	f24d 100c 	movw	r0, #53516	; 0xd10c
 800501c:	f7fb fc5c 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD10D, 0xA6);
 8005020:	21a6      	movs	r1, #166	; 0xa6
 8005022:	f24d 100d 	movw	r0, #53517	; 0xd10d
 8005026:	f7fb fc57 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD10E, 0x00);
 800502a:	2100      	movs	r1, #0
 800502c:	f24d 100e 	movw	r0, #53518	; 0xd10e
 8005030:	f7fb fc52 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD10F, 0xE5);
 8005034:	21e5      	movs	r1, #229	; 0xe5
 8005036:	f24d 100f 	movw	r0, #53519	; 0xd10f
 800503a:	f7fb fc4d 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD110, 0x01);
 800503e:	2101      	movs	r1, #1
 8005040:	f24d 1010 	movw	r0, #53520	; 0xd110
 8005044:	f7fb fc48 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD111, 0x13);
 8005048:	2113      	movs	r1, #19
 800504a:	f24d 1011 	movw	r0, #53521	; 0xd111
 800504e:	f7fb fc43 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD112, 0x01);
 8005052:	2101      	movs	r1, #1
 8005054:	f24d 1012 	movw	r0, #53522	; 0xd112
 8005058:	f7fb fc3e 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD113, 0x54);
 800505c:	2154      	movs	r1, #84	; 0x54
 800505e:	f24d 1013 	movw	r0, #53523	; 0xd113
 8005062:	f7fb fc39 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD114, 0x01);
 8005066:	2101      	movs	r1, #1
 8005068:	f24d 1014 	movw	r0, #53524	; 0xd114
 800506c:	f7fb fc34 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD115, 0x82);
 8005070:	2182      	movs	r1, #130	; 0x82
 8005072:	f24d 1015 	movw	r0, #53525	; 0xd115
 8005076:	f7fb fc2f 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD116, 0x01);
 800507a:	2101      	movs	r1, #1
 800507c:	f24d 1016 	movw	r0, #53526	; 0xd116
 8005080:	f7fb fc2a 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD117, 0xCA);
 8005084:	21ca      	movs	r1, #202	; 0xca
 8005086:	f24d 1017 	movw	r0, #53527	; 0xd117
 800508a:	f7fb fc25 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD118, 0x02);
 800508e:	2102      	movs	r1, #2
 8005090:	f24d 1018 	movw	r0, #53528	; 0xd118
 8005094:	f7fb fc20 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD119, 0x00);
 8005098:	2100      	movs	r1, #0
 800509a:	f24d 1019 	movw	r0, #53529	; 0xd119
 800509e:	f7fb fc1b 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD11A, 0x02);
 80050a2:	2102      	movs	r1, #2
 80050a4:	f24d 101a 	movw	r0, #53530	; 0xd11a
 80050a8:	f7fb fc16 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD11B, 0x01);
 80050ac:	2101      	movs	r1, #1
 80050ae:	f24d 101b 	movw	r0, #53531	; 0xd11b
 80050b2:	f7fb fc11 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD11C, 0x02);
 80050b6:	2102      	movs	r1, #2
 80050b8:	f24d 101c 	movw	r0, #53532	; 0xd11c
 80050bc:	f7fb fc0c 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD11D, 0x34);
 80050c0:	2134      	movs	r1, #52	; 0x34
 80050c2:	f24d 101d 	movw	r0, #53533	; 0xd11d
 80050c6:	f7fb fc07 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD11E, 0x02);
 80050ca:	2102      	movs	r1, #2
 80050cc:	f24d 101e 	movw	r0, #53534	; 0xd11e
 80050d0:	f7fb fc02 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD11F, 0x67);
 80050d4:	2167      	movs	r1, #103	; 0x67
 80050d6:	f24d 101f 	movw	r0, #53535	; 0xd11f
 80050da:	f7fb fbfd 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD120, 0x02);
 80050de:	2102      	movs	r1, #2
 80050e0:	f24d 1020 	movw	r0, #53536	; 0xd120
 80050e4:	f7fb fbf8 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD121, 0x84);
 80050e8:	2184      	movs	r1, #132	; 0x84
 80050ea:	f24d 1021 	movw	r0, #53537	; 0xd121
 80050ee:	f7fb fbf3 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD122, 0x02);
 80050f2:	2102      	movs	r1, #2
 80050f4:	f24d 1022 	movw	r0, #53538	; 0xd122
 80050f8:	f7fb fbee 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD123, 0xA4);
 80050fc:	21a4      	movs	r1, #164	; 0xa4
 80050fe:	f24d 1023 	movw	r0, #53539	; 0xd123
 8005102:	f7fb fbe9 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD124, 0x02);
 8005106:	2102      	movs	r1, #2
 8005108:	f24d 1024 	movw	r0, #53540	; 0xd124
 800510c:	f7fb fbe4 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD125, 0xB7);
 8005110:	21b7      	movs	r1, #183	; 0xb7
 8005112:	f24d 1025 	movw	r0, #53541	; 0xd125
 8005116:	f7fb fbdf 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD126, 0x02);
 800511a:	2102      	movs	r1, #2
 800511c:	f24d 1026 	movw	r0, #53542	; 0xd126
 8005120:	f7fb fbda 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD127, 0xCF);
 8005124:	21cf      	movs	r1, #207	; 0xcf
 8005126:	f24d 1027 	movw	r0, #53543	; 0xd127
 800512a:	f7fb fbd5 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD128, 0x02);
 800512e:	2102      	movs	r1, #2
 8005130:	f24d 1028 	movw	r0, #53544	; 0xd128
 8005134:	f7fb fbd0 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD129, 0xDE);
 8005138:	21de      	movs	r1, #222	; 0xde
 800513a:	f24d 1029 	movw	r0, #53545	; 0xd129
 800513e:	f7fb fbcb 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD12A, 0x02);
 8005142:	2102      	movs	r1, #2
 8005144:	f24d 102a 	movw	r0, #53546	; 0xd12a
 8005148:	f7fb fbc6 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD12B, 0xF2);
 800514c:	21f2      	movs	r1, #242	; 0xf2
 800514e:	f24d 102b 	movw	r0, #53547	; 0xd12b
 8005152:	f7fb fbc1 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD12C, 0x02);
 8005156:	2102      	movs	r1, #2
 8005158:	f24d 102c 	movw	r0, #53548	; 0xd12c
 800515c:	f7fb fbbc 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD12D, 0xFE);
 8005160:	21fe      	movs	r1, #254	; 0xfe
 8005162:	f24d 102d 	movw	r0, #53549	; 0xd12d
 8005166:	f7fb fbb7 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD12E, 0x03);
 800516a:	2103      	movs	r1, #3
 800516c:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8005170:	f7fb fbb2 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD12F, 0x10);
 8005174:	2110      	movs	r1, #16
 8005176:	f24d 102f 	movw	r0, #53551	; 0xd12f
 800517a:	f7fb fbad 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD130, 0x03);
 800517e:	2103      	movs	r1, #3
 8005180:	f24d 1030 	movw	r0, #53552	; 0xd130
 8005184:	f7fb fba8 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD131, 0x33);
 8005188:	2133      	movs	r1, #51	; 0x33
 800518a:	f24d 1031 	movw	r0, #53553	; 0xd131
 800518e:	f7fb fba3 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD132, 0x03);
 8005192:	2103      	movs	r1, #3
 8005194:	f24d 1032 	movw	r0, #53554	; 0xd132
 8005198:	f7fb fb9e 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD133, 0x6D);
 800519c:	216d      	movs	r1, #109	; 0x6d
 800519e:	f24d 1033 	movw	r0, #53555	; 0xd133
 80051a2:	f7fb fb99 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD200, 0x00);
 80051a6:	2100      	movs	r1, #0
 80051a8:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 80051ac:	f7fb fb94 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD201, 0x33);
 80051b0:	2133      	movs	r1, #51	; 0x33
 80051b2:	f24d 2001 	movw	r0, #53761	; 0xd201
 80051b6:	f7fb fb8f 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD202, 0x00);
 80051ba:	2100      	movs	r1, #0
 80051bc:	f24d 2002 	movw	r0, #53762	; 0xd202
 80051c0:	f7fb fb8a 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD203, 0x34);
 80051c4:	2134      	movs	r1, #52	; 0x34
 80051c6:	f24d 2003 	movw	r0, #53763	; 0xd203
 80051ca:	f7fb fb85 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD204, 0x00);
 80051ce:	2100      	movs	r1, #0
 80051d0:	f24d 2004 	movw	r0, #53764	; 0xd204
 80051d4:	f7fb fb80 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD205, 0x3A);
 80051d8:	213a      	movs	r1, #58	; 0x3a
 80051da:	f24d 2005 	movw	r0, #53765	; 0xd205
 80051de:	f7fb fb7b 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD206, 0x00);
 80051e2:	2100      	movs	r1, #0
 80051e4:	f24d 2006 	movw	r0, #53766	; 0xd206
 80051e8:	f7fb fb76 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD207, 0x4A);
 80051ec:	214a      	movs	r1, #74	; 0x4a
 80051ee:	f24d 2007 	movw	r0, #53767	; 0xd207
 80051f2:	f7fb fb71 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD208, 0x00);
 80051f6:	2100      	movs	r1, #0
 80051f8:	f24d 2008 	movw	r0, #53768	; 0xd208
 80051fc:	f7fb fb6c 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD209, 0x5C);
 8005200:	215c      	movs	r1, #92	; 0x5c
 8005202:	f24d 2009 	movw	r0, #53769	; 0xd209
 8005206:	f7fb fb67 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD20A, 0x00);
 800520a:	2100      	movs	r1, #0
 800520c:	f24d 200a 	movw	r0, #53770	; 0xd20a
 8005210:	f7fb fb62 	bl	80008d8 <lcd_write_reg>

        lcd_write_reg(0xD20B, 0x81);
 8005214:	2181      	movs	r1, #129	; 0x81
 8005216:	f24d 200b 	movw	r0, #53771	; 0xd20b
 800521a:	f7fb fb5d 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD20C, 0x00);
 800521e:	2100      	movs	r1, #0
 8005220:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8005224:	f7fb fb58 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD20D, 0xA6);
 8005228:	21a6      	movs	r1, #166	; 0xa6
 800522a:	f24d 200d 	movw	r0, #53773	; 0xd20d
 800522e:	f7fb fb53 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD20E, 0x00);
 8005232:	2100      	movs	r1, #0
 8005234:	f24d 200e 	movw	r0, #53774	; 0xd20e
 8005238:	f7fb fb4e 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD20F, 0xE5);
 800523c:	21e5      	movs	r1, #229	; 0xe5
 800523e:	f24d 200f 	movw	r0, #53775	; 0xd20f
 8005242:	f7fb fb49 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD210, 0x01);
 8005246:	2101      	movs	r1, #1
 8005248:	f24d 2010 	movw	r0, #53776	; 0xd210
 800524c:	f7fb fb44 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD211, 0x13);
 8005250:	2113      	movs	r1, #19
 8005252:	f24d 2011 	movw	r0, #53777	; 0xd211
 8005256:	f7fb fb3f 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD212, 0x01);
 800525a:	2101      	movs	r1, #1
 800525c:	f24d 2012 	movw	r0, #53778	; 0xd212
 8005260:	f7fb fb3a 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD213, 0x54);
 8005264:	2154      	movs	r1, #84	; 0x54
 8005266:	f24d 2013 	movw	r0, #53779	; 0xd213
 800526a:	f7fb fb35 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD214, 0x01);
 800526e:	2101      	movs	r1, #1
 8005270:	f24d 2014 	movw	r0, #53780	; 0xd214
 8005274:	f7fb fb30 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD215, 0x82);
 8005278:	2182      	movs	r1, #130	; 0x82
 800527a:	f24d 2015 	movw	r0, #53781	; 0xd215
 800527e:	f7fb fb2b 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD216, 0x01);
 8005282:	2101      	movs	r1, #1
 8005284:	f24d 2016 	movw	r0, #53782	; 0xd216
 8005288:	f7fb fb26 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD217, 0xCA);
 800528c:	21ca      	movs	r1, #202	; 0xca
 800528e:	f24d 2017 	movw	r0, #53783	; 0xd217
 8005292:	f7fb fb21 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD218, 0x02);
 8005296:	2102      	movs	r1, #2
 8005298:	f24d 2018 	movw	r0, #53784	; 0xd218
 800529c:	f7fb fb1c 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD219, 0x00);
 80052a0:	2100      	movs	r1, #0
 80052a2:	f24d 2019 	movw	r0, #53785	; 0xd219
 80052a6:	f7fb fb17 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD21A, 0x02);
 80052aa:	2102      	movs	r1, #2
 80052ac:	f24d 201a 	movw	r0, #53786	; 0xd21a
 80052b0:	f7fb fb12 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD21B, 0x01);
 80052b4:	2101      	movs	r1, #1
 80052b6:	f24d 201b 	movw	r0, #53787	; 0xd21b
 80052ba:	f7fb fb0d 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD21C, 0x02);
 80052be:	2102      	movs	r1, #2
 80052c0:	f24d 201c 	movw	r0, #53788	; 0xd21c
 80052c4:	f7fb fb08 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD21D, 0x34);
 80052c8:	2134      	movs	r1, #52	; 0x34
 80052ca:	f24d 201d 	movw	r0, #53789	; 0xd21d
 80052ce:	f7fb fb03 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD21E, 0x02);
 80052d2:	2102      	movs	r1, #2
 80052d4:	f24d 201e 	movw	r0, #53790	; 0xd21e
 80052d8:	f7fb fafe 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD21F, 0x67);
 80052dc:	2167      	movs	r1, #103	; 0x67
 80052de:	f24d 201f 	movw	r0, #53791	; 0xd21f
 80052e2:	f7fb faf9 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD220, 0x02);
 80052e6:	2102      	movs	r1, #2
 80052e8:	f24d 2020 	movw	r0, #53792	; 0xd220
 80052ec:	f7fb faf4 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD221, 0x84);
 80052f0:	2184      	movs	r1, #132	; 0x84
 80052f2:	f24d 2021 	movw	r0, #53793	; 0xd221
 80052f6:	f7fb faef 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD222, 0x02);
 80052fa:	2102      	movs	r1, #2
 80052fc:	f24d 2022 	movw	r0, #53794	; 0xd222
 8005300:	f7fb faea 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD223, 0xA4);
 8005304:	21a4      	movs	r1, #164	; 0xa4
 8005306:	f24d 2023 	movw	r0, #53795	; 0xd223
 800530a:	f7fb fae5 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD224, 0x02);
 800530e:	2102      	movs	r1, #2
 8005310:	f24d 2024 	movw	r0, #53796	; 0xd224
 8005314:	f7fb fae0 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD225, 0xB7);
 8005318:	21b7      	movs	r1, #183	; 0xb7
 800531a:	f24d 2025 	movw	r0, #53797	; 0xd225
 800531e:	f7fb fadb 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD226, 0x02);
 8005322:	2102      	movs	r1, #2
 8005324:	f24d 2026 	movw	r0, #53798	; 0xd226
 8005328:	f7fb fad6 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD227, 0xCF);
 800532c:	21cf      	movs	r1, #207	; 0xcf
 800532e:	f24d 2027 	movw	r0, #53799	; 0xd227
 8005332:	f7fb fad1 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD228, 0x02);
 8005336:	2102      	movs	r1, #2
 8005338:	f24d 2028 	movw	r0, #53800	; 0xd228
 800533c:	f7fb facc 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD229, 0xDE);
 8005340:	21de      	movs	r1, #222	; 0xde
 8005342:	f24d 2029 	movw	r0, #53801	; 0xd229
 8005346:	f7fb fac7 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD22A, 0x02);
 800534a:	2102      	movs	r1, #2
 800534c:	f24d 202a 	movw	r0, #53802	; 0xd22a
 8005350:	f7fb fac2 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD22B, 0xF2);
 8005354:	21f2      	movs	r1, #242	; 0xf2
 8005356:	f24d 202b 	movw	r0, #53803	; 0xd22b
 800535a:	f7fb fabd 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD22C, 0x02);
 800535e:	2102      	movs	r1, #2
 8005360:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8005364:	f7fb fab8 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD22D, 0xFE);
 8005368:	21fe      	movs	r1, #254	; 0xfe
 800536a:	f24d 202d 	movw	r0, #53805	; 0xd22d
 800536e:	f7fb fab3 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD22E, 0x03);
 8005372:	2103      	movs	r1, #3
 8005374:	f24d 202e 	movw	r0, #53806	; 0xd22e
 8005378:	f7fb faae 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD22F, 0x10);
 800537c:	2110      	movs	r1, #16
 800537e:	f24d 202f 	movw	r0, #53807	; 0xd22f
 8005382:	f7fb faa9 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD230, 0x03);
 8005386:	2103      	movs	r1, #3
 8005388:	f24d 2030 	movw	r0, #53808	; 0xd230
 800538c:	f7fb faa4 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD231, 0x33);
 8005390:	2133      	movs	r1, #51	; 0x33
 8005392:	f24d 2031 	movw	r0, #53809	; 0xd231
 8005396:	f7fb fa9f 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD232, 0x03);
 800539a:	2103      	movs	r1, #3
 800539c:	f24d 2032 	movw	r0, #53810	; 0xd232
 80053a0:	f7fb fa9a 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD233, 0x6D);
 80053a4:	216d      	movs	r1, #109	; 0x6d
 80053a6:	f24d 2033 	movw	r0, #53811	; 0xd233
 80053aa:	f7fb fa95 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD300, 0x00);
 80053ae:	2100      	movs	r1, #0
 80053b0:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 80053b4:	f7fb fa90 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD301, 0x33);
 80053b8:	2133      	movs	r1, #51	; 0x33
 80053ba:	f24d 3001 	movw	r0, #54017	; 0xd301
 80053be:	f7fb fa8b 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD302, 0x00);
 80053c2:	2100      	movs	r1, #0
 80053c4:	f24d 3002 	movw	r0, #54018	; 0xd302
 80053c8:	f7fb fa86 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD303, 0x34);
 80053cc:	2134      	movs	r1, #52	; 0x34
 80053ce:	f24d 3003 	movw	r0, #54019	; 0xd303
 80053d2:	f7fb fa81 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD304, 0x00);
 80053d6:	2100      	movs	r1, #0
 80053d8:	f24d 3004 	movw	r0, #54020	; 0xd304
 80053dc:	f7fb fa7c 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD305, 0x3A);
 80053e0:	213a      	movs	r1, #58	; 0x3a
 80053e2:	f24d 3005 	movw	r0, #54021	; 0xd305
 80053e6:	f7fb fa77 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD306, 0x00);
 80053ea:	2100      	movs	r1, #0
 80053ec:	f24d 3006 	movw	r0, #54022	; 0xd306
 80053f0:	f7fb fa72 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD307, 0x4A);
 80053f4:	214a      	movs	r1, #74	; 0x4a
 80053f6:	f24d 3007 	movw	r0, #54023	; 0xd307
 80053fa:	f7fb fa6d 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD308, 0x00);
 80053fe:	2100      	movs	r1, #0
 8005400:	f24d 3008 	movw	r0, #54024	; 0xd308
 8005404:	f7fb fa68 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD309, 0x5C);
 8005408:	215c      	movs	r1, #92	; 0x5c
 800540a:	f24d 3009 	movw	r0, #54025	; 0xd309
 800540e:	f7fb fa63 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD30A, 0x00);
 8005412:	2100      	movs	r1, #0
 8005414:	f24d 300a 	movw	r0, #54026	; 0xd30a
 8005418:	f7fb fa5e 	bl	80008d8 <lcd_write_reg>

        lcd_write_reg(0xD30B, 0x81);
 800541c:	2181      	movs	r1, #129	; 0x81
 800541e:	f24d 300b 	movw	r0, #54027	; 0xd30b
 8005422:	f7fb fa59 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD30C, 0x00);
 8005426:	2100      	movs	r1, #0
 8005428:	f24d 300c 	movw	r0, #54028	; 0xd30c
 800542c:	f7fb fa54 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD30D, 0xA6);
 8005430:	21a6      	movs	r1, #166	; 0xa6
 8005432:	f24d 300d 	movw	r0, #54029	; 0xd30d
 8005436:	f7fb fa4f 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD30E, 0x00);
 800543a:	2100      	movs	r1, #0
 800543c:	f24d 300e 	movw	r0, #54030	; 0xd30e
 8005440:	f7fb fa4a 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD30F, 0xE5);
 8005444:	21e5      	movs	r1, #229	; 0xe5
 8005446:	f24d 300f 	movw	r0, #54031	; 0xd30f
 800544a:	f7fb fa45 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD310, 0x01);
 800544e:	2101      	movs	r1, #1
 8005450:	f24d 3010 	movw	r0, #54032	; 0xd310
 8005454:	f7fb fa40 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD311, 0x13);
 8005458:	2113      	movs	r1, #19
 800545a:	f24d 3011 	movw	r0, #54033	; 0xd311
 800545e:	f7fb fa3b 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD312, 0x01);
 8005462:	2101      	movs	r1, #1
 8005464:	f24d 3012 	movw	r0, #54034	; 0xd312
 8005468:	f7fb fa36 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD313, 0x54);
 800546c:	2154      	movs	r1, #84	; 0x54
 800546e:	f24d 3013 	movw	r0, #54035	; 0xd313
 8005472:	f7fb fa31 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD314, 0x01);
 8005476:	2101      	movs	r1, #1
 8005478:	f24d 3014 	movw	r0, #54036	; 0xd314
 800547c:	f7fb fa2c 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD315, 0x82);
 8005480:	2182      	movs	r1, #130	; 0x82
 8005482:	f24d 3015 	movw	r0, #54037	; 0xd315
 8005486:	f7fb fa27 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD316, 0x01);
 800548a:	2101      	movs	r1, #1
 800548c:	f24d 3016 	movw	r0, #54038	; 0xd316
 8005490:	f7fb fa22 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD317, 0xCA);
 8005494:	21ca      	movs	r1, #202	; 0xca
 8005496:	f24d 3017 	movw	r0, #54039	; 0xd317
 800549a:	f7fb fa1d 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD318, 0x02);
 800549e:	2102      	movs	r1, #2
 80054a0:	f24d 3018 	movw	r0, #54040	; 0xd318
 80054a4:	f7fb fa18 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD319, 0x00);
 80054a8:	2100      	movs	r1, #0
 80054aa:	f24d 3019 	movw	r0, #54041	; 0xd319
 80054ae:	f7fb fa13 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD31A, 0x02);
 80054b2:	2102      	movs	r1, #2
 80054b4:	f24d 301a 	movw	r0, #54042	; 0xd31a
 80054b8:	f7fb fa0e 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD31B, 0x01);
 80054bc:	2101      	movs	r1, #1
 80054be:	f24d 301b 	movw	r0, #54043	; 0xd31b
 80054c2:	f7fb fa09 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD31C, 0x02);
 80054c6:	2102      	movs	r1, #2
 80054c8:	f24d 301c 	movw	r0, #54044	; 0xd31c
 80054cc:	f7fb fa04 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD31D, 0x34);
 80054d0:	2134      	movs	r1, #52	; 0x34
 80054d2:	f24d 301d 	movw	r0, #54045	; 0xd31d
 80054d6:	f7fb f9ff 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD31E, 0x02);
 80054da:	2102      	movs	r1, #2
 80054dc:	f24d 301e 	movw	r0, #54046	; 0xd31e
 80054e0:	f7fb f9fa 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD31F, 0x67);
 80054e4:	2167      	movs	r1, #103	; 0x67
 80054e6:	f24d 301f 	movw	r0, #54047	; 0xd31f
 80054ea:	f7fb f9f5 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD320, 0x02);
 80054ee:	2102      	movs	r1, #2
 80054f0:	f24d 3020 	movw	r0, #54048	; 0xd320
 80054f4:	f7fb f9f0 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD321, 0x84);
 80054f8:	2184      	movs	r1, #132	; 0x84
 80054fa:	f24d 3021 	movw	r0, #54049	; 0xd321
 80054fe:	f7fb f9eb 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD322, 0x02);
 8005502:	2102      	movs	r1, #2
 8005504:	f24d 3022 	movw	r0, #54050	; 0xd322
 8005508:	f7fb f9e6 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD323, 0xA4);
 800550c:	21a4      	movs	r1, #164	; 0xa4
 800550e:	f24d 3023 	movw	r0, #54051	; 0xd323
 8005512:	f7fb f9e1 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD324, 0x02);
 8005516:	2102      	movs	r1, #2
 8005518:	f24d 3024 	movw	r0, #54052	; 0xd324
 800551c:	f7fb f9dc 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD325, 0xB7);
 8005520:	21b7      	movs	r1, #183	; 0xb7
 8005522:	f24d 3025 	movw	r0, #54053	; 0xd325
 8005526:	f7fb f9d7 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD326, 0x02);
 800552a:	2102      	movs	r1, #2
 800552c:	f24d 3026 	movw	r0, #54054	; 0xd326
 8005530:	f7fb f9d2 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD327, 0xCF);
 8005534:	21cf      	movs	r1, #207	; 0xcf
 8005536:	f24d 3027 	movw	r0, #54055	; 0xd327
 800553a:	f7fb f9cd 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD328, 0x02);
 800553e:	2102      	movs	r1, #2
 8005540:	f24d 3028 	movw	r0, #54056	; 0xd328
 8005544:	f7fb f9c8 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD329, 0xDE);
 8005548:	21de      	movs	r1, #222	; 0xde
 800554a:	f24d 3029 	movw	r0, #54057	; 0xd329
 800554e:	f7fb f9c3 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD32A, 0x02);
 8005552:	2102      	movs	r1, #2
 8005554:	f24d 302a 	movw	r0, #54058	; 0xd32a
 8005558:	f7fb f9be 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD32B, 0xF2);
 800555c:	21f2      	movs	r1, #242	; 0xf2
 800555e:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8005562:	f7fb f9b9 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD32C, 0x02);
 8005566:	2102      	movs	r1, #2
 8005568:	f24d 302c 	movw	r0, #54060	; 0xd32c
 800556c:	f7fb f9b4 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD32D, 0xFE);
 8005570:	21fe      	movs	r1, #254	; 0xfe
 8005572:	f24d 302d 	movw	r0, #54061	; 0xd32d
 8005576:	f7fb f9af 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD32E, 0x03);
 800557a:	2103      	movs	r1, #3
 800557c:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8005580:	f7fb f9aa 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD32F, 0x10);
 8005584:	2110      	movs	r1, #16
 8005586:	f24d 302f 	movw	r0, #54063	; 0xd32f
 800558a:	f7fb f9a5 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD330, 0x03);
 800558e:	2103      	movs	r1, #3
 8005590:	f24d 3030 	movw	r0, #54064	; 0xd330
 8005594:	f7fb f9a0 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD331, 0x33);
 8005598:	2133      	movs	r1, #51	; 0x33
 800559a:	f24d 3031 	movw	r0, #54065	; 0xd331
 800559e:	f7fb f99b 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD332, 0x03);
 80055a2:	2103      	movs	r1, #3
 80055a4:	f24d 3032 	movw	r0, #54066	; 0xd332
 80055a8:	f7fb f996 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD333, 0x6D);
 80055ac:	216d      	movs	r1, #109	; 0x6d
 80055ae:	f24d 3033 	movw	r0, #54067	; 0xd333
 80055b2:	f7fb f991 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD400, 0x00);
 80055b6:	2100      	movs	r1, #0
 80055b8:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 80055bc:	f7fb f98c 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD401, 0x33);
 80055c0:	2133      	movs	r1, #51	; 0x33
 80055c2:	f24d 4001 	movw	r0, #54273	; 0xd401
 80055c6:	f7fb f987 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD402, 0x00);
 80055ca:	2100      	movs	r1, #0
 80055cc:	f24d 4002 	movw	r0, #54274	; 0xd402
 80055d0:	f7fb f982 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD403, 0x34);
 80055d4:	2134      	movs	r1, #52	; 0x34
 80055d6:	f24d 4003 	movw	r0, #54275	; 0xd403
 80055da:	f7fb f97d 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD404, 0x00);
 80055de:	2100      	movs	r1, #0
 80055e0:	f24d 4004 	movw	r0, #54276	; 0xd404
 80055e4:	f7fb f978 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD405, 0x3A);
 80055e8:	213a      	movs	r1, #58	; 0x3a
 80055ea:	f24d 4005 	movw	r0, #54277	; 0xd405
 80055ee:	f7fb f973 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD406, 0x00);
 80055f2:	2100      	movs	r1, #0
 80055f4:	f24d 4006 	movw	r0, #54278	; 0xd406
 80055f8:	f7fb f96e 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD407, 0x4A);
 80055fc:	214a      	movs	r1, #74	; 0x4a
 80055fe:	f24d 4007 	movw	r0, #54279	; 0xd407
 8005602:	f7fb f969 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD408, 0x00);
 8005606:	2100      	movs	r1, #0
 8005608:	f24d 4008 	movw	r0, #54280	; 0xd408
 800560c:	f7fb f964 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD409, 0x5C);
 8005610:	215c      	movs	r1, #92	; 0x5c
 8005612:	f24d 4009 	movw	r0, #54281	; 0xd409
 8005616:	f7fb f95f 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD40A, 0x00);
 800561a:	2100      	movs	r1, #0
 800561c:	f24d 400a 	movw	r0, #54282	; 0xd40a
 8005620:	f7fb f95a 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD40B, 0x81);
 8005624:	2181      	movs	r1, #129	; 0x81
 8005626:	f24d 400b 	movw	r0, #54283	; 0xd40b
 800562a:	f7fb f955 	bl	80008d8 <lcd_write_reg>

        lcd_write_reg(0xD40C, 0x00);
 800562e:	2100      	movs	r1, #0
 8005630:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8005634:	f7fb f950 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD40D, 0xA6);
 8005638:	21a6      	movs	r1, #166	; 0xa6
 800563a:	f24d 400d 	movw	r0, #54285	; 0xd40d
 800563e:	f7fb f94b 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD40E, 0x00);
 8005642:	2100      	movs	r1, #0
 8005644:	f24d 400e 	movw	r0, #54286	; 0xd40e
 8005648:	f7fb f946 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD40F, 0xE5);
 800564c:	21e5      	movs	r1, #229	; 0xe5
 800564e:	f24d 400f 	movw	r0, #54287	; 0xd40f
 8005652:	f7fb f941 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD410, 0x01);
 8005656:	2101      	movs	r1, #1
 8005658:	f24d 4010 	movw	r0, #54288	; 0xd410
 800565c:	f7fb f93c 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD411, 0x13);
 8005660:	2113      	movs	r1, #19
 8005662:	f24d 4011 	movw	r0, #54289	; 0xd411
 8005666:	f7fb f937 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD412, 0x01);
 800566a:	2101      	movs	r1, #1
 800566c:	f24d 4012 	movw	r0, #54290	; 0xd412
 8005670:	f7fb f932 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD413, 0x54);
 8005674:	2154      	movs	r1, #84	; 0x54
 8005676:	f24d 4013 	movw	r0, #54291	; 0xd413
 800567a:	f7fb f92d 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD414, 0x01);
 800567e:	2101      	movs	r1, #1
 8005680:	f24d 4014 	movw	r0, #54292	; 0xd414
 8005684:	f7fb f928 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD415, 0x82);
 8005688:	2182      	movs	r1, #130	; 0x82
 800568a:	f24d 4015 	movw	r0, #54293	; 0xd415
 800568e:	f7fb f923 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD416, 0x01);
 8005692:	2101      	movs	r1, #1
 8005694:	f24d 4016 	movw	r0, #54294	; 0xd416
 8005698:	f7fb f91e 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD417, 0xCA);
 800569c:	21ca      	movs	r1, #202	; 0xca
 800569e:	f24d 4017 	movw	r0, #54295	; 0xd417
 80056a2:	f7fb f919 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD418, 0x02);
 80056a6:	2102      	movs	r1, #2
 80056a8:	f24d 4018 	movw	r0, #54296	; 0xd418
 80056ac:	f7fb f914 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD419, 0x00);
 80056b0:	2100      	movs	r1, #0
 80056b2:	f24d 4019 	movw	r0, #54297	; 0xd419
 80056b6:	f7fb f90f 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD41A, 0x02);
 80056ba:	2102      	movs	r1, #2
 80056bc:	f24d 401a 	movw	r0, #54298	; 0xd41a
 80056c0:	f7fb f90a 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD41B, 0x01);
 80056c4:	2101      	movs	r1, #1
 80056c6:	f24d 401b 	movw	r0, #54299	; 0xd41b
 80056ca:	f7fb f905 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD41C, 0x02);
 80056ce:	2102      	movs	r1, #2
 80056d0:	f24d 401c 	movw	r0, #54300	; 0xd41c
 80056d4:	f7fb f900 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD41D, 0x34);
 80056d8:	2134      	movs	r1, #52	; 0x34
 80056da:	f24d 401d 	movw	r0, #54301	; 0xd41d
 80056de:	f7fb f8fb 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD41E, 0x02);
 80056e2:	2102      	movs	r1, #2
 80056e4:	f24d 401e 	movw	r0, #54302	; 0xd41e
 80056e8:	f7fb f8f6 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD41F, 0x67);
 80056ec:	2167      	movs	r1, #103	; 0x67
 80056ee:	f24d 401f 	movw	r0, #54303	; 0xd41f
 80056f2:	f7fb f8f1 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD420, 0x02);
 80056f6:	2102      	movs	r1, #2
 80056f8:	f24d 4020 	movw	r0, #54304	; 0xd420
 80056fc:	f7fb f8ec 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD421, 0x84);
 8005700:	2184      	movs	r1, #132	; 0x84
 8005702:	f24d 4021 	movw	r0, #54305	; 0xd421
 8005706:	f7fb f8e7 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD422, 0x02);
 800570a:	2102      	movs	r1, #2
 800570c:	f24d 4022 	movw	r0, #54306	; 0xd422
 8005710:	f7fb f8e2 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD423, 0xA4);
 8005714:	21a4      	movs	r1, #164	; 0xa4
 8005716:	f24d 4023 	movw	r0, #54307	; 0xd423
 800571a:	f7fb f8dd 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD424, 0x02);
 800571e:	2102      	movs	r1, #2
 8005720:	f24d 4024 	movw	r0, #54308	; 0xd424
 8005724:	f7fb f8d8 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD425, 0xB7);
 8005728:	21b7      	movs	r1, #183	; 0xb7
 800572a:	f24d 4025 	movw	r0, #54309	; 0xd425
 800572e:	f7fb f8d3 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD426, 0x02);
 8005732:	2102      	movs	r1, #2
 8005734:	f24d 4026 	movw	r0, #54310	; 0xd426
 8005738:	f7fb f8ce 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD427, 0xCF);
 800573c:	21cf      	movs	r1, #207	; 0xcf
 800573e:	f24d 4027 	movw	r0, #54311	; 0xd427
 8005742:	f7fb f8c9 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD428, 0x02);
 8005746:	2102      	movs	r1, #2
 8005748:	f24d 4028 	movw	r0, #54312	; 0xd428
 800574c:	f7fb f8c4 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD429, 0xDE);
 8005750:	21de      	movs	r1, #222	; 0xde
 8005752:	f24d 4029 	movw	r0, #54313	; 0xd429
 8005756:	f7fb f8bf 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD42A, 0x02);
 800575a:	2102      	movs	r1, #2
 800575c:	f24d 402a 	movw	r0, #54314	; 0xd42a
 8005760:	f7fb f8ba 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD42B, 0xF2);
 8005764:	21f2      	movs	r1, #242	; 0xf2
 8005766:	f24d 402b 	movw	r0, #54315	; 0xd42b
 800576a:	f7fb f8b5 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD42C, 0x02);
 800576e:	2102      	movs	r1, #2
 8005770:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8005774:	f7fb f8b0 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD42D, 0xFE);
 8005778:	21fe      	movs	r1, #254	; 0xfe
 800577a:	f24d 402d 	movw	r0, #54317	; 0xd42d
 800577e:	f7fb f8ab 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD42E, 0x03);
 8005782:	2103      	movs	r1, #3
 8005784:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8005788:	f7fb f8a6 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD42F, 0x10);
 800578c:	2110      	movs	r1, #16
 800578e:	f24d 402f 	movw	r0, #54319	; 0xd42f
 8005792:	f7fb f8a1 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD430, 0x03);
 8005796:	2103      	movs	r1, #3
 8005798:	f24d 4030 	movw	r0, #54320	; 0xd430
 800579c:	f7fb f89c 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD431, 0x33);
 80057a0:	2133      	movs	r1, #51	; 0x33
 80057a2:	f24d 4031 	movw	r0, #54321	; 0xd431
 80057a6:	f7fb f897 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD432, 0x03);
 80057aa:	2103      	movs	r1, #3
 80057ac:	f24d 4032 	movw	r0, #54322	; 0xd432
 80057b0:	f7fb f892 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD433, 0x6D);
 80057b4:	216d      	movs	r1, #109	; 0x6d
 80057b6:	f24d 4033 	movw	r0, #54323	; 0xd433
 80057ba:	f7fb f88d 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD500, 0x00);
 80057be:	2100      	movs	r1, #0
 80057c0:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 80057c4:	f7fb f888 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD501, 0x33);
 80057c8:	2133      	movs	r1, #51	; 0x33
 80057ca:	f24d 5001 	movw	r0, #54529	; 0xd501
 80057ce:	f7fb f883 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD502, 0x00);
 80057d2:	2100      	movs	r1, #0
 80057d4:	f24d 5002 	movw	r0, #54530	; 0xd502
 80057d8:	f7fb f87e 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD503, 0x34);
 80057dc:	2134      	movs	r1, #52	; 0x34
 80057de:	f24d 5003 	movw	r0, #54531	; 0xd503
 80057e2:	f7fb f879 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD504, 0x00);
 80057e6:	2100      	movs	r1, #0
 80057e8:	f24d 5004 	movw	r0, #54532	; 0xd504
 80057ec:	f7fb f874 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD505, 0x3A);
 80057f0:	213a      	movs	r1, #58	; 0x3a
 80057f2:	f24d 5005 	movw	r0, #54533	; 0xd505
 80057f6:	f7fb f86f 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD506, 0x00);
 80057fa:	2100      	movs	r1, #0
 80057fc:	f24d 5006 	movw	r0, #54534	; 0xd506
 8005800:	f7fb f86a 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD507, 0x4A);
 8005804:	214a      	movs	r1, #74	; 0x4a
 8005806:	f24d 5007 	movw	r0, #54535	; 0xd507
 800580a:	f7fb f865 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD508, 0x00);
 800580e:	2100      	movs	r1, #0
 8005810:	f24d 5008 	movw	r0, #54536	; 0xd508
 8005814:	f7fb f860 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD509, 0x5C);
 8005818:	215c      	movs	r1, #92	; 0x5c
 800581a:	f24d 5009 	movw	r0, #54537	; 0xd509
 800581e:	f7fb f85b 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD50A, 0x00);
 8005822:	2100      	movs	r1, #0
 8005824:	f24d 500a 	movw	r0, #54538	; 0xd50a
 8005828:	f7fb f856 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD50B, 0x81);
 800582c:	2181      	movs	r1, #129	; 0x81
 800582e:	f24d 500b 	movw	r0, #54539	; 0xd50b
 8005832:	f7fb f851 	bl	80008d8 <lcd_write_reg>

        lcd_write_reg(0xD50C, 0x00);
 8005836:	2100      	movs	r1, #0
 8005838:	f24d 500c 	movw	r0, #54540	; 0xd50c
 800583c:	f7fb f84c 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD50D, 0xA6);
 8005840:	21a6      	movs	r1, #166	; 0xa6
 8005842:	f24d 500d 	movw	r0, #54541	; 0xd50d
 8005846:	f7fb f847 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD50E, 0x00);
 800584a:	2100      	movs	r1, #0
 800584c:	f24d 500e 	movw	r0, #54542	; 0xd50e
 8005850:	f7fb f842 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD50F, 0xE5);
 8005854:	21e5      	movs	r1, #229	; 0xe5
 8005856:	f24d 500f 	movw	r0, #54543	; 0xd50f
 800585a:	f7fb f83d 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD510, 0x01);
 800585e:	2101      	movs	r1, #1
 8005860:	f24d 5010 	movw	r0, #54544	; 0xd510
 8005864:	f7fb f838 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD511, 0x13);
 8005868:	2113      	movs	r1, #19
 800586a:	f24d 5011 	movw	r0, #54545	; 0xd511
 800586e:	f7fb f833 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD512, 0x01);
 8005872:	2101      	movs	r1, #1
 8005874:	f24d 5012 	movw	r0, #54546	; 0xd512
 8005878:	f7fb f82e 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD513, 0x54);
 800587c:	2154      	movs	r1, #84	; 0x54
 800587e:	f24d 5013 	movw	r0, #54547	; 0xd513
 8005882:	f7fb f829 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD514, 0x01);
 8005886:	2101      	movs	r1, #1
 8005888:	f24d 5014 	movw	r0, #54548	; 0xd514
 800588c:	f7fb f824 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD515, 0x82);
 8005890:	2182      	movs	r1, #130	; 0x82
 8005892:	f24d 5015 	movw	r0, #54549	; 0xd515
 8005896:	f7fb f81f 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD516, 0x01);
 800589a:	2101      	movs	r1, #1
 800589c:	f24d 5016 	movw	r0, #54550	; 0xd516
 80058a0:	f7fb f81a 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD517, 0xCA);
 80058a4:	21ca      	movs	r1, #202	; 0xca
 80058a6:	f24d 5017 	movw	r0, #54551	; 0xd517
 80058aa:	f7fb f815 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD518, 0x02);
 80058ae:	2102      	movs	r1, #2
 80058b0:	f24d 5018 	movw	r0, #54552	; 0xd518
 80058b4:	f7fb f810 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD519, 0x00);
 80058b8:	2100      	movs	r1, #0
 80058ba:	f24d 5019 	movw	r0, #54553	; 0xd519
 80058be:	f7fb f80b 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD51A, 0x02);
 80058c2:	2102      	movs	r1, #2
 80058c4:	f24d 501a 	movw	r0, #54554	; 0xd51a
 80058c8:	f7fb f806 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD51B, 0x01);
 80058cc:	2101      	movs	r1, #1
 80058ce:	f24d 501b 	movw	r0, #54555	; 0xd51b
 80058d2:	f7fb f801 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD51C, 0x02);
 80058d6:	2102      	movs	r1, #2
 80058d8:	f24d 501c 	movw	r0, #54556	; 0xd51c
 80058dc:	f7fa fffc 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD51D, 0x34);
 80058e0:	2134      	movs	r1, #52	; 0x34
 80058e2:	f24d 501d 	movw	r0, #54557	; 0xd51d
 80058e6:	f7fa fff7 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD51E, 0x02);
 80058ea:	2102      	movs	r1, #2
 80058ec:	f24d 501e 	movw	r0, #54558	; 0xd51e
 80058f0:	f7fa fff2 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD51F, 0x67);
 80058f4:	2167      	movs	r1, #103	; 0x67
 80058f6:	f24d 501f 	movw	r0, #54559	; 0xd51f
 80058fa:	f7fa ffed 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD520, 0x02);
 80058fe:	2102      	movs	r1, #2
 8005900:	f24d 5020 	movw	r0, #54560	; 0xd520
 8005904:	f7fa ffe8 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD521, 0x84);
 8005908:	2184      	movs	r1, #132	; 0x84
 800590a:	f24d 5021 	movw	r0, #54561	; 0xd521
 800590e:	f7fa ffe3 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD522, 0x02);
 8005912:	2102      	movs	r1, #2
 8005914:	f24d 5022 	movw	r0, #54562	; 0xd522
 8005918:	f7fa ffde 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD523, 0xA4);
 800591c:	21a4      	movs	r1, #164	; 0xa4
 800591e:	f24d 5023 	movw	r0, #54563	; 0xd523
 8005922:	f7fa ffd9 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD524, 0x02);
 8005926:	2102      	movs	r1, #2
 8005928:	f24d 5024 	movw	r0, #54564	; 0xd524
 800592c:	f7fa ffd4 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD525, 0xB7);
 8005930:	21b7      	movs	r1, #183	; 0xb7
 8005932:	f24d 5025 	movw	r0, #54565	; 0xd525
 8005936:	f7fa ffcf 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD526, 0x02);
 800593a:	2102      	movs	r1, #2
 800593c:	f24d 5026 	movw	r0, #54566	; 0xd526
 8005940:	f7fa ffca 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD527, 0xCF);
 8005944:	21cf      	movs	r1, #207	; 0xcf
 8005946:	f24d 5027 	movw	r0, #54567	; 0xd527
 800594a:	f7fa ffc5 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD528, 0x02);
 800594e:	2102      	movs	r1, #2
 8005950:	f24d 5028 	movw	r0, #54568	; 0xd528
 8005954:	f7fa ffc0 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD529, 0xDE);
 8005958:	21de      	movs	r1, #222	; 0xde
 800595a:	f24d 5029 	movw	r0, #54569	; 0xd529
 800595e:	f7fa ffbb 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD52A, 0x02);
 8005962:	2102      	movs	r1, #2
 8005964:	f24d 502a 	movw	r0, #54570	; 0xd52a
 8005968:	f7fa ffb6 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD52B, 0xF2);
 800596c:	21f2      	movs	r1, #242	; 0xf2
 800596e:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8005972:	f7fa ffb1 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD52C, 0x02);
 8005976:	2102      	movs	r1, #2
 8005978:	f24d 502c 	movw	r0, #54572	; 0xd52c
 800597c:	f7fa ffac 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD52D, 0xFE);
 8005980:	21fe      	movs	r1, #254	; 0xfe
 8005982:	f24d 502d 	movw	r0, #54573	; 0xd52d
 8005986:	f7fa ffa7 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD52E, 0x03);
 800598a:	2103      	movs	r1, #3
 800598c:	f24d 502e 	movw	r0, #54574	; 0xd52e
 8005990:	f7fa ffa2 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD52F, 0x10);
 8005994:	2110      	movs	r1, #16
 8005996:	f24d 502f 	movw	r0, #54575	; 0xd52f
 800599a:	f7fa ff9d 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD530, 0x03);
 800599e:	2103      	movs	r1, #3
 80059a0:	f24d 5030 	movw	r0, #54576	; 0xd530
 80059a4:	f7fa ff98 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD531, 0x33);
 80059a8:	2133      	movs	r1, #51	; 0x33
 80059aa:	f24d 5031 	movw	r0, #54577	; 0xd531
 80059ae:	f7fa ff93 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD532, 0x03);
 80059b2:	2103      	movs	r1, #3
 80059b4:	f24d 5032 	movw	r0, #54578	; 0xd532
 80059b8:	f7fa ff8e 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD533, 0x6D);
 80059bc:	216d      	movs	r1, #109	; 0x6d
 80059be:	f24d 5033 	movw	r0, #54579	; 0xd533
 80059c2:	f7fa ff89 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD600, 0x00);
 80059c6:	2100      	movs	r1, #0
 80059c8:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 80059cc:	f7fa ff84 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD601, 0x33);
 80059d0:	2133      	movs	r1, #51	; 0x33
 80059d2:	f24d 6001 	movw	r0, #54785	; 0xd601
 80059d6:	f7fa ff7f 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD602, 0x00);
 80059da:	2100      	movs	r1, #0
 80059dc:	f24d 6002 	movw	r0, #54786	; 0xd602
 80059e0:	f7fa ff7a 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD603, 0x34);
 80059e4:	2134      	movs	r1, #52	; 0x34
 80059e6:	f24d 6003 	movw	r0, #54787	; 0xd603
 80059ea:	f7fa ff75 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD604, 0x00);
 80059ee:	2100      	movs	r1, #0
 80059f0:	f24d 6004 	movw	r0, #54788	; 0xd604
 80059f4:	f7fa ff70 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD605, 0x3A);
 80059f8:	213a      	movs	r1, #58	; 0x3a
 80059fa:	f24d 6005 	movw	r0, #54789	; 0xd605
 80059fe:	f7fa ff6b 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD606, 0x00);
 8005a02:	2100      	movs	r1, #0
 8005a04:	f24d 6006 	movw	r0, #54790	; 0xd606
 8005a08:	f7fa ff66 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD607, 0x4A);
 8005a0c:	214a      	movs	r1, #74	; 0x4a
 8005a0e:	f24d 6007 	movw	r0, #54791	; 0xd607
 8005a12:	f7fa ff61 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD608, 0x00);
 8005a16:	2100      	movs	r1, #0
 8005a18:	f24d 6008 	movw	r0, #54792	; 0xd608
 8005a1c:	f7fa ff5c 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD609, 0x5C);
 8005a20:	215c      	movs	r1, #92	; 0x5c
 8005a22:	f24d 6009 	movw	r0, #54793	; 0xd609
 8005a26:	f7fa ff57 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD60A, 0x00);
 8005a2a:	2100      	movs	r1, #0
 8005a2c:	f24d 600a 	movw	r0, #54794	; 0xd60a
 8005a30:	f7fa ff52 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD60B, 0x81);
 8005a34:	2181      	movs	r1, #129	; 0x81
 8005a36:	f24d 600b 	movw	r0, #54795	; 0xd60b
 8005a3a:	f7fa ff4d 	bl	80008d8 <lcd_write_reg>

        lcd_write_reg(0xD60C, 0x00);
 8005a3e:	2100      	movs	r1, #0
 8005a40:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8005a44:	f7fa ff48 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD60D, 0xA6);
 8005a48:	21a6      	movs	r1, #166	; 0xa6
 8005a4a:	f24d 600d 	movw	r0, #54797	; 0xd60d
 8005a4e:	f7fa ff43 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD60E, 0x00);
 8005a52:	2100      	movs	r1, #0
 8005a54:	f24d 600e 	movw	r0, #54798	; 0xd60e
 8005a58:	f7fa ff3e 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD60F, 0xE5);
 8005a5c:	21e5      	movs	r1, #229	; 0xe5
 8005a5e:	f24d 600f 	movw	r0, #54799	; 0xd60f
 8005a62:	f7fa ff39 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD610, 0x01);
 8005a66:	2101      	movs	r1, #1
 8005a68:	f24d 6010 	movw	r0, #54800	; 0xd610
 8005a6c:	f7fa ff34 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD611, 0x13);
 8005a70:	2113      	movs	r1, #19
 8005a72:	f24d 6011 	movw	r0, #54801	; 0xd611
 8005a76:	f7fa ff2f 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD612, 0x01);
 8005a7a:	2101      	movs	r1, #1
 8005a7c:	f24d 6012 	movw	r0, #54802	; 0xd612
 8005a80:	f7fa ff2a 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD613, 0x54);
 8005a84:	2154      	movs	r1, #84	; 0x54
 8005a86:	f24d 6013 	movw	r0, #54803	; 0xd613
 8005a8a:	f7fa ff25 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD614, 0x01);
 8005a8e:	2101      	movs	r1, #1
 8005a90:	f24d 6014 	movw	r0, #54804	; 0xd614
 8005a94:	f7fa ff20 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD615, 0x82);
 8005a98:	2182      	movs	r1, #130	; 0x82
 8005a9a:	f24d 6015 	movw	r0, #54805	; 0xd615
 8005a9e:	f7fa ff1b 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD616, 0x01);
 8005aa2:	2101      	movs	r1, #1
 8005aa4:	f24d 6016 	movw	r0, #54806	; 0xd616
 8005aa8:	f7fa ff16 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD617, 0xCA);
 8005aac:	21ca      	movs	r1, #202	; 0xca
 8005aae:	f24d 6017 	movw	r0, #54807	; 0xd617
 8005ab2:	f7fa ff11 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD618, 0x02);
 8005ab6:	2102      	movs	r1, #2
 8005ab8:	f24d 6018 	movw	r0, #54808	; 0xd618
 8005abc:	f7fa ff0c 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD619, 0x00);
 8005ac0:	2100      	movs	r1, #0
 8005ac2:	f24d 6019 	movw	r0, #54809	; 0xd619
 8005ac6:	f7fa ff07 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD61A, 0x02);
 8005aca:	2102      	movs	r1, #2
 8005acc:	f24d 601a 	movw	r0, #54810	; 0xd61a
 8005ad0:	f7fa ff02 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD61B, 0x01);
 8005ad4:	2101      	movs	r1, #1
 8005ad6:	f24d 601b 	movw	r0, #54811	; 0xd61b
 8005ada:	f7fa fefd 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD61C, 0x02);
 8005ade:	2102      	movs	r1, #2
 8005ae0:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8005ae4:	f7fa fef8 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD61D, 0x34);
 8005ae8:	2134      	movs	r1, #52	; 0x34
 8005aea:	f24d 601d 	movw	r0, #54813	; 0xd61d
 8005aee:	f7fa fef3 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD61E, 0x02);
 8005af2:	2102      	movs	r1, #2
 8005af4:	f24d 601e 	movw	r0, #54814	; 0xd61e
 8005af8:	f7fa feee 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD61F, 0x67);
 8005afc:	2167      	movs	r1, #103	; 0x67
 8005afe:	f24d 601f 	movw	r0, #54815	; 0xd61f
 8005b02:	f7fa fee9 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD620, 0x02);
 8005b06:	2102      	movs	r1, #2
 8005b08:	f24d 6020 	movw	r0, #54816	; 0xd620
 8005b0c:	f7fa fee4 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD621, 0x84);
 8005b10:	2184      	movs	r1, #132	; 0x84
 8005b12:	f24d 6021 	movw	r0, #54817	; 0xd621
 8005b16:	f7fa fedf 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD622, 0x02);
 8005b1a:	2102      	movs	r1, #2
 8005b1c:	f24d 6022 	movw	r0, #54818	; 0xd622
 8005b20:	f7fa feda 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD623, 0xA4);
 8005b24:	21a4      	movs	r1, #164	; 0xa4
 8005b26:	f24d 6023 	movw	r0, #54819	; 0xd623
 8005b2a:	f7fa fed5 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD624, 0x02);
 8005b2e:	2102      	movs	r1, #2
 8005b30:	f24d 6024 	movw	r0, #54820	; 0xd624
 8005b34:	f7fa fed0 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD625, 0xB7);
 8005b38:	21b7      	movs	r1, #183	; 0xb7
 8005b3a:	f24d 6025 	movw	r0, #54821	; 0xd625
 8005b3e:	f7fa fecb 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD626, 0x02);
 8005b42:	2102      	movs	r1, #2
 8005b44:	f24d 6026 	movw	r0, #54822	; 0xd626
 8005b48:	f7fa fec6 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD627, 0xCF);
 8005b4c:	21cf      	movs	r1, #207	; 0xcf
 8005b4e:	f24d 6027 	movw	r0, #54823	; 0xd627
 8005b52:	f7fa fec1 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD628, 0x02);
 8005b56:	2102      	movs	r1, #2
 8005b58:	f24d 6028 	movw	r0, #54824	; 0xd628
 8005b5c:	f7fa febc 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD629, 0xDE);
 8005b60:	21de      	movs	r1, #222	; 0xde
 8005b62:	f24d 6029 	movw	r0, #54825	; 0xd629
 8005b66:	f7fa feb7 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD62A, 0x02);
 8005b6a:	2102      	movs	r1, #2
 8005b6c:	f24d 602a 	movw	r0, #54826	; 0xd62a
 8005b70:	f7fa feb2 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD62B, 0xF2);
 8005b74:	21f2      	movs	r1, #242	; 0xf2
 8005b76:	f24d 602b 	movw	r0, #54827	; 0xd62b
 8005b7a:	f7fa fead 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD62C, 0x02);
 8005b7e:	2102      	movs	r1, #2
 8005b80:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8005b84:	f7fa fea8 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD62D, 0xFE);
 8005b88:	21fe      	movs	r1, #254	; 0xfe
 8005b8a:	f24d 602d 	movw	r0, #54829	; 0xd62d
 8005b8e:	f7fa fea3 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD62E, 0x03);
 8005b92:	2103      	movs	r1, #3
 8005b94:	f24d 602e 	movw	r0, #54830	; 0xd62e
 8005b98:	f7fa fe9e 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD62F, 0x10);
 8005b9c:	2110      	movs	r1, #16
 8005b9e:	f24d 602f 	movw	r0, #54831	; 0xd62f
 8005ba2:	f7fa fe99 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD630, 0x03);
 8005ba6:	2103      	movs	r1, #3
 8005ba8:	f24d 6030 	movw	r0, #54832	; 0xd630
 8005bac:	f7fa fe94 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD631, 0x33);
 8005bb0:	2133      	movs	r1, #51	; 0x33
 8005bb2:	f24d 6031 	movw	r0, #54833	; 0xd631
 8005bb6:	f7fa fe8f 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD632, 0x03);
 8005bba:	2103      	movs	r1, #3
 8005bbc:	f24d 6032 	movw	r0, #54834	; 0xd632
 8005bc0:	f7fa fe8a 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xD633, 0x6D);
 8005bc4:	216d      	movs	r1, #109	; 0x6d
 8005bc6:	f24d 6033 	movw	r0, #54835	; 0xd633
 8005bca:	f7fa fe85 	bl	80008d8 <lcd_write_reg>
        /* LV2 Page 0 enable */
        lcd_write_reg(0xF000, 0x55);
 8005bce:	2155      	movs	r1, #85	; 0x55
 8005bd0:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8005bd4:	f7fa fe80 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xF001, 0xAA);
 8005bd8:	21aa      	movs	r1, #170	; 0xaa
 8005bda:	f24f 0001 	movw	r0, #61441	; 0xf001
 8005bde:	f7fa fe7b 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xF002, 0x52);
 8005be2:	2152      	movs	r1, #82	; 0x52
 8005be4:	f24f 0002 	movw	r0, #61442	; 0xf002
 8005be8:	f7fa fe76 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xF003, 0x08);
 8005bec:	2108      	movs	r1, #8
 8005bee:	f24f 0003 	movw	r0, #61443	; 0xf003
 8005bf2:	f7fa fe71 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xF004, 0x00);
 8005bf6:	2100      	movs	r1, #0
 8005bf8:	f24f 0004 	movw	r0, #61444	; 0xf004
 8005bfc:	f7fa fe6c 	bl	80008d8 <lcd_write_reg>
        /* Display control */
        lcd_write_reg(0xB100, 0xCC);
 8005c00:	21cc      	movs	r1, #204	; 0xcc
 8005c02:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8005c06:	f7fa fe67 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xB101, 0x00);
 8005c0a:	2100      	movs	r1, #0
 8005c0c:	f24b 1001 	movw	r0, #45313	; 0xb101
 8005c10:	f7fa fe62 	bl	80008d8 <lcd_write_reg>
        /* Source hold time */
        lcd_write_reg(0xB600, 0x05);
 8005c14:	2105      	movs	r1, #5
 8005c16:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8005c1a:	f7fa fe5d 	bl	80008d8 <lcd_write_reg>
        /* Gate EQ control */
        lcd_write_reg(0xB700, 0x70);
 8005c1e:	2170      	movs	r1, #112	; 0x70
 8005c20:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8005c24:	f7fa fe58 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xB701, 0x70);
 8005c28:	2170      	movs	r1, #112	; 0x70
 8005c2a:	f24b 7001 	movw	r0, #46849	; 0xb701
 8005c2e:	f7fa fe53 	bl	80008d8 <lcd_write_reg>
        /* Source EQ control (Mode 2) */
        lcd_write_reg(0xB800, 0x01);
 8005c32:	2101      	movs	r1, #1
 8005c34:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8005c38:	f7fa fe4e 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xB801, 0x03);
 8005c3c:	2103      	movs	r1, #3
 8005c3e:	f64b 0001 	movw	r0, #47105	; 0xb801
 8005c42:	f7fa fe49 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xB802, 0x03);
 8005c46:	2103      	movs	r1, #3
 8005c48:	f64b 0002 	movw	r0, #47106	; 0xb802
 8005c4c:	f7fa fe44 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xB803, 0x03);
 8005c50:	2103      	movs	r1, #3
 8005c52:	f64b 0003 	movw	r0, #47107	; 0xb803
 8005c56:	f7fa fe3f 	bl	80008d8 <lcd_write_reg>
        /* Inversion mode (2-dot) */
        lcd_write_reg(0xBC00, 0x02);
 8005c5a:	2102      	movs	r1, #2
 8005c5c:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8005c60:	f7fa fe3a 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xBC01, 0x00);
 8005c64:	2100      	movs	r1, #0
 8005c66:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8005c6a:	f7fa fe35 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xBC02, 0x00);
 8005c6e:	2100      	movs	r1, #0
 8005c70:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8005c74:	f7fa fe30 	bl	80008d8 <lcd_write_reg>
        /* Timing control 4H w/ 4-delay */
        lcd_write_reg(0xC900, 0xD0);
 8005c78:	21d0      	movs	r1, #208	; 0xd0
 8005c7a:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8005c7e:	f7fa fe2b 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xC901, 0x02);
 8005c82:	2102      	movs	r1, #2
 8005c84:	f64c 1001 	movw	r0, #51457	; 0xc901
 8005c88:	f7fa fe26 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xC902, 0x50);
 8005c8c:	2150      	movs	r1, #80	; 0x50
 8005c8e:	f64c 1002 	movw	r0, #51458	; 0xc902
 8005c92:	f7fa fe21 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xC903, 0x50);
 8005c96:	2150      	movs	r1, #80	; 0x50
 8005c98:	f64c 1003 	movw	r0, #51459	; 0xc903
 8005c9c:	f7fa fe1c 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0xC904, 0x50);
 8005ca0:	2150      	movs	r1, #80	; 0x50
 8005ca2:	f64c 1004 	movw	r0, #51460	; 0xc904
 8005ca6:	f7fa fe17 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0x3500, 0x00);
 8005caa:	2100      	movs	r1, #0
 8005cac:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8005cb0:	f7fa fe12 	bl	80008d8 <lcd_write_reg>
        lcd_write_reg(0x3A00, 0x55); /* 16-bit/pixel */
 8005cb4:	2155      	movs	r1, #85	; 0x55
 8005cb6:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8005cba:	f7fa fe0d 	bl	80008d8 <lcd_write_reg>
 8005cbe:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8005cc2:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005cc6:	4b1b      	ldr	r3, [pc, #108]	; (8005d34 <lcd_init+0x422c>)
 8005cc8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ccc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005cce:	4b19      	ldr	r3, [pc, #100]	; (8005d34 <lcd_init+0x422c>)
 8005cd0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005cd4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005cd6:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	4b16      	ldr	r3, [pc, #88]	; (8005d38 <lcd_init+0x4230>)
 8005cde:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005ce0:	4b14      	ldr	r3, [pc, #80]	; (8005d34 <lcd_init+0x422c>)
 8005ce2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005ce6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005ce8:	4b12      	ldr	r3, [pc, #72]	; (8005d34 <lcd_init+0x422c>)
 8005cea:	2280      	movs	r2, #128	; 0x80
 8005cec:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005cee:	4b11      	ldr	r3, [pc, #68]	; (8005d34 <lcd_init+0x422c>)
 8005cf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cf4:	611a      	str	r2, [r3, #16]
}
 8005cf6:	bf00      	nop
 8005cf8:	f44f 5324 	mov.w	r3, #10496	; 0x2900
 8005cfc:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005d00:	4b0c      	ldr	r3, [pc, #48]	; (8005d34 <lcd_init+0x422c>)
 8005d02:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005d06:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005d08:	4b0a      	ldr	r3, [pc, #40]	; (8005d34 <lcd_init+0x422c>)
 8005d0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d0e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005d10:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	4b08      	ldr	r3, [pc, #32]	; (8005d38 <lcd_init+0x4230>)
 8005d18:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005d1a:	4b06      	ldr	r3, [pc, #24]	; (8005d34 <lcd_init+0x422c>)
 8005d1c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005d20:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005d22:	4b04      	ldr	r3, [pc, #16]	; (8005d34 <lcd_init+0x422c>)
 8005d24:	2280      	movs	r2, #128	; 0x80
 8005d26:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005d28:	4b02      	ldr	r3, [pc, #8]	; (8005d34 <lcd_init+0x422c>)
 8005d2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d2e:	611a      	str	r2, [r3, #16]
}
 8005d30:	f000 be33 	b.w	800699a <lcd_init+0x4e92>
 8005d34:	40011000 	.word	0x40011000
 8005d38:	40010c00 	.word	0x40010c00
        lcd_wr_regno(0x1100);
        //delay_us(120);
        lcd_wr_regno(0x2900);
    }
    else if (lcddev.id == 0x9806)
 8005d3c:	4bc3      	ldr	r3, [pc, #780]	; (800604c <lcd_init+0x4544>)
 8005d3e:	889b      	ldrh	r3, [r3, #4]
 8005d40:	f649 0206 	movw	r2, #38918	; 0x9806
 8005d44:	4293      	cmp	r3, r2
 8005d46:	f040 8407 	bne.w	8006558 <lcd_init+0x4a50>
 8005d4a:	23ff      	movs	r3, #255	; 0xff
 8005d4c:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005d50:	4bbf      	ldr	r3, [pc, #764]	; (8006050 <lcd_init+0x4548>)
 8005d52:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005d56:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005d58:	4bbd      	ldr	r3, [pc, #756]	; (8006050 <lcd_init+0x4548>)
 8005d5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d5e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005d60:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8005d64:	b29a      	uxth	r2, r3
 8005d66:	4bbb      	ldr	r3, [pc, #748]	; (8006054 <lcd_init+0x454c>)
 8005d68:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005d6a:	4bb9      	ldr	r3, [pc, #740]	; (8006050 <lcd_init+0x4548>)
 8005d6c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005d70:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005d72:	4bb7      	ldr	r3, [pc, #732]	; (8006050 <lcd_init+0x4548>)
 8005d74:	2280      	movs	r2, #128	; 0x80
 8005d76:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005d78:	4bb5      	ldr	r3, [pc, #724]	; (8006050 <lcd_init+0x4548>)
 8005d7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d7e:	611a      	str	r2, [r3, #16]
}
 8005d80:	bf00      	nop
    {
       // lcd_ex_ili9806_reginit();   /* ִ��ILI9806��ʼ�� */
        lcd_wr_regno(0xFF); /* EXTC Command Set enable register */
        lcd_wr_xdata(0xFF);
 8005d82:	20ff      	movs	r0, #255	; 0xff
 8005d84:	f7fa fd84 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x98);
 8005d88:	2098      	movs	r0, #152	; 0x98
 8005d8a:	f7fa fd81 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x06);
 8005d8e:	2006      	movs	r0, #6
 8005d90:	f7fa fd7e 	bl	8000890 <lcd_wr_xdata>
 8005d94:	23bc      	movs	r3, #188	; 0xbc
 8005d96:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005d9a:	4bad      	ldr	r3, [pc, #692]	; (8006050 <lcd_init+0x4548>)
 8005d9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005da0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005da2:	4bab      	ldr	r3, [pc, #684]	; (8006050 <lcd_init+0x4548>)
 8005da4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005da8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005daa:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8005dae:	b29a      	uxth	r2, r3
 8005db0:	4ba8      	ldr	r3, [pc, #672]	; (8006054 <lcd_init+0x454c>)
 8005db2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005db4:	4ba6      	ldr	r3, [pc, #664]	; (8006050 <lcd_init+0x4548>)
 8005db6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005dba:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005dbc:	4ba4      	ldr	r3, [pc, #656]	; (8006050 <lcd_init+0x4548>)
 8005dbe:	2280      	movs	r2, #128	; 0x80
 8005dc0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005dc2:	4ba3      	ldr	r3, [pc, #652]	; (8006050 <lcd_init+0x4548>)
 8005dc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dc8:	611a      	str	r2, [r3, #16]
}
 8005dca:	bf00      	nop

        lcd_wr_regno(0xBC); /* GIP 1 */
        lcd_wr_xdata(0x01);
 8005dcc:	2001      	movs	r0, #1
 8005dce:	f7fa fd5f 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 8005dd2:	200f      	movs	r0, #15
 8005dd4:	f7fa fd5c 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x61);
 8005dd8:	2061      	movs	r0, #97	; 0x61
 8005dda:	f7fa fd59 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 8005dde:	20ff      	movs	r0, #255	; 0xff
 8005de0:	f7fa fd56 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8005de4:	2001      	movs	r0, #1
 8005de6:	f7fa fd53 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8005dea:	2001      	movs	r0, #1
 8005dec:	f7fa fd50 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);
 8005df0:	200b      	movs	r0, #11
 8005df2:	f7fa fd4d 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 8005df6:	2010      	movs	r0, #16
 8005df8:	f7fa fd4a 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x37);
 8005dfc:	2037      	movs	r0, #55	; 0x37
 8005dfe:	f7fa fd47 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x63);
 8005e02:	2063      	movs	r0, #99	; 0x63
 8005e04:	f7fa fd44 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 8005e08:	20ff      	movs	r0, #255	; 0xff
 8005e0a:	f7fa fd41 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 8005e0e:	20ff      	movs	r0, #255	; 0xff
 8005e10:	f7fa fd3e 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8005e14:	2001      	movs	r0, #1
 8005e16:	f7fa fd3b 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8005e1a:	2001      	movs	r0, #1
 8005e1c:	f7fa fd38 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8005e20:	2000      	movs	r0, #0
 8005e22:	f7fa fd35 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8005e26:	2000      	movs	r0, #0
 8005e28:	f7fa fd32 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 8005e2c:	20ff      	movs	r0, #255	; 0xff
 8005e2e:	f7fa fd2f 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x52);
 8005e32:	2052      	movs	r0, #82	; 0x52
 8005e34:	f7fa fd2c 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8005e38:	2001      	movs	r0, #1
 8005e3a:	f7fa fd29 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8005e3e:	2000      	movs	r0, #0
 8005e40:	f7fa fd26 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x40);
 8005e44:	2040      	movs	r0, #64	; 0x40
 8005e46:	f7fa fd23 	bl	8000890 <lcd_wr_xdata>
 8005e4a:	23bd      	movs	r3, #189	; 0xbd
 8005e4c:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005e50:	4b7f      	ldr	r3, [pc, #508]	; (8006050 <lcd_init+0x4548>)
 8005e52:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005e56:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005e58:	4b7d      	ldr	r3, [pc, #500]	; (8006050 <lcd_init+0x4548>)
 8005e5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e5e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005e60:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	4b7b      	ldr	r3, [pc, #492]	; (8006054 <lcd_init+0x454c>)
 8005e68:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005e6a:	4b79      	ldr	r3, [pc, #484]	; (8006050 <lcd_init+0x4548>)
 8005e6c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005e70:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005e72:	4b77      	ldr	r3, [pc, #476]	; (8006050 <lcd_init+0x4548>)
 8005e74:	2280      	movs	r2, #128	; 0x80
 8005e76:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005e78:	4b75      	ldr	r3, [pc, #468]	; (8006050 <lcd_init+0x4548>)
 8005e7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e7e:	611a      	str	r2, [r3, #16]
}
 8005e80:	bf00      	nop

        lcd_wr_regno(0xBD); /* GIP 2 */
        lcd_wr_xdata(0x01);
 8005e82:	2001      	movs	r0, #1
 8005e84:	f7fa fd04 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 8005e88:	2023      	movs	r0, #35	; 0x23
 8005e8a:	f7fa fd01 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 8005e8e:	2045      	movs	r0, #69	; 0x45
 8005e90:	f7fa fcfe 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x67);
 8005e94:	2067      	movs	r0, #103	; 0x67
 8005e96:	f7fa fcfb 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8005e9a:	2001      	movs	r0, #1
 8005e9c:	f7fa fcf8 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 8005ea0:	2023      	movs	r0, #35	; 0x23
 8005ea2:	f7fa fcf5 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 8005ea6:	2045      	movs	r0, #69	; 0x45
 8005ea8:	f7fa fcf2 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x67);
 8005eac:	2067      	movs	r0, #103	; 0x67
 8005eae:	f7fa fcef 	bl	8000890 <lcd_wr_xdata>
 8005eb2:	23be      	movs	r3, #190	; 0xbe
 8005eb4:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005eb8:	4b65      	ldr	r3, [pc, #404]	; (8006050 <lcd_init+0x4548>)
 8005eba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ebe:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005ec0:	4b63      	ldr	r3, [pc, #396]	; (8006050 <lcd_init+0x4548>)
 8005ec2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ec6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005ec8:	f8b7 3130 	ldrh.w	r3, [r7, #304]	; 0x130
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	4b61      	ldr	r3, [pc, #388]	; (8006054 <lcd_init+0x454c>)
 8005ed0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005ed2:	4b5f      	ldr	r3, [pc, #380]	; (8006050 <lcd_init+0x4548>)
 8005ed4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005ed8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005eda:	4b5d      	ldr	r3, [pc, #372]	; (8006050 <lcd_init+0x4548>)
 8005edc:	2280      	movs	r2, #128	; 0x80
 8005ede:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005ee0:	4b5b      	ldr	r3, [pc, #364]	; (8006050 <lcd_init+0x4548>)
 8005ee2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ee6:	611a      	str	r2, [r3, #16]
}
 8005ee8:	bf00      	nop

        lcd_wr_regno(0xBE); /* GIP 3 */
        lcd_wr_xdata(0x00);
 8005eea:	2000      	movs	r0, #0
 8005eec:	f7fa fcd0 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8005ef0:	2001      	movs	r0, #1
 8005ef2:	f7fa fccd 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xAB);
 8005ef6:	20ab      	movs	r0, #171	; 0xab
 8005ef8:	f7fa fcca 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x60);
 8005efc:	2060      	movs	r0, #96	; 0x60
 8005efe:	f7fa fcc7 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8005f02:	2022      	movs	r0, #34	; 0x22
 8005f04:	f7fa fcc4 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8005f08:	2022      	movs	r0, #34	; 0x22
 8005f0a:	f7fa fcc1 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8005f0e:	2022      	movs	r0, #34	; 0x22
 8005f10:	f7fa fcbe 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8005f14:	2022      	movs	r0, #34	; 0x22
 8005f16:	f7fa fcbb 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8005f1a:	2022      	movs	r0, #34	; 0x22
 8005f1c:	f7fa fcb8 	bl	8000890 <lcd_wr_xdata>
 8005f20:	23c7      	movs	r3, #199	; 0xc7
 8005f22:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005f26:	4b4a      	ldr	r3, [pc, #296]	; (8006050 <lcd_init+0x4548>)
 8005f28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005f2c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005f2e:	4b48      	ldr	r3, [pc, #288]	; (8006050 <lcd_init+0x4548>)
 8005f30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f34:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005f36:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	4b45      	ldr	r3, [pc, #276]	; (8006054 <lcd_init+0x454c>)
 8005f3e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005f40:	4b43      	ldr	r3, [pc, #268]	; (8006050 <lcd_init+0x4548>)
 8005f42:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005f46:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005f48:	4b41      	ldr	r3, [pc, #260]	; (8006050 <lcd_init+0x4548>)
 8005f4a:	2280      	movs	r2, #128	; 0x80
 8005f4c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005f4e:	4b40      	ldr	r3, [pc, #256]	; (8006050 <lcd_init+0x4548>)
 8005f50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f54:	611a      	str	r2, [r3, #16]
}
 8005f56:	bf00      	nop

        lcd_wr_regno(0xC7); /* VCOM Control */
        lcd_wr_xdata(0x36);
 8005f58:	2036      	movs	r0, #54	; 0x36
 8005f5a:	f7fa fc99 	bl	8000890 <lcd_wr_xdata>
 8005f5e:	23ed      	movs	r3, #237	; 0xed
 8005f60:	f8a7 312c 	strh.w	r3, [r7, #300]	; 0x12c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005f64:	4b3a      	ldr	r3, [pc, #232]	; (8006050 <lcd_init+0x4548>)
 8005f66:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005f6a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005f6c:	4b38      	ldr	r3, [pc, #224]	; (8006050 <lcd_init+0x4548>)
 8005f6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f72:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005f74:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	4b36      	ldr	r3, [pc, #216]	; (8006054 <lcd_init+0x454c>)
 8005f7c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005f7e:	4b34      	ldr	r3, [pc, #208]	; (8006050 <lcd_init+0x4548>)
 8005f80:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005f84:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005f86:	4b32      	ldr	r3, [pc, #200]	; (8006050 <lcd_init+0x4548>)
 8005f88:	2280      	movs	r2, #128	; 0x80
 8005f8a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005f8c:	4b30      	ldr	r3, [pc, #192]	; (8006050 <lcd_init+0x4548>)
 8005f8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f92:	611a      	str	r2, [r3, #16]
}
 8005f94:	bf00      	nop

        lcd_wr_regno(0xED); /* EN_volt_reg VGMP / VGMN /VGSP / VGSN voltage to output */
        lcd_wr_xdata(0x7F);
 8005f96:	207f      	movs	r0, #127	; 0x7f
 8005f98:	f7fa fc7a 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 8005f9c:	200f      	movs	r0, #15
 8005f9e:	f7fa fc77 	bl	8000890 <lcd_wr_xdata>
 8005fa2:	23c0      	movs	r3, #192	; 0xc0
 8005fa4:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005fa8:	4b29      	ldr	r3, [pc, #164]	; (8006050 <lcd_init+0x4548>)
 8005faa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005fae:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005fb0:	4b27      	ldr	r3, [pc, #156]	; (8006050 <lcd_init+0x4548>)
 8005fb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005fb6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005fb8:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	4b25      	ldr	r3, [pc, #148]	; (8006054 <lcd_init+0x454c>)
 8005fc0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005fc2:	4b23      	ldr	r3, [pc, #140]	; (8006050 <lcd_init+0x4548>)
 8005fc4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005fc8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005fca:	4b21      	ldr	r3, [pc, #132]	; (8006050 <lcd_init+0x4548>)
 8005fcc:	2280      	movs	r2, #128	; 0x80
 8005fce:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005fd0:	4b1f      	ldr	r3, [pc, #124]	; (8006050 <lcd_init+0x4548>)
 8005fd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fd6:	611a      	str	r2, [r3, #16]
}
 8005fd8:	bf00      	nop

        lcd_wr_regno(0XC0); /* Power Control 1 Setting AVDD / AVEE / VGH / VGL */
        lcd_wr_xdata(0x0F);
 8005fda:	200f      	movs	r0, #15
 8005fdc:	f7fa fc58 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);
 8005fe0:	200b      	movs	r0, #11
 8005fe2:	f7fa fc55 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x0A);  /* VGH 15V,VGLO-10V */
 8005fe6:	200a      	movs	r0, #10
 8005fe8:	f7fa fc52 	bl	8000890 <lcd_wr_xdata>
 8005fec:	23fc      	movs	r3, #252	; 0xfc
 8005fee:	f8a7 3128 	strh.w	r3, [r7, #296]	; 0x128
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005ff2:	4b17      	ldr	r3, [pc, #92]	; (8006050 <lcd_init+0x4548>)
 8005ff4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ff8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005ffa:	4b15      	ldr	r3, [pc, #84]	; (8006050 <lcd_init+0x4548>)
 8005ffc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006000:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006002:	f8b7 3128 	ldrh.w	r3, [r7, #296]	; 0x128
 8006006:	b29a      	uxth	r2, r3
 8006008:	4b12      	ldr	r3, [pc, #72]	; (8006054 <lcd_init+0x454c>)
 800600a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800600c:	4b10      	ldr	r3, [pc, #64]	; (8006050 <lcd_init+0x4548>)
 800600e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006012:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006014:	4b0e      	ldr	r3, [pc, #56]	; (8006050 <lcd_init+0x4548>)
 8006016:	2280      	movs	r2, #128	; 0x80
 8006018:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800601a:	4b0d      	ldr	r3, [pc, #52]	; (8006050 <lcd_init+0x4548>)
 800601c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006020:	611a      	str	r2, [r3, #16]
}
 8006022:	bf00      	nop

        lcd_wr_regno(0XFC); /* AVDD / AVEE generated by internal pumping. */
        lcd_wr_xdata(0x08);
 8006024:	2008      	movs	r0, #8
 8006026:	f7fa fc33 	bl	8000890 <lcd_wr_xdata>
 800602a:	23df      	movs	r3, #223	; 0xdf
 800602c:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006030:	4b07      	ldr	r3, [pc, #28]	; (8006050 <lcd_init+0x4548>)
 8006032:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006036:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006038:	4b05      	ldr	r3, [pc, #20]	; (8006050 <lcd_init+0x4548>)
 800603a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800603e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006040:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8006044:	b29a      	uxth	r2, r3
 8006046:	4b03      	ldr	r3, [pc, #12]	; (8006054 <lcd_init+0x454c>)
 8006048:	60da      	str	r2, [r3, #12]
 800604a:	e005      	b.n	8006058 <lcd_init+0x4550>
 800604c:	2000007c 	.word	0x2000007c
 8006050:	40011000 	.word	0x40011000
 8006054:	40010c00 	.word	0x40010c00
    LCD_WR(0);
 8006058:	4bc7      	ldr	r3, [pc, #796]	; (8006378 <lcd_init+0x4870>)
 800605a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800605e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006060:	4bc5      	ldr	r3, [pc, #788]	; (8006378 <lcd_init+0x4870>)
 8006062:	2280      	movs	r2, #128	; 0x80
 8006064:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006066:	4bc4      	ldr	r3, [pc, #784]	; (8006378 <lcd_init+0x4870>)
 8006068:	f44f 7200 	mov.w	r2, #512	; 0x200
 800606c:	611a      	str	r2, [r3, #16]
}
 800606e:	bf00      	nop

        lcd_wr_regno(0XDF);
        lcd_wr_xdata(0x00);
 8006070:	2000      	movs	r0, #0
 8006072:	f7fa fc0d 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006076:	2000      	movs	r0, #0
 8006078:	f7fa fc0a 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800607c:	2000      	movs	r0, #0
 800607e:	f7fa fc07 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006082:	2000      	movs	r0, #0
 8006084:	f7fa fc04 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006088:	2000      	movs	r0, #0
 800608a:	f7fa fc01 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x20);
 800608e:	2020      	movs	r0, #32
 8006090:	f7fa fbfe 	bl	8000890 <lcd_wr_xdata>
 8006094:	23f3      	movs	r3, #243	; 0xf3
 8006096:	f8a7 3124 	strh.w	r3, [r7, #292]	; 0x124
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800609a:	4bb7      	ldr	r3, [pc, #732]	; (8006378 <lcd_init+0x4870>)
 800609c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80060a0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80060a2:	4bb5      	ldr	r3, [pc, #724]	; (8006378 <lcd_init+0x4870>)
 80060a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80060a8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80060aa:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	4bb2      	ldr	r3, [pc, #712]	; (800637c <lcd_init+0x4874>)
 80060b2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80060b4:	4bb0      	ldr	r3, [pc, #704]	; (8006378 <lcd_init+0x4870>)
 80060b6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80060ba:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80060bc:	4bae      	ldr	r3, [pc, #696]	; (8006378 <lcd_init+0x4870>)
 80060be:	2280      	movs	r2, #128	; 0x80
 80060c0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80060c2:	4bad      	ldr	r3, [pc, #692]	; (8006378 <lcd_init+0x4870>)
 80060c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060c8:	611a      	str	r2, [r3, #16]
}
 80060ca:	bf00      	nop

        lcd_wr_regno(0XF3); /* DVDD Voltage Setting */
        lcd_wr_xdata(0x74);
 80060cc:	2074      	movs	r0, #116	; 0x74
 80060ce:	f7fa fbdf 	bl	8000890 <lcd_wr_xdata>
 80060d2:	23b4      	movs	r3, #180	; 0xb4
 80060d4:	f8a7 3122 	strh.w	r3, [r7, #290]	; 0x122
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80060d8:	4ba7      	ldr	r3, [pc, #668]	; (8006378 <lcd_init+0x4870>)
 80060da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80060de:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80060e0:	4ba5      	ldr	r3, [pc, #660]	; (8006378 <lcd_init+0x4870>)
 80060e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80060e6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80060e8:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	4ba3      	ldr	r3, [pc, #652]	; (800637c <lcd_init+0x4874>)
 80060f0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80060f2:	4ba1      	ldr	r3, [pc, #644]	; (8006378 <lcd_init+0x4870>)
 80060f4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80060f8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80060fa:	4b9f      	ldr	r3, [pc, #636]	; (8006378 <lcd_init+0x4870>)
 80060fc:	2280      	movs	r2, #128	; 0x80
 80060fe:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006100:	4b9d      	ldr	r3, [pc, #628]	; (8006378 <lcd_init+0x4870>)
 8006102:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006106:	611a      	str	r2, [r3, #16]
}
 8006108:	bf00      	nop

        lcd_wr_regno(0xB4); /* Inversion Type */
        lcd_wr_xdata(0x00);  /* 02 */
 800610a:	2000      	movs	r0, #0
 800610c:	f7fa fbc0 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* 02 */
 8006110:	2000      	movs	r0, #0
 8006112:	f7fa fbbd 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* 02 */
 8006116:	2000      	movs	r0, #0
 8006118:	f7fa fbba 	bl	8000890 <lcd_wr_xdata>
 800611c:	23f7      	movs	r3, #247	; 0xf7
 800611e:	f8a7 3120 	strh.w	r3, [r7, #288]	; 0x120
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006122:	4b95      	ldr	r3, [pc, #596]	; (8006378 <lcd_init+0x4870>)
 8006124:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006128:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800612a:	4b93      	ldr	r3, [pc, #588]	; (8006378 <lcd_init+0x4870>)
 800612c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006130:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006132:	f8b7 3120 	ldrh.w	r3, [r7, #288]	; 0x120
 8006136:	b29a      	uxth	r2, r3
 8006138:	4b90      	ldr	r3, [pc, #576]	; (800637c <lcd_init+0x4874>)
 800613a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800613c:	4b8e      	ldr	r3, [pc, #568]	; (8006378 <lcd_init+0x4870>)
 800613e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006142:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006144:	4b8c      	ldr	r3, [pc, #560]	; (8006378 <lcd_init+0x4870>)
 8006146:	2280      	movs	r2, #128	; 0x80
 8006148:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800614a:	4b8b      	ldr	r3, [pc, #556]	; (8006378 <lcd_init+0x4870>)
 800614c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006150:	611a      	str	r2, [r3, #16]
}
 8006152:	bf00      	nop

        lcd_wr_regno(0xF7); /* Resolution Control */
        lcd_wr_xdata(0x82);  /* 480*800 */
 8006154:	2082      	movs	r0, #130	; 0x82
 8006156:	f7fa fb9b 	bl	8000890 <lcd_wr_xdata>
 800615a:	23b1      	movs	r3, #177	; 0xb1
 800615c:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006160:	4b85      	ldr	r3, [pc, #532]	; (8006378 <lcd_init+0x4870>)
 8006162:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006166:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006168:	4b83      	ldr	r3, [pc, #524]	; (8006378 <lcd_init+0x4870>)
 800616a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800616e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006170:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 8006174:	b29a      	uxth	r2, r3
 8006176:	4b81      	ldr	r3, [pc, #516]	; (800637c <lcd_init+0x4874>)
 8006178:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800617a:	4b7f      	ldr	r3, [pc, #508]	; (8006378 <lcd_init+0x4870>)
 800617c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006180:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006182:	4b7d      	ldr	r3, [pc, #500]	; (8006378 <lcd_init+0x4870>)
 8006184:	2280      	movs	r2, #128	; 0x80
 8006186:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006188:	4b7b      	ldr	r3, [pc, #492]	; (8006378 <lcd_init+0x4870>)
 800618a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800618e:	611a      	str	r2, [r3, #16]
}
 8006190:	bf00      	nop

        lcd_wr_regno(0xB1); /* FRAME RATE Setting */
        lcd_wr_xdata(0x00);
 8006192:	2000      	movs	r0, #0
 8006194:	f7fa fb7c 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x13);
 8006198:	2013      	movs	r0, #19
 800619a:	f7fa fb79 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x13);
 800619e:	2013      	movs	r0, #19
 80061a0:	f7fa fb76 	bl	8000890 <lcd_wr_xdata>
 80061a4:	23f2      	movs	r3, #242	; 0xf2
 80061a6:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80061aa:	4b73      	ldr	r3, [pc, #460]	; (8006378 <lcd_init+0x4870>)
 80061ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80061b0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80061b2:	4b71      	ldr	r3, [pc, #452]	; (8006378 <lcd_init+0x4870>)
 80061b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80061b8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80061ba:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 80061be:	b29a      	uxth	r2, r3
 80061c0:	4b6e      	ldr	r3, [pc, #440]	; (800637c <lcd_init+0x4874>)
 80061c2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80061c4:	4b6c      	ldr	r3, [pc, #432]	; (8006378 <lcd_init+0x4870>)
 80061c6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80061ca:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80061cc:	4b6a      	ldr	r3, [pc, #424]	; (8006378 <lcd_init+0x4870>)
 80061ce:	2280      	movs	r2, #128	; 0x80
 80061d0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80061d2:	4b69      	ldr	r3, [pc, #420]	; (8006378 <lcd_init+0x4870>)
 80061d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061d8:	611a      	str	r2, [r3, #16]
}
 80061da:	bf00      	nop

        lcd_wr_regno(0XF2); /* CR_EQ_PC_SDT  #C0,06,40,28 */
        lcd_wr_xdata(0x80);
 80061dc:	2080      	movs	r0, #128	; 0x80
 80061de:	f7fa fb57 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x04);
 80061e2:	2004      	movs	r0, #4
 80061e4:	f7fa fb54 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x40);
 80061e8:	2040      	movs	r0, #64	; 0x40
 80061ea:	f7fa fb51 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x28);
 80061ee:	2028      	movs	r0, #40	; 0x28
 80061f0:	f7fa fb4e 	bl	8000890 <lcd_wr_xdata>
 80061f4:	23c1      	movs	r3, #193	; 0xc1
 80061f6:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80061fa:	4b5f      	ldr	r3, [pc, #380]	; (8006378 <lcd_init+0x4870>)
 80061fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006200:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006202:	4b5d      	ldr	r3, [pc, #372]	; (8006378 <lcd_init+0x4870>)
 8006204:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006208:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800620a:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 800620e:	b29a      	uxth	r2, r3
 8006210:	4b5a      	ldr	r3, [pc, #360]	; (800637c <lcd_init+0x4874>)
 8006212:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006214:	4b58      	ldr	r3, [pc, #352]	; (8006378 <lcd_init+0x4870>)
 8006216:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800621a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800621c:	4b56      	ldr	r3, [pc, #344]	; (8006378 <lcd_init+0x4870>)
 800621e:	2280      	movs	r2, #128	; 0x80
 8006220:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006222:	4b55      	ldr	r3, [pc, #340]	; (8006378 <lcd_init+0x4870>)
 8006224:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006228:	611a      	str	r2, [r3, #16]
}
 800622a:	bf00      	nop

        lcd_wr_regno(0XC1); /* Power Control 2  SD OP Bias_VRH1_VRH2_EXT_CPCK_SEL */
        lcd_wr_xdata(0x17);
 800622c:	2017      	movs	r0, #23
 800622e:	f7fa fb2f 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);  /* VGMP */
 8006232:	2088      	movs	r0, #136	; 0x88
 8006234:	f7fa fb2c 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);  /* VGMN */
 8006238:	2088      	movs	r0, #136	; 0x88
 800623a:	f7fa fb29 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x20);
 800623e:	2020      	movs	r0, #32
 8006240:	f7fa fb26 	bl	8000890 <lcd_wr_xdata>
 8006244:	23e0      	movs	r3, #224	; 0xe0
 8006246:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800624a:	4b4b      	ldr	r3, [pc, #300]	; (8006378 <lcd_init+0x4870>)
 800624c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006250:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006252:	4b49      	ldr	r3, [pc, #292]	; (8006378 <lcd_init+0x4870>)
 8006254:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006258:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800625a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800625e:	b29a      	uxth	r2, r3
 8006260:	4b46      	ldr	r3, [pc, #280]	; (800637c <lcd_init+0x4874>)
 8006262:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006264:	4b44      	ldr	r3, [pc, #272]	; (8006378 <lcd_init+0x4870>)
 8006266:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800626a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800626c:	4b42      	ldr	r3, [pc, #264]	; (8006378 <lcd_init+0x4870>)
 800626e:	2280      	movs	r2, #128	; 0x80
 8006270:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006272:	4b41      	ldr	r3, [pc, #260]	; (8006378 <lcd_init+0x4870>)
 8006274:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006278:	611a      	str	r2, [r3, #16]
}
 800627a:	bf00      	nop

        lcd_wr_regno(0xE0); /* Positive Gamma Control */
        lcd_wr_xdata(0x00);  /* P1 */
 800627c:	2000      	movs	r0, #0
 800627e:	f7fa fb07 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x0A);  /* P2 */
 8006282:	200a      	movs	r0, #10
 8006284:	f7fa fb04 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x12);  /* P3 */
 8006288:	2012      	movs	r0, #18
 800628a:	f7fa fb01 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);  /* P4 */
 800628e:	2010      	movs	r0, #16
 8006290:	f7fa fafe 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);  /* P5 */
 8006294:	200e      	movs	r0, #14
 8006296:	f7fa fafb 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x20);  /* P6 */
 800629a:	2020      	movs	r0, #32
 800629c:	f7fa faf8 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xCC);  /* P7 */
 80062a0:	20cc      	movs	r0, #204	; 0xcc
 80062a2:	f7fa faf5 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x07);  /* P8 */
 80062a6:	2007      	movs	r0, #7
 80062a8:	f7fa faf2 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x06);  /* P9 */
 80062ac:	2006      	movs	r0, #6
 80062ae:	f7fa faef 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);  /* P10 */
 80062b2:	200b      	movs	r0, #11
 80062b4:	f7fa faec 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);  /* P11 */
 80062b8:	200e      	movs	r0, #14
 80062ba:	f7fa fae9 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);  /* P12 */
 80062be:	200f      	movs	r0, #15
 80062c0:	f7fa fae6 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x0D);  /* P13 */
 80062c4:	200d      	movs	r0, #13
 80062c6:	f7fa fae3 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x15);  /* P14 */
 80062ca:	2015      	movs	r0, #21
 80062cc:	f7fa fae0 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);  /* P15 */
 80062d0:	2010      	movs	r0, #16
 80062d2:	f7fa fadd 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* P16 */
 80062d6:	2000      	movs	r0, #0
 80062d8:	f7fa fada 	bl	8000890 <lcd_wr_xdata>
 80062dc:	23e1      	movs	r3, #225	; 0xe1
 80062de:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80062e2:	4b25      	ldr	r3, [pc, #148]	; (8006378 <lcd_init+0x4870>)
 80062e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80062e8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80062ea:	4b23      	ldr	r3, [pc, #140]	; (8006378 <lcd_init+0x4870>)
 80062ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80062f0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80062f2:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	4b20      	ldr	r3, [pc, #128]	; (800637c <lcd_init+0x4874>)
 80062fa:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80062fc:	4b1e      	ldr	r3, [pc, #120]	; (8006378 <lcd_init+0x4870>)
 80062fe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006302:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006304:	4b1c      	ldr	r3, [pc, #112]	; (8006378 <lcd_init+0x4870>)
 8006306:	2280      	movs	r2, #128	; 0x80
 8006308:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800630a:	4b1b      	ldr	r3, [pc, #108]	; (8006378 <lcd_init+0x4870>)
 800630c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006310:	611a      	str	r2, [r3, #16]
}
 8006312:	bf00      	nop

        lcd_wr_regno(0xE1); /* Negative Gamma Correction */
        lcd_wr_xdata(0x00);  /* P1 */
 8006314:	2000      	movs	r0, #0
 8006316:	f7fa fabb 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);  /* P2 */
 800631a:	200b      	movs	r0, #11
 800631c:	f7fa fab8 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x13);  /* P3 */
 8006320:	2013      	movs	r0, #19
 8006322:	f7fa fab5 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x0D);  /* P4 */
 8006326:	200d      	movs	r0, #13
 8006328:	f7fa fab2 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);  /* P5 */
 800632c:	200e      	movs	r0, #14
 800632e:	f7fa faaf 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x1B);  /* P6 */
 8006332:	201b      	movs	r0, #27
 8006334:	f7fa faac 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x71);  /* P7 */
 8006338:	2071      	movs	r0, #113	; 0x71
 800633a:	f7fa faa9 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x06);  /* P8 */
 800633e:	2006      	movs	r0, #6
 8006340:	f7fa faa6 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x06);  /* P9 */
 8006344:	2006      	movs	r0, #6
 8006346:	f7fa faa3 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x0A);  /* P10 */
 800634a:	200a      	movs	r0, #10
 800634c:	f7fa faa0 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);  /* P11 */
 8006350:	200f      	movs	r0, #15
 8006352:	f7fa fa9d 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);  /* P12 */
 8006356:	200e      	movs	r0, #14
 8006358:	f7fa fa9a 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);  /* P13 */
 800635c:	200f      	movs	r0, #15
 800635e:	f7fa fa97 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x15);  /* P14 */
 8006362:	2015      	movs	r0, #21
 8006364:	f7fa fa94 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x0C);  /* P15 */
 8006368:	200c      	movs	r0, #12
 800636a:	f7fa fa91 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* P16 */
 800636e:	2000      	movs	r0, #0
 8006370:	f7fa fa8e 	bl	8000890 <lcd_wr_xdata>
 8006374:	e004      	b.n	8006380 <lcd_init+0x4878>
 8006376:	bf00      	nop
 8006378:	40011000 	.word	0x40011000
 800637c:	40010c00 	.word	0x40010c00
 8006380:	232a      	movs	r3, #42	; 0x2a
 8006382:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006386:	4b72      	ldr	r3, [pc, #456]	; (8006550 <lcd_init+0x4a48>)
 8006388:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800638c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800638e:	4b70      	ldr	r3, [pc, #448]	; (8006550 <lcd_init+0x4a48>)
 8006390:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006394:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006396:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 800639a:	b29a      	uxth	r2, r3
 800639c:	4b6d      	ldr	r3, [pc, #436]	; (8006554 <lcd_init+0x4a4c>)
 800639e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80063a0:	4b6b      	ldr	r3, [pc, #428]	; (8006550 <lcd_init+0x4a48>)
 80063a2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80063a6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80063a8:	4b69      	ldr	r3, [pc, #420]	; (8006550 <lcd_init+0x4a48>)
 80063aa:	2280      	movs	r2, #128	; 0x80
 80063ac:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80063ae:	4b68      	ldr	r3, [pc, #416]	; (8006550 <lcd_init+0x4a48>)
 80063b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063b4:	611a      	str	r2, [r3, #16]
}
 80063b6:	bf00      	nop

        lcd_wr_regno(0x2a);
        lcd_wr_xdata(0x00);
 80063b8:	2000      	movs	r0, #0
 80063ba:	f7fa fa69 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80063be:	2000      	movs	r0, #0
 80063c0:	f7fa fa66 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 80063c4:	2001      	movs	r0, #1
 80063c6:	f7fa fa63 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xdf);
 80063ca:	20df      	movs	r0, #223	; 0xdf
 80063cc:	f7fa fa60 	bl	8000890 <lcd_wr_xdata>
 80063d0:	232b      	movs	r3, #43	; 0x2b
 80063d2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80063d6:	4b5e      	ldr	r3, [pc, #376]	; (8006550 <lcd_init+0x4a48>)
 80063d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80063dc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80063de:	4b5c      	ldr	r3, [pc, #368]	; (8006550 <lcd_init+0x4a48>)
 80063e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80063e4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80063e6:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	4b59      	ldr	r3, [pc, #356]	; (8006554 <lcd_init+0x4a4c>)
 80063ee:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80063f0:	4b57      	ldr	r3, [pc, #348]	; (8006550 <lcd_init+0x4a48>)
 80063f2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80063f6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80063f8:	4b55      	ldr	r3, [pc, #340]	; (8006550 <lcd_init+0x4a48>)
 80063fa:	2280      	movs	r2, #128	; 0x80
 80063fc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80063fe:	4b54      	ldr	r3, [pc, #336]	; (8006550 <lcd_init+0x4a48>)
 8006400:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006404:	611a      	str	r2, [r3, #16]
}
 8006406:	bf00      	nop

        lcd_wr_regno(0x2b);
        lcd_wr_xdata(0x00);
 8006408:	2000      	movs	r0, #0
 800640a:	f7fa fa41 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800640e:	2000      	movs	r0, #0
 8006410:	f7fa fa3e 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x03);
 8006414:	2003      	movs	r0, #3
 8006416:	f7fa fa3b 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x1f);
 800641a:	201f      	movs	r0, #31
 800641c:	f7fa fa38 	bl	8000890 <lcd_wr_xdata>
 8006420:	233a      	movs	r3, #58	; 0x3a
 8006422:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006426:	4b4a      	ldr	r3, [pc, #296]	; (8006550 <lcd_init+0x4a48>)
 8006428:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800642c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800642e:	4b48      	ldr	r3, [pc, #288]	; (8006550 <lcd_init+0x4a48>)
 8006430:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006434:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006436:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 800643a:	b29a      	uxth	r2, r3
 800643c:	4b45      	ldr	r3, [pc, #276]	; (8006554 <lcd_init+0x4a4c>)
 800643e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006440:	4b43      	ldr	r3, [pc, #268]	; (8006550 <lcd_init+0x4a48>)
 8006442:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006446:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006448:	4b41      	ldr	r3, [pc, #260]	; (8006550 <lcd_init+0x4a48>)
 800644a:	2280      	movs	r2, #128	; 0x80
 800644c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800644e:	4b40      	ldr	r3, [pc, #256]	; (8006550 <lcd_init+0x4a48>)
 8006450:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006454:	611a      	str	r2, [r3, #16]
}
 8006456:	bf00      	nop

        lcd_wr_regno(0x3A); /* Pixel Format */
        lcd_wr_xdata(0x55);
 8006458:	2055      	movs	r0, #85	; 0x55
 800645a:	f7fa fa19 	bl	8000890 <lcd_wr_xdata>
 800645e:	2336      	movs	r3, #54	; 0x36
 8006460:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006464:	4b3a      	ldr	r3, [pc, #232]	; (8006550 <lcd_init+0x4a48>)
 8006466:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800646a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800646c:	4b38      	ldr	r3, [pc, #224]	; (8006550 <lcd_init+0x4a48>)
 800646e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006472:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006474:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8006478:	b29a      	uxth	r2, r3
 800647a:	4b36      	ldr	r3, [pc, #216]	; (8006554 <lcd_init+0x4a4c>)
 800647c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800647e:	4b34      	ldr	r3, [pc, #208]	; (8006550 <lcd_init+0x4a48>)
 8006480:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006484:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006486:	4b32      	ldr	r3, [pc, #200]	; (8006550 <lcd_init+0x4a48>)
 8006488:	2280      	movs	r2, #128	; 0x80
 800648a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800648c:	4b30      	ldr	r3, [pc, #192]	; (8006550 <lcd_init+0x4a48>)
 800648e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006492:	611a      	str	r2, [r3, #16]
}
 8006494:	bf00      	nop

        lcd_wr_regno(0x36); /* Memory Access Control */
        lcd_wr_xdata(0x00);  /* 02-180 */
 8006496:	2000      	movs	r0, #0
 8006498:	f7fa f9fa 	bl	8000890 <lcd_wr_xdata>
 800649c:	2311      	movs	r3, #17
 800649e:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80064a2:	4b2b      	ldr	r3, [pc, #172]	; (8006550 <lcd_init+0x4a48>)
 80064a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80064a8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80064aa:	4b29      	ldr	r3, [pc, #164]	; (8006550 <lcd_init+0x4a48>)
 80064ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80064b0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80064b2:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 80064b6:	b29a      	uxth	r2, r3
 80064b8:	4b26      	ldr	r3, [pc, #152]	; (8006554 <lcd_init+0x4a4c>)
 80064ba:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80064bc:	4b24      	ldr	r3, [pc, #144]	; (8006550 <lcd_init+0x4a48>)
 80064be:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80064c2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80064c4:	4b22      	ldr	r3, [pc, #136]	; (8006550 <lcd_init+0x4a48>)
 80064c6:	2280      	movs	r2, #128	; 0x80
 80064c8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80064ca:	4b21      	ldr	r3, [pc, #132]	; (8006550 <lcd_init+0x4a48>)
 80064cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064d0:	611a      	str	r2, [r3, #16]
}
 80064d2:	bf00      	nop

        lcd_wr_regno(0x11);
        HAL_Delay(120);
 80064d4:	2078      	movs	r0, #120	; 0x78
 80064d6:	f001 f863 	bl	80075a0 <HAL_Delay>
 80064da:	2329      	movs	r3, #41	; 0x29
 80064dc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80064e0:	4b1b      	ldr	r3, [pc, #108]	; (8006550 <lcd_init+0x4a48>)
 80064e2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80064e6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80064e8:	4b19      	ldr	r3, [pc, #100]	; (8006550 <lcd_init+0x4a48>)
 80064ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80064ee:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80064f0:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	4b17      	ldr	r3, [pc, #92]	; (8006554 <lcd_init+0x4a4c>)
 80064f8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80064fa:	4b15      	ldr	r3, [pc, #84]	; (8006550 <lcd_init+0x4a48>)
 80064fc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006500:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006502:	4b13      	ldr	r3, [pc, #76]	; (8006550 <lcd_init+0x4a48>)
 8006504:	2280      	movs	r2, #128	; 0x80
 8006506:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006508:	4b11      	ldr	r3, [pc, #68]	; (8006550 <lcd_init+0x4a48>)
 800650a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800650e:	611a      	str	r2, [r3, #16]
}
 8006510:	bf00      	nop
        lcd_wr_regno(0x29);
        HAL_Delay(20);
 8006512:	2014      	movs	r0, #20
 8006514:	f001 f844 	bl	80075a0 <HAL_Delay>
 8006518:	232c      	movs	r3, #44	; 0x2c
 800651a:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800651e:	4b0c      	ldr	r3, [pc, #48]	; (8006550 <lcd_init+0x4a48>)
 8006520:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006524:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006526:	4b0a      	ldr	r3, [pc, #40]	; (8006550 <lcd_init+0x4a48>)
 8006528:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800652c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800652e:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
 8006532:	b29a      	uxth	r2, r3
 8006534:	4b07      	ldr	r3, [pc, #28]	; (8006554 <lcd_init+0x4a4c>)
 8006536:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006538:	4b05      	ldr	r3, [pc, #20]	; (8006550 <lcd_init+0x4a48>)
 800653a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800653e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006540:	4b03      	ldr	r3, [pc, #12]	; (8006550 <lcd_init+0x4a48>)
 8006542:	2280      	movs	r2, #128	; 0x80
 8006544:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006546:	4b02      	ldr	r3, [pc, #8]	; (8006550 <lcd_init+0x4a48>)
 8006548:	f44f 7200 	mov.w	r2, #512	; 0x200
 800654c:	611a      	str	r2, [r3, #16]
}
 800654e:	e224      	b.n	800699a <lcd_init+0x4e92>
 8006550:	40011000 	.word	0x40011000
 8006554:	40010c00 	.word	0x40010c00
        lcd_wr_regno(0x2C);
    }
    else if (lcddev.id == 0x1963)
 8006558:	4bbe      	ldr	r3, [pc, #760]	; (8006854 <lcd_init+0x4d4c>)
 800655a:	889b      	ldrh	r3, [r3, #4]
 800655c:	f641 1263 	movw	r2, #6499	; 0x1963
 8006560:	4293      	cmp	r3, r2
 8006562:	f040 821a 	bne.w	800699a <lcd_init+0x4e92>
 8006566:	23e2      	movs	r3, #226	; 0xe2
 8006568:	f8a7 3152 	strh.w	r3, [r7, #338]	; 0x152
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800656c:	4bba      	ldr	r3, [pc, #744]	; (8006858 <lcd_init+0x4d50>)
 800656e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006572:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006574:	4bb8      	ldr	r3, [pc, #736]	; (8006858 <lcd_init+0x4d50>)
 8006576:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800657a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800657c:	f8b7 3152 	ldrh.w	r3, [r7, #338]	; 0x152
 8006580:	b29a      	uxth	r2, r3
 8006582:	4bb6      	ldr	r3, [pc, #728]	; (800685c <lcd_init+0x4d54>)
 8006584:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006586:	4bb4      	ldr	r3, [pc, #720]	; (8006858 <lcd_init+0x4d50>)
 8006588:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800658c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800658e:	4bb2      	ldr	r3, [pc, #712]	; (8006858 <lcd_init+0x4d50>)
 8006590:	2280      	movs	r2, #128	; 0x80
 8006592:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006594:	4bb0      	ldr	r3, [pc, #704]	; (8006858 <lcd_init+0x4d50>)
 8006596:	f44f 7200 	mov.w	r2, #512	; 0x200
 800659a:	611a      	str	r2, [r3, #16]
}
 800659c:	bf00      	nop
    {
        //lcd_ex_ssd1963_reginit();   /* ִ��SSD1963��ʼ�� */
        lcd_wr_regno(0xE2); /* Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz */
        lcd_wr_xdata(0x1D); /* ����1 */
 800659e:	201d      	movs	r0, #29
 80065a0:	f7fa f976 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x02); /* ����2 Divider M = 2, PLL = 300/(M+1) = 100MHz */
 80065a4:	2002      	movs	r0, #2
 80065a6:	f7fa f973 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x04); /* ����3 Validate M and N values */
 80065aa:	2004      	movs	r0, #4
 80065ac:	f7fa f970 	bl	8000890 <lcd_wr_xdata>
 80065b0:	23e0      	movs	r3, #224	; 0xe0
 80065b2:	f8a7 3150 	strh.w	r3, [r7, #336]	; 0x150
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80065b6:	4ba8      	ldr	r3, [pc, #672]	; (8006858 <lcd_init+0x4d50>)
 80065b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80065bc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80065be:	4ba6      	ldr	r3, [pc, #664]	; (8006858 <lcd_init+0x4d50>)
 80065c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80065c4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80065c6:	f8b7 3150 	ldrh.w	r3, [r7, #336]	; 0x150
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	4ba3      	ldr	r3, [pc, #652]	; (800685c <lcd_init+0x4d54>)
 80065ce:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80065d0:	4ba1      	ldr	r3, [pc, #644]	; (8006858 <lcd_init+0x4d50>)
 80065d2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80065d6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80065d8:	4b9f      	ldr	r3, [pc, #636]	; (8006858 <lcd_init+0x4d50>)
 80065da:	2280      	movs	r2, #128	; 0x80
 80065dc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80065de:	4b9e      	ldr	r3, [pc, #632]	; (8006858 <lcd_init+0x4d50>)
 80065e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065e4:	611a      	str	r2, [r3, #16]
}
 80065e6:	bf00      	nop
        //delay_us(100);
        lcd_wr_regno(0xE0); /*  Start PLL command */
        lcd_wr_xdata(0x01); /*  enable PLL */
 80065e8:	2001      	movs	r0, #1
 80065ea:	f7fa f951 	bl	8000890 <lcd_wr_xdata>
        HAL_Delay(10);
 80065ee:	200a      	movs	r0, #10
 80065f0:	f000 ffd6 	bl	80075a0 <HAL_Delay>
 80065f4:	23e0      	movs	r3, #224	; 0xe0
 80065f6:	f8a7 314e 	strh.w	r3, [r7, #334]	; 0x14e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80065fa:	4b97      	ldr	r3, [pc, #604]	; (8006858 <lcd_init+0x4d50>)
 80065fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006600:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006602:	4b95      	ldr	r3, [pc, #596]	; (8006858 <lcd_init+0x4d50>)
 8006604:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006608:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800660a:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 800660e:	b29a      	uxth	r2, r3
 8006610:	4b92      	ldr	r3, [pc, #584]	; (800685c <lcd_init+0x4d54>)
 8006612:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006614:	4b90      	ldr	r3, [pc, #576]	; (8006858 <lcd_init+0x4d50>)
 8006616:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800661a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800661c:	4b8e      	ldr	r3, [pc, #568]	; (8006858 <lcd_init+0x4d50>)
 800661e:	2280      	movs	r2, #128	; 0x80
 8006620:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006622:	4b8d      	ldr	r3, [pc, #564]	; (8006858 <lcd_init+0x4d50>)
 8006624:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006628:	611a      	str	r2, [r3, #16]
}
 800662a:	bf00      	nop
        lcd_wr_regno(0xE0); /*  Start PLL command again */
        lcd_wr_xdata(0x03); /*  now, use PLL output as system clock */
 800662c:	2003      	movs	r0, #3
 800662e:	f7fa f92f 	bl	8000890 <lcd_wr_xdata>
        HAL_Delay(12);
 8006632:	200c      	movs	r0, #12
 8006634:	f000 ffb4 	bl	80075a0 <HAL_Delay>
 8006638:	2301      	movs	r3, #1
 800663a:	f8a7 314c 	strh.w	r3, [r7, #332]	; 0x14c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800663e:	4b86      	ldr	r3, [pc, #536]	; (8006858 <lcd_init+0x4d50>)
 8006640:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006644:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006646:	4b84      	ldr	r3, [pc, #528]	; (8006858 <lcd_init+0x4d50>)
 8006648:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800664c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800664e:	f8b7 314c 	ldrh.w	r3, [r7, #332]	; 0x14c
 8006652:	b29a      	uxth	r2, r3
 8006654:	4b81      	ldr	r3, [pc, #516]	; (800685c <lcd_init+0x4d54>)
 8006656:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006658:	4b7f      	ldr	r3, [pc, #508]	; (8006858 <lcd_init+0x4d50>)
 800665a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800665e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006660:	4b7d      	ldr	r3, [pc, #500]	; (8006858 <lcd_init+0x4d50>)
 8006662:	2280      	movs	r2, #128	; 0x80
 8006664:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006666:	4b7c      	ldr	r3, [pc, #496]	; (8006858 <lcd_init+0x4d50>)
 8006668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800666c:	611a      	str	r2, [r3, #16]
}
 800666e:	bf00      	nop
        lcd_wr_regno(0x01); /* ��λ */
        HAL_Delay(10);
 8006670:	200a      	movs	r0, #10
 8006672:	f000 ff95 	bl	80075a0 <HAL_Delay>
 8006676:	23e6      	movs	r3, #230	; 0xe6
 8006678:	f8a7 314a 	strh.w	r3, [r7, #330]	; 0x14a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800667c:	4b76      	ldr	r3, [pc, #472]	; (8006858 <lcd_init+0x4d50>)
 800667e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006682:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006684:	4b74      	ldr	r3, [pc, #464]	; (8006858 <lcd_init+0x4d50>)
 8006686:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800668a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800668c:	f8b7 314a 	ldrh.w	r3, [r7, #330]	; 0x14a
 8006690:	b29a      	uxth	r2, r3
 8006692:	4b72      	ldr	r3, [pc, #456]	; (800685c <lcd_init+0x4d54>)
 8006694:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006696:	4b70      	ldr	r3, [pc, #448]	; (8006858 <lcd_init+0x4d50>)
 8006698:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800669c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800669e:	4b6e      	ldr	r3, [pc, #440]	; (8006858 <lcd_init+0x4d50>)
 80066a0:	2280      	movs	r2, #128	; 0x80
 80066a2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80066a4:	4b6c      	ldr	r3, [pc, #432]	; (8006858 <lcd_init+0x4d50>)
 80066a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066aa:	611a      	str	r2, [r3, #16]
}
 80066ac:	bf00      	nop

        lcd_wr_regno(0xE6); /* ��������Ƶ��,33Mhz */
        lcd_wr_xdata(0x2F);
 80066ae:	202f      	movs	r0, #47	; 0x2f
 80066b0:	f7fa f8ee 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 80066b4:	20ff      	movs	r0, #255	; 0xff
 80066b6:	f7fa f8eb 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 80066ba:	20ff      	movs	r0, #255	; 0xff
 80066bc:	f7fa f8e8 	bl	8000890 <lcd_wr_xdata>
 80066c0:	23b0      	movs	r3, #176	; 0xb0
 80066c2:	f8a7 3148 	strh.w	r3, [r7, #328]	; 0x148
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80066c6:	4b64      	ldr	r3, [pc, #400]	; (8006858 <lcd_init+0x4d50>)
 80066c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80066cc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80066ce:	4b62      	ldr	r3, [pc, #392]	; (8006858 <lcd_init+0x4d50>)
 80066d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80066d4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80066d6:	f8b7 3148 	ldrh.w	r3, [r7, #328]	; 0x148
 80066da:	b29a      	uxth	r2, r3
 80066dc:	4b5f      	ldr	r3, [pc, #380]	; (800685c <lcd_init+0x4d54>)
 80066de:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80066e0:	4b5d      	ldr	r3, [pc, #372]	; (8006858 <lcd_init+0x4d50>)
 80066e2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80066e6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80066e8:	4b5b      	ldr	r3, [pc, #364]	; (8006858 <lcd_init+0x4d50>)
 80066ea:	2280      	movs	r2, #128	; 0x80
 80066ec:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80066ee:	4b5a      	ldr	r3, [pc, #360]	; (8006858 <lcd_init+0x4d50>)
 80066f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066f4:	611a      	str	r2, [r3, #16]
}
 80066f6:	bf00      	nop

        lcd_wr_regno(0xB0); /* ����LCDģʽ */
        lcd_wr_xdata(0x20); /* 24λģʽ */
 80066f8:	2020      	movs	r0, #32
 80066fa:	f7fa f8c9 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00); /* TFT ģʽ */
 80066fe:	2000      	movs	r0, #0
 8006700:	f7fa f8c6 	bl	8000890 <lcd_wr_xdata>

        lcd_wr_xdata((SSD_HOR_RESOLUTION - 1) >> 8); /* ����LCDˮƽ���� */
 8006704:	2003      	movs	r0, #3
 8006706:	f7fa f8c3 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HOR_RESOLUTION - 1);
 800670a:	f240 301f 	movw	r0, #799	; 0x31f
 800670e:	f7fa f8bf 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata((SSD_VER_RESOLUTION - 1) >> 8); /* ����LCD��ֱ���� */
 8006712:	2001      	movs	r0, #1
 8006714:	f7fa f8bc 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VER_RESOLUTION - 1);
 8006718:	f240 10df 	movw	r0, #479	; 0x1df
 800671c:	f7fa f8b8 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* RGB���� */
 8006720:	2000      	movs	r0, #0
 8006722:	f7fa f8b5 	bl	8000890 <lcd_wr_xdata>
 8006726:	23b4      	movs	r3, #180	; 0xb4
 8006728:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800672c:	4b4a      	ldr	r3, [pc, #296]	; (8006858 <lcd_init+0x4d50>)
 800672e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006732:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006734:	4b48      	ldr	r3, [pc, #288]	; (8006858 <lcd_init+0x4d50>)
 8006736:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800673a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800673c:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8006740:	b29a      	uxth	r2, r3
 8006742:	4b46      	ldr	r3, [pc, #280]	; (800685c <lcd_init+0x4d54>)
 8006744:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006746:	4b44      	ldr	r3, [pc, #272]	; (8006858 <lcd_init+0x4d50>)
 8006748:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800674c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800674e:	4b42      	ldr	r3, [pc, #264]	; (8006858 <lcd_init+0x4d50>)
 8006750:	2280      	movs	r2, #128	; 0x80
 8006752:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006754:	4b40      	ldr	r3, [pc, #256]	; (8006858 <lcd_init+0x4d50>)
 8006756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800675a:	611a      	str	r2, [r3, #16]
}
 800675c:	bf00      	nop

        lcd_wr_regno(0xB4); /* Set horizontal period */
        lcd_wr_xdata((SSD_HT - 1) >> 8);
 800675e:	2004      	movs	r0, #4
 8006760:	f7fa f896 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HT - 1);
 8006764:	f240 401f 	movw	r0, #1055	; 0x41f
 8006768:	f7fa f892 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HPS >> 8);
 800676c:	2000      	movs	r0, #0
 800676e:	f7fa f88f 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HPS);
 8006772:	202e      	movs	r0, #46	; 0x2e
 8006774:	f7fa f88c 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HOR_PULSE_WIDTH - 1);
 8006778:	2000      	movs	r0, #0
 800677a:	f7fa f889 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800677e:	2000      	movs	r0, #0
 8006780:	f7fa f886 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006784:	2000      	movs	r0, #0
 8006786:	f7fa f883 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800678a:	2000      	movs	r0, #0
 800678c:	f7fa f880 	bl	8000890 <lcd_wr_xdata>
 8006790:	23b6      	movs	r3, #182	; 0xb6
 8006792:	f8a7 3144 	strh.w	r3, [r7, #324]	; 0x144
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006796:	4b30      	ldr	r3, [pc, #192]	; (8006858 <lcd_init+0x4d50>)
 8006798:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800679c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800679e:	4b2e      	ldr	r3, [pc, #184]	; (8006858 <lcd_init+0x4d50>)
 80067a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80067a4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80067a6:	f8b7 3144 	ldrh.w	r3, [r7, #324]	; 0x144
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	4b2b      	ldr	r3, [pc, #172]	; (800685c <lcd_init+0x4d54>)
 80067ae:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80067b0:	4b29      	ldr	r3, [pc, #164]	; (8006858 <lcd_init+0x4d50>)
 80067b2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80067b6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80067b8:	4b27      	ldr	r3, [pc, #156]	; (8006858 <lcd_init+0x4d50>)
 80067ba:	2280      	movs	r2, #128	; 0x80
 80067bc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80067be:	4b26      	ldr	r3, [pc, #152]	; (8006858 <lcd_init+0x4d50>)
 80067c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067c4:	611a      	str	r2, [r3, #16]
}
 80067c6:	bf00      	nop
        lcd_wr_regno(0xB6); /* Set vertical perio */
        lcd_wr_xdata((SSD_VT - 1) >> 8);
 80067c8:	2002      	movs	r0, #2
 80067ca:	f7fa f861 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VT - 1);
 80067ce:	f44f 7003 	mov.w	r0, #524	; 0x20c
 80067d2:	f7fa f85d 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VPS >> 8);
 80067d6:	2000      	movs	r0, #0
 80067d8:	f7fa f85a 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VPS);
 80067dc:	2017      	movs	r0, #23
 80067de:	f7fa f857 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VER_FRONT_PORCH - 1);
 80067e2:	2015      	movs	r0, #21
 80067e4:	f7fa f854 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80067e8:	2000      	movs	r0, #0
 80067ea:	f7fa f851 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80067ee:	2000      	movs	r0, #0
 80067f0:	f7fa f84e 	bl	8000890 <lcd_wr_xdata>
 80067f4:	23f0      	movs	r3, #240	; 0xf0
 80067f6:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80067fa:	4b17      	ldr	r3, [pc, #92]	; (8006858 <lcd_init+0x4d50>)
 80067fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006800:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006802:	4b15      	ldr	r3, [pc, #84]	; (8006858 <lcd_init+0x4d50>)
 8006804:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006808:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800680a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800680e:	b29a      	uxth	r2, r3
 8006810:	4b12      	ldr	r3, [pc, #72]	; (800685c <lcd_init+0x4d54>)
 8006812:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006814:	4b10      	ldr	r3, [pc, #64]	; (8006858 <lcd_init+0x4d50>)
 8006816:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800681a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800681c:	4b0e      	ldr	r3, [pc, #56]	; (8006858 <lcd_init+0x4d50>)
 800681e:	2280      	movs	r2, #128	; 0x80
 8006820:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006822:	4b0d      	ldr	r3, [pc, #52]	; (8006858 <lcd_init+0x4d50>)
 8006824:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006828:	611a      	str	r2, [r3, #16]
}
 800682a:	bf00      	nop

        lcd_wr_regno(0xF0); /* ����SSD1963��CPU�ӿ�Ϊ16bit */
        lcd_wr_xdata(0x03); /* 16-bit(565 format) data for 16bpp */
 800682c:	2003      	movs	r0, #3
 800682e:	f7fa f82f 	bl	8000890 <lcd_wr_xdata>
 8006832:	2329      	movs	r3, #41	; 0x29
 8006834:	f8a7 3140 	strh.w	r3, [r7, #320]	; 0x140
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006838:	4b07      	ldr	r3, [pc, #28]	; (8006858 <lcd_init+0x4d50>)
 800683a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800683e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006840:	4b05      	ldr	r3, [pc, #20]	; (8006858 <lcd_init+0x4d50>)
 8006842:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006846:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006848:	f8b7 3140 	ldrh.w	r3, [r7, #320]	; 0x140
 800684c:	b29a      	uxth	r2, r3
 800684e:	4b03      	ldr	r3, [pc, #12]	; (800685c <lcd_init+0x4d54>)
 8006850:	60da      	str	r2, [r3, #12]
 8006852:	e005      	b.n	8006860 <lcd_init+0x4d58>
 8006854:	2000007c 	.word	0x2000007c
 8006858:	40011000 	.word	0x40011000
 800685c:	40010c00 	.word	0x40010c00
    LCD_WR(0);
 8006860:	4b56      	ldr	r3, [pc, #344]	; (80069bc <lcd_init+0x4eb4>)
 8006862:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006866:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006868:	4b54      	ldr	r3, [pc, #336]	; (80069bc <lcd_init+0x4eb4>)
 800686a:	2280      	movs	r2, #128	; 0x80
 800686c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800686e:	4b53      	ldr	r3, [pc, #332]	; (80069bc <lcd_init+0x4eb4>)
 8006870:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006874:	611a      	str	r2, [r3, #16]
}
 8006876:	bf00      	nop
 8006878:	23d0      	movs	r3, #208	; 0xd0
 800687a:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800687e:	4b4f      	ldr	r3, [pc, #316]	; (80069bc <lcd_init+0x4eb4>)
 8006880:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006884:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006886:	4b4d      	ldr	r3, [pc, #308]	; (80069bc <lcd_init+0x4eb4>)
 8006888:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800688c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800688e:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8006892:	b29a      	uxth	r2, r3
 8006894:	4b4a      	ldr	r3, [pc, #296]	; (80069c0 <lcd_init+0x4eb8>)
 8006896:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006898:	4b48      	ldr	r3, [pc, #288]	; (80069bc <lcd_init+0x4eb4>)
 800689a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800689e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80068a0:	4b46      	ldr	r3, [pc, #280]	; (80069bc <lcd_init+0x4eb4>)
 80068a2:	2280      	movs	r2, #128	; 0x80
 80068a4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80068a6:	4b45      	ldr	r3, [pc, #276]	; (80069bc <lcd_init+0x4eb4>)
 80068a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068ac:	611a      	str	r2, [r3, #16]
}
 80068ae:	bf00      	nop

        lcd_wr_regno(0x29); /* ������ʾ */
        /* ����PWM���  ����ͨ��ռ�ձȿɵ� */
        lcd_wr_regno(0xD0); /* �����Զ���ƽ��DBC */
        lcd_wr_xdata(0x00); /* disable */
 80068b0:	2000      	movs	r0, #0
 80068b2:	f7f9 ffed 	bl	8000890 <lcd_wr_xdata>
 80068b6:	23be      	movs	r3, #190	; 0xbe
 80068b8:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80068bc:	4b3f      	ldr	r3, [pc, #252]	; (80069bc <lcd_init+0x4eb4>)
 80068be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80068c2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80068c4:	4b3d      	ldr	r3, [pc, #244]	; (80069bc <lcd_init+0x4eb4>)
 80068c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80068ca:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80068cc:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80068d0:	b29a      	uxth	r2, r3
 80068d2:	4b3b      	ldr	r3, [pc, #236]	; (80069c0 <lcd_init+0x4eb8>)
 80068d4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80068d6:	4b39      	ldr	r3, [pc, #228]	; (80069bc <lcd_init+0x4eb4>)
 80068d8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80068dc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80068de:	4b37      	ldr	r3, [pc, #220]	; (80069bc <lcd_init+0x4eb4>)
 80068e0:	2280      	movs	r2, #128	; 0x80
 80068e2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80068e4:	4b35      	ldr	r3, [pc, #212]	; (80069bc <lcd_init+0x4eb4>)
 80068e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068ea:	611a      	str	r2, [r3, #16]
}
 80068ec:	bf00      	nop

        lcd_wr_regno(0xBE); /* ����PWM��� */
        lcd_wr_xdata(0x05); /* 1����PWMƵ�� */
 80068ee:	2005      	movs	r0, #5
 80068f0:	f7f9 ffce 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0xFE); /* 2����PWMռ�ձ� */
 80068f4:	20fe      	movs	r0, #254	; 0xfe
 80068f6:	f7f9 ffcb 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x01); /* 3����C */
 80068fa:	2001      	movs	r0, #1
 80068fc:	f7f9 ffc8 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00); /* 4����D */
 8006900:	2000      	movs	r0, #0
 8006902:	f7f9 ffc5 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00); /* 5����E */
 8006906:	2000      	movs	r0, #0
 8006908:	f7f9 ffc2 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x00); /* 6����F */
 800690c:	2000      	movs	r0, #0
 800690e:	f7f9 ffbf 	bl	8000890 <lcd_wr_xdata>
 8006912:	23b8      	movs	r3, #184	; 0xb8
 8006914:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006918:	4b28      	ldr	r3, [pc, #160]	; (80069bc <lcd_init+0x4eb4>)
 800691a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800691e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006920:	4b26      	ldr	r3, [pc, #152]	; (80069bc <lcd_init+0x4eb4>)
 8006922:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006926:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006928:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 800692c:	b29a      	uxth	r2, r3
 800692e:	4b24      	ldr	r3, [pc, #144]	; (80069c0 <lcd_init+0x4eb8>)
 8006930:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006932:	4b22      	ldr	r3, [pc, #136]	; (80069bc <lcd_init+0x4eb4>)
 8006934:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006938:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800693a:	4b20      	ldr	r3, [pc, #128]	; (80069bc <lcd_init+0x4eb4>)
 800693c:	2280      	movs	r2, #128	; 0x80
 800693e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006940:	4b1e      	ldr	r3, [pc, #120]	; (80069bc <lcd_init+0x4eb4>)
 8006942:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006946:	611a      	str	r2, [r3, #16]
}
 8006948:	bf00      	nop

        lcd_wr_regno(0xB8); /* ����GPIO���� */
        lcd_wr_xdata(0x03); /* 2��IO�����ó���� */
 800694a:	2003      	movs	r0, #3
 800694c:	f7f9 ffa0 	bl	8000890 <lcd_wr_xdata>
        lcd_wr_xdata(0x01); /* GPIOʹ��������IO���� */
 8006950:	2001      	movs	r0, #1
 8006952:	f7f9 ff9d 	bl	8000890 <lcd_wr_xdata>
 8006956:	23ba      	movs	r3, #186	; 0xba
 8006958:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800695c:	4b17      	ldr	r3, [pc, #92]	; (80069bc <lcd_init+0x4eb4>)
 800695e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006962:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006964:	4b15      	ldr	r3, [pc, #84]	; (80069bc <lcd_init+0x4eb4>)
 8006966:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800696a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800696c:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 8006970:	b29a      	uxth	r2, r3
 8006972:	4b13      	ldr	r3, [pc, #76]	; (80069c0 <lcd_init+0x4eb8>)
 8006974:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006976:	4b11      	ldr	r3, [pc, #68]	; (80069bc <lcd_init+0x4eb4>)
 8006978:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800697c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800697e:	4b0f      	ldr	r3, [pc, #60]	; (80069bc <lcd_init+0x4eb4>)
 8006980:	2280      	movs	r2, #128	; 0x80
 8006982:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006984:	4b0d      	ldr	r3, [pc, #52]	; (80069bc <lcd_init+0x4eb4>)
 8006986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800698a:	611a      	str	r2, [r3, #16]
}
 800698c:	bf00      	nop
        lcd_wr_regno(0xBA);
        lcd_wr_xdata(0X01); /* GPIO[1:0]=01,����LCD���� */
 800698e:	2001      	movs	r0, #1
 8006990:	f7f9 ff7e 	bl	8000890 <lcd_wr_xdata>
        lcd_ssd_backlight_set(100); /* ��������Ϊ���� */
 8006994:	2064      	movs	r0, #100	; 0x64
 8006996:	f7fa ff1f 	bl	80017d8 <lcd_ssd_backlight_set>
    }

    lcd_display_dir(0); /* Ĭ��Ϊ���� */
 800699a:	2000      	movs	r0, #0
 800699c:	f7fa ffdc 	bl	8001958 <lcd_display_dir>
    LCD_BL(1);          /* �������� */
 80069a0:	4b06      	ldr	r3, [pc, #24]	; (80069bc <lcd_init+0x4eb4>)
 80069a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80069a6:	611a      	str	r2, [r3, #16]
    lcd_clear(WHITE);
 80069a8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80069ac:	f000 f80a 	bl	80069c4 <lcd_clear>
}
 80069b0:	bf00      	nop
 80069b2:	f507 77b4 	add.w	r7, r7, #360	; 0x168
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	40011000 	.word	0x40011000
 80069c0:	40010c00 	.word	0x40010c00

080069c4 <lcd_clear>:
 * @brief       ��������
 * @param       color: Ҫ��������ɫ
 * @retval      ��
 */
void lcd_clear(uint16_t color)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	4603      	mov	r3, r0
 80069cc:	80fb      	strh	r3, [r7, #6]
    uint32_t index = 0;
 80069ce:	2300      	movs	r3, #0
 80069d0:	617b      	str	r3, [r7, #20]
    uint32_t totalpoint = lcddev.width;
 80069d2:	4b27      	ldr	r3, [pc, #156]	; (8006a70 <lcd_clear+0xac>)
 80069d4:	881b      	ldrh	r3, [r3, #0]
 80069d6:	613b      	str	r3, [r7, #16]
    totalpoint *= lcddev.height;    /* �õ��ܵ��� */
 80069d8:	4b25      	ldr	r3, [pc, #148]	; (8006a70 <lcd_clear+0xac>)
 80069da:	885b      	ldrh	r3, [r3, #2]
 80069dc:	461a      	mov	r2, r3
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	fb02 f303 	mul.w	r3, r2, r3
 80069e4:	613b      	str	r3, [r7, #16]
    lcd_set_cursor(0x00, 0x0000);   /* ���ù��λ�� */
 80069e6:	2100      	movs	r1, #0
 80069e8:	2000      	movs	r0, #0
 80069ea:	f7fa f80b 	bl	8000a04 <lcd_set_cursor>
    lcd_wr_regno(lcddev.wramcmd);
 80069ee:	4b20      	ldr	r3, [pc, #128]	; (8006a70 <lcd_clear+0xac>)
 80069f0:	891b      	ldrh	r3, [r3, #8]
 80069f2:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80069f4:	4b1f      	ldr	r3, [pc, #124]	; (8006a74 <lcd_clear+0xb0>)
 80069f6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80069fa:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80069fc:	4b1d      	ldr	r3, [pc, #116]	; (8006a74 <lcd_clear+0xb0>)
 80069fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006a02:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006a04:	89fb      	ldrh	r3, [r7, #14]
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	4b1b      	ldr	r3, [pc, #108]	; (8006a78 <lcd_clear+0xb4>)
 8006a0a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006a0c:	4b19      	ldr	r3, [pc, #100]	; (8006a74 <lcd_clear+0xb0>)
 8006a0e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006a12:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006a14:	4b17      	ldr	r3, [pc, #92]	; (8006a74 <lcd_clear+0xb0>)
 8006a16:	2280      	movs	r2, #128	; 0x80
 8006a18:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006a1a:	4b16      	ldr	r3, [pc, #88]	; (8006a74 <lcd_clear+0xb0>)
 8006a1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a20:	611a      	str	r2, [r3, #16]
}
 8006a22:	bf00      	nop
}
 8006a24:	bf00      	nop
     * RS, CS�Ĳ���, �Ӷ������ٶ�, ��51֡��ߵ�78֡����, ���50%
     * ��������: -O2�Ż�, ��ˢ��
     * �����ٶ�Ҫ���ʱ��, ���Լ����Ż�: lcd_fill, lcd_color_fill, 
     * lcd_set_cursor �� lcd_draw_point �Ⱥ���, ��ҿ��������Ż�
     */
    LCD_RS(1);                      /* RS=1,��ʾд���� */
 8006a26:	4b13      	ldr	r3, [pc, #76]	; (8006a74 <lcd_clear+0xb0>)
 8006a28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a2c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006a2e:	4b11      	ldr	r3, [pc, #68]	; (8006a74 <lcd_clear+0xb0>)
 8006a30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006a34:	611a      	str	r2, [r3, #16]
    
    for (index = 0; index < totalpoint; index++)
 8006a36:	2300      	movs	r3, #0
 8006a38:	617b      	str	r3, [r7, #20]
 8006a3a:	e00c      	b.n	8006a56 <lcd_clear+0x92>
    {
        LCD_DATA_OUT(color);        /* д��Ҫд������ */
 8006a3c:	4a0e      	ldr	r2, [pc, #56]	; (8006a78 <lcd_clear+0xb4>)
 8006a3e:	88fb      	ldrh	r3, [r7, #6]
 8006a40:	60d3      	str	r3, [r2, #12]
        LCD_WR(0);
 8006a42:	4b0c      	ldr	r3, [pc, #48]	; (8006a74 <lcd_clear+0xb0>)
 8006a44:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006a48:	611a      	str	r2, [r3, #16]
        LCD_WR(1);
 8006a4a:	4b0a      	ldr	r3, [pc, #40]	; (8006a74 <lcd_clear+0xb0>)
 8006a4c:	2280      	movs	r2, #128	; 0x80
 8006a4e:	611a      	str	r2, [r3, #16]
    for (index = 0; index < totalpoint; index++)
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	3301      	adds	r3, #1
 8006a54:	617b      	str	r3, [r7, #20]
 8006a56:	697a      	ldr	r2, [r7, #20]
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d3ee      	bcc.n	8006a3c <lcd_clear+0x78>
    }
    
    LCD_CS(1);
 8006a5e:	4b05      	ldr	r3, [pc, #20]	; (8006a74 <lcd_clear+0xb0>)
 8006a60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a64:	611a      	str	r2, [r3, #16]
}
 8006a66:	bf00      	nop
 8006a68:	3718      	adds	r7, #24
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	2000007c 	.word	0x2000007c
 8006a74:	40011000 	.word	0x40011000
 8006a78:	40010c00 	.word	0x40010c00

08006a7c <lcd_fill>:
 * @param       (sx,sy),(ex,ey):�����ζԽ�����,�����СΪ:(ex - sx + 1) * (ey - sy + 1)
 * @param       color: Ҫ������ɫ(32λ��ɫ,�������LTDC)
 * @retval      ��
 */
void lcd_fill(uint16_t sx, uint16_t sy, uint16_t ex, uint16_t ey, uint32_t color)
{
 8006a7c:	b590      	push	{r4, r7, lr}
 8006a7e:	b085      	sub	sp, #20
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	4604      	mov	r4, r0
 8006a84:	4608      	mov	r0, r1
 8006a86:	4611      	mov	r1, r2
 8006a88:	461a      	mov	r2, r3
 8006a8a:	4623      	mov	r3, r4
 8006a8c:	80fb      	strh	r3, [r7, #6]
 8006a8e:	4603      	mov	r3, r0
 8006a90:	80bb      	strh	r3, [r7, #4]
 8006a92:	460b      	mov	r3, r1
 8006a94:	807b      	strh	r3, [r7, #2]
 8006a96:	4613      	mov	r3, r2
 8006a98:	803b      	strh	r3, [r7, #0]
    uint16_t i, j;
    uint16_t xlen = 0;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	817b      	strh	r3, [r7, #10]
    xlen = ex - sx + 1;
 8006a9e:	887a      	ldrh	r2, [r7, #2]
 8006aa0:	88fb      	ldrh	r3, [r7, #6]
 8006aa2:	1ad3      	subs	r3, r2, r3
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	817b      	strh	r3, [r7, #10]

    for (i = sy; i <= ey; i++)
 8006aaa:	88bb      	ldrh	r3, [r7, #4]
 8006aac:	81fb      	strh	r3, [r7, #14]
 8006aae:	e044      	b.n	8006b3a <lcd_fill+0xbe>
    {
        lcd_set_cursor(sx, i);      /* ���ù��λ�� */
 8006ab0:	89fa      	ldrh	r2, [r7, #14]
 8006ab2:	88fb      	ldrh	r3, [r7, #6]
 8006ab4:	4611      	mov	r1, r2
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7f9 ffa4 	bl	8000a04 <lcd_set_cursor>
    lcd_wr_regno(lcddev.wramcmd);
 8006abc:	4b23      	ldr	r3, [pc, #140]	; (8006b4c <lcd_fill+0xd0>)
 8006abe:	891b      	ldrh	r3, [r3, #8]
 8006ac0:	813b      	strh	r3, [r7, #8]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006ac2:	4b23      	ldr	r3, [pc, #140]	; (8006b50 <lcd_fill+0xd4>)
 8006ac4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006ac8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006aca:	4b21      	ldr	r3, [pc, #132]	; (8006b50 <lcd_fill+0xd4>)
 8006acc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006ad0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006ad2:	893b      	ldrh	r3, [r7, #8]
 8006ad4:	b29a      	uxth	r2, r3
 8006ad6:	4b1f      	ldr	r3, [pc, #124]	; (8006b54 <lcd_fill+0xd8>)
 8006ad8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006ada:	4b1d      	ldr	r3, [pc, #116]	; (8006b50 <lcd_fill+0xd4>)
 8006adc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006ae0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006ae2:	4b1b      	ldr	r3, [pc, #108]	; (8006b50 <lcd_fill+0xd4>)
 8006ae4:	2280      	movs	r2, #128	; 0x80
 8006ae6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006ae8:	4b19      	ldr	r3, [pc, #100]	; (8006b50 <lcd_fill+0xd4>)
 8006aea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006aee:	611a      	str	r2, [r3, #16]
}
 8006af0:	bf00      	nop
}
 8006af2:	bf00      	nop
        lcd_write_ram_prepare();    /* ��ʼд��GRAM */

        for (j = 0; j < xlen; j++)
 8006af4:	2300      	movs	r3, #0
 8006af6:	81bb      	strh	r3, [r7, #12]
 8006af8:	e018      	b.n	8006b2c <lcd_fill+0xb0>
        {
            lcd_wr_data(color);     /* д������ */
 8006afa:	4b15      	ldr	r3, [pc, #84]	; (8006b50 <lcd_fill+0xd4>)
 8006afc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b00:	611a      	str	r2, [r3, #16]
 8006b02:	4b13      	ldr	r3, [pc, #76]	; (8006b50 <lcd_fill+0xd4>)
 8006b04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006b08:	611a      	str	r2, [r3, #16]
 8006b0a:	4a12      	ldr	r2, [pc, #72]	; (8006b54 <lcd_fill+0xd8>)
 8006b0c:	6a3b      	ldr	r3, [r7, #32]
 8006b0e:	60d3      	str	r3, [r2, #12]
 8006b10:	4b0f      	ldr	r3, [pc, #60]	; (8006b50 <lcd_fill+0xd4>)
 8006b12:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006b16:	611a      	str	r2, [r3, #16]
 8006b18:	4b0d      	ldr	r3, [pc, #52]	; (8006b50 <lcd_fill+0xd4>)
 8006b1a:	2280      	movs	r2, #128	; 0x80
 8006b1c:	611a      	str	r2, [r3, #16]
 8006b1e:	4b0c      	ldr	r3, [pc, #48]	; (8006b50 <lcd_fill+0xd4>)
 8006b20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b24:	611a      	str	r2, [r3, #16]
        for (j = 0; j < xlen; j++)
 8006b26:	89bb      	ldrh	r3, [r7, #12]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	81bb      	strh	r3, [r7, #12]
 8006b2c:	89ba      	ldrh	r2, [r7, #12]
 8006b2e:	897b      	ldrh	r3, [r7, #10]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d3e2      	bcc.n	8006afa <lcd_fill+0x7e>
    for (i = sy; i <= ey; i++)
 8006b34:	89fb      	ldrh	r3, [r7, #14]
 8006b36:	3301      	adds	r3, #1
 8006b38:	81fb      	strh	r3, [r7, #14]
 8006b3a:	89fa      	ldrh	r2, [r7, #14]
 8006b3c:	883b      	ldrh	r3, [r7, #0]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d9b6      	bls.n	8006ab0 <lcd_fill+0x34>
        }
    }
}
 8006b42:	bf00      	nop
 8006b44:	bf00      	nop
 8006b46:	3714      	adds	r7, #20
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd90      	pop	{r4, r7, pc}
 8006b4c:	2000007c 	.word	0x2000007c
 8006b50:	40011000 	.word	0x40011000
 8006b54:	40010c00 	.word	0x40010c00

08006b58 <lcd_draw_line>:
 * @param       x2,y2: �յ�����
 * @param       color: �ߵ���ɫ
 * @retval      ��
 */
void lcd_draw_line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 8006b58:	b590      	push	{r4, r7, lr}
 8006b5a:	b08d      	sub	sp, #52	; 0x34
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	4604      	mov	r4, r0
 8006b60:	4608      	mov	r0, r1
 8006b62:	4611      	mov	r1, r2
 8006b64:	461a      	mov	r2, r3
 8006b66:	4623      	mov	r3, r4
 8006b68:	80fb      	strh	r3, [r7, #6]
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	80bb      	strh	r3, [r7, #4]
 8006b6e:	460b      	mov	r3, r1
 8006b70:	807b      	strh	r3, [r7, #2]
 8006b72:	4613      	mov	r3, r2
 8006b74:	803b      	strh	r3, [r7, #0]
    uint16_t t;
    int xerr = 0, yerr = 0, delta_x, delta_y, distance;
 8006b76:	2300      	movs	r3, #0
 8006b78:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	627b      	str	r3, [r7, #36]	; 0x24
    int incx, incy, row, col;
    delta_x = x2 - x1;          /* ������������ */
 8006b7e:	887a      	ldrh	r2, [r7, #2]
 8006b80:	88fb      	ldrh	r3, [r7, #6]
 8006b82:	1ad3      	subs	r3, r2, r3
 8006b84:	623b      	str	r3, [r7, #32]
    delta_y = y2 - y1;
 8006b86:	883a      	ldrh	r2, [r7, #0]
 8006b88:	88bb      	ldrh	r3, [r7, #4]
 8006b8a:	1ad3      	subs	r3, r2, r3
 8006b8c:	61fb      	str	r3, [r7, #28]
    row = x1;
 8006b8e:	88fb      	ldrh	r3, [r7, #6]
 8006b90:	60fb      	str	r3, [r7, #12]
    col = y1;
 8006b92:	88bb      	ldrh	r3, [r7, #4]
 8006b94:	60bb      	str	r3, [r7, #8]

    if (delta_x > 0)incx = 1;   /* ���õ������� */
 8006b96:	6a3b      	ldr	r3, [r7, #32]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	dd02      	ble.n	8006ba2 <lcd_draw_line+0x4a>
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	617b      	str	r3, [r7, #20]
 8006ba0:	e00b      	b.n	8006bba <lcd_draw_line+0x62>
    else if (delta_x == 0)incx = 0; /* ��ֱ�� */
 8006ba2:	6a3b      	ldr	r3, [r7, #32]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d102      	bne.n	8006bae <lcd_draw_line+0x56>
 8006ba8:	2300      	movs	r3, #0
 8006baa:	617b      	str	r3, [r7, #20]
 8006bac:	e005      	b.n	8006bba <lcd_draw_line+0x62>
    else
    {
        incx = -1;
 8006bae:	f04f 33ff 	mov.w	r3, #4294967295
 8006bb2:	617b      	str	r3, [r7, #20]
        delta_x = -delta_x;
 8006bb4:	6a3b      	ldr	r3, [r7, #32]
 8006bb6:	425b      	negs	r3, r3
 8006bb8:	623b      	str	r3, [r7, #32]
    }

    if (delta_y > 0)incy = 1;
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	dd02      	ble.n	8006bc6 <lcd_draw_line+0x6e>
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	613b      	str	r3, [r7, #16]
 8006bc4:	e00b      	b.n	8006bde <lcd_draw_line+0x86>
    else if (delta_y == 0)incy = 0; /* ˮƽ�� */
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d102      	bne.n	8006bd2 <lcd_draw_line+0x7a>
 8006bcc:	2300      	movs	r3, #0
 8006bce:	613b      	str	r3, [r7, #16]
 8006bd0:	e005      	b.n	8006bde <lcd_draw_line+0x86>
    else
    {
        incy = -1;
 8006bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8006bd6:	613b      	str	r3, [r7, #16]
        delta_y = -delta_y;
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	425b      	negs	r3, r3
 8006bdc:	61fb      	str	r3, [r7, #28]
    }

    if ( delta_x > delta_y)distance = delta_x;  /* ѡȡ�������������� */
 8006bde:	6a3a      	ldr	r2, [r7, #32]
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	dd02      	ble.n	8006bec <lcd_draw_line+0x94>
 8006be6:	6a3b      	ldr	r3, [r7, #32]
 8006be8:	61bb      	str	r3, [r7, #24]
 8006bea:	e001      	b.n	8006bf0 <lcd_draw_line+0x98>
    else distance = delta_y;
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	61bb      	str	r3, [r7, #24]

    for (t = 0; t <= distance + 1; t++ )   /* ������� */
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006bf4:	e02b      	b.n	8006c4e <lcd_draw_line+0xf6>
    {
        lcd_draw_point(row, col, color); /* ���� */
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	68ba      	ldr	r2, [r7, #8]
 8006bfc:	b291      	uxth	r1, r2
 8006bfe:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7fa fd9e 	bl	8001744 <lcd_draw_point>
        xerr += delta_x ;
 8006c08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c0a:	6a3b      	ldr	r3, [r7, #32]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	62bb      	str	r3, [r7, #40]	; 0x28
        yerr += delta_y ;
 8006c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	4413      	add	r3, r2
 8006c16:	627b      	str	r3, [r7, #36]	; 0x24

        if (xerr > distance)
 8006c18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	dd07      	ble.n	8006c30 <lcd_draw_line+0xd8>
        {
            xerr -= distance;
 8006c20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	62bb      	str	r3, [r7, #40]	; 0x28
            row += incx;
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	4413      	add	r3, r2
 8006c2e:	60fb      	str	r3, [r7, #12]
        }

        if (yerr > distance)
 8006c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	dd07      	ble.n	8006c48 <lcd_draw_line+0xf0>
        {
            yerr -= distance;
 8006c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	1ad3      	subs	r3, r2, r3
 8006c3e:	627b      	str	r3, [r7, #36]	; 0x24
            col += incy;
 8006c40:	68ba      	ldr	r2, [r7, #8]
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	4413      	add	r3, r2
 8006c46:	60bb      	str	r3, [r7, #8]
    for (t = 0; t <= distance + 1; t++ )   /* ������� */
 8006c48:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006c4e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	3301      	adds	r3, #1
 8006c54:	429a      	cmp	r2, r3
 8006c56:	ddce      	ble.n	8006bf6 <lcd_draw_line+0x9e>
        }
    }
}
 8006c58:	bf00      	nop
 8006c5a:	bf00      	nop
 8006c5c:	3734      	adds	r7, #52	; 0x34
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd90      	pop	{r4, r7, pc}

08006c62 <lcd_draw_rectangle>:
 * @param       x2,y2: �յ�����
 * @param       color: ���ε���ɫ
 * @retval      ��
 */
void lcd_draw_rectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 8006c62:	b590      	push	{r4, r7, lr}
 8006c64:	b085      	sub	sp, #20
 8006c66:	af02      	add	r7, sp, #8
 8006c68:	4604      	mov	r4, r0
 8006c6a:	4608      	mov	r0, r1
 8006c6c:	4611      	mov	r1, r2
 8006c6e:	461a      	mov	r2, r3
 8006c70:	4623      	mov	r3, r4
 8006c72:	80fb      	strh	r3, [r7, #6]
 8006c74:	4603      	mov	r3, r0
 8006c76:	80bb      	strh	r3, [r7, #4]
 8006c78:	460b      	mov	r3, r1
 8006c7a:	807b      	strh	r3, [r7, #2]
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	803b      	strh	r3, [r7, #0]
    lcd_draw_line(x1, y1, x2, y1, color);
 8006c80:	88bc      	ldrh	r4, [r7, #4]
 8006c82:	887a      	ldrh	r2, [r7, #2]
 8006c84:	88b9      	ldrh	r1, [r7, #4]
 8006c86:	88f8      	ldrh	r0, [r7, #6]
 8006c88:	8b3b      	ldrh	r3, [r7, #24]
 8006c8a:	9300      	str	r3, [sp, #0]
 8006c8c:	4623      	mov	r3, r4
 8006c8e:	f7ff ff63 	bl	8006b58 <lcd_draw_line>
    lcd_draw_line(x1, y1, x1, y2, color);
 8006c92:	883c      	ldrh	r4, [r7, #0]
 8006c94:	88fa      	ldrh	r2, [r7, #6]
 8006c96:	88b9      	ldrh	r1, [r7, #4]
 8006c98:	88f8      	ldrh	r0, [r7, #6]
 8006c9a:	8b3b      	ldrh	r3, [r7, #24]
 8006c9c:	9300      	str	r3, [sp, #0]
 8006c9e:	4623      	mov	r3, r4
 8006ca0:	f7ff ff5a 	bl	8006b58 <lcd_draw_line>
    lcd_draw_line(x1, y2, x2, y2, color);
 8006ca4:	883c      	ldrh	r4, [r7, #0]
 8006ca6:	887a      	ldrh	r2, [r7, #2]
 8006ca8:	8839      	ldrh	r1, [r7, #0]
 8006caa:	88f8      	ldrh	r0, [r7, #6]
 8006cac:	8b3b      	ldrh	r3, [r7, #24]
 8006cae:	9300      	str	r3, [sp, #0]
 8006cb0:	4623      	mov	r3, r4
 8006cb2:	f7ff ff51 	bl	8006b58 <lcd_draw_line>
    lcd_draw_line(x2, y1, x2, y2, color);
 8006cb6:	883c      	ldrh	r4, [r7, #0]
 8006cb8:	887a      	ldrh	r2, [r7, #2]
 8006cba:	88b9      	ldrh	r1, [r7, #4]
 8006cbc:	8878      	ldrh	r0, [r7, #2]
 8006cbe:	8b3b      	ldrh	r3, [r7, #24]
 8006cc0:	9300      	str	r3, [sp, #0]
 8006cc2:	4623      	mov	r3, r4
 8006cc4:	f7ff ff48 	bl	8006b58 <lcd_draw_line>
}
 8006cc8:	bf00      	nop
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd90      	pop	{r4, r7, pc}

08006cd0 <lcd_show_char>:
 * @param       mode : ���ӷ�ʽ(1); �ǵ��ӷ�ʽ(0);
 * @param       color : �ַ�����ɫ;
 * @retval      ��
 */
void lcd_show_char(uint16_t x, uint16_t y, char chr, uint8_t size, uint8_t mode, uint16_t color)
{
 8006cd0:	b590      	push	{r4, r7, lr}
 8006cd2:	b087      	sub	sp, #28
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	4604      	mov	r4, r0
 8006cd8:	4608      	mov	r0, r1
 8006cda:	4611      	mov	r1, r2
 8006cdc:	461a      	mov	r2, r3
 8006cde:	4623      	mov	r3, r4
 8006ce0:	80fb      	strh	r3, [r7, #6]
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	80bb      	strh	r3, [r7, #4]
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	70fb      	strb	r3, [r7, #3]
 8006cea:	4613      	mov	r3, r2
 8006cec:	70bb      	strb	r3, [r7, #2]
    uint8_t temp, t1, t;
    uint16_t y0 = y;
 8006cee:	88bb      	ldrh	r3, [r7, #4]
 8006cf0:	81fb      	strh	r3, [r7, #14]
    uint8_t csize = 0;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	737b      	strb	r3, [r7, #13]
    uint8_t *pfont = 0;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	613b      	str	r3, [r7, #16]

    csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2); /* �õ�����һ���ַ���Ӧ������ռ���ֽ��� */
 8006cfa:	78bb      	ldrb	r3, [r7, #2]
 8006cfc:	08db      	lsrs	r3, r3, #3
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	461a      	mov	r2, r3
 8006d02:	78bb      	ldrb	r3, [r7, #2]
 8006d04:	f003 0307 	and.w	r3, r3, #7
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	bf14      	ite	ne
 8006d0e:	2301      	movne	r3, #1
 8006d10:	2300      	moveq	r3, #0
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	4413      	add	r3, r2
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	78ba      	ldrb	r2, [r7, #2]
 8006d1a:	0852      	lsrs	r2, r2, #1
 8006d1c:	b2d2      	uxtb	r2, r2
 8006d1e:	fb02 f303 	mul.w	r3, r2, r3
 8006d22:	737b      	strb	r3, [r7, #13]
    chr = chr - ' ';    /* �õ�ƫ�ƺ��ֵ��ASCII�ֿ��Ǵӿո�ʼȡģ������-' '���Ƕ�Ӧ�ַ����ֿ⣩ */
 8006d24:	78fb      	ldrb	r3, [r7, #3]
 8006d26:	3b20      	subs	r3, #32
 8006d28:	70fb      	strb	r3, [r7, #3]

    switch (size)
 8006d2a:	78bb      	ldrb	r3, [r7, #2]
 8006d2c:	3b0c      	subs	r3, #12
 8006d2e:	2b14      	cmp	r3, #20
 8006d30:	f200 8099 	bhi.w	8006e66 <lcd_show_char+0x196>
 8006d34:	a201      	add	r2, pc, #4	; (adr r2, 8006d3c <lcd_show_char+0x6c>)
 8006d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d3a:	bf00      	nop
 8006d3c:	08006d91 	.word	0x08006d91
 8006d40:	08006e67 	.word	0x08006e67
 8006d44:	08006e67 	.word	0x08006e67
 8006d48:	08006e67 	.word	0x08006e67
 8006d4c:	08006da3 	.word	0x08006da3
 8006d50:	08006e67 	.word	0x08006e67
 8006d54:	08006e67 	.word	0x08006e67
 8006d58:	08006e67 	.word	0x08006e67
 8006d5c:	08006e67 	.word	0x08006e67
 8006d60:	08006e67 	.word	0x08006e67
 8006d64:	08006e67 	.word	0x08006e67
 8006d68:	08006e67 	.word	0x08006e67
 8006d6c:	08006daf 	.word	0x08006daf
 8006d70:	08006e67 	.word	0x08006e67
 8006d74:	08006e67 	.word	0x08006e67
 8006d78:	08006e67 	.word	0x08006e67
 8006d7c:	08006e67 	.word	0x08006e67
 8006d80:	08006e67 	.word	0x08006e67
 8006d84:	08006e67 	.word	0x08006e67
 8006d88:	08006e67 	.word	0x08006e67
 8006d8c:	08006dc1 	.word	0x08006dc1
    {
        case 12:
            pfont = (uint8_t *)asc2_1206[chr];  /* ����1206���� */
 8006d90:	78fa      	ldrb	r2, [r7, #3]
 8006d92:	4613      	mov	r3, r2
 8006d94:	005b      	lsls	r3, r3, #1
 8006d96:	4413      	add	r3, r2
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	4a36      	ldr	r2, [pc, #216]	; (8006e74 <lcd_show_char+0x1a4>)
 8006d9c:	4413      	add	r3, r2
 8006d9e:	613b      	str	r3, [r7, #16]
            break;
 8006da0:	e014      	b.n	8006dcc <lcd_show_char+0xfc>

        case 16:
            pfont = (uint8_t *)asc2_1608[chr];  /* ����1608���� */
 8006da2:	78fb      	ldrb	r3, [r7, #3]
 8006da4:	011b      	lsls	r3, r3, #4
 8006da6:	4a34      	ldr	r2, [pc, #208]	; (8006e78 <lcd_show_char+0x1a8>)
 8006da8:	4413      	add	r3, r2
 8006daa:	613b      	str	r3, [r7, #16]
            break;
 8006dac:	e00e      	b.n	8006dcc <lcd_show_char+0xfc>

        case 24:
            pfont = (uint8_t *)asc2_2412[chr];  /* ����2412���� */
 8006dae:	78fa      	ldrb	r2, [r7, #3]
 8006db0:	4613      	mov	r3, r2
 8006db2:	00db      	lsls	r3, r3, #3
 8006db4:	4413      	add	r3, r2
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	4a30      	ldr	r2, [pc, #192]	; (8006e7c <lcd_show_char+0x1ac>)
 8006dba:	4413      	add	r3, r2
 8006dbc:	613b      	str	r3, [r7, #16]
            break;
 8006dbe:	e005      	b.n	8006dcc <lcd_show_char+0xfc>

        case 32:
            pfont = (uint8_t *)asc2_3216[chr];  /* ����3216���� */
 8006dc0:	78fb      	ldrb	r3, [r7, #3]
 8006dc2:	019b      	lsls	r3, r3, #6
 8006dc4:	4a2e      	ldr	r2, [pc, #184]	; (8006e80 <lcd_show_char+0x1b0>)
 8006dc6:	4413      	add	r3, r2
 8006dc8:	613b      	str	r3, [r7, #16]
            break;
 8006dca:	bf00      	nop

        default:
            return ;
    }

    for (t = 0; t < csize; t++)
 8006dcc:	2300      	movs	r3, #0
 8006dce:	757b      	strb	r3, [r7, #21]
 8006dd0:	e044      	b.n	8006e5c <lcd_show_char+0x18c>
    {
        temp = pfont[t];    /* ��ȡ�ַ��ĵ������� */
 8006dd2:	7d7b      	ldrb	r3, [r7, #21]
 8006dd4:	693a      	ldr	r2, [r7, #16]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	75fb      	strb	r3, [r7, #23]

        for (t1 = 0; t1 < 8; t1++)   /* һ���ֽ�8���� */
 8006ddc:	2300      	movs	r3, #0
 8006dde:	75bb      	strb	r3, [r7, #22]
 8006de0:	e034      	b.n	8006e4c <lcd_show_char+0x17c>
        {
            if (temp & 0x80)        /* ��Ч��,��Ҫ��ʾ */
 8006de2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	da06      	bge.n	8006df8 <lcd_show_char+0x128>
            {
                lcd_draw_point(x, y, color);        /* �������,Ҫ��ʾ����� */
 8006dea:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8006dec:	88b9      	ldrh	r1, [r7, #4]
 8006dee:	88fb      	ldrh	r3, [r7, #6]
 8006df0:	4618      	mov	r0, r3
 8006df2:	f7fa fca7 	bl	8001744 <lcd_draw_point>
 8006df6:	e00a      	b.n	8006e0e <lcd_show_char+0x13e>
            }
            else if (mode == 0)     /* ��Ч��,����ʾ */
 8006df8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d106      	bne.n	8006e0e <lcd_show_char+0x13e>
            {
                lcd_draw_point(x, y, g_back_color); /* ������ɫ,�൱������㲻��ʾ(ע�ⱳ��ɫ��ȫ�ֱ�������) */
 8006e00:	4b20      	ldr	r3, [pc, #128]	; (8006e84 <lcd_show_char+0x1b4>)
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	88b9      	ldrh	r1, [r7, #4]
 8006e06:	88fb      	ldrh	r3, [r7, #6]
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f7fa fc9b 	bl	8001744 <lcd_draw_point>
            }

            temp <<= 1; /* ��λ, �Ա��ȡ��һ��λ��״̬ */
 8006e0e:	7dfb      	ldrb	r3, [r7, #23]
 8006e10:	005b      	lsls	r3, r3, #1
 8006e12:	75fb      	strb	r3, [r7, #23]
            y++;
 8006e14:	88bb      	ldrh	r3, [r7, #4]
 8006e16:	3301      	adds	r3, #1
 8006e18:	80bb      	strh	r3, [r7, #4]

            if (y >= lcddev.height)return;  /* �������� */
 8006e1a:	4b1b      	ldr	r3, [pc, #108]	; (8006e88 <lcd_show_char+0x1b8>)
 8006e1c:	885b      	ldrh	r3, [r3, #2]
 8006e1e:	88ba      	ldrh	r2, [r7, #4]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d222      	bcs.n	8006e6a <lcd_show_char+0x19a>

            if ((y - y0) == size)   /* ��ʾ��һ����? */
 8006e24:	88ba      	ldrh	r2, [r7, #4]
 8006e26:	89fb      	ldrh	r3, [r7, #14]
 8006e28:	1ad2      	subs	r2, r2, r3
 8006e2a:	78bb      	ldrb	r3, [r7, #2]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d10a      	bne.n	8006e46 <lcd_show_char+0x176>
            {
                y = y0; /* y���긴λ */
 8006e30:	89fb      	ldrh	r3, [r7, #14]
 8006e32:	80bb      	strh	r3, [r7, #4]
                x++;    /* x������� */
 8006e34:	88fb      	ldrh	r3, [r7, #6]
 8006e36:	3301      	adds	r3, #1
 8006e38:	80fb      	strh	r3, [r7, #6]

                if (x >= lcddev.width)return;   /* x���곬������ */
 8006e3a:	4b13      	ldr	r3, [pc, #76]	; (8006e88 <lcd_show_char+0x1b8>)
 8006e3c:	881b      	ldrh	r3, [r3, #0]
 8006e3e:	88fa      	ldrh	r2, [r7, #6]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d307      	bcc.n	8006e54 <lcd_show_char+0x184>
 8006e44:	e012      	b.n	8006e6c <lcd_show_char+0x19c>
        for (t1 = 0; t1 < 8; t1++)   /* һ���ֽ�8���� */
 8006e46:	7dbb      	ldrb	r3, [r7, #22]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	75bb      	strb	r3, [r7, #22]
 8006e4c:	7dbb      	ldrb	r3, [r7, #22]
 8006e4e:	2b07      	cmp	r3, #7
 8006e50:	d9c7      	bls.n	8006de2 <lcd_show_char+0x112>
 8006e52:	e000      	b.n	8006e56 <lcd_show_char+0x186>

                break;
 8006e54:	bf00      	nop
    for (t = 0; t < csize; t++)
 8006e56:	7d7b      	ldrb	r3, [r7, #21]
 8006e58:	3301      	adds	r3, #1
 8006e5a:	757b      	strb	r3, [r7, #21]
 8006e5c:	7d7a      	ldrb	r2, [r7, #21]
 8006e5e:	7b7b      	ldrb	r3, [r7, #13]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d3b6      	bcc.n	8006dd2 <lcd_show_char+0x102>
 8006e64:	e002      	b.n	8006e6c <lcd_show_char+0x19c>
            return ;
 8006e66:	bf00      	nop
 8006e68:	e000      	b.n	8006e6c <lcd_show_char+0x19c>
            if (y >= lcddev.height)return;  /* �������� */
 8006e6a:	bf00      	nop
            }
        }
    }
}
 8006e6c:	371c      	adds	r7, #28
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd90      	pop	{r4, r7, pc}
 8006e72:	bf00      	nop
 8006e74:	08009c5c 	.word	0x08009c5c
 8006e78:	0800a0d0 	.word	0x0800a0d0
 8006e7c:	0800a6c0 	.word	0x0800a6c0
 8006e80:	0800b41c 	.word	0x0800b41c
 8006e84:	20000000 	.word	0x20000000
 8006e88:	2000007c 	.word	0x2000007c

08006e8c <lcd_show_string>:
 * @param       p           : �ַ����׵�ַ
 * @param       color       : �ַ�������ɫ;
 * @retval      ��
 */
void lcd_show_string(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t size, char *p, uint16_t color)
{
 8006e8c:	b590      	push	{r4, r7, lr}
 8006e8e:	b087      	sub	sp, #28
 8006e90:	af02      	add	r7, sp, #8
 8006e92:	4604      	mov	r4, r0
 8006e94:	4608      	mov	r0, r1
 8006e96:	4611      	mov	r1, r2
 8006e98:	461a      	mov	r2, r3
 8006e9a:	4623      	mov	r3, r4
 8006e9c:	80fb      	strh	r3, [r7, #6]
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	80bb      	strh	r3, [r7, #4]
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	807b      	strh	r3, [r7, #2]
 8006ea6:	4613      	mov	r3, r2
 8006ea8:	803b      	strh	r3, [r7, #0]
    uint8_t x0 = x;
 8006eaa:	88fb      	ldrh	r3, [r7, #6]
 8006eac:	73fb      	strb	r3, [r7, #15]
    width += x;
 8006eae:	887a      	ldrh	r2, [r7, #2]
 8006eb0:	88fb      	ldrh	r3, [r7, #6]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	807b      	strh	r3, [r7, #2]
    height += y;
 8006eb6:	883a      	ldrh	r2, [r7, #0]
 8006eb8:	88bb      	ldrh	r3, [r7, #4]
 8006eba:	4413      	add	r3, r2
 8006ebc:	803b      	strh	r3, [r7, #0]

    while ((*p <= '~') && (*p >= ' '))   /* �ж��ǲ��ǷǷ��ַ�! */
 8006ebe:	e027      	b.n	8006f10 <lcd_show_string+0x84>
    {
        if (x >= width)
 8006ec0:	88fa      	ldrh	r2, [r7, #6]
 8006ec2:	887b      	ldrh	r3, [r7, #2]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d307      	bcc.n	8006ed8 <lcd_show_string+0x4c>
        {
            x = x0;
 8006ec8:	7bfb      	ldrb	r3, [r7, #15]
 8006eca:	80fb      	strh	r3, [r7, #6]
            y += size;
 8006ecc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006ed0:	b29a      	uxth	r2, r3
 8006ed2:	88bb      	ldrh	r3, [r7, #4]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	80bb      	strh	r3, [r7, #4]
        }

        if (y >= height)break;  /* �˳� */
 8006ed8:	88ba      	ldrh	r2, [r7, #4]
 8006eda:	883b      	ldrh	r3, [r7, #0]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d220      	bcs.n	8006f22 <lcd_show_string+0x96>

        lcd_show_char(x, y, *p, size, 0, color);
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee2:	781a      	ldrb	r2, [r3, #0]
 8006ee4:	f897 4020 	ldrb.w	r4, [r7, #32]
 8006ee8:	88b9      	ldrh	r1, [r7, #4]
 8006eea:	88f8      	ldrh	r0, [r7, #6]
 8006eec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006eee:	9301      	str	r3, [sp, #4]
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	9300      	str	r3, [sp, #0]
 8006ef4:	4623      	mov	r3, r4
 8006ef6:	f7ff feeb 	bl	8006cd0 <lcd_show_char>
        x += size / 2;
 8006efa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006efe:	085b      	lsrs	r3, r3, #1
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	b29a      	uxth	r2, r3
 8006f04:	88fb      	ldrh	r3, [r7, #6]
 8006f06:	4413      	add	r3, r2
 8006f08:	80fb      	strh	r3, [r7, #6]
        p++;
 8006f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	627b      	str	r3, [r7, #36]	; 0x24
    while ((*p <= '~') && (*p >= ' '))   /* �ж��ǲ��ǷǷ��ַ�! */
 8006f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	2b7e      	cmp	r3, #126	; 0x7e
 8006f16:	d805      	bhi.n	8006f24 <lcd_show_string+0x98>
 8006f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	2b1f      	cmp	r3, #31
 8006f1e:	d8cf      	bhi.n	8006ec0 <lcd_show_string+0x34>
    }
}
 8006f20:	e000      	b.n	8006f24 <lcd_show_string+0x98>
        if (y >= height)break;  /* �˳� */
 8006f22:	bf00      	nop
}
 8006f24:	bf00      	nop
 8006f26:	3714      	adds	r7, #20
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd90      	pop	{r4, r7, pc}

08006f2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f2e:	b0b1      	sub	sp, #196	; 0xc4
 8006f30:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006f32:	f000 fad3 	bl	80074dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006f36:	f000 f91f 	bl	8007178 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006f3a:	f7f9 fc7b 	bl	8000834 <MX_GPIO_Init>
  MX_RTC_Init();
 8006f3e:	f000 f97f 	bl	8007240 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8006f42:	f7fa fde1 	bl	8001b08 <lcd_init>



  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t x = 0;
 8006f46:	2300      	movs	r3, #0
 8006f48:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch (x) {
 8006f4c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8006f50:	2b0b      	cmp	r3, #11
 8006f52:	f200 8083 	bhi.w	800705c <main+0x130>
 8006f56:	a201      	add	r2, pc, #4	; (adr r2, 8006f5c <main+0x30>)
 8006f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f5c:	08006f8d 	.word	0x08006f8d
 8006f60:	08006f9f 	.word	0x08006f9f
 8006f64:	08006fad 	.word	0x08006fad
 8006f68:	08006fbb 	.word	0x08006fbb
 8006f6c:	08006fcd 	.word	0x08006fcd
 8006f70:	08006fdf 	.word	0x08006fdf
 8006f74:	08006ff1 	.word	0x08006ff1
 8006f78:	08007003 	.word	0x08007003
 8006f7c:	08007015 	.word	0x08007015
 8006f80:	08007027 	.word	0x08007027
 8006f84:	08007039 	.word	0x08007039
 8006f88:	0800704b 	.word	0x0800704b
	  case 0: lcd_clear(WHITE); g_back_color = WHITE; break;
 8006f8c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006f90:	f7ff fd18 	bl	80069c4 <lcd_clear>
 8006f94:	4b71      	ldr	r3, [pc, #452]	; (800715c <main+0x230>)
 8006f96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f9a:	601a      	str	r2, [r3, #0]
 8006f9c:	e05e      	b.n	800705c <main+0x130>
	  case 1: lcd_clear(BLACK); g_back_color = BLACK; break;
 8006f9e:	2000      	movs	r0, #0
 8006fa0:	f7ff fd10 	bl	80069c4 <lcd_clear>
 8006fa4:	4b6d      	ldr	r3, [pc, #436]	; (800715c <main+0x230>)
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	601a      	str	r2, [r3, #0]
 8006faa:	e057      	b.n	800705c <main+0x130>
	  case 2: lcd_clear(BLUE); g_back_color = BLUE; break;
 8006fac:	201f      	movs	r0, #31
 8006fae:	f7ff fd09 	bl	80069c4 <lcd_clear>
 8006fb2:	4b6a      	ldr	r3, [pc, #424]	; (800715c <main+0x230>)
 8006fb4:	221f      	movs	r2, #31
 8006fb6:	601a      	str	r2, [r3, #0]
 8006fb8:	e050      	b.n	800705c <main+0x130>
	  case 3: lcd_clear(RED); g_back_color = RED; break;
 8006fba:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8006fbe:	f7ff fd01 	bl	80069c4 <lcd_clear>
 8006fc2:	4b66      	ldr	r3, [pc, #408]	; (800715c <main+0x230>)
 8006fc4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006fc8:	601a      	str	r2, [r3, #0]
 8006fca:	e047      	b.n	800705c <main+0x130>
	  case 4: lcd_clear(MAGENTA); g_back_color = MAGENTA; break;
 8006fcc:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8006fd0:	f7ff fcf8 	bl	80069c4 <lcd_clear>
 8006fd4:	4b61      	ldr	r3, [pc, #388]	; (800715c <main+0x230>)
 8006fd6:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8006fda:	601a      	str	r2, [r3, #0]
 8006fdc:	e03e      	b.n	800705c <main+0x130>
	  case 5: lcd_clear(GREEN); g_back_color = GREEN; break;
 8006fde:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8006fe2:	f7ff fcef 	bl	80069c4 <lcd_clear>
 8006fe6:	4b5d      	ldr	r3, [pc, #372]	; (800715c <main+0x230>)
 8006fe8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8006fec:	601a      	str	r2, [r3, #0]
 8006fee:	e035      	b.n	800705c <main+0x130>
	  case 6: lcd_clear(CYAN); g_back_color = CYAN; break;
 8006ff0:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8006ff4:	f7ff fce6 	bl	80069c4 <lcd_clear>
 8006ff8:	4b58      	ldr	r3, [pc, #352]	; (800715c <main+0x230>)
 8006ffa:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006ffe:	601a      	str	r2, [r3, #0]
 8007000:	e02c      	b.n	800705c <main+0x130>
	  case 7: lcd_clear(YELLOW); g_back_color = YELLOW; break;
 8007002:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8007006:	f7ff fcdd 	bl	80069c4 <lcd_clear>
 800700a:	4b54      	ldr	r3, [pc, #336]	; (800715c <main+0x230>)
 800700c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8007010:	601a      	str	r2, [r3, #0]
 8007012:	e023      	b.n	800705c <main+0x130>
	  case 8: lcd_clear(BRRED); g_back_color = BRRED; break;
 8007014:	f64f 4007 	movw	r0, #64519	; 0xfc07
 8007018:	f7ff fcd4 	bl	80069c4 <lcd_clear>
 800701c:	4b4f      	ldr	r3, [pc, #316]	; (800715c <main+0x230>)
 800701e:	f64f 4207 	movw	r2, #64519	; 0xfc07
 8007022:	601a      	str	r2, [r3, #0]
 8007024:	e01a      	b.n	800705c <main+0x130>
	  case 9: lcd_clear(GRAY); g_back_color = GRAY; break;
 8007026:	f248 4030 	movw	r0, #33840	; 0x8430
 800702a:	f7ff fccb 	bl	80069c4 <lcd_clear>
 800702e:	4b4b      	ldr	r3, [pc, #300]	; (800715c <main+0x230>)
 8007030:	f248 4230 	movw	r2, #33840	; 0x8430
 8007034:	601a      	str	r2, [r3, #0]
 8007036:	e011      	b.n	800705c <main+0x130>
	  case 10: lcd_clear(LGRAY); g_back_color = LGRAY; break;
 8007038:	f24c 6018 	movw	r0, #50712	; 0xc618
 800703c:	f7ff fcc2 	bl	80069c4 <lcd_clear>
 8007040:	4b46      	ldr	r3, [pc, #280]	; (800715c <main+0x230>)
 8007042:	f24c 6218 	movw	r2, #50712	; 0xc618
 8007046:	601a      	str	r2, [r3, #0]
 8007048:	e008      	b.n	800705c <main+0x130>
	  case 11: lcd_clear(BROWN); g_back_color = BROWN; break;
 800704a:	f64b 4040 	movw	r0, #48192	; 0xbc40
 800704e:	f7ff fcb9 	bl	80069c4 <lcd_clear>
 8007052:	4b42      	ldr	r3, [pc, #264]	; (800715c <main+0x230>)
 8007054:	f64b 4240 	movw	r2, #48192	; 0xbc40
 8007058:	601a      	str	r2, [r3, #0]
 800705a:	bf00      	nop
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	    RTC_TimeTypeDef sTime;
	    RTC_DateTypeDef sDate;

	    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800705c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8007060:	2200      	movs	r2, #0
 8007062:	4619      	mov	r1, r3
 8007064:	483e      	ldr	r0, [pc, #248]	; (8007160 <main+0x234>)
 8007066:	f001 fc1b 	bl	80088a0 <HAL_RTC_GetTime>
	    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800706a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800706e:	2200      	movs	r2, #0
 8007070:	4619      	mov	r1, r3
 8007072:	483b      	ldr	r0, [pc, #236]	; (8007160 <main+0x234>)
 8007074:	f001 fda2 	bl	8008bbc <HAL_RTC_GetDate>
	    char datetime_str[80];
	    sprintf(datetime_str, "%04d/%02d/%02d %02d:%02d:%02d",
	            2000 + sDate.Year, sDate.Month, sDate.Date,
 8007078:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
	    sprintf(datetime_str, "%04d/%02d/%02d %02d:%02d:%02d",
 800707c:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
	            2000 + sDate.Year, sDate.Month, sDate.Date,
 8007080:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
	    sprintf(datetime_str, "%04d/%02d/%02d %02d:%02d:%02d",
 8007084:	461e      	mov	r6, r3
	            2000 + sDate.Year, sDate.Month, sDate.Date,
 8007086:	f897 30aa 	ldrb.w	r3, [r7, #170]	; 0xaa
	            sTime.Hours, sTime.Minutes, sTime.Seconds);
 800708a:	f897 10ac 	ldrb.w	r1, [r7, #172]	; 0xac
 800708e:	f897 00ad 	ldrb.w	r0, [r7, #173]	; 0xad
	    sprintf(datetime_str, "%04d/%02d/%02d %02d:%02d:%02d",
 8007092:	4604      	mov	r4, r0
	            sTime.Hours, sTime.Minutes, sTime.Seconds);
 8007094:	f897 00ae 	ldrb.w	r0, [r7, #174]	; 0xae
	    sprintf(datetime_str, "%04d/%02d/%02d %02d:%02d:%02d",
 8007098:	4605      	mov	r5, r0
 800709a:	1d38      	adds	r0, r7, #4
 800709c:	9503      	str	r5, [sp, #12]
 800709e:	9402      	str	r4, [sp, #8]
 80070a0:	9101      	str	r1, [sp, #4]
 80070a2:	9300      	str	r3, [sp, #0]
 80070a4:	4633      	mov	r3, r6
 80070a6:	492f      	ldr	r1, [pc, #188]	; (8007164 <main+0x238>)
 80070a8:	f002 f8fa 	bl	80092a0 <siprintf>



	    HAL_Delay(1000); // 延时1�?
 80070ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80070b0:	f000 fa76 	bl	80075a0 <HAL_Delay>
      char ch[81];
      //sprintf(ch,"%p",&(GPIOA->CRL));
      sprintf(ch,"%x",lcddev.id);
 80070b4:	4b2c      	ldr	r3, [pc, #176]	; (8007168 <main+0x23c>)
 80070b6:	889b      	ldrh	r3, [r3, #4]
 80070b8:	461a      	mov	r2, r3
 80070ba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80070be:	492b      	ldr	r1, [pc, #172]	; (800716c <main+0x240>)
 80070c0:	4618      	mov	r0, r3
 80070c2:	f002 f8ed 	bl	80092a0 <siprintf>
//      char result[80]="time=";
//      strcat(result, ch);
	  lcd_show_string(30, 40, 200, 24, 24, "Mini STM32 ^_^",RED);
 80070c6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80070ca:	9302      	str	r3, [sp, #8]
 80070cc:	4b28      	ldr	r3, [pc, #160]	; (8007170 <main+0x244>)
 80070ce:	9301      	str	r3, [sp, #4]
 80070d0:	2318      	movs	r3, #24
 80070d2:	9300      	str	r3, [sp, #0]
 80070d4:	2318      	movs	r3, #24
 80070d6:	22c8      	movs	r2, #200	; 0xc8
 80070d8:	2128      	movs	r1, #40	; 0x28
 80070da:	201e      	movs	r0, #30
 80070dc:	f7ff fed6 	bl	8006e8c <lcd_show_string>
	  lcd_show_string(30, 70, 200, 16, 16, "TFTLCD TEST" ,RED);
 80070e0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80070e4:	9302      	str	r3, [sp, #8]
 80070e6:	4b23      	ldr	r3, [pc, #140]	; (8007174 <main+0x248>)
 80070e8:	9301      	str	r3, [sp, #4]
 80070ea:	2310      	movs	r3, #16
 80070ec:	9300      	str	r3, [sp, #0]
 80070ee:	2310      	movs	r3, #16
 80070f0:	22c8      	movs	r2, #200	; 0xc8
 80070f2:	2146      	movs	r1, #70	; 0x46
 80070f4:	201e      	movs	r0, #30
 80070f6:	f7ff fec9 	bl	8006e8c <lcd_show_string>
	  lcd_show_string(30, 100, 200, 16, 16, ch ,RED);
 80070fa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80070fe:	9302      	str	r3, [sp, #8]
 8007100:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007104:	9301      	str	r3, [sp, #4]
 8007106:	2310      	movs	r3, #16
 8007108:	9300      	str	r3, [sp, #0]
 800710a:	2310      	movs	r3, #16
 800710c:	22c8      	movs	r2, #200	; 0xc8
 800710e:	2164      	movs	r1, #100	; 0x64
 8007110:	201e      	movs	r0, #30
 8007112:	f7ff febb 	bl	8006e8c <lcd_show_string>
	  lcd_draw_rectangle(30, 150, 210, 190,BLACK);
 8007116:	2300      	movs	r3, #0
 8007118:	9300      	str	r3, [sp, #0]
 800711a:	23be      	movs	r3, #190	; 0xbe
 800711c:	22d2      	movs	r2, #210	; 0xd2
 800711e:	2196      	movs	r1, #150	; 0x96
 8007120:	201e      	movs	r0, #30
 8007122:	f7ff fd9e 	bl	8006c62 <lcd_draw_rectangle>
	  lcd_fill(31, 151, 209, 189, YELLOW);
 8007126:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800712a:	9300      	str	r3, [sp, #0]
 800712c:	23bd      	movs	r3, #189	; 0xbd
 800712e:	22d1      	movs	r2, #209	; 0xd1
 8007130:	2197      	movs	r1, #151	; 0x97
 8007132:	201f      	movs	r0, #31
 8007134:	f7ff fca2 	bl	8006a7c <lcd_fill>
	  x++;
 8007138:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800713c:	3301      	adds	r3, #1
 800713e:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	  if (x == 12)
 8007142:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8007146:	2b0c      	cmp	r3, #12
 8007148:	d102      	bne.n	8007150 <main+0x224>
	  x = 0;
 800714a:	2300      	movs	r3, #0
 800714c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	  HAL_Delay(2000);
 8007150:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007154:	f000 fa24 	bl	80075a0 <HAL_Delay>
  while (1) {
 8007158:	e6f8      	b.n	8006f4c <main+0x20>
 800715a:	bf00      	nop
 800715c:	20000000 	.word	0x20000000
 8007160:	2000008c 	.word	0x2000008c
 8007164:	08009c1c 	.word	0x08009c1c
 8007168:	2000007c 	.word	0x2000007c
 800716c:	08009c3c 	.word	0x08009c3c
 8007170:	08009c40 	.word	0x08009c40
 8007174:	08009c50 	.word	0x08009c50

08007178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b096      	sub	sp, #88	; 0x58
 800717c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800717e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007182:	2228      	movs	r2, #40	; 0x28
 8007184:	2100      	movs	r1, #0
 8007186:	4618      	mov	r0, r3
 8007188:	f002 f8aa 	bl	80092e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800718c:	f107 031c 	add.w	r3, r7, #28
 8007190:	2200      	movs	r2, #0
 8007192:	601a      	str	r2, [r3, #0]
 8007194:	605a      	str	r2, [r3, #4]
 8007196:	609a      	str	r2, [r3, #8]
 8007198:	60da      	str	r2, [r3, #12]
 800719a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800719c:	1d3b      	adds	r3, r7, #4
 800719e:	2200      	movs	r2, #0
 80071a0:	601a      	str	r2, [r3, #0]
 80071a2:	605a      	str	r2, [r3, #4]
 80071a4:	609a      	str	r2, [r3, #8]
 80071a6:	60da      	str	r2, [r3, #12]
 80071a8:	611a      	str	r2, [r3, #16]
 80071aa:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80071ac:	2305      	movs	r3, #5
 80071ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80071b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80071b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80071b6:	2300      	movs	r3, #0
 80071b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80071ba:	2301      	movs	r3, #1
 80071bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80071be:	2301      	movs	r3, #1
 80071c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80071c2:	2302      	movs	r3, #2
 80071c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80071c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80071ca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80071cc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80071d0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80071d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80071d6:	4618      	mov	r0, r3
 80071d8:	f000 fcb4 	bl	8007b44 <HAL_RCC_OscConfig>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d001      	beq.n	80071e6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80071e2:	f000 f828 	bl	8007236 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80071e6:	230f      	movs	r3, #15
 80071e8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80071ea:	2302      	movs	r3, #2
 80071ec:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80071ee:	2300      	movs	r3, #0
 80071f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80071f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80071f8:	2300      	movs	r3, #0
 80071fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80071fc:	f107 031c 	add.w	r3, r7, #28
 8007200:	2102      	movs	r1, #2
 8007202:	4618      	mov	r0, r3
 8007204:	f000 ff20 	bl	8008048 <HAL_RCC_ClockConfig>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d001      	beq.n	8007212 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800720e:	f000 f812 	bl	8007236 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8007212:	2301      	movs	r3, #1
 8007214:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8007216:	f44f 7380 	mov.w	r3, #256	; 0x100
 800721a:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800721c:	1d3b      	adds	r3, r7, #4
 800721e:	4618      	mov	r0, r3
 8007220:	f001 f88c 	bl	800833c <HAL_RCCEx_PeriphCLKConfig>
 8007224:	4603      	mov	r3, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d001      	beq.n	800722e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800722a:	f000 f804 	bl	8007236 <Error_Handler>
  }
}
 800722e:	bf00      	nop
 8007230:	3758      	adds	r7, #88	; 0x58
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007236:	b480      	push	{r7}
 8007238:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800723a:	b672      	cpsid	i
}
 800723c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800723e:	e7fe      	b.n	800723e <Error_Handler+0x8>

08007240 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8007246:	1d3b      	adds	r3, r7, #4
 8007248:	2100      	movs	r1, #0
 800724a:	460a      	mov	r2, r1
 800724c:	801a      	strh	r2, [r3, #0]
 800724e:	460a      	mov	r2, r1
 8007250:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8007252:	2300      	movs	r3, #0
 8007254:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8007256:	4b1d      	ldr	r3, [pc, #116]	; (80072cc <MX_RTC_Init+0x8c>)
 8007258:	4a1d      	ldr	r2, [pc, #116]	; (80072d0 <MX_RTC_Init+0x90>)
 800725a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800725c:	4b1b      	ldr	r3, [pc, #108]	; (80072cc <MX_RTC_Init+0x8c>)
 800725e:	f04f 32ff 	mov.w	r2, #4294967295
 8007262:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8007264:	4b19      	ldr	r3, [pc, #100]	; (80072cc <MX_RTC_Init+0x8c>)
 8007266:	f44f 7280 	mov.w	r2, #256	; 0x100
 800726a:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800726c:	4817      	ldr	r0, [pc, #92]	; (80072cc <MX_RTC_Init+0x8c>)
 800726e:	f001 f9f3 	bl	8008658 <HAL_RTC_Init>
 8007272:	4603      	mov	r3, r0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d001      	beq.n	800727c <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8007278:	f7ff ffdd 	bl	8007236 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x8;
 800727c:	2308      	movs	r3, #8
 800727e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x40;
 8007280:	2340      	movs	r3, #64	; 0x40
 8007282:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8007284:	2300      	movs	r3, #0
 8007286:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8007288:	1d3b      	adds	r3, r7, #4
 800728a:	2201      	movs	r2, #1
 800728c:	4619      	mov	r1, r3
 800728e:	480f      	ldr	r0, [pc, #60]	; (80072cc <MX_RTC_Init+0x8c>)
 8007290:	f001 fa6e 	bl	8008770 <HAL_RTC_SetTime>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d001      	beq.n	800729e <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 800729a:	f7ff ffcc 	bl	8007236 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_FRIDAY;
 800729e:	2305      	movs	r3, #5
 80072a0:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_OCTOBER;
 80072a2:	2310      	movs	r3, #16
 80072a4:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x27;
 80072a6:	2327      	movs	r3, #39	; 0x27
 80072a8:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x23;
 80072aa:	2323      	movs	r3, #35	; 0x23
 80072ac:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80072ae:	463b      	mov	r3, r7
 80072b0:	2201      	movs	r2, #1
 80072b2:	4619      	mov	r1, r3
 80072b4:	4805      	ldr	r0, [pc, #20]	; (80072cc <MX_RTC_Init+0x8c>)
 80072b6:	f001 fbcb 	bl	8008a50 <HAL_RTC_SetDate>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d001      	beq.n	80072c4 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 80072c0:	f7ff ffb9 	bl	8007236 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80072c4:	bf00      	nop
 80072c6:	3708      	adds	r7, #8
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	2000008c 	.word	0x2000008c
 80072d0:	40002800 	.word	0x40002800

080072d4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a13      	ldr	r2, [pc, #76]	; (8007330 <HAL_RTC_MspInit+0x5c>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d120      	bne.n	8007328 <HAL_RTC_MspInit+0x54>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80072e6:	f000 fc21 	bl	8007b2c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80072ea:	4b12      	ldr	r3, [pc, #72]	; (8007334 <HAL_RTC_MspInit+0x60>)
 80072ec:	69db      	ldr	r3, [r3, #28]
 80072ee:	4a11      	ldr	r2, [pc, #68]	; (8007334 <HAL_RTC_MspInit+0x60>)
 80072f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80072f4:	61d3      	str	r3, [r2, #28]
 80072f6:	4b0f      	ldr	r3, [pc, #60]	; (8007334 <HAL_RTC_MspInit+0x60>)
 80072f8:	69db      	ldr	r3, [r3, #28]
 80072fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072fe:	60fb      	str	r3, [r7, #12]
 8007300:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8007302:	4b0d      	ldr	r3, [pc, #52]	; (8007338 <HAL_RTC_MspInit+0x64>)
 8007304:	2201      	movs	r2, #1
 8007306:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 1, 0);
 8007308:	2200      	movs	r2, #0
 800730a:	2101      	movs	r1, #1
 800730c:	2003      	movs	r0, #3
 800730e:	f000 fa42 	bl	8007796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8007312:	2003      	movs	r0, #3
 8007314:	f000 fa5b 	bl	80077ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 1, 0);
 8007318:	2200      	movs	r2, #0
 800731a:	2101      	movs	r1, #1
 800731c:	2029      	movs	r0, #41	; 0x29
 800731e:	f000 fa3a 	bl	8007796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8007322:	2029      	movs	r0, #41	; 0x29
 8007324:	f000 fa53 	bl	80077ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8007328:	bf00      	nop
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}
 8007330:	40002800 	.word	0x40002800
 8007334:	40021000 	.word	0x40021000
 8007338:	4242043c 	.word	0x4242043c

0800733c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800733c:	b480      	push	{r7}
 800733e:	b085      	sub	sp, #20
 8007340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8007342:	4b15      	ldr	r3, [pc, #84]	; (8007398 <HAL_MspInit+0x5c>)
 8007344:	699b      	ldr	r3, [r3, #24]
 8007346:	4a14      	ldr	r2, [pc, #80]	; (8007398 <HAL_MspInit+0x5c>)
 8007348:	f043 0301 	orr.w	r3, r3, #1
 800734c:	6193      	str	r3, [r2, #24]
 800734e:	4b12      	ldr	r3, [pc, #72]	; (8007398 <HAL_MspInit+0x5c>)
 8007350:	699b      	ldr	r3, [r3, #24]
 8007352:	f003 0301 	and.w	r3, r3, #1
 8007356:	60bb      	str	r3, [r7, #8]
 8007358:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800735a:	4b0f      	ldr	r3, [pc, #60]	; (8007398 <HAL_MspInit+0x5c>)
 800735c:	69db      	ldr	r3, [r3, #28]
 800735e:	4a0e      	ldr	r2, [pc, #56]	; (8007398 <HAL_MspInit+0x5c>)
 8007360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007364:	61d3      	str	r3, [r2, #28]
 8007366:	4b0c      	ldr	r3, [pc, #48]	; (8007398 <HAL_MspInit+0x5c>)
 8007368:	69db      	ldr	r3, [r3, #28]
 800736a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800736e:	607b      	str	r3, [r7, #4]
 8007370:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007372:	4b0a      	ldr	r3, [pc, #40]	; (800739c <HAL_MspInit+0x60>)
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	60fb      	str	r3, [r7, #12]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800737e:	60fb      	str	r3, [r7, #12]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007386:	60fb      	str	r3, [r7, #12]
 8007388:	4a04      	ldr	r2, [pc, #16]	; (800739c <HAL_MspInit+0x60>)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800738e:	bf00      	nop
 8007390:	3714      	adds	r7, #20
 8007392:	46bd      	mov	sp, r7
 8007394:	bc80      	pop	{r7}
 8007396:	4770      	bx	lr
 8007398:	40021000 	.word	0x40021000
 800739c:	40010000 	.word	0x40010000

080073a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80073a0:	b480      	push	{r7}
 80073a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80073a4:	e7fe      	b.n	80073a4 <NMI_Handler+0x4>

080073a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80073a6:	b480      	push	{r7}
 80073a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80073aa:	e7fe      	b.n	80073aa <HardFault_Handler+0x4>

080073ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80073ac:	b480      	push	{r7}
 80073ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80073b0:	e7fe      	b.n	80073b0 <MemManage_Handler+0x4>

080073b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80073b2:	b480      	push	{r7}
 80073b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80073b6:	e7fe      	b.n	80073b6 <BusFault_Handler+0x4>

080073b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80073b8:	b480      	push	{r7}
 80073ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80073bc:	e7fe      	b.n	80073bc <UsageFault_Handler+0x4>

080073be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80073be:	b480      	push	{r7}
 80073c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80073c2:	bf00      	nop
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bc80      	pop	{r7}
 80073c8:	4770      	bx	lr

080073ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80073ca:	b480      	push	{r7}
 80073cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80073ce:	bf00      	nop
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bc80      	pop	{r7}
 80073d4:	4770      	bx	lr

080073d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80073d6:	b480      	push	{r7}
 80073d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80073da:	bf00      	nop
 80073dc:	46bd      	mov	sp, r7
 80073de:	bc80      	pop	{r7}
 80073e0:	4770      	bx	lr

080073e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80073e6:	f000 f8bf 	bl	8007568 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80073ea:	bf00      	nop
 80073ec:	bd80      	pop	{r7, pc}
	...

080073f0 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 80073f4:	4802      	ldr	r0, [pc, #8]	; (8007400 <RTC_IRQHandler+0x10>)
 80073f6:	f001 ff09 	bl	800920c <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 80073fa:	bf00      	nop
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	2000008c 	.word	0x2000008c

08007404 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8007408:	4802      	ldr	r0, [pc, #8]	; (8007414 <RTC_Alarm_IRQHandler+0x10>)
 800740a:	f001 fc2b 	bl	8008c64 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800740e:	bf00      	nop
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	2000008c 	.word	0x2000008c

08007418 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b086      	sub	sp, #24
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007420:	4a14      	ldr	r2, [pc, #80]	; (8007474 <_sbrk+0x5c>)
 8007422:	4b15      	ldr	r3, [pc, #84]	; (8007478 <_sbrk+0x60>)
 8007424:	1ad3      	subs	r3, r2, r3
 8007426:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800742c:	4b13      	ldr	r3, [pc, #76]	; (800747c <_sbrk+0x64>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d102      	bne.n	800743a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007434:	4b11      	ldr	r3, [pc, #68]	; (800747c <_sbrk+0x64>)
 8007436:	4a12      	ldr	r2, [pc, #72]	; (8007480 <_sbrk+0x68>)
 8007438:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800743a:	4b10      	ldr	r3, [pc, #64]	; (800747c <_sbrk+0x64>)
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4413      	add	r3, r2
 8007442:	693a      	ldr	r2, [r7, #16]
 8007444:	429a      	cmp	r2, r3
 8007446:	d207      	bcs.n	8007458 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007448:	f001 ff52 	bl	80092f0 <__errno>
 800744c:	4603      	mov	r3, r0
 800744e:	220c      	movs	r2, #12
 8007450:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007452:	f04f 33ff 	mov.w	r3, #4294967295
 8007456:	e009      	b.n	800746c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007458:	4b08      	ldr	r3, [pc, #32]	; (800747c <_sbrk+0x64>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800745e:	4b07      	ldr	r3, [pc, #28]	; (800747c <_sbrk+0x64>)
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4413      	add	r3, r2
 8007466:	4a05      	ldr	r2, [pc, #20]	; (800747c <_sbrk+0x64>)
 8007468:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800746a:	68fb      	ldr	r3, [r7, #12]
}
 800746c:	4618      	mov	r0, r3
 800746e:	3718      	adds	r7, #24
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}
 8007474:	2000c000 	.word	0x2000c000
 8007478:	00000400 	.word	0x00000400
 800747c:	200000a0 	.word	0x200000a0
 8007480:	200001f0 	.word	0x200001f0

08007484 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007484:	b480      	push	{r7}
 8007486:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007488:	bf00      	nop
 800748a:	46bd      	mov	sp, r7
 800748c:	bc80      	pop	{r7}
 800748e:	4770      	bx	lr

08007490 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007490:	f7ff fff8 	bl	8007484 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007494:	480b      	ldr	r0, [pc, #44]	; (80074c4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8007496:	490c      	ldr	r1, [pc, #48]	; (80074c8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8007498:	4a0c      	ldr	r2, [pc, #48]	; (80074cc <LoopFillZerobss+0x16>)
  movs r3, #0
 800749a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800749c:	e002      	b.n	80074a4 <LoopCopyDataInit>

0800749e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800749e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80074a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80074a2:	3304      	adds	r3, #4

080074a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80074a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80074a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80074a8:	d3f9      	bcc.n	800749e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80074aa:	4a09      	ldr	r2, [pc, #36]	; (80074d0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80074ac:	4c09      	ldr	r4, [pc, #36]	; (80074d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80074ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80074b0:	e001      	b.n	80074b6 <LoopFillZerobss>

080074b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80074b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80074b4:	3204      	adds	r2, #4

080074b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80074b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80074b8:	d3fb      	bcc.n	80074b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80074ba:	f001 ff1f 	bl	80092fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80074be:	f7ff fd35 	bl	8006f2c <main>
  bx lr
 80074c2:	4770      	bx	lr
  ldr r0, =_sdata
 80074c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80074c8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80074cc:	0800cc58 	.word	0x0800cc58
  ldr r2, =_sbss
 80074d0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80074d4:	200001f0 	.word	0x200001f0

080074d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80074d8:	e7fe      	b.n	80074d8 <ADC1_2_IRQHandler>
	...

080074dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80074e0:	4b08      	ldr	r3, [pc, #32]	; (8007504 <HAL_Init+0x28>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a07      	ldr	r2, [pc, #28]	; (8007504 <HAL_Init+0x28>)
 80074e6:	f043 0310 	orr.w	r3, r3, #16
 80074ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80074ec:	2003      	movs	r0, #3
 80074ee:	f000 f947 	bl	8007780 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80074f2:	200f      	movs	r0, #15
 80074f4:	f000 f808 	bl	8007508 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80074f8:	f7ff ff20 	bl	800733c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	40022000 	.word	0x40022000

08007508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007510:	4b12      	ldr	r3, [pc, #72]	; (800755c <HAL_InitTick+0x54>)
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	4b12      	ldr	r3, [pc, #72]	; (8007560 <HAL_InitTick+0x58>)
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	4619      	mov	r1, r3
 800751a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800751e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007522:	fbb2 f3f3 	udiv	r3, r2, r3
 8007526:	4618      	mov	r0, r3
 8007528:	f000 f95f 	bl	80077ea <HAL_SYSTICK_Config>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d001      	beq.n	8007536 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	e00e      	b.n	8007554 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2b0f      	cmp	r3, #15
 800753a:	d80a      	bhi.n	8007552 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800753c:	2200      	movs	r2, #0
 800753e:	6879      	ldr	r1, [r7, #4]
 8007540:	f04f 30ff 	mov.w	r0, #4294967295
 8007544:	f000 f927 	bl	8007796 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007548:	4a06      	ldr	r2, [pc, #24]	; (8007564 <HAL_InitTick+0x5c>)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800754e:	2300      	movs	r3, #0
 8007550:	e000      	b.n	8007554 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007552:	2301      	movs	r3, #1
}
 8007554:	4618      	mov	r0, r3
 8007556:	3708      	adds	r7, #8
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}
 800755c:	20000004 	.word	0x20000004
 8007560:	2000000c 	.word	0x2000000c
 8007564:	20000008 	.word	0x20000008

08007568 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007568:	b480      	push	{r7}
 800756a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800756c:	4b05      	ldr	r3, [pc, #20]	; (8007584 <HAL_IncTick+0x1c>)
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	461a      	mov	r2, r3
 8007572:	4b05      	ldr	r3, [pc, #20]	; (8007588 <HAL_IncTick+0x20>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4413      	add	r3, r2
 8007578:	4a03      	ldr	r2, [pc, #12]	; (8007588 <HAL_IncTick+0x20>)
 800757a:	6013      	str	r3, [r2, #0]
}
 800757c:	bf00      	nop
 800757e:	46bd      	mov	sp, r7
 8007580:	bc80      	pop	{r7}
 8007582:	4770      	bx	lr
 8007584:	2000000c 	.word	0x2000000c
 8007588:	200000a4 	.word	0x200000a4

0800758c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800758c:	b480      	push	{r7}
 800758e:	af00      	add	r7, sp, #0
  return uwTick;
 8007590:	4b02      	ldr	r3, [pc, #8]	; (800759c <HAL_GetTick+0x10>)
 8007592:	681b      	ldr	r3, [r3, #0]
}
 8007594:	4618      	mov	r0, r3
 8007596:	46bd      	mov	sp, r7
 8007598:	bc80      	pop	{r7}
 800759a:	4770      	bx	lr
 800759c:	200000a4 	.word	0x200000a4

080075a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80075a8:	f7ff fff0 	bl	800758c <HAL_GetTick>
 80075ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075b8:	d005      	beq.n	80075c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80075ba:	4b0a      	ldr	r3, [pc, #40]	; (80075e4 <HAL_Delay+0x44>)
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	461a      	mov	r2, r3
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	4413      	add	r3, r2
 80075c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80075c6:	bf00      	nop
 80075c8:	f7ff ffe0 	bl	800758c <HAL_GetTick>
 80075cc:	4602      	mov	r2, r0
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	68fa      	ldr	r2, [r7, #12]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d8f7      	bhi.n	80075c8 <HAL_Delay+0x28>
  {
  }
}
 80075d8:	bf00      	nop
 80075da:	bf00      	nop
 80075dc:	3710      	adds	r7, #16
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop
 80075e4:	2000000c 	.word	0x2000000c

080075e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b085      	sub	sp, #20
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f003 0307 	and.w	r3, r3, #7
 80075f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80075f8:	4b0c      	ldr	r3, [pc, #48]	; (800762c <__NVIC_SetPriorityGrouping+0x44>)
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80075fe:	68ba      	ldr	r2, [r7, #8]
 8007600:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007604:	4013      	ands	r3, r2
 8007606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007610:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800761a:	4a04      	ldr	r2, [pc, #16]	; (800762c <__NVIC_SetPriorityGrouping+0x44>)
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	60d3      	str	r3, [r2, #12]
}
 8007620:	bf00      	nop
 8007622:	3714      	adds	r7, #20
 8007624:	46bd      	mov	sp, r7
 8007626:	bc80      	pop	{r7}
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop
 800762c:	e000ed00 	.word	0xe000ed00

08007630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007630:	b480      	push	{r7}
 8007632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007634:	4b04      	ldr	r3, [pc, #16]	; (8007648 <__NVIC_GetPriorityGrouping+0x18>)
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	0a1b      	lsrs	r3, r3, #8
 800763a:	f003 0307 	and.w	r3, r3, #7
}
 800763e:	4618      	mov	r0, r3
 8007640:	46bd      	mov	sp, r7
 8007642:	bc80      	pop	{r7}
 8007644:	4770      	bx	lr
 8007646:	bf00      	nop
 8007648:	e000ed00 	.word	0xe000ed00

0800764c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	4603      	mov	r3, r0
 8007654:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800765a:	2b00      	cmp	r3, #0
 800765c:	db0b      	blt.n	8007676 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800765e:	79fb      	ldrb	r3, [r7, #7]
 8007660:	f003 021f 	and.w	r2, r3, #31
 8007664:	4906      	ldr	r1, [pc, #24]	; (8007680 <__NVIC_EnableIRQ+0x34>)
 8007666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800766a:	095b      	lsrs	r3, r3, #5
 800766c:	2001      	movs	r0, #1
 800766e:	fa00 f202 	lsl.w	r2, r0, r2
 8007672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007676:	bf00      	nop
 8007678:	370c      	adds	r7, #12
 800767a:	46bd      	mov	sp, r7
 800767c:	bc80      	pop	{r7}
 800767e:	4770      	bx	lr
 8007680:	e000e100 	.word	0xe000e100

08007684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	4603      	mov	r3, r0
 800768c:	6039      	str	r1, [r7, #0]
 800768e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007694:	2b00      	cmp	r3, #0
 8007696:	db0a      	blt.n	80076ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	b2da      	uxtb	r2, r3
 800769c:	490c      	ldr	r1, [pc, #48]	; (80076d0 <__NVIC_SetPriority+0x4c>)
 800769e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076a2:	0112      	lsls	r2, r2, #4
 80076a4:	b2d2      	uxtb	r2, r2
 80076a6:	440b      	add	r3, r1
 80076a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80076ac:	e00a      	b.n	80076c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	b2da      	uxtb	r2, r3
 80076b2:	4908      	ldr	r1, [pc, #32]	; (80076d4 <__NVIC_SetPriority+0x50>)
 80076b4:	79fb      	ldrb	r3, [r7, #7]
 80076b6:	f003 030f 	and.w	r3, r3, #15
 80076ba:	3b04      	subs	r3, #4
 80076bc:	0112      	lsls	r2, r2, #4
 80076be:	b2d2      	uxtb	r2, r2
 80076c0:	440b      	add	r3, r1
 80076c2:	761a      	strb	r2, [r3, #24]
}
 80076c4:	bf00      	nop
 80076c6:	370c      	adds	r7, #12
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bc80      	pop	{r7}
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop
 80076d0:	e000e100 	.word	0xe000e100
 80076d4:	e000ed00 	.word	0xe000ed00

080076d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80076d8:	b480      	push	{r7}
 80076da:	b089      	sub	sp, #36	; 0x24
 80076dc:	af00      	add	r7, sp, #0
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f003 0307 	and.w	r3, r3, #7
 80076ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	f1c3 0307 	rsb	r3, r3, #7
 80076f2:	2b04      	cmp	r3, #4
 80076f4:	bf28      	it	cs
 80076f6:	2304      	movcs	r3, #4
 80076f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	3304      	adds	r3, #4
 80076fe:	2b06      	cmp	r3, #6
 8007700:	d902      	bls.n	8007708 <NVIC_EncodePriority+0x30>
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	3b03      	subs	r3, #3
 8007706:	e000      	b.n	800770a <NVIC_EncodePriority+0x32>
 8007708:	2300      	movs	r3, #0
 800770a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800770c:	f04f 32ff 	mov.w	r2, #4294967295
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	fa02 f303 	lsl.w	r3, r2, r3
 8007716:	43da      	mvns	r2, r3
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	401a      	ands	r2, r3
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007720:	f04f 31ff 	mov.w	r1, #4294967295
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	fa01 f303 	lsl.w	r3, r1, r3
 800772a:	43d9      	mvns	r1, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007730:	4313      	orrs	r3, r2
         );
}
 8007732:	4618      	mov	r0, r3
 8007734:	3724      	adds	r7, #36	; 0x24
 8007736:	46bd      	mov	sp, r7
 8007738:	bc80      	pop	{r7}
 800773a:	4770      	bx	lr

0800773c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	3b01      	subs	r3, #1
 8007748:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800774c:	d301      	bcc.n	8007752 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800774e:	2301      	movs	r3, #1
 8007750:	e00f      	b.n	8007772 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007752:	4a0a      	ldr	r2, [pc, #40]	; (800777c <SysTick_Config+0x40>)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	3b01      	subs	r3, #1
 8007758:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800775a:	210f      	movs	r1, #15
 800775c:	f04f 30ff 	mov.w	r0, #4294967295
 8007760:	f7ff ff90 	bl	8007684 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007764:	4b05      	ldr	r3, [pc, #20]	; (800777c <SysTick_Config+0x40>)
 8007766:	2200      	movs	r2, #0
 8007768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800776a:	4b04      	ldr	r3, [pc, #16]	; (800777c <SysTick_Config+0x40>)
 800776c:	2207      	movs	r2, #7
 800776e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007770:	2300      	movs	r3, #0
}
 8007772:	4618      	mov	r0, r3
 8007774:	3708      	adds	r7, #8
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	e000e010 	.word	0xe000e010

08007780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f7ff ff2d 	bl	80075e8 <__NVIC_SetPriorityGrouping>
}
 800778e:	bf00      	nop
 8007790:	3708      	adds	r7, #8
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}

08007796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007796:	b580      	push	{r7, lr}
 8007798:	b086      	sub	sp, #24
 800779a:	af00      	add	r7, sp, #0
 800779c:	4603      	mov	r3, r0
 800779e:	60b9      	str	r1, [r7, #8]
 80077a0:	607a      	str	r2, [r7, #4]
 80077a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80077a4:	2300      	movs	r3, #0
 80077a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80077a8:	f7ff ff42 	bl	8007630 <__NVIC_GetPriorityGrouping>
 80077ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	68b9      	ldr	r1, [r7, #8]
 80077b2:	6978      	ldr	r0, [r7, #20]
 80077b4:	f7ff ff90 	bl	80076d8 <NVIC_EncodePriority>
 80077b8:	4602      	mov	r2, r0
 80077ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077be:	4611      	mov	r1, r2
 80077c0:	4618      	mov	r0, r3
 80077c2:	f7ff ff5f 	bl	8007684 <__NVIC_SetPriority>
}
 80077c6:	bf00      	nop
 80077c8:	3718      	adds	r7, #24
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}

080077ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80077ce:	b580      	push	{r7, lr}
 80077d0:	b082      	sub	sp, #8
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	4603      	mov	r3, r0
 80077d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80077d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077dc:	4618      	mov	r0, r3
 80077de:	f7ff ff35 	bl	800764c <__NVIC_EnableIRQ>
}
 80077e2:	bf00      	nop
 80077e4:	3708      	adds	r7, #8
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b082      	sub	sp, #8
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f7ff ffa2 	bl	800773c <SysTick_Config>
 80077f8:	4603      	mov	r3, r0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3708      	adds	r7, #8
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
	...

08007804 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007804:	b480      	push	{r7}
 8007806:	b08b      	sub	sp, #44	; 0x2c
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800780e:	2300      	movs	r3, #0
 8007810:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8007812:	2300      	movs	r3, #0
 8007814:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007816:	e179      	b.n	8007b0c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8007818:	2201      	movs	r2, #1
 800781a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781c:	fa02 f303 	lsl.w	r3, r2, r3
 8007820:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	69fa      	ldr	r2, [r7, #28]
 8007828:	4013      	ands	r3, r2
 800782a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800782c:	69ba      	ldr	r2, [r7, #24]
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	429a      	cmp	r2, r3
 8007832:	f040 8168 	bne.w	8007b06 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	4a96      	ldr	r2, [pc, #600]	; (8007a94 <HAL_GPIO_Init+0x290>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d05e      	beq.n	80078fe <HAL_GPIO_Init+0xfa>
 8007840:	4a94      	ldr	r2, [pc, #592]	; (8007a94 <HAL_GPIO_Init+0x290>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d875      	bhi.n	8007932 <HAL_GPIO_Init+0x12e>
 8007846:	4a94      	ldr	r2, [pc, #592]	; (8007a98 <HAL_GPIO_Init+0x294>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d058      	beq.n	80078fe <HAL_GPIO_Init+0xfa>
 800784c:	4a92      	ldr	r2, [pc, #584]	; (8007a98 <HAL_GPIO_Init+0x294>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d86f      	bhi.n	8007932 <HAL_GPIO_Init+0x12e>
 8007852:	4a92      	ldr	r2, [pc, #584]	; (8007a9c <HAL_GPIO_Init+0x298>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d052      	beq.n	80078fe <HAL_GPIO_Init+0xfa>
 8007858:	4a90      	ldr	r2, [pc, #576]	; (8007a9c <HAL_GPIO_Init+0x298>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d869      	bhi.n	8007932 <HAL_GPIO_Init+0x12e>
 800785e:	4a90      	ldr	r2, [pc, #576]	; (8007aa0 <HAL_GPIO_Init+0x29c>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d04c      	beq.n	80078fe <HAL_GPIO_Init+0xfa>
 8007864:	4a8e      	ldr	r2, [pc, #568]	; (8007aa0 <HAL_GPIO_Init+0x29c>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d863      	bhi.n	8007932 <HAL_GPIO_Init+0x12e>
 800786a:	4a8e      	ldr	r2, [pc, #568]	; (8007aa4 <HAL_GPIO_Init+0x2a0>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d046      	beq.n	80078fe <HAL_GPIO_Init+0xfa>
 8007870:	4a8c      	ldr	r2, [pc, #560]	; (8007aa4 <HAL_GPIO_Init+0x2a0>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d85d      	bhi.n	8007932 <HAL_GPIO_Init+0x12e>
 8007876:	2b12      	cmp	r3, #18
 8007878:	d82a      	bhi.n	80078d0 <HAL_GPIO_Init+0xcc>
 800787a:	2b12      	cmp	r3, #18
 800787c:	d859      	bhi.n	8007932 <HAL_GPIO_Init+0x12e>
 800787e:	a201      	add	r2, pc, #4	; (adr r2, 8007884 <HAL_GPIO_Init+0x80>)
 8007880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007884:	080078ff 	.word	0x080078ff
 8007888:	080078d9 	.word	0x080078d9
 800788c:	080078eb 	.word	0x080078eb
 8007890:	0800792d 	.word	0x0800792d
 8007894:	08007933 	.word	0x08007933
 8007898:	08007933 	.word	0x08007933
 800789c:	08007933 	.word	0x08007933
 80078a0:	08007933 	.word	0x08007933
 80078a4:	08007933 	.word	0x08007933
 80078a8:	08007933 	.word	0x08007933
 80078ac:	08007933 	.word	0x08007933
 80078b0:	08007933 	.word	0x08007933
 80078b4:	08007933 	.word	0x08007933
 80078b8:	08007933 	.word	0x08007933
 80078bc:	08007933 	.word	0x08007933
 80078c0:	08007933 	.word	0x08007933
 80078c4:	08007933 	.word	0x08007933
 80078c8:	080078e1 	.word	0x080078e1
 80078cc:	080078f5 	.word	0x080078f5
 80078d0:	4a75      	ldr	r2, [pc, #468]	; (8007aa8 <HAL_GPIO_Init+0x2a4>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d013      	beq.n	80078fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80078d6:	e02c      	b.n	8007932 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	623b      	str	r3, [r7, #32]
          break;
 80078de:	e029      	b.n	8007934 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	3304      	adds	r3, #4
 80078e6:	623b      	str	r3, [r7, #32]
          break;
 80078e8:	e024      	b.n	8007934 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	68db      	ldr	r3, [r3, #12]
 80078ee:	3308      	adds	r3, #8
 80078f0:	623b      	str	r3, [r7, #32]
          break;
 80078f2:	e01f      	b.n	8007934 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	330c      	adds	r3, #12
 80078fa:	623b      	str	r3, [r7, #32]
          break;
 80078fc:	e01a      	b.n	8007934 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d102      	bne.n	800790c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007906:	2304      	movs	r3, #4
 8007908:	623b      	str	r3, [r7, #32]
          break;
 800790a:	e013      	b.n	8007934 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	2b01      	cmp	r3, #1
 8007912:	d105      	bne.n	8007920 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007914:	2308      	movs	r3, #8
 8007916:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	69fa      	ldr	r2, [r7, #28]
 800791c:	611a      	str	r2, [r3, #16]
          break;
 800791e:	e009      	b.n	8007934 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007920:	2308      	movs	r3, #8
 8007922:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	69fa      	ldr	r2, [r7, #28]
 8007928:	615a      	str	r2, [r3, #20]
          break;
 800792a:	e003      	b.n	8007934 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800792c:	2300      	movs	r3, #0
 800792e:	623b      	str	r3, [r7, #32]
          break;
 8007930:	e000      	b.n	8007934 <HAL_GPIO_Init+0x130>
          break;
 8007932:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	2bff      	cmp	r3, #255	; 0xff
 8007938:	d801      	bhi.n	800793e <HAL_GPIO_Init+0x13a>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	e001      	b.n	8007942 <HAL_GPIO_Init+0x13e>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	3304      	adds	r3, #4
 8007942:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	2bff      	cmp	r3, #255	; 0xff
 8007948:	d802      	bhi.n	8007950 <HAL_GPIO_Init+0x14c>
 800794a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	e002      	b.n	8007956 <HAL_GPIO_Init+0x152>
 8007950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007952:	3b08      	subs	r3, #8
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	210f      	movs	r1, #15
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	fa01 f303 	lsl.w	r3, r1, r3
 8007964:	43db      	mvns	r3, r3
 8007966:	401a      	ands	r2, r3
 8007968:	6a39      	ldr	r1, [r7, #32]
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	fa01 f303 	lsl.w	r3, r1, r3
 8007970:	431a      	orrs	r2, r3
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800797e:	2b00      	cmp	r3, #0
 8007980:	f000 80c1 	beq.w	8007b06 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007984:	4b49      	ldr	r3, [pc, #292]	; (8007aac <HAL_GPIO_Init+0x2a8>)
 8007986:	699b      	ldr	r3, [r3, #24]
 8007988:	4a48      	ldr	r2, [pc, #288]	; (8007aac <HAL_GPIO_Init+0x2a8>)
 800798a:	f043 0301 	orr.w	r3, r3, #1
 800798e:	6193      	str	r3, [r2, #24]
 8007990:	4b46      	ldr	r3, [pc, #280]	; (8007aac <HAL_GPIO_Init+0x2a8>)
 8007992:	699b      	ldr	r3, [r3, #24]
 8007994:	f003 0301 	and.w	r3, r3, #1
 8007998:	60bb      	str	r3, [r7, #8]
 800799a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800799c:	4a44      	ldr	r2, [pc, #272]	; (8007ab0 <HAL_GPIO_Init+0x2ac>)
 800799e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a0:	089b      	lsrs	r3, r3, #2
 80079a2:	3302      	adds	r3, #2
 80079a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80079aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ac:	f003 0303 	and.w	r3, r3, #3
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	220f      	movs	r2, #15
 80079b4:	fa02 f303 	lsl.w	r3, r2, r3
 80079b8:	43db      	mvns	r3, r3
 80079ba:	68fa      	ldr	r2, [r7, #12]
 80079bc:	4013      	ands	r3, r2
 80079be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4a3c      	ldr	r2, [pc, #240]	; (8007ab4 <HAL_GPIO_Init+0x2b0>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d01f      	beq.n	8007a08 <HAL_GPIO_Init+0x204>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	4a3b      	ldr	r2, [pc, #236]	; (8007ab8 <HAL_GPIO_Init+0x2b4>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d019      	beq.n	8007a04 <HAL_GPIO_Init+0x200>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	4a3a      	ldr	r2, [pc, #232]	; (8007abc <HAL_GPIO_Init+0x2b8>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d013      	beq.n	8007a00 <HAL_GPIO_Init+0x1fc>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4a39      	ldr	r2, [pc, #228]	; (8007ac0 <HAL_GPIO_Init+0x2bc>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d00d      	beq.n	80079fc <HAL_GPIO_Init+0x1f8>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4a38      	ldr	r2, [pc, #224]	; (8007ac4 <HAL_GPIO_Init+0x2c0>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d007      	beq.n	80079f8 <HAL_GPIO_Init+0x1f4>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	4a37      	ldr	r2, [pc, #220]	; (8007ac8 <HAL_GPIO_Init+0x2c4>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d101      	bne.n	80079f4 <HAL_GPIO_Init+0x1f0>
 80079f0:	2305      	movs	r3, #5
 80079f2:	e00a      	b.n	8007a0a <HAL_GPIO_Init+0x206>
 80079f4:	2306      	movs	r3, #6
 80079f6:	e008      	b.n	8007a0a <HAL_GPIO_Init+0x206>
 80079f8:	2304      	movs	r3, #4
 80079fa:	e006      	b.n	8007a0a <HAL_GPIO_Init+0x206>
 80079fc:	2303      	movs	r3, #3
 80079fe:	e004      	b.n	8007a0a <HAL_GPIO_Init+0x206>
 8007a00:	2302      	movs	r3, #2
 8007a02:	e002      	b.n	8007a0a <HAL_GPIO_Init+0x206>
 8007a04:	2301      	movs	r3, #1
 8007a06:	e000      	b.n	8007a0a <HAL_GPIO_Init+0x206>
 8007a08:	2300      	movs	r3, #0
 8007a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a0c:	f002 0203 	and.w	r2, r2, #3
 8007a10:	0092      	lsls	r2, r2, #2
 8007a12:	4093      	lsls	r3, r2
 8007a14:	68fa      	ldr	r2, [r7, #12]
 8007a16:	4313      	orrs	r3, r2
 8007a18:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8007a1a:	4925      	ldr	r1, [pc, #148]	; (8007ab0 <HAL_GPIO_Init+0x2ac>)
 8007a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1e:	089b      	lsrs	r3, r3, #2
 8007a20:	3302      	adds	r3, #2
 8007a22:	68fa      	ldr	r2, [r7, #12]
 8007a24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d006      	beq.n	8007a42 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007a34:	4b25      	ldr	r3, [pc, #148]	; (8007acc <HAL_GPIO_Init+0x2c8>)
 8007a36:	689a      	ldr	r2, [r3, #8]
 8007a38:	4924      	ldr	r1, [pc, #144]	; (8007acc <HAL_GPIO_Init+0x2c8>)
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	608b      	str	r3, [r1, #8]
 8007a40:	e006      	b.n	8007a50 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007a42:	4b22      	ldr	r3, [pc, #136]	; (8007acc <HAL_GPIO_Init+0x2c8>)
 8007a44:	689a      	ldr	r2, [r3, #8]
 8007a46:	69bb      	ldr	r3, [r7, #24]
 8007a48:	43db      	mvns	r3, r3
 8007a4a:	4920      	ldr	r1, [pc, #128]	; (8007acc <HAL_GPIO_Init+0x2c8>)
 8007a4c:	4013      	ands	r3, r2
 8007a4e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d006      	beq.n	8007a6a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8007a5c:	4b1b      	ldr	r3, [pc, #108]	; (8007acc <HAL_GPIO_Init+0x2c8>)
 8007a5e:	68da      	ldr	r2, [r3, #12]
 8007a60:	491a      	ldr	r1, [pc, #104]	; (8007acc <HAL_GPIO_Init+0x2c8>)
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	4313      	orrs	r3, r2
 8007a66:	60cb      	str	r3, [r1, #12]
 8007a68:	e006      	b.n	8007a78 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007a6a:	4b18      	ldr	r3, [pc, #96]	; (8007acc <HAL_GPIO_Init+0x2c8>)
 8007a6c:	68da      	ldr	r2, [r3, #12]
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	43db      	mvns	r3, r3
 8007a72:	4916      	ldr	r1, [pc, #88]	; (8007acc <HAL_GPIO_Init+0x2c8>)
 8007a74:	4013      	ands	r3, r2
 8007a76:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d025      	beq.n	8007ad0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8007a84:	4b11      	ldr	r3, [pc, #68]	; (8007acc <HAL_GPIO_Init+0x2c8>)
 8007a86:	685a      	ldr	r2, [r3, #4]
 8007a88:	4910      	ldr	r1, [pc, #64]	; (8007acc <HAL_GPIO_Init+0x2c8>)
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	604b      	str	r3, [r1, #4]
 8007a90:	e025      	b.n	8007ade <HAL_GPIO_Init+0x2da>
 8007a92:	bf00      	nop
 8007a94:	10320000 	.word	0x10320000
 8007a98:	10310000 	.word	0x10310000
 8007a9c:	10220000 	.word	0x10220000
 8007aa0:	10210000 	.word	0x10210000
 8007aa4:	10120000 	.word	0x10120000
 8007aa8:	10110000 	.word	0x10110000
 8007aac:	40021000 	.word	0x40021000
 8007ab0:	40010000 	.word	0x40010000
 8007ab4:	40010800 	.word	0x40010800
 8007ab8:	40010c00 	.word	0x40010c00
 8007abc:	40011000 	.word	0x40011000
 8007ac0:	40011400 	.word	0x40011400
 8007ac4:	40011800 	.word	0x40011800
 8007ac8:	40011c00 	.word	0x40011c00
 8007acc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007ad0:	4b15      	ldr	r3, [pc, #84]	; (8007b28 <HAL_GPIO_Init+0x324>)
 8007ad2:	685a      	ldr	r2, [r3, #4]
 8007ad4:	69bb      	ldr	r3, [r7, #24]
 8007ad6:	43db      	mvns	r3, r3
 8007ad8:	4913      	ldr	r1, [pc, #76]	; (8007b28 <HAL_GPIO_Init+0x324>)
 8007ada:	4013      	ands	r3, r2
 8007adc:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d006      	beq.n	8007af8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8007aea:	4b0f      	ldr	r3, [pc, #60]	; (8007b28 <HAL_GPIO_Init+0x324>)
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	490e      	ldr	r1, [pc, #56]	; (8007b28 <HAL_GPIO_Init+0x324>)
 8007af0:	69bb      	ldr	r3, [r7, #24]
 8007af2:	4313      	orrs	r3, r2
 8007af4:	600b      	str	r3, [r1, #0]
 8007af6:	e006      	b.n	8007b06 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8007af8:	4b0b      	ldr	r3, [pc, #44]	; (8007b28 <HAL_GPIO_Init+0x324>)
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	43db      	mvns	r3, r3
 8007b00:	4909      	ldr	r1, [pc, #36]	; (8007b28 <HAL_GPIO_Init+0x324>)
 8007b02:	4013      	ands	r3, r2
 8007b04:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8007b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b08:	3301      	adds	r3, #1
 8007b0a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b12:	fa22 f303 	lsr.w	r3, r2, r3
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	f47f ae7e 	bne.w	8007818 <HAL_GPIO_Init+0x14>
  }
}
 8007b1c:	bf00      	nop
 8007b1e:	bf00      	nop
 8007b20:	372c      	adds	r7, #44	; 0x2c
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bc80      	pop	{r7}
 8007b26:	4770      	bx	lr
 8007b28:	40010400 	.word	0x40010400

08007b2c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8007b30:	4b03      	ldr	r3, [pc, #12]	; (8007b40 <HAL_PWR_EnableBkUpAccess+0x14>)
 8007b32:	2201      	movs	r2, #1
 8007b34:	601a      	str	r2, [r3, #0]
}
 8007b36:	bf00      	nop
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bc80      	pop	{r7}
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	420e0020 	.word	0x420e0020

08007b44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b086      	sub	sp, #24
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d101      	bne.n	8007b56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e272      	b.n	800803c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f003 0301 	and.w	r3, r3, #1
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	f000 8087 	beq.w	8007c72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007b64:	4b92      	ldr	r3, [pc, #584]	; (8007db0 <HAL_RCC_OscConfig+0x26c>)
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	f003 030c 	and.w	r3, r3, #12
 8007b6c:	2b04      	cmp	r3, #4
 8007b6e:	d00c      	beq.n	8007b8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007b70:	4b8f      	ldr	r3, [pc, #572]	; (8007db0 <HAL_RCC_OscConfig+0x26c>)
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	f003 030c 	and.w	r3, r3, #12
 8007b78:	2b08      	cmp	r3, #8
 8007b7a:	d112      	bne.n	8007ba2 <HAL_RCC_OscConfig+0x5e>
 8007b7c:	4b8c      	ldr	r3, [pc, #560]	; (8007db0 <HAL_RCC_OscConfig+0x26c>)
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b88:	d10b      	bne.n	8007ba2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b8a:	4b89      	ldr	r3, [pc, #548]	; (8007db0 <HAL_RCC_OscConfig+0x26c>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d06c      	beq.n	8007c70 <HAL_RCC_OscConfig+0x12c>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d168      	bne.n	8007c70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e24c      	b.n	800803c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007baa:	d106      	bne.n	8007bba <HAL_RCC_OscConfig+0x76>
 8007bac:	4b80      	ldr	r3, [pc, #512]	; (8007db0 <HAL_RCC_OscConfig+0x26c>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a7f      	ldr	r2, [pc, #508]	; (8007db0 <HAL_RCC_OscConfig+0x26c>)
 8007bb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bb6:	6013      	str	r3, [r2, #0]
 8007bb8:	e02e      	b.n	8007c18 <HAL_RCC_OscConfig+0xd4>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d10c      	bne.n	8007bdc <HAL_RCC_OscConfig+0x98>
 8007bc2:	4b7b      	ldr	r3, [pc, #492]	; (8007db0 <HAL_RCC_OscConfig+0x26c>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a7a      	ldr	r2, [pc, #488]	; (8007db0 <HAL_RCC_OscConfig+0x26c>)
 8007bc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bcc:	6013      	str	r3, [r2, #0]
 8007bce:	4b78      	ldr	r3, [pc, #480]	; (8007db0 <HAL_RCC_OscConfig+0x26c>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a77      	ldr	r2, [pc, #476]	; (8007db0 <HAL_RCC_OscConfig+0x26c>)
 8007bd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007bd8:	6013      	str	r3, [r2, #0]
 8007bda:	e01d      	b.n	8007c18 <HAL_RCC_OscConfig+0xd4>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007be4:	d10c      	bne.n	8007c00 <HAL_RCC_OscConfig+0xbc>
 8007be6:	4b72      	ldr	r3, [pc, #456]	; (8007db0 <HAL_RCC_OscConfig+0x26c>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a71      	ldr	r2, [pc, #452]	; (8007db0 <HAL_RCC_OscConfig+0x26c>)
 8007bec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007bf0:	6013      	str	r3, [r2, #0]
 8007bf2:	4b6f      	ldr	r3, [pc, #444]	; (8007db0 <HAL_RCC_OscConfig+0x26c>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a6e      	ldr	r2, [pc, #440]	; (8007db0 <HAL_RCC_OscConfig+0x26c>)
 8007bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bfc:	6013      	str	r3, [r2, #0]
 8007bfe:	e00b      	b.n	8007c18 <HAL_RCC_OscConfig+0xd4>
 8007c00:	4b6b      	ldr	r3, [pc, #428]	; (8007db0 <HAL_RCC_OscConfig+0x26c>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a6a      	ldr	r2, [pc, #424]	; (8007db0 <HAL_RCC_OscConfig+0x26c>)
 8007c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c0a:	6013      	str	r3, [r2, #0]
 8007c0c:	4b68      	ldr	r3, [pc, #416]	; (8007db0 <HAL_RCC_OscConfig+0x26c>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a67      	ldr	r2, [pc, #412]	; (8007db0 <HAL_RCC_OscConfig+0x26c>)
 8007c12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d013      	beq.n	8007c48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c20:	f7ff fcb4 	bl	800758c <HAL_GetTick>
 8007c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c26:	e008      	b.n	8007c3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c28:	f7ff fcb0 	bl	800758c <HAL_GetTick>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	1ad3      	subs	r3, r2, r3
 8007c32:	2b64      	cmp	r3, #100	; 0x64
 8007c34:	d901      	bls.n	8007c3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007c36:	2303      	movs	r3, #3
 8007c38:	e200      	b.n	800803c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c3a:	4b5d      	ldr	r3, [pc, #372]	; (8007db0 <HAL_RCC_OscConfig+0x26c>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d0f0      	beq.n	8007c28 <HAL_RCC_OscConfig+0xe4>
 8007c46:	e014      	b.n	8007c72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c48:	f7ff fca0 	bl	800758c <HAL_GetTick>
 8007c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c4e:	e008      	b.n	8007c62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c50:	f7ff fc9c 	bl	800758c <HAL_GetTick>
 8007c54:	4602      	mov	r2, r0
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	2b64      	cmp	r3, #100	; 0x64
 8007c5c:	d901      	bls.n	8007c62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	e1ec      	b.n	800803c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c62:	4b53      	ldr	r3, [pc, #332]	; (8007db0 <HAL_RCC_OscConfig+0x26c>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d1f0      	bne.n	8007c50 <HAL_RCC_OscConfig+0x10c>
 8007c6e:	e000      	b.n	8007c72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f003 0302 	and.w	r3, r3, #2
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d063      	beq.n	8007d46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007c7e:	4b4c      	ldr	r3, [pc, #304]	; (8007db0 <HAL_RCC_OscConfig+0x26c>)
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	f003 030c 	and.w	r3, r3, #12
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d00b      	beq.n	8007ca2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007c8a:	4b49      	ldr	r3, [pc, #292]	; (8007db0 <HAL_RCC_OscConfig+0x26c>)
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	f003 030c 	and.w	r3, r3, #12
 8007c92:	2b08      	cmp	r3, #8
 8007c94:	d11c      	bne.n	8007cd0 <HAL_RCC_OscConfig+0x18c>
 8007c96:	4b46      	ldr	r3, [pc, #280]	; (8007db0 <HAL_RCC_OscConfig+0x26c>)
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d116      	bne.n	8007cd0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007ca2:	4b43      	ldr	r3, [pc, #268]	; (8007db0 <HAL_RCC_OscConfig+0x26c>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 0302 	and.w	r3, r3, #2
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d005      	beq.n	8007cba <HAL_RCC_OscConfig+0x176>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d001      	beq.n	8007cba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e1c0      	b.n	800803c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cba:	4b3d      	ldr	r3, [pc, #244]	; (8007db0 <HAL_RCC_OscConfig+0x26c>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	695b      	ldr	r3, [r3, #20]
 8007cc6:	00db      	lsls	r3, r3, #3
 8007cc8:	4939      	ldr	r1, [pc, #228]	; (8007db0 <HAL_RCC_OscConfig+0x26c>)
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007cce:	e03a      	b.n	8007d46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	691b      	ldr	r3, [r3, #16]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d020      	beq.n	8007d1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007cd8:	4b36      	ldr	r3, [pc, #216]	; (8007db4 <HAL_RCC_OscConfig+0x270>)
 8007cda:	2201      	movs	r2, #1
 8007cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cde:	f7ff fc55 	bl	800758c <HAL_GetTick>
 8007ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ce4:	e008      	b.n	8007cf8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ce6:	f7ff fc51 	bl	800758c <HAL_GetTick>
 8007cea:	4602      	mov	r2, r0
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	1ad3      	subs	r3, r2, r3
 8007cf0:	2b02      	cmp	r3, #2
 8007cf2:	d901      	bls.n	8007cf8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007cf4:	2303      	movs	r3, #3
 8007cf6:	e1a1      	b.n	800803c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007cf8:	4b2d      	ldr	r3, [pc, #180]	; (8007db0 <HAL_RCC_OscConfig+0x26c>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f003 0302 	and.w	r3, r3, #2
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d0f0      	beq.n	8007ce6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d04:	4b2a      	ldr	r3, [pc, #168]	; (8007db0 <HAL_RCC_OscConfig+0x26c>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	695b      	ldr	r3, [r3, #20]
 8007d10:	00db      	lsls	r3, r3, #3
 8007d12:	4927      	ldr	r1, [pc, #156]	; (8007db0 <HAL_RCC_OscConfig+0x26c>)
 8007d14:	4313      	orrs	r3, r2
 8007d16:	600b      	str	r3, [r1, #0]
 8007d18:	e015      	b.n	8007d46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d1a:	4b26      	ldr	r3, [pc, #152]	; (8007db4 <HAL_RCC_OscConfig+0x270>)
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d20:	f7ff fc34 	bl	800758c <HAL_GetTick>
 8007d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d26:	e008      	b.n	8007d3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d28:	f7ff fc30 	bl	800758c <HAL_GetTick>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	1ad3      	subs	r3, r2, r3
 8007d32:	2b02      	cmp	r3, #2
 8007d34:	d901      	bls.n	8007d3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007d36:	2303      	movs	r3, #3
 8007d38:	e180      	b.n	800803c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d3a:	4b1d      	ldr	r3, [pc, #116]	; (8007db0 <HAL_RCC_OscConfig+0x26c>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f003 0302 	and.w	r3, r3, #2
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d1f0      	bne.n	8007d28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f003 0308 	and.w	r3, r3, #8
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d03a      	beq.n	8007dc8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	699b      	ldr	r3, [r3, #24]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d019      	beq.n	8007d8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d5a:	4b17      	ldr	r3, [pc, #92]	; (8007db8 <HAL_RCC_OscConfig+0x274>)
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d60:	f7ff fc14 	bl	800758c <HAL_GetTick>
 8007d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d66:	e008      	b.n	8007d7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d68:	f7ff fc10 	bl	800758c <HAL_GetTick>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	1ad3      	subs	r3, r2, r3
 8007d72:	2b02      	cmp	r3, #2
 8007d74:	d901      	bls.n	8007d7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007d76:	2303      	movs	r3, #3
 8007d78:	e160      	b.n	800803c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d7a:	4b0d      	ldr	r3, [pc, #52]	; (8007db0 <HAL_RCC_OscConfig+0x26c>)
 8007d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7e:	f003 0302 	and.w	r3, r3, #2
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d0f0      	beq.n	8007d68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007d86:	2001      	movs	r0, #1
 8007d88:	f000 faba 	bl	8008300 <RCC_Delay>
 8007d8c:	e01c      	b.n	8007dc8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007d8e:	4b0a      	ldr	r3, [pc, #40]	; (8007db8 <HAL_RCC_OscConfig+0x274>)
 8007d90:	2200      	movs	r2, #0
 8007d92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d94:	f7ff fbfa 	bl	800758c <HAL_GetTick>
 8007d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d9a:	e00f      	b.n	8007dbc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d9c:	f7ff fbf6 	bl	800758c <HAL_GetTick>
 8007da0:	4602      	mov	r2, r0
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	1ad3      	subs	r3, r2, r3
 8007da6:	2b02      	cmp	r3, #2
 8007da8:	d908      	bls.n	8007dbc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007daa:	2303      	movs	r3, #3
 8007dac:	e146      	b.n	800803c <HAL_RCC_OscConfig+0x4f8>
 8007dae:	bf00      	nop
 8007db0:	40021000 	.word	0x40021000
 8007db4:	42420000 	.word	0x42420000
 8007db8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007dbc:	4b92      	ldr	r3, [pc, #584]	; (8008008 <HAL_RCC_OscConfig+0x4c4>)
 8007dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc0:	f003 0302 	and.w	r3, r3, #2
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d1e9      	bne.n	8007d9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 0304 	and.w	r3, r3, #4
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	f000 80a6 	beq.w	8007f22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007dda:	4b8b      	ldr	r3, [pc, #556]	; (8008008 <HAL_RCC_OscConfig+0x4c4>)
 8007ddc:	69db      	ldr	r3, [r3, #28]
 8007dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d10d      	bne.n	8007e02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007de6:	4b88      	ldr	r3, [pc, #544]	; (8008008 <HAL_RCC_OscConfig+0x4c4>)
 8007de8:	69db      	ldr	r3, [r3, #28]
 8007dea:	4a87      	ldr	r2, [pc, #540]	; (8008008 <HAL_RCC_OscConfig+0x4c4>)
 8007dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007df0:	61d3      	str	r3, [r2, #28]
 8007df2:	4b85      	ldr	r3, [pc, #532]	; (8008008 <HAL_RCC_OscConfig+0x4c4>)
 8007df4:	69db      	ldr	r3, [r3, #28]
 8007df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dfa:	60bb      	str	r3, [r7, #8]
 8007dfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e02:	4b82      	ldr	r3, [pc, #520]	; (800800c <HAL_RCC_OscConfig+0x4c8>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d118      	bne.n	8007e40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007e0e:	4b7f      	ldr	r3, [pc, #508]	; (800800c <HAL_RCC_OscConfig+0x4c8>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a7e      	ldr	r2, [pc, #504]	; (800800c <HAL_RCC_OscConfig+0x4c8>)
 8007e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e1a:	f7ff fbb7 	bl	800758c <HAL_GetTick>
 8007e1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e20:	e008      	b.n	8007e34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e22:	f7ff fbb3 	bl	800758c <HAL_GetTick>
 8007e26:	4602      	mov	r2, r0
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	1ad3      	subs	r3, r2, r3
 8007e2c:	2b64      	cmp	r3, #100	; 0x64
 8007e2e:	d901      	bls.n	8007e34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007e30:	2303      	movs	r3, #3
 8007e32:	e103      	b.n	800803c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e34:	4b75      	ldr	r3, [pc, #468]	; (800800c <HAL_RCC_OscConfig+0x4c8>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d0f0      	beq.n	8007e22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d106      	bne.n	8007e56 <HAL_RCC_OscConfig+0x312>
 8007e48:	4b6f      	ldr	r3, [pc, #444]	; (8008008 <HAL_RCC_OscConfig+0x4c4>)
 8007e4a:	6a1b      	ldr	r3, [r3, #32]
 8007e4c:	4a6e      	ldr	r2, [pc, #440]	; (8008008 <HAL_RCC_OscConfig+0x4c4>)
 8007e4e:	f043 0301 	orr.w	r3, r3, #1
 8007e52:	6213      	str	r3, [r2, #32]
 8007e54:	e02d      	b.n	8007eb2 <HAL_RCC_OscConfig+0x36e>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d10c      	bne.n	8007e78 <HAL_RCC_OscConfig+0x334>
 8007e5e:	4b6a      	ldr	r3, [pc, #424]	; (8008008 <HAL_RCC_OscConfig+0x4c4>)
 8007e60:	6a1b      	ldr	r3, [r3, #32]
 8007e62:	4a69      	ldr	r2, [pc, #420]	; (8008008 <HAL_RCC_OscConfig+0x4c4>)
 8007e64:	f023 0301 	bic.w	r3, r3, #1
 8007e68:	6213      	str	r3, [r2, #32]
 8007e6a:	4b67      	ldr	r3, [pc, #412]	; (8008008 <HAL_RCC_OscConfig+0x4c4>)
 8007e6c:	6a1b      	ldr	r3, [r3, #32]
 8007e6e:	4a66      	ldr	r2, [pc, #408]	; (8008008 <HAL_RCC_OscConfig+0x4c4>)
 8007e70:	f023 0304 	bic.w	r3, r3, #4
 8007e74:	6213      	str	r3, [r2, #32]
 8007e76:	e01c      	b.n	8007eb2 <HAL_RCC_OscConfig+0x36e>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	2b05      	cmp	r3, #5
 8007e7e:	d10c      	bne.n	8007e9a <HAL_RCC_OscConfig+0x356>
 8007e80:	4b61      	ldr	r3, [pc, #388]	; (8008008 <HAL_RCC_OscConfig+0x4c4>)
 8007e82:	6a1b      	ldr	r3, [r3, #32]
 8007e84:	4a60      	ldr	r2, [pc, #384]	; (8008008 <HAL_RCC_OscConfig+0x4c4>)
 8007e86:	f043 0304 	orr.w	r3, r3, #4
 8007e8a:	6213      	str	r3, [r2, #32]
 8007e8c:	4b5e      	ldr	r3, [pc, #376]	; (8008008 <HAL_RCC_OscConfig+0x4c4>)
 8007e8e:	6a1b      	ldr	r3, [r3, #32]
 8007e90:	4a5d      	ldr	r2, [pc, #372]	; (8008008 <HAL_RCC_OscConfig+0x4c4>)
 8007e92:	f043 0301 	orr.w	r3, r3, #1
 8007e96:	6213      	str	r3, [r2, #32]
 8007e98:	e00b      	b.n	8007eb2 <HAL_RCC_OscConfig+0x36e>
 8007e9a:	4b5b      	ldr	r3, [pc, #364]	; (8008008 <HAL_RCC_OscConfig+0x4c4>)
 8007e9c:	6a1b      	ldr	r3, [r3, #32]
 8007e9e:	4a5a      	ldr	r2, [pc, #360]	; (8008008 <HAL_RCC_OscConfig+0x4c4>)
 8007ea0:	f023 0301 	bic.w	r3, r3, #1
 8007ea4:	6213      	str	r3, [r2, #32]
 8007ea6:	4b58      	ldr	r3, [pc, #352]	; (8008008 <HAL_RCC_OscConfig+0x4c4>)
 8007ea8:	6a1b      	ldr	r3, [r3, #32]
 8007eaa:	4a57      	ldr	r2, [pc, #348]	; (8008008 <HAL_RCC_OscConfig+0x4c4>)
 8007eac:	f023 0304 	bic.w	r3, r3, #4
 8007eb0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d015      	beq.n	8007ee6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007eba:	f7ff fb67 	bl	800758c <HAL_GetTick>
 8007ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ec0:	e00a      	b.n	8007ed8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ec2:	f7ff fb63 	bl	800758c <HAL_GetTick>
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	1ad3      	subs	r3, r2, r3
 8007ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d901      	bls.n	8007ed8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007ed4:	2303      	movs	r3, #3
 8007ed6:	e0b1      	b.n	800803c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ed8:	4b4b      	ldr	r3, [pc, #300]	; (8008008 <HAL_RCC_OscConfig+0x4c4>)
 8007eda:	6a1b      	ldr	r3, [r3, #32]
 8007edc:	f003 0302 	and.w	r3, r3, #2
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d0ee      	beq.n	8007ec2 <HAL_RCC_OscConfig+0x37e>
 8007ee4:	e014      	b.n	8007f10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ee6:	f7ff fb51 	bl	800758c <HAL_GetTick>
 8007eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007eec:	e00a      	b.n	8007f04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007eee:	f7ff fb4d 	bl	800758c <HAL_GetTick>
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	1ad3      	subs	r3, r2, r3
 8007ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d901      	bls.n	8007f04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007f00:	2303      	movs	r3, #3
 8007f02:	e09b      	b.n	800803c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f04:	4b40      	ldr	r3, [pc, #256]	; (8008008 <HAL_RCC_OscConfig+0x4c4>)
 8007f06:	6a1b      	ldr	r3, [r3, #32]
 8007f08:	f003 0302 	and.w	r3, r3, #2
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d1ee      	bne.n	8007eee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007f10:	7dfb      	ldrb	r3, [r7, #23]
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d105      	bne.n	8007f22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f16:	4b3c      	ldr	r3, [pc, #240]	; (8008008 <HAL_RCC_OscConfig+0x4c4>)
 8007f18:	69db      	ldr	r3, [r3, #28]
 8007f1a:	4a3b      	ldr	r2, [pc, #236]	; (8008008 <HAL_RCC_OscConfig+0x4c4>)
 8007f1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	69db      	ldr	r3, [r3, #28]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	f000 8087 	beq.w	800803a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007f2c:	4b36      	ldr	r3, [pc, #216]	; (8008008 <HAL_RCC_OscConfig+0x4c4>)
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	f003 030c 	and.w	r3, r3, #12
 8007f34:	2b08      	cmp	r3, #8
 8007f36:	d061      	beq.n	8007ffc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	69db      	ldr	r3, [r3, #28]
 8007f3c:	2b02      	cmp	r3, #2
 8007f3e:	d146      	bne.n	8007fce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f40:	4b33      	ldr	r3, [pc, #204]	; (8008010 <HAL_RCC_OscConfig+0x4cc>)
 8007f42:	2200      	movs	r2, #0
 8007f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f46:	f7ff fb21 	bl	800758c <HAL_GetTick>
 8007f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007f4c:	e008      	b.n	8007f60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f4e:	f7ff fb1d 	bl	800758c <HAL_GetTick>
 8007f52:	4602      	mov	r2, r0
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	1ad3      	subs	r3, r2, r3
 8007f58:	2b02      	cmp	r3, #2
 8007f5a:	d901      	bls.n	8007f60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007f5c:	2303      	movs	r3, #3
 8007f5e:	e06d      	b.n	800803c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007f60:	4b29      	ldr	r3, [pc, #164]	; (8008008 <HAL_RCC_OscConfig+0x4c4>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d1f0      	bne.n	8007f4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6a1b      	ldr	r3, [r3, #32]
 8007f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f74:	d108      	bne.n	8007f88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007f76:	4b24      	ldr	r3, [pc, #144]	; (8008008 <HAL_RCC_OscConfig+0x4c4>)
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	4921      	ldr	r1, [pc, #132]	; (8008008 <HAL_RCC_OscConfig+0x4c4>)
 8007f84:	4313      	orrs	r3, r2
 8007f86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007f88:	4b1f      	ldr	r3, [pc, #124]	; (8008008 <HAL_RCC_OscConfig+0x4c4>)
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6a19      	ldr	r1, [r3, #32]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f98:	430b      	orrs	r3, r1
 8007f9a:	491b      	ldr	r1, [pc, #108]	; (8008008 <HAL_RCC_OscConfig+0x4c4>)
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007fa0:	4b1b      	ldr	r3, [pc, #108]	; (8008010 <HAL_RCC_OscConfig+0x4cc>)
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fa6:	f7ff faf1 	bl	800758c <HAL_GetTick>
 8007faa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007fac:	e008      	b.n	8007fc0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fae:	f7ff faed 	bl	800758c <HAL_GetTick>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	1ad3      	subs	r3, r2, r3
 8007fb8:	2b02      	cmp	r3, #2
 8007fba:	d901      	bls.n	8007fc0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007fbc:	2303      	movs	r3, #3
 8007fbe:	e03d      	b.n	800803c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007fc0:	4b11      	ldr	r3, [pc, #68]	; (8008008 <HAL_RCC_OscConfig+0x4c4>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d0f0      	beq.n	8007fae <HAL_RCC_OscConfig+0x46a>
 8007fcc:	e035      	b.n	800803a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fce:	4b10      	ldr	r3, [pc, #64]	; (8008010 <HAL_RCC_OscConfig+0x4cc>)
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fd4:	f7ff fada 	bl	800758c <HAL_GetTick>
 8007fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007fda:	e008      	b.n	8007fee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fdc:	f7ff fad6 	bl	800758c <HAL_GetTick>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	1ad3      	subs	r3, r2, r3
 8007fe6:	2b02      	cmp	r3, #2
 8007fe8:	d901      	bls.n	8007fee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007fea:	2303      	movs	r3, #3
 8007fec:	e026      	b.n	800803c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007fee:	4b06      	ldr	r3, [pc, #24]	; (8008008 <HAL_RCC_OscConfig+0x4c4>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d1f0      	bne.n	8007fdc <HAL_RCC_OscConfig+0x498>
 8007ffa:	e01e      	b.n	800803a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	69db      	ldr	r3, [r3, #28]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d107      	bne.n	8008014 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	e019      	b.n	800803c <HAL_RCC_OscConfig+0x4f8>
 8008008:	40021000 	.word	0x40021000
 800800c:	40007000 	.word	0x40007000
 8008010:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008014:	4b0b      	ldr	r3, [pc, #44]	; (8008044 <HAL_RCC_OscConfig+0x500>)
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6a1b      	ldr	r3, [r3, #32]
 8008024:	429a      	cmp	r2, r3
 8008026:	d106      	bne.n	8008036 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008032:	429a      	cmp	r2, r3
 8008034:	d001      	beq.n	800803a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	e000      	b.n	800803c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800803a:	2300      	movs	r3, #0
}
 800803c:	4618      	mov	r0, r3
 800803e:	3718      	adds	r7, #24
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}
 8008044:	40021000 	.word	0x40021000

08008048 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d101      	bne.n	800805c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	e0d0      	b.n	80081fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800805c:	4b6a      	ldr	r3, [pc, #424]	; (8008208 <HAL_RCC_ClockConfig+0x1c0>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f003 0307 	and.w	r3, r3, #7
 8008064:	683a      	ldr	r2, [r7, #0]
 8008066:	429a      	cmp	r2, r3
 8008068:	d910      	bls.n	800808c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800806a:	4b67      	ldr	r3, [pc, #412]	; (8008208 <HAL_RCC_ClockConfig+0x1c0>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f023 0207 	bic.w	r2, r3, #7
 8008072:	4965      	ldr	r1, [pc, #404]	; (8008208 <HAL_RCC_ClockConfig+0x1c0>)
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	4313      	orrs	r3, r2
 8008078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800807a:	4b63      	ldr	r3, [pc, #396]	; (8008208 <HAL_RCC_ClockConfig+0x1c0>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f003 0307 	and.w	r3, r3, #7
 8008082:	683a      	ldr	r2, [r7, #0]
 8008084:	429a      	cmp	r2, r3
 8008086:	d001      	beq.n	800808c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008088:	2301      	movs	r3, #1
 800808a:	e0b8      	b.n	80081fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f003 0302 	and.w	r3, r3, #2
 8008094:	2b00      	cmp	r3, #0
 8008096:	d020      	beq.n	80080da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f003 0304 	and.w	r3, r3, #4
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d005      	beq.n	80080b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80080a4:	4b59      	ldr	r3, [pc, #356]	; (800820c <HAL_RCC_ClockConfig+0x1c4>)
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	4a58      	ldr	r2, [pc, #352]	; (800820c <HAL_RCC_ClockConfig+0x1c4>)
 80080aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80080ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f003 0308 	and.w	r3, r3, #8
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d005      	beq.n	80080c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80080bc:	4b53      	ldr	r3, [pc, #332]	; (800820c <HAL_RCC_ClockConfig+0x1c4>)
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	4a52      	ldr	r2, [pc, #328]	; (800820c <HAL_RCC_ClockConfig+0x1c4>)
 80080c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80080c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80080c8:	4b50      	ldr	r3, [pc, #320]	; (800820c <HAL_RCC_ClockConfig+0x1c4>)
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	494d      	ldr	r1, [pc, #308]	; (800820c <HAL_RCC_ClockConfig+0x1c4>)
 80080d6:	4313      	orrs	r3, r2
 80080d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f003 0301 	and.w	r3, r3, #1
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d040      	beq.n	8008168 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d107      	bne.n	80080fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080ee:	4b47      	ldr	r3, [pc, #284]	; (800820c <HAL_RCC_ClockConfig+0x1c4>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d115      	bne.n	8008126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	e07f      	b.n	80081fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	2b02      	cmp	r3, #2
 8008104:	d107      	bne.n	8008116 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008106:	4b41      	ldr	r3, [pc, #260]	; (800820c <HAL_RCC_ClockConfig+0x1c4>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800810e:	2b00      	cmp	r3, #0
 8008110:	d109      	bne.n	8008126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	e073      	b.n	80081fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008116:	4b3d      	ldr	r3, [pc, #244]	; (800820c <HAL_RCC_ClockConfig+0x1c4>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f003 0302 	and.w	r3, r3, #2
 800811e:	2b00      	cmp	r3, #0
 8008120:	d101      	bne.n	8008126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	e06b      	b.n	80081fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008126:	4b39      	ldr	r3, [pc, #228]	; (800820c <HAL_RCC_ClockConfig+0x1c4>)
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	f023 0203 	bic.w	r2, r3, #3
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	4936      	ldr	r1, [pc, #216]	; (800820c <HAL_RCC_ClockConfig+0x1c4>)
 8008134:	4313      	orrs	r3, r2
 8008136:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008138:	f7ff fa28 	bl	800758c <HAL_GetTick>
 800813c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800813e:	e00a      	b.n	8008156 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008140:	f7ff fa24 	bl	800758c <HAL_GetTick>
 8008144:	4602      	mov	r2, r0
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	1ad3      	subs	r3, r2, r3
 800814a:	f241 3288 	movw	r2, #5000	; 0x1388
 800814e:	4293      	cmp	r3, r2
 8008150:	d901      	bls.n	8008156 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008152:	2303      	movs	r3, #3
 8008154:	e053      	b.n	80081fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008156:	4b2d      	ldr	r3, [pc, #180]	; (800820c <HAL_RCC_ClockConfig+0x1c4>)
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	f003 020c 	and.w	r2, r3, #12
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	429a      	cmp	r2, r3
 8008166:	d1eb      	bne.n	8008140 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008168:	4b27      	ldr	r3, [pc, #156]	; (8008208 <HAL_RCC_ClockConfig+0x1c0>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f003 0307 	and.w	r3, r3, #7
 8008170:	683a      	ldr	r2, [r7, #0]
 8008172:	429a      	cmp	r2, r3
 8008174:	d210      	bcs.n	8008198 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008176:	4b24      	ldr	r3, [pc, #144]	; (8008208 <HAL_RCC_ClockConfig+0x1c0>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f023 0207 	bic.w	r2, r3, #7
 800817e:	4922      	ldr	r1, [pc, #136]	; (8008208 <HAL_RCC_ClockConfig+0x1c0>)
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	4313      	orrs	r3, r2
 8008184:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008186:	4b20      	ldr	r3, [pc, #128]	; (8008208 <HAL_RCC_ClockConfig+0x1c0>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f003 0307 	and.w	r3, r3, #7
 800818e:	683a      	ldr	r2, [r7, #0]
 8008190:	429a      	cmp	r2, r3
 8008192:	d001      	beq.n	8008198 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	e032      	b.n	80081fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f003 0304 	and.w	r3, r3, #4
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d008      	beq.n	80081b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80081a4:	4b19      	ldr	r3, [pc, #100]	; (800820c <HAL_RCC_ClockConfig+0x1c4>)
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	68db      	ldr	r3, [r3, #12]
 80081b0:	4916      	ldr	r1, [pc, #88]	; (800820c <HAL_RCC_ClockConfig+0x1c4>)
 80081b2:	4313      	orrs	r3, r2
 80081b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f003 0308 	and.w	r3, r3, #8
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d009      	beq.n	80081d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80081c2:	4b12      	ldr	r3, [pc, #72]	; (800820c <HAL_RCC_ClockConfig+0x1c4>)
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	691b      	ldr	r3, [r3, #16]
 80081ce:	00db      	lsls	r3, r3, #3
 80081d0:	490e      	ldr	r1, [pc, #56]	; (800820c <HAL_RCC_ClockConfig+0x1c4>)
 80081d2:	4313      	orrs	r3, r2
 80081d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80081d6:	f000 f821 	bl	800821c <HAL_RCC_GetSysClockFreq>
 80081da:	4602      	mov	r2, r0
 80081dc:	4b0b      	ldr	r3, [pc, #44]	; (800820c <HAL_RCC_ClockConfig+0x1c4>)
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	091b      	lsrs	r3, r3, #4
 80081e2:	f003 030f 	and.w	r3, r3, #15
 80081e6:	490a      	ldr	r1, [pc, #40]	; (8008210 <HAL_RCC_ClockConfig+0x1c8>)
 80081e8:	5ccb      	ldrb	r3, [r1, r3]
 80081ea:	fa22 f303 	lsr.w	r3, r2, r3
 80081ee:	4a09      	ldr	r2, [pc, #36]	; (8008214 <HAL_RCC_ClockConfig+0x1cc>)
 80081f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80081f2:	4b09      	ldr	r3, [pc, #36]	; (8008218 <HAL_RCC_ClockConfig+0x1d0>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4618      	mov	r0, r3
 80081f8:	f7ff f986 	bl	8007508 <HAL_InitTick>

  return HAL_OK;
 80081fc:	2300      	movs	r3, #0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3710      	adds	r7, #16
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop
 8008208:	40022000 	.word	0x40022000
 800820c:	40021000 	.word	0x40021000
 8008210:	0800cbdc 	.word	0x0800cbdc
 8008214:	20000004 	.word	0x20000004
 8008218:	20000008 	.word	0x20000008

0800821c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800821c:	b480      	push	{r7}
 800821e:	b087      	sub	sp, #28
 8008220:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008222:	2300      	movs	r3, #0
 8008224:	60fb      	str	r3, [r7, #12]
 8008226:	2300      	movs	r3, #0
 8008228:	60bb      	str	r3, [r7, #8]
 800822a:	2300      	movs	r3, #0
 800822c:	617b      	str	r3, [r7, #20]
 800822e:	2300      	movs	r3, #0
 8008230:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8008232:	2300      	movs	r3, #0
 8008234:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008236:	4b1e      	ldr	r3, [pc, #120]	; (80082b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f003 030c 	and.w	r3, r3, #12
 8008242:	2b04      	cmp	r3, #4
 8008244:	d002      	beq.n	800824c <HAL_RCC_GetSysClockFreq+0x30>
 8008246:	2b08      	cmp	r3, #8
 8008248:	d003      	beq.n	8008252 <HAL_RCC_GetSysClockFreq+0x36>
 800824a:	e027      	b.n	800829c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800824c:	4b19      	ldr	r3, [pc, #100]	; (80082b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800824e:	613b      	str	r3, [r7, #16]
      break;
 8008250:	e027      	b.n	80082a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	0c9b      	lsrs	r3, r3, #18
 8008256:	f003 030f 	and.w	r3, r3, #15
 800825a:	4a17      	ldr	r2, [pc, #92]	; (80082b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800825c:	5cd3      	ldrb	r3, [r2, r3]
 800825e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008266:	2b00      	cmp	r3, #0
 8008268:	d010      	beq.n	800828c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800826a:	4b11      	ldr	r3, [pc, #68]	; (80082b0 <HAL_RCC_GetSysClockFreq+0x94>)
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	0c5b      	lsrs	r3, r3, #17
 8008270:	f003 0301 	and.w	r3, r3, #1
 8008274:	4a11      	ldr	r2, [pc, #68]	; (80082bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8008276:	5cd3      	ldrb	r3, [r2, r3]
 8008278:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a0d      	ldr	r2, [pc, #52]	; (80082b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800827e:	fb03 f202 	mul.w	r2, r3, r2
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	fbb2 f3f3 	udiv	r3, r2, r3
 8008288:	617b      	str	r3, [r7, #20]
 800828a:	e004      	b.n	8008296 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	4a0c      	ldr	r2, [pc, #48]	; (80082c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008290:	fb02 f303 	mul.w	r3, r2, r3
 8008294:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	613b      	str	r3, [r7, #16]
      break;
 800829a:	e002      	b.n	80082a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800829c:	4b05      	ldr	r3, [pc, #20]	; (80082b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800829e:	613b      	str	r3, [r7, #16]
      break;
 80082a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80082a2:	693b      	ldr	r3, [r7, #16]
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	371c      	adds	r7, #28
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bc80      	pop	{r7}
 80082ac:	4770      	bx	lr
 80082ae:	bf00      	nop
 80082b0:	40021000 	.word	0x40021000
 80082b4:	007a1200 	.word	0x007a1200
 80082b8:	0800cbf4 	.word	0x0800cbf4
 80082bc:	0800cc04 	.word	0x0800cc04
 80082c0:	003d0900 	.word	0x003d0900

080082c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80082c4:	b480      	push	{r7}
 80082c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80082c8:	4b02      	ldr	r3, [pc, #8]	; (80082d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80082ca:	681b      	ldr	r3, [r3, #0]
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bc80      	pop	{r7}
 80082d2:	4770      	bx	lr
 80082d4:	20000004 	.word	0x20000004

080082d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80082dc:	f7ff fff2 	bl	80082c4 <HAL_RCC_GetHCLKFreq>
 80082e0:	4602      	mov	r2, r0
 80082e2:	4b05      	ldr	r3, [pc, #20]	; (80082f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	0adb      	lsrs	r3, r3, #11
 80082e8:	f003 0307 	and.w	r3, r3, #7
 80082ec:	4903      	ldr	r1, [pc, #12]	; (80082fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80082ee:	5ccb      	ldrb	r3, [r1, r3]
 80082f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	40021000 	.word	0x40021000
 80082fc:	0800cbec 	.word	0x0800cbec

08008300 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008300:	b480      	push	{r7}
 8008302:	b085      	sub	sp, #20
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008308:	4b0a      	ldr	r3, [pc, #40]	; (8008334 <RCC_Delay+0x34>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a0a      	ldr	r2, [pc, #40]	; (8008338 <RCC_Delay+0x38>)
 800830e:	fba2 2303 	umull	r2, r3, r2, r3
 8008312:	0a5b      	lsrs	r3, r3, #9
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	fb02 f303 	mul.w	r3, r2, r3
 800831a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800831c:	bf00      	nop
  }
  while (Delay --);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	1e5a      	subs	r2, r3, #1
 8008322:	60fa      	str	r2, [r7, #12]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d1f9      	bne.n	800831c <RCC_Delay+0x1c>
}
 8008328:	bf00      	nop
 800832a:	bf00      	nop
 800832c:	3714      	adds	r7, #20
 800832e:	46bd      	mov	sp, r7
 8008330:	bc80      	pop	{r7}
 8008332:	4770      	bx	lr
 8008334:	20000004 	.word	0x20000004
 8008338:	10624dd3 	.word	0x10624dd3

0800833c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b086      	sub	sp, #24
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8008344:	2300      	movs	r3, #0
 8008346:	613b      	str	r3, [r7, #16]
 8008348:	2300      	movs	r3, #0
 800834a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f003 0301 	and.w	r3, r3, #1
 8008354:	2b00      	cmp	r3, #0
 8008356:	d07d      	beq.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8008358:	2300      	movs	r3, #0
 800835a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800835c:	4b4f      	ldr	r3, [pc, #316]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800835e:	69db      	ldr	r3, [r3, #28]
 8008360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008364:	2b00      	cmp	r3, #0
 8008366:	d10d      	bne.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008368:	4b4c      	ldr	r3, [pc, #304]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800836a:	69db      	ldr	r3, [r3, #28]
 800836c:	4a4b      	ldr	r2, [pc, #300]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800836e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008372:	61d3      	str	r3, [r2, #28]
 8008374:	4b49      	ldr	r3, [pc, #292]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008376:	69db      	ldr	r3, [r3, #28]
 8008378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800837c:	60bb      	str	r3, [r7, #8]
 800837e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008380:	2301      	movs	r3, #1
 8008382:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008384:	4b46      	ldr	r3, [pc, #280]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800838c:	2b00      	cmp	r3, #0
 800838e:	d118      	bne.n	80083c2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008390:	4b43      	ldr	r3, [pc, #268]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a42      	ldr	r2, [pc, #264]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800839a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800839c:	f7ff f8f6 	bl	800758c <HAL_GetTick>
 80083a0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083a2:	e008      	b.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083a4:	f7ff f8f2 	bl	800758c <HAL_GetTick>
 80083a8:	4602      	mov	r2, r0
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	1ad3      	subs	r3, r2, r3
 80083ae:	2b64      	cmp	r3, #100	; 0x64
 80083b0:	d901      	bls.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80083b2:	2303      	movs	r3, #3
 80083b4:	e06d      	b.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083b6:	4b3a      	ldr	r3, [pc, #232]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d0f0      	beq.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80083c2:	4b36      	ldr	r3, [pc, #216]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80083c4:	6a1b      	ldr	r3, [r3, #32]
 80083c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083ca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d02e      	beq.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083da:	68fa      	ldr	r2, [r7, #12]
 80083dc:	429a      	cmp	r2, r3
 80083de:	d027      	beq.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80083e0:	4b2e      	ldr	r3, [pc, #184]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80083e2:	6a1b      	ldr	r3, [r3, #32]
 80083e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083e8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80083ea:	4b2e      	ldr	r3, [pc, #184]	; (80084a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80083ec:	2201      	movs	r2, #1
 80083ee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80083f0:	4b2c      	ldr	r3, [pc, #176]	; (80084a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80083f2:	2200      	movs	r2, #0
 80083f4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80083f6:	4a29      	ldr	r2, [pc, #164]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f003 0301 	and.w	r3, r3, #1
 8008402:	2b00      	cmp	r3, #0
 8008404:	d014      	beq.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008406:	f7ff f8c1 	bl	800758c <HAL_GetTick>
 800840a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800840c:	e00a      	b.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800840e:	f7ff f8bd 	bl	800758c <HAL_GetTick>
 8008412:	4602      	mov	r2, r0
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	1ad3      	subs	r3, r2, r3
 8008418:	f241 3288 	movw	r2, #5000	; 0x1388
 800841c:	4293      	cmp	r3, r2
 800841e:	d901      	bls.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8008420:	2303      	movs	r3, #3
 8008422:	e036      	b.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008424:	4b1d      	ldr	r3, [pc, #116]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008426:	6a1b      	ldr	r3, [r3, #32]
 8008428:	f003 0302 	and.w	r3, r3, #2
 800842c:	2b00      	cmp	r3, #0
 800842e:	d0ee      	beq.n	800840e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008430:	4b1a      	ldr	r3, [pc, #104]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008432:	6a1b      	ldr	r3, [r3, #32]
 8008434:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	4917      	ldr	r1, [pc, #92]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800843e:	4313      	orrs	r3, r2
 8008440:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008442:	7dfb      	ldrb	r3, [r7, #23]
 8008444:	2b01      	cmp	r3, #1
 8008446:	d105      	bne.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008448:	4b14      	ldr	r3, [pc, #80]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800844a:	69db      	ldr	r3, [r3, #28]
 800844c:	4a13      	ldr	r2, [pc, #76]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800844e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008452:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f003 0302 	and.w	r3, r3, #2
 800845c:	2b00      	cmp	r3, #0
 800845e:	d008      	beq.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008460:	4b0e      	ldr	r3, [pc, #56]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	490b      	ldr	r1, [pc, #44]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800846e:	4313      	orrs	r3, r2
 8008470:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f003 0310 	and.w	r3, r3, #16
 800847a:	2b00      	cmp	r3, #0
 800847c:	d008      	beq.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800847e:	4b07      	ldr	r3, [pc, #28]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	695b      	ldr	r3, [r3, #20]
 800848a:	4904      	ldr	r1, [pc, #16]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800848c:	4313      	orrs	r3, r2
 800848e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	4618      	mov	r0, r3
 8008494:	3718      	adds	r7, #24
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
 800849a:	bf00      	nop
 800849c:	40021000 	.word	0x40021000
 80084a0:	40007000 	.word	0x40007000
 80084a4:	42420440 	.word	0x42420440

080084a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b088      	sub	sp, #32
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80084b0:	2300      	movs	r3, #0
 80084b2:	617b      	str	r3, [r7, #20]
 80084b4:	2300      	movs	r3, #0
 80084b6:	61fb      	str	r3, [r7, #28]
 80084b8:	2300      	movs	r3, #0
 80084ba:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80084bc:	2300      	movs	r3, #0
 80084be:	60fb      	str	r3, [r7, #12]
 80084c0:	2300      	movs	r3, #0
 80084c2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	3b01      	subs	r3, #1
 80084c8:	2b0f      	cmp	r3, #15
 80084ca:	f200 80af 	bhi.w	800862c <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 80084ce:	a201      	add	r2, pc, #4	; (adr r2, 80084d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80084d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d4:	080085ab 	.word	0x080085ab
 80084d8:	08008611 	.word	0x08008611
 80084dc:	0800862d 	.word	0x0800862d
 80084e0:	0800859b 	.word	0x0800859b
 80084e4:	0800862d 	.word	0x0800862d
 80084e8:	0800862d 	.word	0x0800862d
 80084ec:	0800862d 	.word	0x0800862d
 80084f0:	080085a3 	.word	0x080085a3
 80084f4:	0800862d 	.word	0x0800862d
 80084f8:	0800862d 	.word	0x0800862d
 80084fc:	0800862d 	.word	0x0800862d
 8008500:	0800862d 	.word	0x0800862d
 8008504:	0800862d 	.word	0x0800862d
 8008508:	0800862d 	.word	0x0800862d
 800850c:	0800862d 	.word	0x0800862d
 8008510:	08008515 	.word	0x08008515
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8008514:	4b4a      	ldr	r3, [pc, #296]	; (8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800851a:	4b49      	ldr	r3, [pc, #292]	; (8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008522:	2b00      	cmp	r3, #0
 8008524:	f000 8084 	beq.w	8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	0c9b      	lsrs	r3, r3, #18
 800852c:	f003 030f 	and.w	r3, r3, #15
 8008530:	4a44      	ldr	r2, [pc, #272]	; (8008644 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8008532:	5cd3      	ldrb	r3, [r2, r3]
 8008534:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800853c:	2b00      	cmp	r3, #0
 800853e:	d015      	beq.n	800856c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008540:	4b3f      	ldr	r3, [pc, #252]	; (8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	0c5b      	lsrs	r3, r3, #17
 8008546:	f003 0301 	and.w	r3, r3, #1
 800854a:	4a3f      	ldr	r2, [pc, #252]	; (8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 800854c:	5cd3      	ldrb	r3, [r2, r3]
 800854e:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00d      	beq.n	8008576 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800855a:	4a3c      	ldr	r2, [pc, #240]	; (800864c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	fb02 f303 	mul.w	r3, r2, r3
 8008568:	61fb      	str	r3, [r7, #28]
 800856a:	e004      	b.n	8008576 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	4a38      	ldr	r2, [pc, #224]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8008570:	fb02 f303 	mul.w	r3, r2, r3
 8008574:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8008576:	4b32      	ldr	r3, [pc, #200]	; (8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800857e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008582:	d102      	bne.n	800858a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8008588:	e052      	b.n	8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	005b      	lsls	r3, r3, #1
 800858e:	4a31      	ldr	r2, [pc, #196]	; (8008654 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8008590:	fba2 2303 	umull	r2, r3, r2, r3
 8008594:	085b      	lsrs	r3, r3, #1
 8008596:	61bb      	str	r3, [r7, #24]
      break;
 8008598:	e04a      	b.n	8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 800859a:	f7ff fe3f 	bl	800821c <HAL_RCC_GetSysClockFreq>
 800859e:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80085a0:	e049      	b.n	8008636 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 80085a2:	f7ff fe3b 	bl	800821c <HAL_RCC_GetSysClockFreq>
 80085a6:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80085a8:	e045      	b.n	8008636 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80085aa:	4b25      	ldr	r3, [pc, #148]	; (8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80085ac:	6a1b      	ldr	r3, [r3, #32]
 80085ae:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085ba:	d108      	bne.n	80085ce <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f003 0302 	and.w	r3, r3, #2
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d003      	beq.n	80085ce <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 80085c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085ca:	61bb      	str	r3, [r7, #24]
 80085cc:	e01f      	b.n	800860e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085d8:	d109      	bne.n	80085ee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80085da:	4b19      	ldr	r3, [pc, #100]	; (8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80085dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085de:	f003 0302 	and.w	r3, r3, #2
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d003      	beq.n	80085ee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 80085e6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80085ea:	61bb      	str	r3, [r7, #24]
 80085ec:	e00f      	b.n	800860e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085f8:	d11c      	bne.n	8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 80085fa:	4b11      	ldr	r3, [pc, #68]	; (8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008602:	2b00      	cmp	r3, #0
 8008604:	d016      	beq.n	8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 8008606:	f24f 4324 	movw	r3, #62500	; 0xf424
 800860a:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 800860c:	e012      	b.n	8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 800860e:	e011      	b.n	8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8008610:	f7ff fe62 	bl	80082d8 <HAL_RCC_GetPCLK2Freq>
 8008614:	4602      	mov	r2, r0
 8008616:	4b0a      	ldr	r3, [pc, #40]	; (8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	0b9b      	lsrs	r3, r3, #14
 800861c:	f003 0303 	and.w	r3, r3, #3
 8008620:	3301      	adds	r3, #1
 8008622:	005b      	lsls	r3, r3, #1
 8008624:	fbb2 f3f3 	udiv	r3, r2, r3
 8008628:	61bb      	str	r3, [r7, #24]
      break;
 800862a:	e004      	b.n	8008636 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 800862c:	bf00      	nop
 800862e:	e002      	b.n	8008636 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8008630:	bf00      	nop
 8008632:	e000      	b.n	8008636 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8008634:	bf00      	nop
    }
  }
  return (frequency);
 8008636:	69bb      	ldr	r3, [r7, #24]
}
 8008638:	4618      	mov	r0, r3
 800863a:	3720      	adds	r7, #32
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}
 8008640:	40021000 	.word	0x40021000
 8008644:	0800cc08 	.word	0x0800cc08
 8008648:	0800cc18 	.word	0x0800cc18
 800864c:	007a1200 	.word	0x007a1200
 8008650:	003d0900 	.word	0x003d0900
 8008654:	aaaaaaab 	.word	0xaaaaaaab

08008658 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8008660:	2300      	movs	r3, #0
 8008662:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d101      	bne.n	800866e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	e07a      	b.n	8008764 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	7c5b      	ldrb	r3, [r3, #17]
 8008672:	b2db      	uxtb	r3, r3
 8008674:	2b00      	cmp	r3, #0
 8008676:	d105      	bne.n	8008684 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f7fe fe28 	bl	80072d4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2202      	movs	r2, #2
 8008688:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 fb1d 	bl	8008cca <HAL_RTC_WaitForSynchro>
 8008690:	4603      	mov	r3, r0
 8008692:	2b00      	cmp	r3, #0
 8008694:	d004      	beq.n	80086a0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2204      	movs	r2, #4
 800869a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800869c:	2301      	movs	r3, #1
 800869e:	e061      	b.n	8008764 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 fbd6 	bl	8008e52 <RTC_EnterInitMode>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d004      	beq.n	80086b6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2204      	movs	r2, #4
 80086b0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	e056      	b.n	8008764 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	685a      	ldr	r2, [r3, #4]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f022 0207 	bic.w	r2, r2, #7
 80086c4:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	689b      	ldr	r3, [r3, #8]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d005      	beq.n	80086da <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80086ce:	4b27      	ldr	r3, [pc, #156]	; (800876c <HAL_RTC_Init+0x114>)
 80086d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086d2:	4a26      	ldr	r2, [pc, #152]	; (800876c <HAL_RTC_Init+0x114>)
 80086d4:	f023 0301 	bic.w	r3, r3, #1
 80086d8:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80086da:	4b24      	ldr	r3, [pc, #144]	; (800876c <HAL_RTC_Init+0x114>)
 80086dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086de:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	4921      	ldr	r1, [pc, #132]	; (800876c <HAL_RTC_Init+0x114>)
 80086e8:	4313      	orrs	r3, r2
 80086ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086f4:	d003      	beq.n	80086fe <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	60fb      	str	r3, [r7, #12]
 80086fc:	e00e      	b.n	800871c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80086fe:	2001      	movs	r0, #1
 8008700:	f7ff fed2 	bl	80084a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8008704:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d104      	bne.n	8008716 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2204      	movs	r2, #4
 8008710:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8008712:	2301      	movs	r3, #1
 8008714:	e026      	b.n	8008764 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	3b01      	subs	r3, #1
 800871a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	0c1a      	lsrs	r2, r3, #16
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f002 020f 	and.w	r2, r2, #15
 8008728:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	68fa      	ldr	r2, [r7, #12]
 8008730:	b292      	uxth	r2, r2
 8008732:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 fbb4 	bl	8008ea2 <RTC_ExitInitMode>
 800873a:	4603      	mov	r3, r0
 800873c:	2b00      	cmp	r3, #0
 800873e:	d004      	beq.n	800874a <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2204      	movs	r2, #4
 8008744:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	e00c      	b.n	8008764 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2200      	movs	r2, #0
 800874e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2201      	movs	r2, #1
 8008754:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2201      	movs	r2, #1
 800875a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2201      	movs	r2, #1
 8008760:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8008762:	2300      	movs	r3, #0
  }
}
 8008764:	4618      	mov	r0, r3
 8008766:	3710      	adds	r7, #16
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}
 800876c:	40006c00 	.word	0x40006c00

08008770 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008770:	b590      	push	{r4, r7, lr}
 8008772:	b087      	sub	sp, #28
 8008774:	af00      	add	r7, sp, #0
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	60b9      	str	r1, [r7, #8]
 800877a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 800877c:	2300      	movs	r3, #0
 800877e:	617b      	str	r3, [r7, #20]
 8008780:	2300      	movs	r3, #0
 8008782:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d002      	beq.n	8008790 <HAL_RTC_SetTime+0x20>
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d101      	bne.n	8008794 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8008790:	2301      	movs	r3, #1
 8008792:	e080      	b.n	8008896 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	7c1b      	ldrb	r3, [r3, #16]
 8008798:	2b01      	cmp	r3, #1
 800879a:	d101      	bne.n	80087a0 <HAL_RTC_SetTime+0x30>
 800879c:	2302      	movs	r3, #2
 800879e:	e07a      	b.n	8008896 <HAL_RTC_SetTime+0x126>
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2201      	movs	r2, #1
 80087a4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2202      	movs	r2, #2
 80087aa:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d113      	bne.n	80087da <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	461a      	mov	r2, r3
 80087b8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80087bc:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	785b      	ldrb	r3, [r3, #1]
 80087c4:	4619      	mov	r1, r3
 80087c6:	460b      	mov	r3, r1
 80087c8:	011b      	lsls	r3, r3, #4
 80087ca:	1a5b      	subs	r3, r3, r1
 80087cc:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80087ce:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80087d0:	68ba      	ldr	r2, [r7, #8]
 80087d2:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80087d4:	4413      	add	r3, r2
 80087d6:	617b      	str	r3, [r7, #20]
 80087d8:	e01e      	b.n	8008818 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	4618      	mov	r0, r3
 80087e0:	f000 fba4 	bl	8008f2c <RTC_Bcd2ToByte>
 80087e4:	4603      	mov	r3, r0
 80087e6:	461a      	mov	r2, r3
 80087e8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80087ec:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	785b      	ldrb	r3, [r3, #1]
 80087f4:	4618      	mov	r0, r3
 80087f6:	f000 fb99 	bl	8008f2c <RTC_Bcd2ToByte>
 80087fa:	4603      	mov	r3, r0
 80087fc:	461a      	mov	r2, r3
 80087fe:	4613      	mov	r3, r2
 8008800:	011b      	lsls	r3, r3, #4
 8008802:	1a9b      	subs	r3, r3, r2
 8008804:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8008806:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	789b      	ldrb	r3, [r3, #2]
 800880c:	4618      	mov	r0, r3
 800880e:	f000 fb8d 	bl	8008f2c <RTC_Bcd2ToByte>
 8008812:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8008814:	4423      	add	r3, r4
 8008816:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8008818:	6979      	ldr	r1, [r7, #20]
 800881a:	68f8      	ldr	r0, [r7, #12]
 800881c:	f000 fab2 	bl	8008d84 <RTC_WriteTimeCounter>
 8008820:	4603      	mov	r3, r0
 8008822:	2b00      	cmp	r3, #0
 8008824:	d007      	beq.n	8008836 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2204      	movs	r2, #4
 800882a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2200      	movs	r2, #0
 8008830:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	e02f      	b.n	8008896 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	685a      	ldr	r2, [r3, #4]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f022 0205 	bic.w	r2, r2, #5
 8008844:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8008846:	68f8      	ldr	r0, [r7, #12]
 8008848:	f000 fac3 	bl	8008dd2 <RTC_ReadAlarmCounter>
 800884c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008854:	d018      	beq.n	8008888 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8008856:	693a      	ldr	r2, [r7, #16]
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	429a      	cmp	r2, r3
 800885c:	d214      	bcs.n	8008888 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8008864:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8008868:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800886a:	6939      	ldr	r1, [r7, #16]
 800886c:	68f8      	ldr	r0, [r7, #12]
 800886e:	f000 fac9 	bl	8008e04 <RTC_WriteAlarmCounter>
 8008872:	4603      	mov	r3, r0
 8008874:	2b00      	cmp	r3, #0
 8008876:	d007      	beq.n	8008888 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2204      	movs	r2, #4
 800887c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2200      	movs	r2, #0
 8008882:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8008884:	2301      	movs	r3, #1
 8008886:	e006      	b.n	8008896 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2201      	movs	r2, #1
 800888c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2200      	movs	r2, #0
 8008892:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8008894:	2300      	movs	r3, #0
  }
}
 8008896:	4618      	mov	r0, r3
 8008898:	371c      	adds	r7, #28
 800889a:	46bd      	mov	sp, r7
 800889c:	bd90      	pop	{r4, r7, pc}
	...

080088a0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b088      	sub	sp, #32
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	60f8      	str	r0, [r7, #12]
 80088a8:	60b9      	str	r1, [r7, #8]
 80088aa:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80088ac:	2300      	movs	r3, #0
 80088ae:	61bb      	str	r3, [r7, #24]
 80088b0:	2300      	movs	r3, #0
 80088b2:	61fb      	str	r3, [r7, #28]
 80088b4:	2300      	movs	r3, #0
 80088b6:	617b      	str	r3, [r7, #20]
 80088b8:	2300      	movs	r3, #0
 80088ba:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d002      	beq.n	80088c8 <HAL_RTC_GetTime+0x28>
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d101      	bne.n	80088cc <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	e0b5      	b.n	8008a38 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	f003 0304 	and.w	r3, r3, #4
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d001      	beq.n	80088de <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	e0ac      	b.n	8008a38 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80088de:	68f8      	ldr	r0, [r7, #12]
 80088e0:	f000 fa20 	bl	8008d24 <RTC_ReadTimeCounter>
 80088e4:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80088e6:	69bb      	ldr	r3, [r7, #24]
 80088e8:	4a55      	ldr	r2, [pc, #340]	; (8008a40 <HAL_RTC_GetTime+0x1a0>)
 80088ea:	fba2 2303 	umull	r2, r3, r2, r3
 80088ee:	0adb      	lsrs	r3, r3, #11
 80088f0:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80088f2:	69ba      	ldr	r2, [r7, #24]
 80088f4:	4b52      	ldr	r3, [pc, #328]	; (8008a40 <HAL_RTC_GetTime+0x1a0>)
 80088f6:	fba3 1302 	umull	r1, r3, r3, r2
 80088fa:	0adb      	lsrs	r3, r3, #11
 80088fc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8008900:	fb01 f303 	mul.w	r3, r1, r3
 8008904:	1ad3      	subs	r3, r2, r3
 8008906:	4a4f      	ldr	r2, [pc, #316]	; (8008a44 <HAL_RTC_GetTime+0x1a4>)
 8008908:	fba2 2303 	umull	r2, r3, r2, r3
 800890c:	095b      	lsrs	r3, r3, #5
 800890e:	b2da      	uxtb	r2, r3
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8008914:	69bb      	ldr	r3, [r7, #24]
 8008916:	4a4a      	ldr	r2, [pc, #296]	; (8008a40 <HAL_RTC_GetTime+0x1a0>)
 8008918:	fba2 1203 	umull	r1, r2, r2, r3
 800891c:	0ad2      	lsrs	r2, r2, #11
 800891e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8008922:	fb01 f202 	mul.w	r2, r1, r2
 8008926:	1a9a      	subs	r2, r3, r2
 8008928:	4b46      	ldr	r3, [pc, #280]	; (8008a44 <HAL_RTC_GetTime+0x1a4>)
 800892a:	fba3 1302 	umull	r1, r3, r3, r2
 800892e:	0959      	lsrs	r1, r3, #5
 8008930:	460b      	mov	r3, r1
 8008932:	011b      	lsls	r3, r3, #4
 8008934:	1a5b      	subs	r3, r3, r1
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	1ad1      	subs	r1, r2, r3
 800893a:	b2ca      	uxtb	r2, r1
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	2b17      	cmp	r3, #23
 8008944:	d955      	bls.n	80089f2 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	4a3f      	ldr	r2, [pc, #252]	; (8008a48 <HAL_RTC_GetTime+0x1a8>)
 800894a:	fba2 2303 	umull	r2, r3, r2, r3
 800894e:	091b      	lsrs	r3, r3, #4
 8008950:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8008952:	6939      	ldr	r1, [r7, #16]
 8008954:	4b3c      	ldr	r3, [pc, #240]	; (8008a48 <HAL_RTC_GetTime+0x1a8>)
 8008956:	fba3 2301 	umull	r2, r3, r3, r1
 800895a:	091a      	lsrs	r2, r3, #4
 800895c:	4613      	mov	r3, r2
 800895e:	005b      	lsls	r3, r3, #1
 8008960:	4413      	add	r3, r2
 8008962:	00db      	lsls	r3, r3, #3
 8008964:	1aca      	subs	r2, r1, r3
 8008966:	b2d2      	uxtb	r2, r2
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800896c:	68f8      	ldr	r0, [r7, #12]
 800896e:	f000 fa30 	bl	8008dd2 <RTC_ReadAlarmCounter>
 8008972:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8008974:	69fb      	ldr	r3, [r7, #28]
 8008976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800897a:	d008      	beq.n	800898e <HAL_RTC_GetTime+0xee>
 800897c:	69fa      	ldr	r2, [r7, #28]
 800897e:	69bb      	ldr	r3, [r7, #24]
 8008980:	429a      	cmp	r2, r3
 8008982:	d904      	bls.n	800898e <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8008984:	69fa      	ldr	r2, [r7, #28]
 8008986:	69bb      	ldr	r3, [r7, #24]
 8008988:	1ad3      	subs	r3, r2, r3
 800898a:	61fb      	str	r3, [r7, #28]
 800898c:	e002      	b.n	8008994 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800898e:	f04f 33ff 	mov.w	r3, #4294967295
 8008992:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	4a2d      	ldr	r2, [pc, #180]	; (8008a4c <HAL_RTC_GetTime+0x1ac>)
 8008998:	fb02 f303 	mul.w	r3, r2, r3
 800899c:	69ba      	ldr	r2, [r7, #24]
 800899e:	1ad3      	subs	r3, r2, r3
 80089a0:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80089a2:	69b9      	ldr	r1, [r7, #24]
 80089a4:	68f8      	ldr	r0, [r7, #12]
 80089a6:	f000 f9ed 	bl	8008d84 <RTC_WriteTimeCounter>
 80089aa:	4603      	mov	r3, r0
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d001      	beq.n	80089b4 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80089b0:	2301      	movs	r3, #1
 80089b2:	e041      	b.n	8008a38 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ba:	d00c      	beq.n	80089d6 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80089bc:	69fa      	ldr	r2, [r7, #28]
 80089be:	69bb      	ldr	r3, [r7, #24]
 80089c0:	4413      	add	r3, r2
 80089c2:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80089c4:	69f9      	ldr	r1, [r7, #28]
 80089c6:	68f8      	ldr	r0, [r7, #12]
 80089c8:	f000 fa1c 	bl	8008e04 <RTC_WriteAlarmCounter>
 80089cc:	4603      	mov	r3, r0
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d00a      	beq.n	80089e8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80089d2:	2301      	movs	r3, #1
 80089d4:	e030      	b.n	8008a38 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80089d6:	69f9      	ldr	r1, [r7, #28]
 80089d8:	68f8      	ldr	r0, [r7, #12]
 80089da:	f000 fa13 	bl	8008e04 <RTC_WriteAlarmCounter>
 80089de:	4603      	mov	r3, r0
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d001      	beq.n	80089e8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80089e4:	2301      	movs	r3, #1
 80089e6:	e027      	b.n	8008a38 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80089e8:	6979      	ldr	r1, [r7, #20]
 80089ea:	68f8      	ldr	r0, [r7, #12]
 80089ec:	f000 fabb 	bl	8008f66 <RTC_DateUpdate>
 80089f0:	e003      	b.n	80089fa <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	b2da      	uxtb	r2, r3
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d01a      	beq.n	8008a36 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	4618      	mov	r0, r3
 8008a06:	f000 fa74 	bl	8008ef2 <RTC_ByteToBcd2>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	785b      	ldrb	r3, [r3, #1]
 8008a16:	4618      	mov	r0, r3
 8008a18:	f000 fa6b 	bl	8008ef2 <RTC_ByteToBcd2>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	461a      	mov	r2, r3
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	789b      	ldrb	r3, [r3, #2]
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f000 fa62 	bl	8008ef2 <RTC_ByteToBcd2>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	461a      	mov	r2, r3
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3720      	adds	r7, #32
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	91a2b3c5 	.word	0x91a2b3c5
 8008a44:	88888889 	.word	0x88888889
 8008a48:	aaaaaaab 	.word	0xaaaaaaab
 8008a4c:	00015180 	.word	0x00015180

08008a50 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b088      	sub	sp, #32
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	61fb      	str	r3, [r7, #28]
 8008a60:	2300      	movs	r3, #0
 8008a62:	61bb      	str	r3, [r7, #24]
 8008a64:	2300      	movs	r3, #0
 8008a66:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d002      	beq.n	8008a74 <HAL_RTC_SetDate+0x24>
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d101      	bne.n	8008a78 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8008a74:	2301      	movs	r3, #1
 8008a76:	e097      	b.n	8008ba8 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	7c1b      	ldrb	r3, [r3, #16]
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d101      	bne.n	8008a84 <HAL_RTC_SetDate+0x34>
 8008a80:	2302      	movs	r3, #2
 8008a82:	e091      	b.n	8008ba8 <HAL_RTC_SetDate+0x158>
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2201      	movs	r2, #1
 8008a88:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2202      	movs	r2, #2
 8008a8e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d10c      	bne.n	8008ab0 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	78da      	ldrb	r2, [r3, #3]
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	785a      	ldrb	r2, [r3, #1]
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	789a      	ldrb	r2, [r3, #2]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	739a      	strb	r2, [r3, #14]
 8008aae:	e01a      	b.n	8008ae6 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	78db      	ldrb	r3, [r3, #3]
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f000 fa39 	bl	8008f2c <RTC_Bcd2ToByte>
 8008aba:	4603      	mov	r3, r0
 8008abc:	461a      	mov	r2, r3
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	785b      	ldrb	r3, [r3, #1]
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f000 fa30 	bl	8008f2c <RTC_Bcd2ToByte>
 8008acc:	4603      	mov	r3, r0
 8008ace:	461a      	mov	r2, r3
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	789b      	ldrb	r3, [r3, #2]
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f000 fa27 	bl	8008f2c <RTC_Bcd2ToByte>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	7bdb      	ldrb	r3, [r3, #15]
 8008aea:	4618      	mov	r0, r3
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	7b59      	ldrb	r1, [r3, #13]
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	7b9b      	ldrb	r3, [r3, #14]
 8008af4:	461a      	mov	r2, r3
 8008af6:	f000 fb11 	bl	800911c <RTC_WeekDayNum>
 8008afa:	4603      	mov	r3, r0
 8008afc:	461a      	mov	r2, r3
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	7b1a      	ldrb	r2, [r3, #12]
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8008b0a:	68f8      	ldr	r0, [r7, #12]
 8008b0c:	f000 f90a 	bl	8008d24 <RTC_ReadTimeCounter>
 8008b10:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8008b12:	69fb      	ldr	r3, [r7, #28]
 8008b14:	4a26      	ldr	r2, [pc, #152]	; (8008bb0 <HAL_RTC_SetDate+0x160>)
 8008b16:	fba2 2303 	umull	r2, r3, r2, r3
 8008b1a:	0adb      	lsrs	r3, r3, #11
 8008b1c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	2b18      	cmp	r3, #24
 8008b22:	d93a      	bls.n	8008b9a <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	4a23      	ldr	r2, [pc, #140]	; (8008bb4 <HAL_RTC_SetDate+0x164>)
 8008b28:	fba2 2303 	umull	r2, r3, r2, r3
 8008b2c:	091b      	lsrs	r3, r3, #4
 8008b2e:	4a22      	ldr	r2, [pc, #136]	; (8008bb8 <HAL_RTC_SetDate+0x168>)
 8008b30:	fb02 f303 	mul.w	r3, r2, r3
 8008b34:	69fa      	ldr	r2, [r7, #28]
 8008b36:	1ad3      	subs	r3, r2, r3
 8008b38:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8008b3a:	69f9      	ldr	r1, [r7, #28]
 8008b3c:	68f8      	ldr	r0, [r7, #12]
 8008b3e:	f000 f921 	bl	8008d84 <RTC_WriteTimeCounter>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d007      	beq.n	8008b58 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2204      	movs	r2, #4
 8008b4c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2200      	movs	r2, #0
 8008b52:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8008b54:	2301      	movs	r3, #1
 8008b56:	e027      	b.n	8008ba8 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8008b58:	68f8      	ldr	r0, [r7, #12]
 8008b5a:	f000 f93a 	bl	8008dd2 <RTC_ReadAlarmCounter>
 8008b5e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8008b60:	69bb      	ldr	r3, [r7, #24]
 8008b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b66:	d018      	beq.n	8008b9a <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8008b68:	69ba      	ldr	r2, [r7, #24]
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d214      	bcs.n	8008b9a <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8008b70:	69bb      	ldr	r3, [r7, #24]
 8008b72:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8008b76:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8008b7a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8008b7c:	69b9      	ldr	r1, [r7, #24]
 8008b7e:	68f8      	ldr	r0, [r7, #12]
 8008b80:	f000 f940 	bl	8008e04 <RTC_WriteAlarmCounter>
 8008b84:	4603      	mov	r3, r0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d007      	beq.n	8008b9a <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2204      	movs	r2, #4
 8008b8e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2200      	movs	r2, #0
 8008b94:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8008b96:	2301      	movs	r3, #1
 8008b98:	e006      	b.n	8008ba8 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8008ba6:	2300      	movs	r3, #0
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3720      	adds	r7, #32
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}
 8008bb0:	91a2b3c5 	.word	0x91a2b3c5
 8008bb4:	aaaaaaab 	.word	0xaaaaaaab
 8008bb8:	00015180 	.word	0x00015180

08008bbc <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b086      	sub	sp, #24
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8008bc8:	f107 0314 	add.w	r3, r7, #20
 8008bcc:	2100      	movs	r1, #0
 8008bce:	460a      	mov	r2, r1
 8008bd0:	801a      	strh	r2, [r3, #0]
 8008bd2:	460a      	mov	r2, r1
 8008bd4:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d002      	beq.n	8008be2 <HAL_RTC_GetDate+0x26>
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d101      	bne.n	8008be6 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	e03a      	b.n	8008c5c <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8008be6:	f107 0314 	add.w	r3, r7, #20
 8008bea:	2200      	movs	r2, #0
 8008bec:	4619      	mov	r1, r3
 8008bee:	68f8      	ldr	r0, [r7, #12]
 8008bf0:	f7ff fe56 	bl	80088a0 <HAL_RTC_GetTime>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d001      	beq.n	8008bfe <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e02e      	b.n	8008c5c <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	7b1a      	ldrb	r2, [r3, #12]
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	7bda      	ldrb	r2, [r3, #15]
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	7b5a      	ldrb	r2, [r3, #13]
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	7b9a      	ldrb	r2, [r3, #14]
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d01a      	beq.n	8008c5a <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	78db      	ldrb	r3, [r3, #3]
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f000 f962 	bl	8008ef2 <RTC_ByteToBcd2>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	461a      	mov	r2, r3
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	785b      	ldrb	r3, [r3, #1]
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f000 f959 	bl	8008ef2 <RTC_ByteToBcd2>
 8008c40:	4603      	mov	r3, r0
 8008c42:	461a      	mov	r2, r3
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	789b      	ldrb	r3, [r3, #2]
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f000 f950 	bl	8008ef2 <RTC_ByteToBcd2>
 8008c52:	4603      	mov	r3, r0
 8008c54:	461a      	mov	r2, r3
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008c5a:	2300      	movs	r3, #0
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3718      	adds	r7, #24
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b082      	sub	sp, #8
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f003 0302 	and.w	r3, r3, #2
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d011      	beq.n	8008c9e <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	f003 0302 	and.w	r3, r3, #2
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d00a      	beq.n	8008c9e <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 f815 	bl	8008cb8 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	685a      	ldr	r2, [r3, #4]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f022 0202 	bic.w	r2, r2, #2
 8008c9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8008c9e:	4b05      	ldr	r3, [pc, #20]	; (8008cb4 <HAL_RTC_AlarmIRQHandler+0x50>)
 8008ca0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008ca4:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2201      	movs	r2, #1
 8008caa:	745a      	strb	r2, [r3, #17]
}
 8008cac:	bf00      	nop
 8008cae:	3708      	adds	r7, #8
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	40010400 	.word	0x40010400

08008cb8 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8008cc0:	bf00      	nop
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bc80      	pop	{r7}
 8008cc8:	4770      	bx	lr

08008cca <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b084      	sub	sp, #16
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d101      	bne.n	8008ce0 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8008cdc:	2301      	movs	r3, #1
 8008cde:	e01d      	b.n	8008d1c <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	685a      	ldr	r2, [r3, #4]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f022 0208 	bic.w	r2, r2, #8
 8008cee:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8008cf0:	f7fe fc4c 	bl	800758c <HAL_GetTick>
 8008cf4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8008cf6:	e009      	b.n	8008d0c <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8008cf8:	f7fe fc48 	bl	800758c <HAL_GetTick>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	1ad3      	subs	r3, r2, r3
 8008d02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d06:	d901      	bls.n	8008d0c <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8008d08:	2303      	movs	r3, #3
 8008d0a:	e007      	b.n	8008d1c <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	f003 0308 	and.w	r3, r3, #8
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d0ee      	beq.n	8008cf8 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8008d1a:	2300      	movs	r3, #0
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3710      	adds	r7, #16
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b087      	sub	sp, #28
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	827b      	strh	r3, [r7, #18]
 8008d30:	2300      	movs	r3, #0
 8008d32:	823b      	strh	r3, [r7, #16]
 8008d34:	2300      	movs	r3, #0
 8008d36:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	699b      	ldr	r3, [r3, #24]
 8008d42:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	69db      	ldr	r3, [r3, #28]
 8008d4a:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	699b      	ldr	r3, [r3, #24]
 8008d52:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8008d54:	8a7a      	ldrh	r2, [r7, #18]
 8008d56:	8a3b      	ldrh	r3, [r7, #16]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d008      	beq.n	8008d6e <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8008d5c:	8a3b      	ldrh	r3, [r7, #16]
 8008d5e:	041a      	lsls	r2, r3, #16
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	69db      	ldr	r3, [r3, #28]
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	617b      	str	r3, [r7, #20]
 8008d6c:	e004      	b.n	8008d78 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8008d6e:	8a7b      	ldrh	r3, [r7, #18]
 8008d70:	041a      	lsls	r2, r3, #16
 8008d72:	89fb      	ldrh	r3, [r7, #14]
 8008d74:	4313      	orrs	r3, r2
 8008d76:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8008d78:	697b      	ldr	r3, [r7, #20]
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	371c      	adds	r7, #28
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bc80      	pop	{r7}
 8008d82:	4770      	bx	lr

08008d84 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b084      	sub	sp, #16
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 f85d 	bl	8008e52 <RTC_EnterInitMode>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d002      	beq.n	8008da4 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	73fb      	strb	r3, [r7, #15]
 8008da2:	e011      	b.n	8008dc8 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	683a      	ldr	r2, [r7, #0]
 8008daa:	0c12      	lsrs	r2, r2, #16
 8008dac:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	683a      	ldr	r2, [r7, #0]
 8008db4:	b292      	uxth	r2, r2
 8008db6:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f000 f872 	bl	8008ea2 <RTC_ExitInitMode>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d001      	beq.n	8008dc8 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8008dd2:	b480      	push	{r7}
 8008dd4:	b085      	sub	sp, #20
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	81fb      	strh	r3, [r7, #14]
 8008dde:	2300      	movs	r3, #0
 8008de0:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	6a1b      	ldr	r3, [r3, #32]
 8008de8:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df0:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8008df2:	89fb      	ldrh	r3, [r7, #14]
 8008df4:	041a      	lsls	r2, r3, #16
 8008df6:	89bb      	ldrh	r3, [r7, #12]
 8008df8:	4313      	orrs	r3, r2
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3714      	adds	r7, #20
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bc80      	pop	{r7}
 8008e02:	4770      	bx	lr

08008e04 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 f81d 	bl	8008e52 <RTC_EnterInitMode>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d002      	beq.n	8008e24 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	73fb      	strb	r3, [r7, #15]
 8008e22:	e011      	b.n	8008e48 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	683a      	ldr	r2, [r7, #0]
 8008e2a:	0c12      	lsrs	r2, r2, #16
 8008e2c:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	683a      	ldr	r2, [r7, #0]
 8008e34:	b292      	uxth	r2, r2
 8008e36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 f832 	bl	8008ea2 <RTC_ExitInitMode>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d001      	beq.n	8008e48 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8008e44:	2301      	movs	r3, #1
 8008e46:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}

08008e52 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008e52:	b580      	push	{r7, lr}
 8008e54:	b084      	sub	sp, #16
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8008e5e:	f7fe fb95 	bl	800758c <HAL_GetTick>
 8008e62:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8008e64:	e009      	b.n	8008e7a <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8008e66:	f7fe fb91 	bl	800758c <HAL_GetTick>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	1ad3      	subs	r3, r2, r3
 8008e70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e74:	d901      	bls.n	8008e7a <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8008e76:	2303      	movs	r3, #3
 8008e78:	e00f      	b.n	8008e9a <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	f003 0320 	and.w	r3, r3, #32
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d0ee      	beq.n	8008e66 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	685a      	ldr	r2, [r3, #4]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f042 0210 	orr.w	r2, r2, #16
 8008e96:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8008e98:	2300      	movs	r3, #0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3710      	adds	r7, #16
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}

08008ea2 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b084      	sub	sp, #16
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	685a      	ldr	r2, [r3, #4]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f022 0210 	bic.w	r2, r2, #16
 8008ebc:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8008ebe:	f7fe fb65 	bl	800758c <HAL_GetTick>
 8008ec2:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8008ec4:	e009      	b.n	8008eda <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8008ec6:	f7fe fb61 	bl	800758c <HAL_GetTick>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	1ad3      	subs	r3, r2, r3
 8008ed0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ed4:	d901      	bls.n	8008eda <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8008ed6:	2303      	movs	r3, #3
 8008ed8:	e007      	b.n	8008eea <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	f003 0320 	and.w	r3, r3, #32
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d0ee      	beq.n	8008ec6 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8008ee8:	2300      	movs	r3, #0
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3710      	adds	r7, #16
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}

08008ef2 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008ef2:	b480      	push	{r7}
 8008ef4:	b085      	sub	sp, #20
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	4603      	mov	r3, r0
 8008efa:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008efc:	2300      	movs	r3, #0
 8008efe:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8008f00:	e005      	b.n	8008f0e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	3301      	adds	r3, #1
 8008f06:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8008f08:	79fb      	ldrb	r3, [r7, #7]
 8008f0a:	3b0a      	subs	r3, #10
 8008f0c:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8008f0e:	79fb      	ldrb	r3, [r7, #7]
 8008f10:	2b09      	cmp	r3, #9
 8008f12:	d8f6      	bhi.n	8008f02 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	b2db      	uxtb	r3, r3
 8008f18:	011b      	lsls	r3, r3, #4
 8008f1a:	b2da      	uxtb	r2, r3
 8008f1c:	79fb      	ldrb	r3, [r7, #7]
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	b2db      	uxtb	r3, r3
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3714      	adds	r7, #20
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bc80      	pop	{r7}
 8008f2a:	4770      	bx	lr

08008f2c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b085      	sub	sp, #20
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	4603      	mov	r3, r0
 8008f34:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8008f36:	2300      	movs	r3, #0
 8008f38:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8008f3a:	79fb      	ldrb	r3, [r7, #7]
 8008f3c:	091b      	lsrs	r3, r3, #4
 8008f3e:	b2db      	uxtb	r3, r3
 8008f40:	461a      	mov	r2, r3
 8008f42:	4613      	mov	r3, r2
 8008f44:	009b      	lsls	r3, r3, #2
 8008f46:	4413      	add	r3, r2
 8008f48:	005b      	lsls	r3, r3, #1
 8008f4a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8008f4c:	79fb      	ldrb	r3, [r7, #7]
 8008f4e:	f003 030f 	and.w	r3, r3, #15
 8008f52:	b2da      	uxtb	r2, r3
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	b2db      	uxtb	r3, r3
 8008f58:	4413      	add	r3, r2
 8008f5a:	b2db      	uxtb	r3, r3
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3714      	adds	r7, #20
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bc80      	pop	{r7}
 8008f64:	4770      	bx	lr

08008f66 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b086      	sub	sp, #24
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
 8008f6e:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8008f70:	2300      	movs	r3, #0
 8008f72:	617b      	str	r3, [r7, #20]
 8008f74:	2300      	movs	r3, #0
 8008f76:	613b      	str	r3, [r7, #16]
 8008f78:	2300      	movs	r3, #0
 8008f7a:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	7bdb      	ldrb	r3, [r3, #15]
 8008f84:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	7b5b      	ldrb	r3, [r3, #13]
 8008f8a:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	7b9b      	ldrb	r3, [r3, #14]
 8008f90:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8008f92:	2300      	movs	r3, #0
 8008f94:	60bb      	str	r3, [r7, #8]
 8008f96:	e06f      	b.n	8009078 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d011      	beq.n	8008fc2 <RTC_DateUpdate+0x5c>
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	2b03      	cmp	r3, #3
 8008fa2:	d00e      	beq.n	8008fc2 <RTC_DateUpdate+0x5c>
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	2b05      	cmp	r3, #5
 8008fa8:	d00b      	beq.n	8008fc2 <RTC_DateUpdate+0x5c>
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	2b07      	cmp	r3, #7
 8008fae:	d008      	beq.n	8008fc2 <RTC_DateUpdate+0x5c>
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	2b08      	cmp	r3, #8
 8008fb4:	d005      	beq.n	8008fc2 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	2b0a      	cmp	r3, #10
 8008fba:	d002      	beq.n	8008fc2 <RTC_DateUpdate+0x5c>
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	2b0c      	cmp	r3, #12
 8008fc0:	d117      	bne.n	8008ff2 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2b1e      	cmp	r3, #30
 8008fc6:	d803      	bhi.n	8008fd0 <RTC_DateUpdate+0x6a>
      {
        day++;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	3301      	adds	r3, #1
 8008fcc:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8008fce:	e050      	b.n	8009072 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	2b0c      	cmp	r3, #12
 8008fd4:	d005      	beq.n	8008fe2 <RTC_DateUpdate+0x7c>
        {
          month++;
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	3301      	adds	r3, #1
 8008fda:	613b      	str	r3, [r7, #16]
          day = 1U;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8008fe0:	e047      	b.n	8009072 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	613b      	str	r3, [r7, #16]
          day = 1U;
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	60fb      	str	r3, [r7, #12]
          year++;
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	3301      	adds	r3, #1
 8008fee:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8008ff0:	e03f      	b.n	8009072 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	2b04      	cmp	r3, #4
 8008ff6:	d008      	beq.n	800900a <RTC_DateUpdate+0xa4>
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	2b06      	cmp	r3, #6
 8008ffc:	d005      	beq.n	800900a <RTC_DateUpdate+0xa4>
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	2b09      	cmp	r3, #9
 8009002:	d002      	beq.n	800900a <RTC_DateUpdate+0xa4>
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	2b0b      	cmp	r3, #11
 8009008:	d10c      	bne.n	8009024 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2b1d      	cmp	r3, #29
 800900e:	d803      	bhi.n	8009018 <RTC_DateUpdate+0xb2>
      {
        day++;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	3301      	adds	r3, #1
 8009014:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8009016:	e02c      	b.n	8009072 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	3301      	adds	r3, #1
 800901c:	613b      	str	r3, [r7, #16]
        day = 1U;
 800901e:	2301      	movs	r3, #1
 8009020:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8009022:	e026      	b.n	8009072 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	2b02      	cmp	r3, #2
 8009028:	d123      	bne.n	8009072 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2b1b      	cmp	r3, #27
 800902e:	d803      	bhi.n	8009038 <RTC_DateUpdate+0xd2>
      {
        day++;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	3301      	adds	r3, #1
 8009034:	60fb      	str	r3, [r7, #12]
 8009036:	e01c      	b.n	8009072 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2b1c      	cmp	r3, #28
 800903c:	d111      	bne.n	8009062 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	b29b      	uxth	r3, r3
 8009042:	4618      	mov	r0, r3
 8009044:	f000 f838 	bl	80090b8 <RTC_IsLeapYear>
 8009048:	4603      	mov	r3, r0
 800904a:	2b00      	cmp	r3, #0
 800904c:	d003      	beq.n	8009056 <RTC_DateUpdate+0xf0>
        {
          day++;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	3301      	adds	r3, #1
 8009052:	60fb      	str	r3, [r7, #12]
 8009054:	e00d      	b.n	8009072 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	3301      	adds	r3, #1
 800905a:	613b      	str	r3, [r7, #16]
          day = 1U;
 800905c:	2301      	movs	r3, #1
 800905e:	60fb      	str	r3, [r7, #12]
 8009060:	e007      	b.n	8009072 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2b1d      	cmp	r3, #29
 8009066:	d104      	bne.n	8009072 <RTC_DateUpdate+0x10c>
      {
        month++;
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	3301      	adds	r3, #1
 800906c:	613b      	str	r3, [r7, #16]
        day = 1U;
 800906e:	2301      	movs	r3, #1
 8009070:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	3301      	adds	r3, #1
 8009076:	60bb      	str	r3, [r7, #8]
 8009078:	68ba      	ldr	r2, [r7, #8]
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	429a      	cmp	r2, r3
 800907e:	d38b      	bcc.n	8008f98 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	b2da      	uxtb	r2, r3
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	b2da      	uxtb	r2, r3
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	b2da      	uxtb	r2, r3
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	b2db      	uxtb	r3, r3
 800909c:	68fa      	ldr	r2, [r7, #12]
 800909e:	b2d2      	uxtb	r2, r2
 80090a0:	4619      	mov	r1, r3
 80090a2:	6978      	ldr	r0, [r7, #20]
 80090a4:	f000 f83a 	bl	800911c <RTC_WeekDayNum>
 80090a8:	4603      	mov	r3, r0
 80090aa:	461a      	mov	r2, r3
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	731a      	strb	r2, [r3, #12]
}
 80090b0:	bf00      	nop
 80090b2:	3718      	adds	r7, #24
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b083      	sub	sp, #12
 80090bc:	af00      	add	r7, sp, #0
 80090be:	4603      	mov	r3, r0
 80090c0:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80090c2:	88fb      	ldrh	r3, [r7, #6]
 80090c4:	f003 0303 	and.w	r3, r3, #3
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d001      	beq.n	80090d2 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 80090ce:	2300      	movs	r3, #0
 80090d0:	e01d      	b.n	800910e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80090d2:	88fb      	ldrh	r3, [r7, #6]
 80090d4:	4a10      	ldr	r2, [pc, #64]	; (8009118 <RTC_IsLeapYear+0x60>)
 80090d6:	fba2 1203 	umull	r1, r2, r2, r3
 80090da:	0952      	lsrs	r2, r2, #5
 80090dc:	2164      	movs	r1, #100	; 0x64
 80090de:	fb01 f202 	mul.w	r2, r1, r2
 80090e2:	1a9b      	subs	r3, r3, r2
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d001      	beq.n	80090ee <RTC_IsLeapYear+0x36>
  {
    return 1U;
 80090ea:	2301      	movs	r3, #1
 80090ec:	e00f      	b.n	800910e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 80090ee:	88fb      	ldrh	r3, [r7, #6]
 80090f0:	4a09      	ldr	r2, [pc, #36]	; (8009118 <RTC_IsLeapYear+0x60>)
 80090f2:	fba2 1203 	umull	r1, r2, r2, r3
 80090f6:	09d2      	lsrs	r2, r2, #7
 80090f8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80090fc:	fb01 f202 	mul.w	r2, r1, r2
 8009100:	1a9b      	subs	r3, r3, r2
 8009102:	b29b      	uxth	r3, r3
 8009104:	2b00      	cmp	r3, #0
 8009106:	d101      	bne.n	800910c <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8009108:	2301      	movs	r3, #1
 800910a:	e000      	b.n	800910e <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 800910c:	2300      	movs	r3, #0
  }
}
 800910e:	4618      	mov	r0, r3
 8009110:	370c      	adds	r7, #12
 8009112:	46bd      	mov	sp, r7
 8009114:	bc80      	pop	{r7}
 8009116:	4770      	bx	lr
 8009118:	51eb851f 	.word	0x51eb851f

0800911c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 800911c:	b480      	push	{r7}
 800911e:	b085      	sub	sp, #20
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	460b      	mov	r3, r1
 8009126:	70fb      	strb	r3, [r7, #3]
 8009128:	4613      	mov	r3, r2
 800912a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 800912c:	2300      	movs	r3, #0
 800912e:	60bb      	str	r3, [r7, #8]
 8009130:	2300      	movs	r3, #0
 8009132:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800913a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 800913c:	78fb      	ldrb	r3, [r7, #3]
 800913e:	2b02      	cmp	r3, #2
 8009140:	d82d      	bhi.n	800919e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8009142:	78fa      	ldrb	r2, [r7, #3]
 8009144:	4613      	mov	r3, r2
 8009146:	005b      	lsls	r3, r3, #1
 8009148:	4413      	add	r3, r2
 800914a:	00db      	lsls	r3, r3, #3
 800914c:	1a9b      	subs	r3, r3, r2
 800914e:	4a2c      	ldr	r2, [pc, #176]	; (8009200 <RTC_WeekDayNum+0xe4>)
 8009150:	fba2 2303 	umull	r2, r3, r2, r3
 8009154:	085a      	lsrs	r2, r3, #1
 8009156:	78bb      	ldrb	r3, [r7, #2]
 8009158:	441a      	add	r2, r3
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	441a      	add	r2, r3
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	3b01      	subs	r3, #1
 8009162:	089b      	lsrs	r3, r3, #2
 8009164:	441a      	add	r2, r3
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	3b01      	subs	r3, #1
 800916a:	4926      	ldr	r1, [pc, #152]	; (8009204 <RTC_WeekDayNum+0xe8>)
 800916c:	fba1 1303 	umull	r1, r3, r1, r3
 8009170:	095b      	lsrs	r3, r3, #5
 8009172:	1ad2      	subs	r2, r2, r3
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	3b01      	subs	r3, #1
 8009178:	4922      	ldr	r1, [pc, #136]	; (8009204 <RTC_WeekDayNum+0xe8>)
 800917a:	fba1 1303 	umull	r1, r3, r1, r3
 800917e:	09db      	lsrs	r3, r3, #7
 8009180:	4413      	add	r3, r2
 8009182:	1d1a      	adds	r2, r3, #4
 8009184:	4b20      	ldr	r3, [pc, #128]	; (8009208 <RTC_WeekDayNum+0xec>)
 8009186:	fba3 1302 	umull	r1, r3, r3, r2
 800918a:	1ad1      	subs	r1, r2, r3
 800918c:	0849      	lsrs	r1, r1, #1
 800918e:	440b      	add	r3, r1
 8009190:	0899      	lsrs	r1, r3, #2
 8009192:	460b      	mov	r3, r1
 8009194:	00db      	lsls	r3, r3, #3
 8009196:	1a5b      	subs	r3, r3, r1
 8009198:	1ad3      	subs	r3, r2, r3
 800919a:	60fb      	str	r3, [r7, #12]
 800919c:	e029      	b.n	80091f2 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800919e:	78fa      	ldrb	r2, [r7, #3]
 80091a0:	4613      	mov	r3, r2
 80091a2:	005b      	lsls	r3, r3, #1
 80091a4:	4413      	add	r3, r2
 80091a6:	00db      	lsls	r3, r3, #3
 80091a8:	1a9b      	subs	r3, r3, r2
 80091aa:	4a15      	ldr	r2, [pc, #84]	; (8009200 <RTC_WeekDayNum+0xe4>)
 80091ac:	fba2 2303 	umull	r2, r3, r2, r3
 80091b0:	085a      	lsrs	r2, r3, #1
 80091b2:	78bb      	ldrb	r3, [r7, #2]
 80091b4:	441a      	add	r2, r3
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	441a      	add	r2, r3
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	089b      	lsrs	r3, r3, #2
 80091be:	441a      	add	r2, r3
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	4910      	ldr	r1, [pc, #64]	; (8009204 <RTC_WeekDayNum+0xe8>)
 80091c4:	fba1 1303 	umull	r1, r3, r1, r3
 80091c8:	095b      	lsrs	r3, r3, #5
 80091ca:	1ad2      	subs	r2, r2, r3
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	490d      	ldr	r1, [pc, #52]	; (8009204 <RTC_WeekDayNum+0xe8>)
 80091d0:	fba1 1303 	umull	r1, r3, r1, r3
 80091d4:	09db      	lsrs	r3, r3, #7
 80091d6:	4413      	add	r3, r2
 80091d8:	1c9a      	adds	r2, r3, #2
 80091da:	4b0b      	ldr	r3, [pc, #44]	; (8009208 <RTC_WeekDayNum+0xec>)
 80091dc:	fba3 1302 	umull	r1, r3, r3, r2
 80091e0:	1ad1      	subs	r1, r2, r3
 80091e2:	0849      	lsrs	r1, r1, #1
 80091e4:	440b      	add	r3, r1
 80091e6:	0899      	lsrs	r1, r3, #2
 80091e8:	460b      	mov	r3, r1
 80091ea:	00db      	lsls	r3, r3, #3
 80091ec:	1a5b      	subs	r3, r3, r1
 80091ee:	1ad3      	subs	r3, r2, r3
 80091f0:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	b2db      	uxtb	r3, r3
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3714      	adds	r7, #20
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bc80      	pop	{r7}
 80091fe:	4770      	bx	lr
 8009200:	38e38e39 	.word	0x38e38e39
 8009204:	51eb851f 	.word	0x51eb851f
 8009208:	24924925 	.word	0x24924925

0800920c <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b082      	sub	sp, #8
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f003 0301 	and.w	r3, r3, #1
 800921e:	2b00      	cmp	r3, #0
 8009220:	d027      	beq.n	8009272 <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	f003 0301 	and.w	r3, r3, #1
 800922c:	2b00      	cmp	r3, #0
 800922e:	d020      	beq.n	8009272 <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	f003 0304 	and.w	r3, r3, #4
 800923a:	2b00      	cmp	r3, #0
 800923c:	d00b      	beq.n	8009256 <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 f824 	bl	800928c <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f06f 0204 	mvn.w	r2, #4
 800924c:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2204      	movs	r2, #4
 8009252:	745a      	strb	r2, [r3, #17]
 8009254:	e005      	b.n	8009262 <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 f80f 	bl	800927a <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2201      	movs	r2, #1
 8009260:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	685a      	ldr	r2, [r3, #4]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f022 0201 	bic.w	r2, r2, #1
 8009270:	605a      	str	r2, [r3, #4]
    }
  }
}
 8009272:	bf00      	nop
 8009274:	3708      	adds	r7, #8
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}

0800927a <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 800927a:	b480      	push	{r7}
 800927c:	b083      	sub	sp, #12
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 8009282:	bf00      	nop
 8009284:	370c      	adds	r7, #12
 8009286:	46bd      	mov	sp, r7
 8009288:	bc80      	pop	{r7}
 800928a:	4770      	bx	lr

0800928c <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 800928c:	b480      	push	{r7}
 800928e:	b083      	sub	sp, #12
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8009294:	bf00      	nop
 8009296:	370c      	adds	r7, #12
 8009298:	46bd      	mov	sp, r7
 800929a:	bc80      	pop	{r7}
 800929c:	4770      	bx	lr
	...

080092a0 <siprintf>:
 80092a0:	b40e      	push	{r1, r2, r3}
 80092a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80092a6:	b500      	push	{lr}
 80092a8:	b09c      	sub	sp, #112	; 0x70
 80092aa:	ab1d      	add	r3, sp, #116	; 0x74
 80092ac:	9002      	str	r0, [sp, #8]
 80092ae:	9006      	str	r0, [sp, #24]
 80092b0:	9107      	str	r1, [sp, #28]
 80092b2:	9104      	str	r1, [sp, #16]
 80092b4:	4808      	ldr	r0, [pc, #32]	; (80092d8 <siprintf+0x38>)
 80092b6:	4909      	ldr	r1, [pc, #36]	; (80092dc <siprintf+0x3c>)
 80092b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80092bc:	9105      	str	r1, [sp, #20]
 80092be:	6800      	ldr	r0, [r0, #0]
 80092c0:	a902      	add	r1, sp, #8
 80092c2:	9301      	str	r3, [sp, #4]
 80092c4:	f000 f98e 	bl	80095e4 <_svfiprintf_r>
 80092c8:	2200      	movs	r2, #0
 80092ca:	9b02      	ldr	r3, [sp, #8]
 80092cc:	701a      	strb	r2, [r3, #0]
 80092ce:	b01c      	add	sp, #112	; 0x70
 80092d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80092d4:	b003      	add	sp, #12
 80092d6:	4770      	bx	lr
 80092d8:	2000005c 	.word	0x2000005c
 80092dc:	ffff0208 	.word	0xffff0208

080092e0 <memset>:
 80092e0:	4603      	mov	r3, r0
 80092e2:	4402      	add	r2, r0
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d100      	bne.n	80092ea <memset+0xa>
 80092e8:	4770      	bx	lr
 80092ea:	f803 1b01 	strb.w	r1, [r3], #1
 80092ee:	e7f9      	b.n	80092e4 <memset+0x4>

080092f0 <__errno>:
 80092f0:	4b01      	ldr	r3, [pc, #4]	; (80092f8 <__errno+0x8>)
 80092f2:	6818      	ldr	r0, [r3, #0]
 80092f4:	4770      	bx	lr
 80092f6:	bf00      	nop
 80092f8:	2000005c 	.word	0x2000005c

080092fc <__libc_init_array>:
 80092fc:	b570      	push	{r4, r5, r6, lr}
 80092fe:	2600      	movs	r6, #0
 8009300:	4d0c      	ldr	r5, [pc, #48]	; (8009334 <__libc_init_array+0x38>)
 8009302:	4c0d      	ldr	r4, [pc, #52]	; (8009338 <__libc_init_array+0x3c>)
 8009304:	1b64      	subs	r4, r4, r5
 8009306:	10a4      	asrs	r4, r4, #2
 8009308:	42a6      	cmp	r6, r4
 800930a:	d109      	bne.n	8009320 <__libc_init_array+0x24>
 800930c:	f000 fc7a 	bl	8009c04 <_init>
 8009310:	2600      	movs	r6, #0
 8009312:	4d0a      	ldr	r5, [pc, #40]	; (800933c <__libc_init_array+0x40>)
 8009314:	4c0a      	ldr	r4, [pc, #40]	; (8009340 <__libc_init_array+0x44>)
 8009316:	1b64      	subs	r4, r4, r5
 8009318:	10a4      	asrs	r4, r4, #2
 800931a:	42a6      	cmp	r6, r4
 800931c:	d105      	bne.n	800932a <__libc_init_array+0x2e>
 800931e:	bd70      	pop	{r4, r5, r6, pc}
 8009320:	f855 3b04 	ldr.w	r3, [r5], #4
 8009324:	4798      	blx	r3
 8009326:	3601      	adds	r6, #1
 8009328:	e7ee      	b.n	8009308 <__libc_init_array+0xc>
 800932a:	f855 3b04 	ldr.w	r3, [r5], #4
 800932e:	4798      	blx	r3
 8009330:	3601      	adds	r6, #1
 8009332:	e7f2      	b.n	800931a <__libc_init_array+0x1e>
 8009334:	0800cc50 	.word	0x0800cc50
 8009338:	0800cc50 	.word	0x0800cc50
 800933c:	0800cc50 	.word	0x0800cc50
 8009340:	0800cc54 	.word	0x0800cc54

08009344 <__retarget_lock_acquire_recursive>:
 8009344:	4770      	bx	lr

08009346 <__retarget_lock_release_recursive>:
 8009346:	4770      	bx	lr

08009348 <_free_r>:
 8009348:	b538      	push	{r3, r4, r5, lr}
 800934a:	4605      	mov	r5, r0
 800934c:	2900      	cmp	r1, #0
 800934e:	d040      	beq.n	80093d2 <_free_r+0x8a>
 8009350:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009354:	1f0c      	subs	r4, r1, #4
 8009356:	2b00      	cmp	r3, #0
 8009358:	bfb8      	it	lt
 800935a:	18e4      	addlt	r4, r4, r3
 800935c:	f000 f8dc 	bl	8009518 <__malloc_lock>
 8009360:	4a1c      	ldr	r2, [pc, #112]	; (80093d4 <_free_r+0x8c>)
 8009362:	6813      	ldr	r3, [r2, #0]
 8009364:	b933      	cbnz	r3, 8009374 <_free_r+0x2c>
 8009366:	6063      	str	r3, [r4, #4]
 8009368:	6014      	str	r4, [r2, #0]
 800936a:	4628      	mov	r0, r5
 800936c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009370:	f000 b8d8 	b.w	8009524 <__malloc_unlock>
 8009374:	42a3      	cmp	r3, r4
 8009376:	d908      	bls.n	800938a <_free_r+0x42>
 8009378:	6820      	ldr	r0, [r4, #0]
 800937a:	1821      	adds	r1, r4, r0
 800937c:	428b      	cmp	r3, r1
 800937e:	bf01      	itttt	eq
 8009380:	6819      	ldreq	r1, [r3, #0]
 8009382:	685b      	ldreq	r3, [r3, #4]
 8009384:	1809      	addeq	r1, r1, r0
 8009386:	6021      	streq	r1, [r4, #0]
 8009388:	e7ed      	b.n	8009366 <_free_r+0x1e>
 800938a:	461a      	mov	r2, r3
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	b10b      	cbz	r3, 8009394 <_free_r+0x4c>
 8009390:	42a3      	cmp	r3, r4
 8009392:	d9fa      	bls.n	800938a <_free_r+0x42>
 8009394:	6811      	ldr	r1, [r2, #0]
 8009396:	1850      	adds	r0, r2, r1
 8009398:	42a0      	cmp	r0, r4
 800939a:	d10b      	bne.n	80093b4 <_free_r+0x6c>
 800939c:	6820      	ldr	r0, [r4, #0]
 800939e:	4401      	add	r1, r0
 80093a0:	1850      	adds	r0, r2, r1
 80093a2:	4283      	cmp	r3, r0
 80093a4:	6011      	str	r1, [r2, #0]
 80093a6:	d1e0      	bne.n	800936a <_free_r+0x22>
 80093a8:	6818      	ldr	r0, [r3, #0]
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	4408      	add	r0, r1
 80093ae:	6010      	str	r0, [r2, #0]
 80093b0:	6053      	str	r3, [r2, #4]
 80093b2:	e7da      	b.n	800936a <_free_r+0x22>
 80093b4:	d902      	bls.n	80093bc <_free_r+0x74>
 80093b6:	230c      	movs	r3, #12
 80093b8:	602b      	str	r3, [r5, #0]
 80093ba:	e7d6      	b.n	800936a <_free_r+0x22>
 80093bc:	6820      	ldr	r0, [r4, #0]
 80093be:	1821      	adds	r1, r4, r0
 80093c0:	428b      	cmp	r3, r1
 80093c2:	bf01      	itttt	eq
 80093c4:	6819      	ldreq	r1, [r3, #0]
 80093c6:	685b      	ldreq	r3, [r3, #4]
 80093c8:	1809      	addeq	r1, r1, r0
 80093ca:	6021      	streq	r1, [r4, #0]
 80093cc:	6063      	str	r3, [r4, #4]
 80093ce:	6054      	str	r4, [r2, #4]
 80093d0:	e7cb      	b.n	800936a <_free_r+0x22>
 80093d2:	bd38      	pop	{r3, r4, r5, pc}
 80093d4:	200001e8 	.word	0x200001e8

080093d8 <sbrk_aligned>:
 80093d8:	b570      	push	{r4, r5, r6, lr}
 80093da:	4e0e      	ldr	r6, [pc, #56]	; (8009414 <sbrk_aligned+0x3c>)
 80093dc:	460c      	mov	r4, r1
 80093de:	6831      	ldr	r1, [r6, #0]
 80093e0:	4605      	mov	r5, r0
 80093e2:	b911      	cbnz	r1, 80093ea <sbrk_aligned+0x12>
 80093e4:	f000 fbaa 	bl	8009b3c <_sbrk_r>
 80093e8:	6030      	str	r0, [r6, #0]
 80093ea:	4621      	mov	r1, r4
 80093ec:	4628      	mov	r0, r5
 80093ee:	f000 fba5 	bl	8009b3c <_sbrk_r>
 80093f2:	1c43      	adds	r3, r0, #1
 80093f4:	d00a      	beq.n	800940c <sbrk_aligned+0x34>
 80093f6:	1cc4      	adds	r4, r0, #3
 80093f8:	f024 0403 	bic.w	r4, r4, #3
 80093fc:	42a0      	cmp	r0, r4
 80093fe:	d007      	beq.n	8009410 <sbrk_aligned+0x38>
 8009400:	1a21      	subs	r1, r4, r0
 8009402:	4628      	mov	r0, r5
 8009404:	f000 fb9a 	bl	8009b3c <_sbrk_r>
 8009408:	3001      	adds	r0, #1
 800940a:	d101      	bne.n	8009410 <sbrk_aligned+0x38>
 800940c:	f04f 34ff 	mov.w	r4, #4294967295
 8009410:	4620      	mov	r0, r4
 8009412:	bd70      	pop	{r4, r5, r6, pc}
 8009414:	200001ec 	.word	0x200001ec

08009418 <_malloc_r>:
 8009418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800941c:	1ccd      	adds	r5, r1, #3
 800941e:	f025 0503 	bic.w	r5, r5, #3
 8009422:	3508      	adds	r5, #8
 8009424:	2d0c      	cmp	r5, #12
 8009426:	bf38      	it	cc
 8009428:	250c      	movcc	r5, #12
 800942a:	2d00      	cmp	r5, #0
 800942c:	4607      	mov	r7, r0
 800942e:	db01      	blt.n	8009434 <_malloc_r+0x1c>
 8009430:	42a9      	cmp	r1, r5
 8009432:	d905      	bls.n	8009440 <_malloc_r+0x28>
 8009434:	230c      	movs	r3, #12
 8009436:	2600      	movs	r6, #0
 8009438:	603b      	str	r3, [r7, #0]
 800943a:	4630      	mov	r0, r6
 800943c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009440:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009514 <_malloc_r+0xfc>
 8009444:	f000 f868 	bl	8009518 <__malloc_lock>
 8009448:	f8d8 3000 	ldr.w	r3, [r8]
 800944c:	461c      	mov	r4, r3
 800944e:	bb5c      	cbnz	r4, 80094a8 <_malloc_r+0x90>
 8009450:	4629      	mov	r1, r5
 8009452:	4638      	mov	r0, r7
 8009454:	f7ff ffc0 	bl	80093d8 <sbrk_aligned>
 8009458:	1c43      	adds	r3, r0, #1
 800945a:	4604      	mov	r4, r0
 800945c:	d155      	bne.n	800950a <_malloc_r+0xf2>
 800945e:	f8d8 4000 	ldr.w	r4, [r8]
 8009462:	4626      	mov	r6, r4
 8009464:	2e00      	cmp	r6, #0
 8009466:	d145      	bne.n	80094f4 <_malloc_r+0xdc>
 8009468:	2c00      	cmp	r4, #0
 800946a:	d048      	beq.n	80094fe <_malloc_r+0xe6>
 800946c:	6823      	ldr	r3, [r4, #0]
 800946e:	4631      	mov	r1, r6
 8009470:	4638      	mov	r0, r7
 8009472:	eb04 0903 	add.w	r9, r4, r3
 8009476:	f000 fb61 	bl	8009b3c <_sbrk_r>
 800947a:	4581      	cmp	r9, r0
 800947c:	d13f      	bne.n	80094fe <_malloc_r+0xe6>
 800947e:	6821      	ldr	r1, [r4, #0]
 8009480:	4638      	mov	r0, r7
 8009482:	1a6d      	subs	r5, r5, r1
 8009484:	4629      	mov	r1, r5
 8009486:	f7ff ffa7 	bl	80093d8 <sbrk_aligned>
 800948a:	3001      	adds	r0, #1
 800948c:	d037      	beq.n	80094fe <_malloc_r+0xe6>
 800948e:	6823      	ldr	r3, [r4, #0]
 8009490:	442b      	add	r3, r5
 8009492:	6023      	str	r3, [r4, #0]
 8009494:	f8d8 3000 	ldr.w	r3, [r8]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d038      	beq.n	800950e <_malloc_r+0xf6>
 800949c:	685a      	ldr	r2, [r3, #4]
 800949e:	42a2      	cmp	r2, r4
 80094a0:	d12b      	bne.n	80094fa <_malloc_r+0xe2>
 80094a2:	2200      	movs	r2, #0
 80094a4:	605a      	str	r2, [r3, #4]
 80094a6:	e00f      	b.n	80094c8 <_malloc_r+0xb0>
 80094a8:	6822      	ldr	r2, [r4, #0]
 80094aa:	1b52      	subs	r2, r2, r5
 80094ac:	d41f      	bmi.n	80094ee <_malloc_r+0xd6>
 80094ae:	2a0b      	cmp	r2, #11
 80094b0:	d917      	bls.n	80094e2 <_malloc_r+0xca>
 80094b2:	1961      	adds	r1, r4, r5
 80094b4:	42a3      	cmp	r3, r4
 80094b6:	6025      	str	r5, [r4, #0]
 80094b8:	bf18      	it	ne
 80094ba:	6059      	strne	r1, [r3, #4]
 80094bc:	6863      	ldr	r3, [r4, #4]
 80094be:	bf08      	it	eq
 80094c0:	f8c8 1000 	streq.w	r1, [r8]
 80094c4:	5162      	str	r2, [r4, r5]
 80094c6:	604b      	str	r3, [r1, #4]
 80094c8:	4638      	mov	r0, r7
 80094ca:	f104 060b 	add.w	r6, r4, #11
 80094ce:	f000 f829 	bl	8009524 <__malloc_unlock>
 80094d2:	f026 0607 	bic.w	r6, r6, #7
 80094d6:	1d23      	adds	r3, r4, #4
 80094d8:	1af2      	subs	r2, r6, r3
 80094da:	d0ae      	beq.n	800943a <_malloc_r+0x22>
 80094dc:	1b9b      	subs	r3, r3, r6
 80094de:	50a3      	str	r3, [r4, r2]
 80094e0:	e7ab      	b.n	800943a <_malloc_r+0x22>
 80094e2:	42a3      	cmp	r3, r4
 80094e4:	6862      	ldr	r2, [r4, #4]
 80094e6:	d1dd      	bne.n	80094a4 <_malloc_r+0x8c>
 80094e8:	f8c8 2000 	str.w	r2, [r8]
 80094ec:	e7ec      	b.n	80094c8 <_malloc_r+0xb0>
 80094ee:	4623      	mov	r3, r4
 80094f0:	6864      	ldr	r4, [r4, #4]
 80094f2:	e7ac      	b.n	800944e <_malloc_r+0x36>
 80094f4:	4634      	mov	r4, r6
 80094f6:	6876      	ldr	r6, [r6, #4]
 80094f8:	e7b4      	b.n	8009464 <_malloc_r+0x4c>
 80094fa:	4613      	mov	r3, r2
 80094fc:	e7cc      	b.n	8009498 <_malloc_r+0x80>
 80094fe:	230c      	movs	r3, #12
 8009500:	4638      	mov	r0, r7
 8009502:	603b      	str	r3, [r7, #0]
 8009504:	f000 f80e 	bl	8009524 <__malloc_unlock>
 8009508:	e797      	b.n	800943a <_malloc_r+0x22>
 800950a:	6025      	str	r5, [r4, #0]
 800950c:	e7dc      	b.n	80094c8 <_malloc_r+0xb0>
 800950e:	605b      	str	r3, [r3, #4]
 8009510:	deff      	udf	#255	; 0xff
 8009512:	bf00      	nop
 8009514:	200001e8 	.word	0x200001e8

08009518 <__malloc_lock>:
 8009518:	4801      	ldr	r0, [pc, #4]	; (8009520 <__malloc_lock+0x8>)
 800951a:	f7ff bf13 	b.w	8009344 <__retarget_lock_acquire_recursive>
 800951e:	bf00      	nop
 8009520:	200001e4 	.word	0x200001e4

08009524 <__malloc_unlock>:
 8009524:	4801      	ldr	r0, [pc, #4]	; (800952c <__malloc_unlock+0x8>)
 8009526:	f7ff bf0e 	b.w	8009346 <__retarget_lock_release_recursive>
 800952a:	bf00      	nop
 800952c:	200001e4 	.word	0x200001e4

08009530 <__ssputs_r>:
 8009530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009534:	461f      	mov	r7, r3
 8009536:	688e      	ldr	r6, [r1, #8]
 8009538:	4682      	mov	sl, r0
 800953a:	42be      	cmp	r6, r7
 800953c:	460c      	mov	r4, r1
 800953e:	4690      	mov	r8, r2
 8009540:	680b      	ldr	r3, [r1, #0]
 8009542:	d82c      	bhi.n	800959e <__ssputs_r+0x6e>
 8009544:	898a      	ldrh	r2, [r1, #12]
 8009546:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800954a:	d026      	beq.n	800959a <__ssputs_r+0x6a>
 800954c:	6965      	ldr	r5, [r4, #20]
 800954e:	6909      	ldr	r1, [r1, #16]
 8009550:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009554:	eba3 0901 	sub.w	r9, r3, r1
 8009558:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800955c:	1c7b      	adds	r3, r7, #1
 800955e:	444b      	add	r3, r9
 8009560:	106d      	asrs	r5, r5, #1
 8009562:	429d      	cmp	r5, r3
 8009564:	bf38      	it	cc
 8009566:	461d      	movcc	r5, r3
 8009568:	0553      	lsls	r3, r2, #21
 800956a:	d527      	bpl.n	80095bc <__ssputs_r+0x8c>
 800956c:	4629      	mov	r1, r5
 800956e:	f7ff ff53 	bl	8009418 <_malloc_r>
 8009572:	4606      	mov	r6, r0
 8009574:	b360      	cbz	r0, 80095d0 <__ssputs_r+0xa0>
 8009576:	464a      	mov	r2, r9
 8009578:	6921      	ldr	r1, [r4, #16]
 800957a:	f000 fafd 	bl	8009b78 <memcpy>
 800957e:	89a3      	ldrh	r3, [r4, #12]
 8009580:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009588:	81a3      	strh	r3, [r4, #12]
 800958a:	6126      	str	r6, [r4, #16]
 800958c:	444e      	add	r6, r9
 800958e:	6026      	str	r6, [r4, #0]
 8009590:	463e      	mov	r6, r7
 8009592:	6165      	str	r5, [r4, #20]
 8009594:	eba5 0509 	sub.w	r5, r5, r9
 8009598:	60a5      	str	r5, [r4, #8]
 800959a:	42be      	cmp	r6, r7
 800959c:	d900      	bls.n	80095a0 <__ssputs_r+0x70>
 800959e:	463e      	mov	r6, r7
 80095a0:	4632      	mov	r2, r6
 80095a2:	4641      	mov	r1, r8
 80095a4:	6820      	ldr	r0, [r4, #0]
 80095a6:	f000 faaf 	bl	8009b08 <memmove>
 80095aa:	2000      	movs	r0, #0
 80095ac:	68a3      	ldr	r3, [r4, #8]
 80095ae:	1b9b      	subs	r3, r3, r6
 80095b0:	60a3      	str	r3, [r4, #8]
 80095b2:	6823      	ldr	r3, [r4, #0]
 80095b4:	4433      	add	r3, r6
 80095b6:	6023      	str	r3, [r4, #0]
 80095b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095bc:	462a      	mov	r2, r5
 80095be:	f000 fae9 	bl	8009b94 <_realloc_r>
 80095c2:	4606      	mov	r6, r0
 80095c4:	2800      	cmp	r0, #0
 80095c6:	d1e0      	bne.n	800958a <__ssputs_r+0x5a>
 80095c8:	4650      	mov	r0, sl
 80095ca:	6921      	ldr	r1, [r4, #16]
 80095cc:	f7ff febc 	bl	8009348 <_free_r>
 80095d0:	230c      	movs	r3, #12
 80095d2:	f8ca 3000 	str.w	r3, [sl]
 80095d6:	89a3      	ldrh	r3, [r4, #12]
 80095d8:	f04f 30ff 	mov.w	r0, #4294967295
 80095dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095e0:	81a3      	strh	r3, [r4, #12]
 80095e2:	e7e9      	b.n	80095b8 <__ssputs_r+0x88>

080095e4 <_svfiprintf_r>:
 80095e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095e8:	4698      	mov	r8, r3
 80095ea:	898b      	ldrh	r3, [r1, #12]
 80095ec:	4607      	mov	r7, r0
 80095ee:	061b      	lsls	r3, r3, #24
 80095f0:	460d      	mov	r5, r1
 80095f2:	4614      	mov	r4, r2
 80095f4:	b09d      	sub	sp, #116	; 0x74
 80095f6:	d50e      	bpl.n	8009616 <_svfiprintf_r+0x32>
 80095f8:	690b      	ldr	r3, [r1, #16]
 80095fa:	b963      	cbnz	r3, 8009616 <_svfiprintf_r+0x32>
 80095fc:	2140      	movs	r1, #64	; 0x40
 80095fe:	f7ff ff0b 	bl	8009418 <_malloc_r>
 8009602:	6028      	str	r0, [r5, #0]
 8009604:	6128      	str	r0, [r5, #16]
 8009606:	b920      	cbnz	r0, 8009612 <_svfiprintf_r+0x2e>
 8009608:	230c      	movs	r3, #12
 800960a:	603b      	str	r3, [r7, #0]
 800960c:	f04f 30ff 	mov.w	r0, #4294967295
 8009610:	e0d0      	b.n	80097b4 <_svfiprintf_r+0x1d0>
 8009612:	2340      	movs	r3, #64	; 0x40
 8009614:	616b      	str	r3, [r5, #20]
 8009616:	2300      	movs	r3, #0
 8009618:	9309      	str	r3, [sp, #36]	; 0x24
 800961a:	2320      	movs	r3, #32
 800961c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009620:	2330      	movs	r3, #48	; 0x30
 8009622:	f04f 0901 	mov.w	r9, #1
 8009626:	f8cd 800c 	str.w	r8, [sp, #12]
 800962a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80097cc <_svfiprintf_r+0x1e8>
 800962e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009632:	4623      	mov	r3, r4
 8009634:	469a      	mov	sl, r3
 8009636:	f813 2b01 	ldrb.w	r2, [r3], #1
 800963a:	b10a      	cbz	r2, 8009640 <_svfiprintf_r+0x5c>
 800963c:	2a25      	cmp	r2, #37	; 0x25
 800963e:	d1f9      	bne.n	8009634 <_svfiprintf_r+0x50>
 8009640:	ebba 0b04 	subs.w	fp, sl, r4
 8009644:	d00b      	beq.n	800965e <_svfiprintf_r+0x7a>
 8009646:	465b      	mov	r3, fp
 8009648:	4622      	mov	r2, r4
 800964a:	4629      	mov	r1, r5
 800964c:	4638      	mov	r0, r7
 800964e:	f7ff ff6f 	bl	8009530 <__ssputs_r>
 8009652:	3001      	adds	r0, #1
 8009654:	f000 80a9 	beq.w	80097aa <_svfiprintf_r+0x1c6>
 8009658:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800965a:	445a      	add	r2, fp
 800965c:	9209      	str	r2, [sp, #36]	; 0x24
 800965e:	f89a 3000 	ldrb.w	r3, [sl]
 8009662:	2b00      	cmp	r3, #0
 8009664:	f000 80a1 	beq.w	80097aa <_svfiprintf_r+0x1c6>
 8009668:	2300      	movs	r3, #0
 800966a:	f04f 32ff 	mov.w	r2, #4294967295
 800966e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009672:	f10a 0a01 	add.w	sl, sl, #1
 8009676:	9304      	str	r3, [sp, #16]
 8009678:	9307      	str	r3, [sp, #28]
 800967a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800967e:	931a      	str	r3, [sp, #104]	; 0x68
 8009680:	4654      	mov	r4, sl
 8009682:	2205      	movs	r2, #5
 8009684:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009688:	4850      	ldr	r0, [pc, #320]	; (80097cc <_svfiprintf_r+0x1e8>)
 800968a:	f000 fa67 	bl	8009b5c <memchr>
 800968e:	9a04      	ldr	r2, [sp, #16]
 8009690:	b9d8      	cbnz	r0, 80096ca <_svfiprintf_r+0xe6>
 8009692:	06d0      	lsls	r0, r2, #27
 8009694:	bf44      	itt	mi
 8009696:	2320      	movmi	r3, #32
 8009698:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800969c:	0711      	lsls	r1, r2, #28
 800969e:	bf44      	itt	mi
 80096a0:	232b      	movmi	r3, #43	; 0x2b
 80096a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096a6:	f89a 3000 	ldrb.w	r3, [sl]
 80096aa:	2b2a      	cmp	r3, #42	; 0x2a
 80096ac:	d015      	beq.n	80096da <_svfiprintf_r+0xf6>
 80096ae:	4654      	mov	r4, sl
 80096b0:	2000      	movs	r0, #0
 80096b2:	f04f 0c0a 	mov.w	ip, #10
 80096b6:	9a07      	ldr	r2, [sp, #28]
 80096b8:	4621      	mov	r1, r4
 80096ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096be:	3b30      	subs	r3, #48	; 0x30
 80096c0:	2b09      	cmp	r3, #9
 80096c2:	d94d      	bls.n	8009760 <_svfiprintf_r+0x17c>
 80096c4:	b1b0      	cbz	r0, 80096f4 <_svfiprintf_r+0x110>
 80096c6:	9207      	str	r2, [sp, #28]
 80096c8:	e014      	b.n	80096f4 <_svfiprintf_r+0x110>
 80096ca:	eba0 0308 	sub.w	r3, r0, r8
 80096ce:	fa09 f303 	lsl.w	r3, r9, r3
 80096d2:	4313      	orrs	r3, r2
 80096d4:	46a2      	mov	sl, r4
 80096d6:	9304      	str	r3, [sp, #16]
 80096d8:	e7d2      	b.n	8009680 <_svfiprintf_r+0x9c>
 80096da:	9b03      	ldr	r3, [sp, #12]
 80096dc:	1d19      	adds	r1, r3, #4
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	9103      	str	r1, [sp, #12]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	bfbb      	ittet	lt
 80096e6:	425b      	neglt	r3, r3
 80096e8:	f042 0202 	orrlt.w	r2, r2, #2
 80096ec:	9307      	strge	r3, [sp, #28]
 80096ee:	9307      	strlt	r3, [sp, #28]
 80096f0:	bfb8      	it	lt
 80096f2:	9204      	strlt	r2, [sp, #16]
 80096f4:	7823      	ldrb	r3, [r4, #0]
 80096f6:	2b2e      	cmp	r3, #46	; 0x2e
 80096f8:	d10c      	bne.n	8009714 <_svfiprintf_r+0x130>
 80096fa:	7863      	ldrb	r3, [r4, #1]
 80096fc:	2b2a      	cmp	r3, #42	; 0x2a
 80096fe:	d134      	bne.n	800976a <_svfiprintf_r+0x186>
 8009700:	9b03      	ldr	r3, [sp, #12]
 8009702:	3402      	adds	r4, #2
 8009704:	1d1a      	adds	r2, r3, #4
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	9203      	str	r2, [sp, #12]
 800970a:	2b00      	cmp	r3, #0
 800970c:	bfb8      	it	lt
 800970e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009712:	9305      	str	r3, [sp, #20]
 8009714:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80097d0 <_svfiprintf_r+0x1ec>
 8009718:	2203      	movs	r2, #3
 800971a:	4650      	mov	r0, sl
 800971c:	7821      	ldrb	r1, [r4, #0]
 800971e:	f000 fa1d 	bl	8009b5c <memchr>
 8009722:	b138      	cbz	r0, 8009734 <_svfiprintf_r+0x150>
 8009724:	2240      	movs	r2, #64	; 0x40
 8009726:	9b04      	ldr	r3, [sp, #16]
 8009728:	eba0 000a 	sub.w	r0, r0, sl
 800972c:	4082      	lsls	r2, r0
 800972e:	4313      	orrs	r3, r2
 8009730:	3401      	adds	r4, #1
 8009732:	9304      	str	r3, [sp, #16]
 8009734:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009738:	2206      	movs	r2, #6
 800973a:	4826      	ldr	r0, [pc, #152]	; (80097d4 <_svfiprintf_r+0x1f0>)
 800973c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009740:	f000 fa0c 	bl	8009b5c <memchr>
 8009744:	2800      	cmp	r0, #0
 8009746:	d038      	beq.n	80097ba <_svfiprintf_r+0x1d6>
 8009748:	4b23      	ldr	r3, [pc, #140]	; (80097d8 <_svfiprintf_r+0x1f4>)
 800974a:	bb1b      	cbnz	r3, 8009794 <_svfiprintf_r+0x1b0>
 800974c:	9b03      	ldr	r3, [sp, #12]
 800974e:	3307      	adds	r3, #7
 8009750:	f023 0307 	bic.w	r3, r3, #7
 8009754:	3308      	adds	r3, #8
 8009756:	9303      	str	r3, [sp, #12]
 8009758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800975a:	4433      	add	r3, r6
 800975c:	9309      	str	r3, [sp, #36]	; 0x24
 800975e:	e768      	b.n	8009632 <_svfiprintf_r+0x4e>
 8009760:	460c      	mov	r4, r1
 8009762:	2001      	movs	r0, #1
 8009764:	fb0c 3202 	mla	r2, ip, r2, r3
 8009768:	e7a6      	b.n	80096b8 <_svfiprintf_r+0xd4>
 800976a:	2300      	movs	r3, #0
 800976c:	f04f 0c0a 	mov.w	ip, #10
 8009770:	4619      	mov	r1, r3
 8009772:	3401      	adds	r4, #1
 8009774:	9305      	str	r3, [sp, #20]
 8009776:	4620      	mov	r0, r4
 8009778:	f810 2b01 	ldrb.w	r2, [r0], #1
 800977c:	3a30      	subs	r2, #48	; 0x30
 800977e:	2a09      	cmp	r2, #9
 8009780:	d903      	bls.n	800978a <_svfiprintf_r+0x1a6>
 8009782:	2b00      	cmp	r3, #0
 8009784:	d0c6      	beq.n	8009714 <_svfiprintf_r+0x130>
 8009786:	9105      	str	r1, [sp, #20]
 8009788:	e7c4      	b.n	8009714 <_svfiprintf_r+0x130>
 800978a:	4604      	mov	r4, r0
 800978c:	2301      	movs	r3, #1
 800978e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009792:	e7f0      	b.n	8009776 <_svfiprintf_r+0x192>
 8009794:	ab03      	add	r3, sp, #12
 8009796:	9300      	str	r3, [sp, #0]
 8009798:	462a      	mov	r2, r5
 800979a:	4638      	mov	r0, r7
 800979c:	4b0f      	ldr	r3, [pc, #60]	; (80097dc <_svfiprintf_r+0x1f8>)
 800979e:	a904      	add	r1, sp, #16
 80097a0:	f3af 8000 	nop.w
 80097a4:	1c42      	adds	r2, r0, #1
 80097a6:	4606      	mov	r6, r0
 80097a8:	d1d6      	bne.n	8009758 <_svfiprintf_r+0x174>
 80097aa:	89ab      	ldrh	r3, [r5, #12]
 80097ac:	065b      	lsls	r3, r3, #25
 80097ae:	f53f af2d 	bmi.w	800960c <_svfiprintf_r+0x28>
 80097b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097b4:	b01d      	add	sp, #116	; 0x74
 80097b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ba:	ab03      	add	r3, sp, #12
 80097bc:	9300      	str	r3, [sp, #0]
 80097be:	462a      	mov	r2, r5
 80097c0:	4638      	mov	r0, r7
 80097c2:	4b06      	ldr	r3, [pc, #24]	; (80097dc <_svfiprintf_r+0x1f8>)
 80097c4:	a904      	add	r1, sp, #16
 80097c6:	f000 f87d 	bl	80098c4 <_printf_i>
 80097ca:	e7eb      	b.n	80097a4 <_svfiprintf_r+0x1c0>
 80097cc:	0800cc1a 	.word	0x0800cc1a
 80097d0:	0800cc20 	.word	0x0800cc20
 80097d4:	0800cc24 	.word	0x0800cc24
 80097d8:	00000000 	.word	0x00000000
 80097dc:	08009531 	.word	0x08009531

080097e0 <_printf_common>:
 80097e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097e4:	4616      	mov	r6, r2
 80097e6:	4699      	mov	r9, r3
 80097e8:	688a      	ldr	r2, [r1, #8]
 80097ea:	690b      	ldr	r3, [r1, #16]
 80097ec:	4607      	mov	r7, r0
 80097ee:	4293      	cmp	r3, r2
 80097f0:	bfb8      	it	lt
 80097f2:	4613      	movlt	r3, r2
 80097f4:	6033      	str	r3, [r6, #0]
 80097f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80097fa:	460c      	mov	r4, r1
 80097fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009800:	b10a      	cbz	r2, 8009806 <_printf_common+0x26>
 8009802:	3301      	adds	r3, #1
 8009804:	6033      	str	r3, [r6, #0]
 8009806:	6823      	ldr	r3, [r4, #0]
 8009808:	0699      	lsls	r1, r3, #26
 800980a:	bf42      	ittt	mi
 800980c:	6833      	ldrmi	r3, [r6, #0]
 800980e:	3302      	addmi	r3, #2
 8009810:	6033      	strmi	r3, [r6, #0]
 8009812:	6825      	ldr	r5, [r4, #0]
 8009814:	f015 0506 	ands.w	r5, r5, #6
 8009818:	d106      	bne.n	8009828 <_printf_common+0x48>
 800981a:	f104 0a19 	add.w	sl, r4, #25
 800981e:	68e3      	ldr	r3, [r4, #12]
 8009820:	6832      	ldr	r2, [r6, #0]
 8009822:	1a9b      	subs	r3, r3, r2
 8009824:	42ab      	cmp	r3, r5
 8009826:	dc2b      	bgt.n	8009880 <_printf_common+0xa0>
 8009828:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800982c:	1e13      	subs	r3, r2, #0
 800982e:	6822      	ldr	r2, [r4, #0]
 8009830:	bf18      	it	ne
 8009832:	2301      	movne	r3, #1
 8009834:	0692      	lsls	r2, r2, #26
 8009836:	d430      	bmi.n	800989a <_printf_common+0xba>
 8009838:	4649      	mov	r1, r9
 800983a:	4638      	mov	r0, r7
 800983c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009840:	47c0      	blx	r8
 8009842:	3001      	adds	r0, #1
 8009844:	d023      	beq.n	800988e <_printf_common+0xae>
 8009846:	6823      	ldr	r3, [r4, #0]
 8009848:	6922      	ldr	r2, [r4, #16]
 800984a:	f003 0306 	and.w	r3, r3, #6
 800984e:	2b04      	cmp	r3, #4
 8009850:	bf14      	ite	ne
 8009852:	2500      	movne	r5, #0
 8009854:	6833      	ldreq	r3, [r6, #0]
 8009856:	f04f 0600 	mov.w	r6, #0
 800985a:	bf08      	it	eq
 800985c:	68e5      	ldreq	r5, [r4, #12]
 800985e:	f104 041a 	add.w	r4, r4, #26
 8009862:	bf08      	it	eq
 8009864:	1aed      	subeq	r5, r5, r3
 8009866:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800986a:	bf08      	it	eq
 800986c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009870:	4293      	cmp	r3, r2
 8009872:	bfc4      	itt	gt
 8009874:	1a9b      	subgt	r3, r3, r2
 8009876:	18ed      	addgt	r5, r5, r3
 8009878:	42b5      	cmp	r5, r6
 800987a:	d11a      	bne.n	80098b2 <_printf_common+0xd2>
 800987c:	2000      	movs	r0, #0
 800987e:	e008      	b.n	8009892 <_printf_common+0xb2>
 8009880:	2301      	movs	r3, #1
 8009882:	4652      	mov	r2, sl
 8009884:	4649      	mov	r1, r9
 8009886:	4638      	mov	r0, r7
 8009888:	47c0      	blx	r8
 800988a:	3001      	adds	r0, #1
 800988c:	d103      	bne.n	8009896 <_printf_common+0xb6>
 800988e:	f04f 30ff 	mov.w	r0, #4294967295
 8009892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009896:	3501      	adds	r5, #1
 8009898:	e7c1      	b.n	800981e <_printf_common+0x3e>
 800989a:	2030      	movs	r0, #48	; 0x30
 800989c:	18e1      	adds	r1, r4, r3
 800989e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80098a2:	1c5a      	adds	r2, r3, #1
 80098a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80098a8:	4422      	add	r2, r4
 80098aa:	3302      	adds	r3, #2
 80098ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80098b0:	e7c2      	b.n	8009838 <_printf_common+0x58>
 80098b2:	2301      	movs	r3, #1
 80098b4:	4622      	mov	r2, r4
 80098b6:	4649      	mov	r1, r9
 80098b8:	4638      	mov	r0, r7
 80098ba:	47c0      	blx	r8
 80098bc:	3001      	adds	r0, #1
 80098be:	d0e6      	beq.n	800988e <_printf_common+0xae>
 80098c0:	3601      	adds	r6, #1
 80098c2:	e7d9      	b.n	8009878 <_printf_common+0x98>

080098c4 <_printf_i>:
 80098c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80098c8:	7e0f      	ldrb	r7, [r1, #24]
 80098ca:	4691      	mov	r9, r2
 80098cc:	2f78      	cmp	r7, #120	; 0x78
 80098ce:	4680      	mov	r8, r0
 80098d0:	460c      	mov	r4, r1
 80098d2:	469a      	mov	sl, r3
 80098d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80098d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80098da:	d807      	bhi.n	80098ec <_printf_i+0x28>
 80098dc:	2f62      	cmp	r7, #98	; 0x62
 80098de:	d80a      	bhi.n	80098f6 <_printf_i+0x32>
 80098e0:	2f00      	cmp	r7, #0
 80098e2:	f000 80d5 	beq.w	8009a90 <_printf_i+0x1cc>
 80098e6:	2f58      	cmp	r7, #88	; 0x58
 80098e8:	f000 80c1 	beq.w	8009a6e <_printf_i+0x1aa>
 80098ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80098f4:	e03a      	b.n	800996c <_printf_i+0xa8>
 80098f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80098fa:	2b15      	cmp	r3, #21
 80098fc:	d8f6      	bhi.n	80098ec <_printf_i+0x28>
 80098fe:	a101      	add	r1, pc, #4	; (adr r1, 8009904 <_printf_i+0x40>)
 8009900:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009904:	0800995d 	.word	0x0800995d
 8009908:	08009971 	.word	0x08009971
 800990c:	080098ed 	.word	0x080098ed
 8009910:	080098ed 	.word	0x080098ed
 8009914:	080098ed 	.word	0x080098ed
 8009918:	080098ed 	.word	0x080098ed
 800991c:	08009971 	.word	0x08009971
 8009920:	080098ed 	.word	0x080098ed
 8009924:	080098ed 	.word	0x080098ed
 8009928:	080098ed 	.word	0x080098ed
 800992c:	080098ed 	.word	0x080098ed
 8009930:	08009a77 	.word	0x08009a77
 8009934:	0800999d 	.word	0x0800999d
 8009938:	08009a31 	.word	0x08009a31
 800993c:	080098ed 	.word	0x080098ed
 8009940:	080098ed 	.word	0x080098ed
 8009944:	08009a99 	.word	0x08009a99
 8009948:	080098ed 	.word	0x080098ed
 800994c:	0800999d 	.word	0x0800999d
 8009950:	080098ed 	.word	0x080098ed
 8009954:	080098ed 	.word	0x080098ed
 8009958:	08009a39 	.word	0x08009a39
 800995c:	682b      	ldr	r3, [r5, #0]
 800995e:	1d1a      	adds	r2, r3, #4
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	602a      	str	r2, [r5, #0]
 8009964:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009968:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800996c:	2301      	movs	r3, #1
 800996e:	e0a0      	b.n	8009ab2 <_printf_i+0x1ee>
 8009970:	6820      	ldr	r0, [r4, #0]
 8009972:	682b      	ldr	r3, [r5, #0]
 8009974:	0607      	lsls	r7, r0, #24
 8009976:	f103 0104 	add.w	r1, r3, #4
 800997a:	6029      	str	r1, [r5, #0]
 800997c:	d501      	bpl.n	8009982 <_printf_i+0xbe>
 800997e:	681e      	ldr	r6, [r3, #0]
 8009980:	e003      	b.n	800998a <_printf_i+0xc6>
 8009982:	0646      	lsls	r6, r0, #25
 8009984:	d5fb      	bpl.n	800997e <_printf_i+0xba>
 8009986:	f9b3 6000 	ldrsh.w	r6, [r3]
 800998a:	2e00      	cmp	r6, #0
 800998c:	da03      	bge.n	8009996 <_printf_i+0xd2>
 800998e:	232d      	movs	r3, #45	; 0x2d
 8009990:	4276      	negs	r6, r6
 8009992:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009996:	230a      	movs	r3, #10
 8009998:	4859      	ldr	r0, [pc, #356]	; (8009b00 <_printf_i+0x23c>)
 800999a:	e012      	b.n	80099c2 <_printf_i+0xfe>
 800999c:	682b      	ldr	r3, [r5, #0]
 800999e:	6820      	ldr	r0, [r4, #0]
 80099a0:	1d19      	adds	r1, r3, #4
 80099a2:	6029      	str	r1, [r5, #0]
 80099a4:	0605      	lsls	r5, r0, #24
 80099a6:	d501      	bpl.n	80099ac <_printf_i+0xe8>
 80099a8:	681e      	ldr	r6, [r3, #0]
 80099aa:	e002      	b.n	80099b2 <_printf_i+0xee>
 80099ac:	0641      	lsls	r1, r0, #25
 80099ae:	d5fb      	bpl.n	80099a8 <_printf_i+0xe4>
 80099b0:	881e      	ldrh	r6, [r3, #0]
 80099b2:	2f6f      	cmp	r7, #111	; 0x6f
 80099b4:	bf0c      	ite	eq
 80099b6:	2308      	moveq	r3, #8
 80099b8:	230a      	movne	r3, #10
 80099ba:	4851      	ldr	r0, [pc, #324]	; (8009b00 <_printf_i+0x23c>)
 80099bc:	2100      	movs	r1, #0
 80099be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80099c2:	6865      	ldr	r5, [r4, #4]
 80099c4:	2d00      	cmp	r5, #0
 80099c6:	bfa8      	it	ge
 80099c8:	6821      	ldrge	r1, [r4, #0]
 80099ca:	60a5      	str	r5, [r4, #8]
 80099cc:	bfa4      	itt	ge
 80099ce:	f021 0104 	bicge.w	r1, r1, #4
 80099d2:	6021      	strge	r1, [r4, #0]
 80099d4:	b90e      	cbnz	r6, 80099da <_printf_i+0x116>
 80099d6:	2d00      	cmp	r5, #0
 80099d8:	d04b      	beq.n	8009a72 <_printf_i+0x1ae>
 80099da:	4615      	mov	r5, r2
 80099dc:	fbb6 f1f3 	udiv	r1, r6, r3
 80099e0:	fb03 6711 	mls	r7, r3, r1, r6
 80099e4:	5dc7      	ldrb	r7, [r0, r7]
 80099e6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80099ea:	4637      	mov	r7, r6
 80099ec:	42bb      	cmp	r3, r7
 80099ee:	460e      	mov	r6, r1
 80099f0:	d9f4      	bls.n	80099dc <_printf_i+0x118>
 80099f2:	2b08      	cmp	r3, #8
 80099f4:	d10b      	bne.n	8009a0e <_printf_i+0x14a>
 80099f6:	6823      	ldr	r3, [r4, #0]
 80099f8:	07de      	lsls	r6, r3, #31
 80099fa:	d508      	bpl.n	8009a0e <_printf_i+0x14a>
 80099fc:	6923      	ldr	r3, [r4, #16]
 80099fe:	6861      	ldr	r1, [r4, #4]
 8009a00:	4299      	cmp	r1, r3
 8009a02:	bfde      	ittt	le
 8009a04:	2330      	movle	r3, #48	; 0x30
 8009a06:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009a0a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009a0e:	1b52      	subs	r2, r2, r5
 8009a10:	6122      	str	r2, [r4, #16]
 8009a12:	464b      	mov	r3, r9
 8009a14:	4621      	mov	r1, r4
 8009a16:	4640      	mov	r0, r8
 8009a18:	f8cd a000 	str.w	sl, [sp]
 8009a1c:	aa03      	add	r2, sp, #12
 8009a1e:	f7ff fedf 	bl	80097e0 <_printf_common>
 8009a22:	3001      	adds	r0, #1
 8009a24:	d14a      	bne.n	8009abc <_printf_i+0x1f8>
 8009a26:	f04f 30ff 	mov.w	r0, #4294967295
 8009a2a:	b004      	add	sp, #16
 8009a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a30:	6823      	ldr	r3, [r4, #0]
 8009a32:	f043 0320 	orr.w	r3, r3, #32
 8009a36:	6023      	str	r3, [r4, #0]
 8009a38:	2778      	movs	r7, #120	; 0x78
 8009a3a:	4832      	ldr	r0, [pc, #200]	; (8009b04 <_printf_i+0x240>)
 8009a3c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009a40:	6823      	ldr	r3, [r4, #0]
 8009a42:	6829      	ldr	r1, [r5, #0]
 8009a44:	061f      	lsls	r7, r3, #24
 8009a46:	f851 6b04 	ldr.w	r6, [r1], #4
 8009a4a:	d402      	bmi.n	8009a52 <_printf_i+0x18e>
 8009a4c:	065f      	lsls	r7, r3, #25
 8009a4e:	bf48      	it	mi
 8009a50:	b2b6      	uxthmi	r6, r6
 8009a52:	07df      	lsls	r7, r3, #31
 8009a54:	bf48      	it	mi
 8009a56:	f043 0320 	orrmi.w	r3, r3, #32
 8009a5a:	6029      	str	r1, [r5, #0]
 8009a5c:	bf48      	it	mi
 8009a5e:	6023      	strmi	r3, [r4, #0]
 8009a60:	b91e      	cbnz	r6, 8009a6a <_printf_i+0x1a6>
 8009a62:	6823      	ldr	r3, [r4, #0]
 8009a64:	f023 0320 	bic.w	r3, r3, #32
 8009a68:	6023      	str	r3, [r4, #0]
 8009a6a:	2310      	movs	r3, #16
 8009a6c:	e7a6      	b.n	80099bc <_printf_i+0xf8>
 8009a6e:	4824      	ldr	r0, [pc, #144]	; (8009b00 <_printf_i+0x23c>)
 8009a70:	e7e4      	b.n	8009a3c <_printf_i+0x178>
 8009a72:	4615      	mov	r5, r2
 8009a74:	e7bd      	b.n	80099f2 <_printf_i+0x12e>
 8009a76:	682b      	ldr	r3, [r5, #0]
 8009a78:	6826      	ldr	r6, [r4, #0]
 8009a7a:	1d18      	adds	r0, r3, #4
 8009a7c:	6961      	ldr	r1, [r4, #20]
 8009a7e:	6028      	str	r0, [r5, #0]
 8009a80:	0635      	lsls	r5, r6, #24
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	d501      	bpl.n	8009a8a <_printf_i+0x1c6>
 8009a86:	6019      	str	r1, [r3, #0]
 8009a88:	e002      	b.n	8009a90 <_printf_i+0x1cc>
 8009a8a:	0670      	lsls	r0, r6, #25
 8009a8c:	d5fb      	bpl.n	8009a86 <_printf_i+0x1c2>
 8009a8e:	8019      	strh	r1, [r3, #0]
 8009a90:	2300      	movs	r3, #0
 8009a92:	4615      	mov	r5, r2
 8009a94:	6123      	str	r3, [r4, #16]
 8009a96:	e7bc      	b.n	8009a12 <_printf_i+0x14e>
 8009a98:	682b      	ldr	r3, [r5, #0]
 8009a9a:	2100      	movs	r1, #0
 8009a9c:	1d1a      	adds	r2, r3, #4
 8009a9e:	602a      	str	r2, [r5, #0]
 8009aa0:	681d      	ldr	r5, [r3, #0]
 8009aa2:	6862      	ldr	r2, [r4, #4]
 8009aa4:	4628      	mov	r0, r5
 8009aa6:	f000 f859 	bl	8009b5c <memchr>
 8009aaa:	b108      	cbz	r0, 8009ab0 <_printf_i+0x1ec>
 8009aac:	1b40      	subs	r0, r0, r5
 8009aae:	6060      	str	r0, [r4, #4]
 8009ab0:	6863      	ldr	r3, [r4, #4]
 8009ab2:	6123      	str	r3, [r4, #16]
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009aba:	e7aa      	b.n	8009a12 <_printf_i+0x14e>
 8009abc:	462a      	mov	r2, r5
 8009abe:	4649      	mov	r1, r9
 8009ac0:	4640      	mov	r0, r8
 8009ac2:	6923      	ldr	r3, [r4, #16]
 8009ac4:	47d0      	blx	sl
 8009ac6:	3001      	adds	r0, #1
 8009ac8:	d0ad      	beq.n	8009a26 <_printf_i+0x162>
 8009aca:	6823      	ldr	r3, [r4, #0]
 8009acc:	079b      	lsls	r3, r3, #30
 8009ace:	d413      	bmi.n	8009af8 <_printf_i+0x234>
 8009ad0:	68e0      	ldr	r0, [r4, #12]
 8009ad2:	9b03      	ldr	r3, [sp, #12]
 8009ad4:	4298      	cmp	r0, r3
 8009ad6:	bfb8      	it	lt
 8009ad8:	4618      	movlt	r0, r3
 8009ada:	e7a6      	b.n	8009a2a <_printf_i+0x166>
 8009adc:	2301      	movs	r3, #1
 8009ade:	4632      	mov	r2, r6
 8009ae0:	4649      	mov	r1, r9
 8009ae2:	4640      	mov	r0, r8
 8009ae4:	47d0      	blx	sl
 8009ae6:	3001      	adds	r0, #1
 8009ae8:	d09d      	beq.n	8009a26 <_printf_i+0x162>
 8009aea:	3501      	adds	r5, #1
 8009aec:	68e3      	ldr	r3, [r4, #12]
 8009aee:	9903      	ldr	r1, [sp, #12]
 8009af0:	1a5b      	subs	r3, r3, r1
 8009af2:	42ab      	cmp	r3, r5
 8009af4:	dcf2      	bgt.n	8009adc <_printf_i+0x218>
 8009af6:	e7eb      	b.n	8009ad0 <_printf_i+0x20c>
 8009af8:	2500      	movs	r5, #0
 8009afa:	f104 0619 	add.w	r6, r4, #25
 8009afe:	e7f5      	b.n	8009aec <_printf_i+0x228>
 8009b00:	0800cc2b 	.word	0x0800cc2b
 8009b04:	0800cc3c 	.word	0x0800cc3c

08009b08 <memmove>:
 8009b08:	4288      	cmp	r0, r1
 8009b0a:	b510      	push	{r4, lr}
 8009b0c:	eb01 0402 	add.w	r4, r1, r2
 8009b10:	d902      	bls.n	8009b18 <memmove+0x10>
 8009b12:	4284      	cmp	r4, r0
 8009b14:	4623      	mov	r3, r4
 8009b16:	d807      	bhi.n	8009b28 <memmove+0x20>
 8009b18:	1e43      	subs	r3, r0, #1
 8009b1a:	42a1      	cmp	r1, r4
 8009b1c:	d008      	beq.n	8009b30 <memmove+0x28>
 8009b1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b26:	e7f8      	b.n	8009b1a <memmove+0x12>
 8009b28:	4601      	mov	r1, r0
 8009b2a:	4402      	add	r2, r0
 8009b2c:	428a      	cmp	r2, r1
 8009b2e:	d100      	bne.n	8009b32 <memmove+0x2a>
 8009b30:	bd10      	pop	{r4, pc}
 8009b32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b3a:	e7f7      	b.n	8009b2c <memmove+0x24>

08009b3c <_sbrk_r>:
 8009b3c:	b538      	push	{r3, r4, r5, lr}
 8009b3e:	2300      	movs	r3, #0
 8009b40:	4d05      	ldr	r5, [pc, #20]	; (8009b58 <_sbrk_r+0x1c>)
 8009b42:	4604      	mov	r4, r0
 8009b44:	4608      	mov	r0, r1
 8009b46:	602b      	str	r3, [r5, #0]
 8009b48:	f7fd fc66 	bl	8007418 <_sbrk>
 8009b4c:	1c43      	adds	r3, r0, #1
 8009b4e:	d102      	bne.n	8009b56 <_sbrk_r+0x1a>
 8009b50:	682b      	ldr	r3, [r5, #0]
 8009b52:	b103      	cbz	r3, 8009b56 <_sbrk_r+0x1a>
 8009b54:	6023      	str	r3, [r4, #0]
 8009b56:	bd38      	pop	{r3, r4, r5, pc}
 8009b58:	200001e0 	.word	0x200001e0

08009b5c <memchr>:
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	b510      	push	{r4, lr}
 8009b60:	b2c9      	uxtb	r1, r1
 8009b62:	4402      	add	r2, r0
 8009b64:	4293      	cmp	r3, r2
 8009b66:	4618      	mov	r0, r3
 8009b68:	d101      	bne.n	8009b6e <memchr+0x12>
 8009b6a:	2000      	movs	r0, #0
 8009b6c:	e003      	b.n	8009b76 <memchr+0x1a>
 8009b6e:	7804      	ldrb	r4, [r0, #0]
 8009b70:	3301      	adds	r3, #1
 8009b72:	428c      	cmp	r4, r1
 8009b74:	d1f6      	bne.n	8009b64 <memchr+0x8>
 8009b76:	bd10      	pop	{r4, pc}

08009b78 <memcpy>:
 8009b78:	440a      	add	r2, r1
 8009b7a:	4291      	cmp	r1, r2
 8009b7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b80:	d100      	bne.n	8009b84 <memcpy+0xc>
 8009b82:	4770      	bx	lr
 8009b84:	b510      	push	{r4, lr}
 8009b86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b8a:	4291      	cmp	r1, r2
 8009b8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b90:	d1f9      	bne.n	8009b86 <memcpy+0xe>
 8009b92:	bd10      	pop	{r4, pc}

08009b94 <_realloc_r>:
 8009b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b98:	4680      	mov	r8, r0
 8009b9a:	4614      	mov	r4, r2
 8009b9c:	460e      	mov	r6, r1
 8009b9e:	b921      	cbnz	r1, 8009baa <_realloc_r+0x16>
 8009ba0:	4611      	mov	r1, r2
 8009ba2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ba6:	f7ff bc37 	b.w	8009418 <_malloc_r>
 8009baa:	b92a      	cbnz	r2, 8009bb8 <_realloc_r+0x24>
 8009bac:	f7ff fbcc 	bl	8009348 <_free_r>
 8009bb0:	4625      	mov	r5, r4
 8009bb2:	4628      	mov	r0, r5
 8009bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bb8:	f000 f81b 	bl	8009bf2 <_malloc_usable_size_r>
 8009bbc:	4284      	cmp	r4, r0
 8009bbe:	4607      	mov	r7, r0
 8009bc0:	d802      	bhi.n	8009bc8 <_realloc_r+0x34>
 8009bc2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009bc6:	d812      	bhi.n	8009bee <_realloc_r+0x5a>
 8009bc8:	4621      	mov	r1, r4
 8009bca:	4640      	mov	r0, r8
 8009bcc:	f7ff fc24 	bl	8009418 <_malloc_r>
 8009bd0:	4605      	mov	r5, r0
 8009bd2:	2800      	cmp	r0, #0
 8009bd4:	d0ed      	beq.n	8009bb2 <_realloc_r+0x1e>
 8009bd6:	42bc      	cmp	r4, r7
 8009bd8:	4622      	mov	r2, r4
 8009bda:	4631      	mov	r1, r6
 8009bdc:	bf28      	it	cs
 8009bde:	463a      	movcs	r2, r7
 8009be0:	f7ff ffca 	bl	8009b78 <memcpy>
 8009be4:	4631      	mov	r1, r6
 8009be6:	4640      	mov	r0, r8
 8009be8:	f7ff fbae 	bl	8009348 <_free_r>
 8009bec:	e7e1      	b.n	8009bb2 <_realloc_r+0x1e>
 8009bee:	4635      	mov	r5, r6
 8009bf0:	e7df      	b.n	8009bb2 <_realloc_r+0x1e>

08009bf2 <_malloc_usable_size_r>:
 8009bf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bf6:	1f18      	subs	r0, r3, #4
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	bfbc      	itt	lt
 8009bfc:	580b      	ldrlt	r3, [r1, r0]
 8009bfe:	18c0      	addlt	r0, r0, r3
 8009c00:	4770      	bx	lr
	...

08009c04 <_init>:
 8009c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c06:	bf00      	nop
 8009c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c0a:	bc08      	pop	{r3}
 8009c0c:	469e      	mov	lr, r3
 8009c0e:	4770      	bx	lr

08009c10 <_fini>:
 8009c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c12:	bf00      	nop
 8009c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c16:	bc08      	pop	{r3}
 8009c18:	469e      	mov	lr, r3
 8009c1a:	4770      	bx	lr
